<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Actuator on HelloWood</title><link>https://blog.hellowood.dev/categories/actuator/</link><description>Recent content in Actuator on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 16 Sep 2024 03:53:10 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/categories/actuator/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot Admin 管理应用-客户端注册</title><link>https://blog.hellowood.dev/posts/spring-boot-admin-%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8C/</link><pubDate>Mon, 01 Jan 2018 12:15:48 +0000</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-admin-%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8C/</guid><description>&lt;blockquote>
&lt;p>客户端注册可以通过直接注册到管理应用和通过注册中心注册两种方式&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="直接注册到管理应用">直接注册到管理应用&lt;/h2>
&lt;blockquote>
&lt;p>直接注册到管理应用只需要一个Server和一个Client就可以，Client配置admin Server地址就可以实现管理&lt;/p>
&lt;/blockquote>
&lt;h4 id="配置管理应用server">配置管理应用Server&lt;/h4>
&lt;h4 id="修改客户端应用">修改客户端应用&lt;/h4>
&lt;ol>
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;de.codecentric:spring-boot-admin-starter-client:1.5.4&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>修改配置文件(application.properties)，指明Server地址&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> spring.boot.admin.url=http://localhost:8080
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="通过注册中心注册">通过注册中心注册&lt;/h2>
&lt;blockquote>
&lt;p>通过注册中心注册可以用于大量应用的管理，通过一个注册中心来管理注册，客户端和管理应用通过注册中心实现管理&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用Spring Cloud Eureka作为注册中心，需要一个Eureka服务应用，一个Admin Server应用和一个被管理的客户端应用&lt;/p>
&lt;/blockquote>
&lt;h4 id="配置eureka">配置Eureka&lt;/h4>
&lt;h4 id="配置admin-server">配置Admin Server&lt;/h4>
&lt;h4 id="配置client">配置Client&lt;/h4>
&lt;ol>
&lt;li>添加依赖（build.gradle）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-eureka:1.3.4.RELEASE&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.jolokia:jolokia-core:1.3.7&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>添加启动配置项（bootstrap.properties）&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>info.version=1.0.0
spring.application.name=APPLICATION_NAME
# Eureka应用的URL
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>修改应用启动文件（Application.java）&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>@SpringBootApplication
@EnableEurekaClient //添加注册，向Eureka注册该应用
public class Application {
 public static void main(String[] args) {
 SpringApplication.run(Application.class, args);
 }
}
&lt;/code>&lt;/pre></description></item><item><title>Spring Cloud 监控服务器下 IP/URL 不正确导致无法注册的解决方法</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B-ip-url-%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%B3%A8%E5%86%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 11:51:23 +0000</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B-ip-url-%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%B3%A8%E5%86%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;h2 id="本项目仅用到了-spring-cloud并没有使用-eureka">本项目仅用到了 Spring Cloud，并没有使用 Eureka&lt;/h2>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在使用 Spring Cloud 对 Spring Boot 应用通过 Spring Admin 进行监控的时候，当 Admin Server 和被监控的应用都在本地启动的时候没有任何问题，但是当部署到 Server 上之后，Client 在注册到 Admin Server 上时 IP 地址不正确，发现是因为 Server 有内网和外网 IP，但是在应用注册的时候用了内网的 IP，Admin Server 访问该内网 IP 失败，所以应用无法注册&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>因为没有使用 Eureka，所以配置时需要用 Spring Cloud 的配置来处理&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用 Eureka 请参考 &lt;a href="http://www.jianshu.com/p/fa1e9c8e4f47">http://www.jianshu.com/p/fa1e9c8e4f47&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>修改配置文件，添加以下内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.boot.admin.client.service-base-url=http://${your_ip}:${your_port}
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="说明">说明&lt;/h2>
&lt;ul>
&lt;li>当没有任何配置的时候，会使用&lt;code>http://bogon:9999/&lt;/code>注册&lt;/li>
&lt;li>当 Client 加入了&lt;code>spring.boot.admin.client.prefer-ip=true&lt;/code>的时候会以所得到的 IP 注册，此时 IP 为内网 IP，如果部署到服务器上将会无法注册&lt;/li>
&lt;li>当 Client 配置为&lt;code>spring.boot.admin.client.service-base-url=http://${your_ip}:${your_port}&lt;/code>时将会以所配置的地址进行注册&lt;/li>
&lt;/ul></description></item><item><title>Spring Boot Actuator 添加 Git 和 Build 信息</title><link>https://blog.hellowood.dev/posts/spring-boot-actuator-%E6%B7%BB%E5%8A%A0-git-%E5%92%8C-build-%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 01 Jan 2018 11:20:12 +0000</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-actuator-%E6%B7%BB%E5%8A%A0-git-%E5%92%8C-build-%E4%BF%A1%E6%81%AF/</guid><description>&lt;blockquote>
&lt;p>在使用 Spring Boot Actuator 时可以通过生成 Git 和编译文件来提供信息&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加-git-信息">添加 Git 信息&lt;/h2>
&lt;ul>
&lt;li>添加插件
&lt;blockquote>
&lt;p>在 build.gradle 文件中添加一下配置&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>buildscript {

 repositories {
 maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; }
 }

 dependencies {
 classpath(&amp;#34;gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17&amp;#34;)
 }
}

apply plugin: &amp;#39;com.gorylenko.gradle-git-properties&amp;#39;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这样就会在 &lt;code> build\main\resource\&lt;/code>下生成 &lt;code>git.properties&lt;/code>文件，该文件内会包含 Git 仓库的信息&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>其他配置
&lt;blockquote>
&lt;p>build.gradle&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
gitProperties {
 // 日期格式
 dateFormat = &amp;#34;yyyy-MM-dd&amp;#39; &amp;#39;HH:mm:ss&amp;#34;
 // 时区
 dateFormatTimeZone = &amp;#34;PST&amp;#34;
 // 生成的 git.properties 文件位置
 gitPropertiesDir = new File(&amp;#34;${project.rootDir}/build/resources/main/&amp;#34;)
 // git 文件所在目录
 gitRepositoryRoot = new File(&amp;#34;${project.rootDir}/&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="添加编译信息">添加编译信息&lt;/h2>
&lt;ul>
&lt;li>添加配置信息
&lt;blockquote>
&lt;p>在 build.gradle 中添加&lt;/p></description></item></channel></rss>