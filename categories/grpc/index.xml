<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GRPC on HelloWood</title><link>https://blog.hellowood.dev/categories/grpc/</link><description>Recent content in GRPC on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 16 Sep 2024 09:02:47 +0800</lastBuildDate><atom:link href="https://blog.hellowood.dev/categories/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC 对冲请求取消流程</title><link>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>当客户端接收到对冲请求集合中的一个完成时，会取消其他的请求，被取消的请求最终会提交一个 CancelClientStreamCommand，发送一个 RST_STEAM 请求；当服务端接受到这个流后，如果监听器还没有关闭，会执行取消上下文的操作，最终将这个请求取消&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-hedging-request-cancel.svg" alt="grpc-hedging-request-cancel.svg">&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;p>当客户端成功接收到响应会，会在 io.grpc.internal.RetriableStream.Sublistener#close 中将成功的流进行提交&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#commit$CommitTask#run&lt;/li>
&lt;/ul>
&lt;p>在提交时，会通过提交 CommitTask 将其他的流取消&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CommitTask&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">Runnable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 遍历保存的枯竭的流，如果不是最后提交的流，则都取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">Substream&lt;/span> &lt;span style="color:#c1abea">substream&lt;/span> : &lt;span style="color:#c1abea">savedDrainedSubstreams&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">substream&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#c1abea">winningSubstream&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">substream&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#c1abea">CANCELLED_BECAUSE_COMMITTED&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果有重试中的，则取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">retryFuture&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">retryFuture&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果有对冲中的，则取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">hedgingFuture&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">hedgingFuture&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将当前流从未提交的流中移除&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">postCommit&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.AbstractClientStream#cancel&lt;/li>
&lt;/ul>
&lt;p>使用指定的原因取消流&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">cancel&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">reason&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Preconditions&lt;/span>.&lt;span style="color:#b3d23c">checkArgument&lt;/span>(&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">reason&lt;/span>.&lt;span style="color:#b3d23c">isOk&lt;/span>(), &lt;span style="color:#98c379">&amp;#34;Should not cancel with OK status&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">cancelled&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">abstractClientStreamSink&lt;/span>().&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#c1abea">reason&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.netty.shaded.io.grpc.netty.NettyClientStream.Sink#cancel&lt;/li>
&lt;/ul>
&lt;p>提交取消流的指令&lt;/p></description></item><item><title>gRPC 服务间调用事件流程</title><link>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="调用流程图">调用流程图&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/gRPC%E8%AF%B7%E6%B1%82%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B.svg" alt="gRPC请求事件流程.svg">&lt;/p>
&lt;h2 id="可监听的事件">可监听的事件&lt;/h2>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;h4 id="clientcall">ClientCall&lt;/h4>
&lt;p>客户端调用，用于执行客户端的调用行为&lt;/p>
&lt;ul>
&lt;li>&lt;code>checkStart&lt;/code>：开始调用&lt;/li>
&lt;li>&lt;code>request&lt;/code>：指定发送消息的数量&lt;/li>
&lt;li>&lt;code>sendMessage&lt;/code>：发送消息到缓冲区&lt;/li>
&lt;li>&lt;code>halfClose&lt;/code>：半关闭，会将消息发送给 Server 端&lt;/li>
&lt;li>&lt;code>cancel&lt;/code>：调用失败时取消&lt;/li>
&lt;/ul>
&lt;h4 id="clientcalllistener">ClientCall.Listener&lt;/h4>
&lt;p>调用监听器，监听调用事件&lt;/p>
&lt;ul>
&lt;li>&lt;code>onReady&lt;/code>：流就绪事件，用于非 &lt;code>UNARY&lt;/code> 和 &lt;code>SERVER_STREAM&lt;/code> 的请求&lt;/li>
&lt;li>&lt;code>onHeaders&lt;/code>：当接收到 Server 端返回的 Header 时调用&lt;/li>
&lt;li>&lt;code>onMessage&lt;/code>：当接收到 Server 端返回的 Message 时调用&lt;/li>
&lt;li>&lt;code>onClose&lt;/code>：当流关闭时调用&lt;/li>
&lt;/ul>
&lt;h4 id="clientstreamtracer">ClientStreamTracer&lt;/h4>
&lt;p>流统计追踪，监听流的事件&lt;/p>
&lt;ul>
&lt;li>&lt;code>outboundHeaders&lt;/code>：发送 header 给 Server 端&lt;/li>
&lt;li>&lt;code>outboundMessage&lt;/code>：发送 message 给 Server 端&lt;/li>
&lt;li>&lt;code>inboundHeaders&lt;/code>：接收 Server 端返回的 headers&lt;/li>
&lt;li>&lt;code>inboundMessage&lt;/code>：接收 Server 端返回的 message&lt;/li>
&lt;li>&lt;code>inboundTrailers&lt;/code>：接收 Server 端返回的 trailers&lt;/li>
&lt;li>&lt;code>streamClosed&lt;/code>：流关闭时调用&lt;/li>
&lt;/ul>
&lt;h3 id="服务端">服务端&lt;/h3>
&lt;h4 id="servertransportfilter">ServerTransportFilter&lt;/h4>
&lt;p>Server 端 Transport 事件过滤器，支持监听事件，修改 Transport 的属性&lt;/p>
&lt;ul>
&lt;li>&lt;code>transportReady&lt;/code>：Transport 就绪事件&lt;/li>
&lt;li>&lt;code>transportTerminated&lt;/code>：Transport 关闭事件&lt;/li>
&lt;/ul>
&lt;h4 id="serverstreamtracer">ServerStreamTracer&lt;/h4>
&lt;p>Server 端流事件追踪，监听流的事件&lt;/p></description></item><item><title>gRPC 中泛化调用服务接口</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/</link><pubDate>Fri, 29 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>gRPC 没有直接支持泛化调用，protobuf 可以不依赖于生成的代码实现调用，所以可以通过反射接口间接实现泛化调用&lt;/p>
&lt;p>要求 Server 端提供 &lt;code>grpc.reflection.v1alpha.ServerReflection&lt;/code> 服务，用于获取服务的描述文件&lt;/p>
&lt;p>大致的流程是：&lt;/p>
&lt;ol>
&lt;li>根据方法名称，调用服务端反射服务的方法，获取方法所在 proto 文件的描述&lt;/li>
&lt;li>根据 proto 描述文件，获取文件描述、服务描述，用于重新构建要被调用方法的方法描述 &lt;code>MethodDescriptor&lt;/code>&lt;/li>
&lt;li>根据方法描述，将请求内容序列化为对应的类型&lt;/li>
&lt;li>使用重新构建的&lt;code>MethodDescriptor&lt;/code>和其他参数对 Server 端相应的方法发起调用&lt;/li>
&lt;li>解析响应并返回&lt;/li>
&lt;/ol>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>使用 JSON 格式请求被调用的服务方法，并返回 JSON 格式的响应&lt;/p>
&lt;h3 id="proto-定义">proto 定义&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">syntax&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">io&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">github.helloworlde.grpc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">go_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;api;grpc_gateway&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;io.github.helloworlde.grpc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_multiple_files&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_outer_classname&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;HelloWorldGrpc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">SayHello&lt;/span>(&lt;span style="color:#c1abea">HelloMessage&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">HelloResponse&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调用">调用&lt;/h3>
&lt;h4 id="1-构建反射服务-stub">1. 构建反射服务 Stub&lt;/h4>
&lt;p>需要调用反射服务的方法，该方法是双向流&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 构建 Channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#98c379">&amp;#34;127.0.0.1&amp;#34;&lt;/span>,&lt;span style="color:#c1abea">9090&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 使用 Channel 构建 BlockingStub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ServerReflectionGrpc&lt;/span>.&lt;span style="color:#b3d23c">ServerReflectionStub&lt;/span> &lt;span style="color:#c1abea">reflectionStub&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c1abea">ServerReflectionGrpc&lt;/span>.&lt;span style="color:#b3d23c">newStub&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 响应观察器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">streamObserver&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onNext&lt;/span>(&lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 处理响应&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onError&lt;/span>(&lt;span style="color:#c1abea">Throwable&lt;/span> &lt;span style="color:#c1abea">t&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onCompleted&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Complete&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 请求观察器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ServerReflectionRequest&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">requestStreamObserver&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c1abea">reflectionStub&lt;/span>.&lt;span style="color:#b3d23c">serverReflectionInfo&lt;/span>(&lt;span style="color:#c1abea">streamObserver&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-根据方法名称获取文件描述">2. 根据方法名称获取文件描述&lt;/h4>
&lt;p>这里的 &lt;code>methodSymbol&lt;/code> 即服务或方法的限定名，可以是 &lt;code>package.service&lt;/code> 或者 &lt;code>package.service.method&lt;/code>
，如 &lt;code>io.github.helloworlde.grpc.HelloService.SayHello&lt;/code>，需要注意方法前是 &lt;code>.&lt;/code>不是&lt;code>/&lt;/code>&lt;/p></description></item><item><title>gRPC 反射服务</title><link>https://blog.hellowood.dev/posts/grpc-%E5%8F%8D%E5%B0%84%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 17 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%8F%8D%E5%B0%84%E6%9C%8D%E5%8A%A1/</guid><description>&lt;p>gRPC 提供了 &lt;code>grpc.reflection.v1alpha.ServerReflection&lt;/code> 服务，在 Server 端添加后可以通过该服务获取所有服务的信息，包括服务定义，方法，属性等；&lt;/p>
&lt;p>可以根据获取到的服务信息调用其他的方法，实现泛化调用；gRPC 调试工具 &lt;a href="">grpcurl&lt;/a> 和 &lt;a href="https://github.com/grpc-swagger/grpc-swagger">gRPC Swagger&lt;/a> 等工具都是通过这种方式实现的&lt;/p>
&lt;h2 id="定义">定义&lt;/h2>
&lt;p>参考 &lt;a href="https://github.com/grpc/grpc/blob/master/doc/server-reflection.md">GRPC Server Reflection Protocol&lt;/a> 和 &lt;a href="https://github.com/grpc/grpc/blob/master/src/proto/grpc/reflection/v1alpha/reflection.proto">reflection.proto&lt;/a>&lt;/p>
&lt;p>该服务只有一个双向流的方法 &lt;code>ServerReflectionInfo&lt;/code>，调用时根据请求参数不同，调用不同的方法进行处理，并返回响应；该方法的流控是非自动的，只有当一个请求完成之后才会获取下一个请求&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">ServerReflection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">ServerReflectionInfo&lt;/span>(&lt;span style="color:#c1abea">stream&lt;/span> &lt;span style="color:#c1abea">ServerReflectionRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">stream&lt;/span> &lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">ServerReflectionRequest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">host&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">oneof&lt;/span> &lt;span style="color:#c1abea">message_request&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据服务名查询 proto 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">file_by_filename&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据名称获取 proto 文件，如 &amp;lt;package&amp;gt;.&amp;lt;service&amp;gt;[.&amp;lt;method&amp;gt;] 或 &amp;lt;package&amp;gt;.&amp;lt;type&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">file_containing_symbol&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 message 类型和序号获取 proto 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">ExtensionRequest&lt;/span> &lt;span style="color:#c1abea">file_containing_extension&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 查找给定消息类型的所有已知扩展使用的标记号，并将它们以未定义的顺序附加到ExtensionNumberResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">all_extension_numbers_of_type&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 查询所有的服务
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">list_services&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="server-端">Server 端&lt;/h2>
&lt;ul>
&lt;li>服务实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2cbff">@Slf4j
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2cbff">&lt;/span>public class ReflectionServer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @SneakyThrows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public static void main(String[] args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 构建 Server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Server server = NettyServerBuilder.forAddress(new InetSocketAddress(9090))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 添加服务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .addService(new HelloServiceImpl())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 添加反射服务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ .addService(ProtoReflectionService.newInstance())
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> .build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 启动 Server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.start();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.info(&amp;#34;服务端启动成功&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Runtime.getRuntime().addShutdownHook(new Thread(() -&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> try {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.awaitTermination(10, TimeUnit.SECONDS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } catch (InterruptedException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.printStackTrace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 保持运行
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.awaitTermination();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="client-端">Client 端&lt;/h2>
&lt;p>发起双向流请求&lt;/p></description></item><item><title>gRPC Gateway 使用</title><link>https://blog.hellowood.dev/posts/grpc-gateway-%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 06 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-gateway-%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>gRPC Gateway 可以代理 gRPC 服务，接收 HTTP 请求，并转为 gRPC 请求由服务进行处理，并将返回结果转换为 HTTP 响应发送给调用者 gRPC Gateway&lt;/p>
&lt;p>支持代理单个服务或者多个服务，当代理多个服务时，可以通过命名解析实现转发请求&lt;/p>
&lt;h2 id="快速使用">快速使用&lt;/h2>
&lt;ul>
&lt;li>启动项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/helloworlde/grpc-gateway.git &amp;amp; &lt;span style="color:#ef8383">cd&lt;/span> grpc-gateway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>访问&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl localhost:8090/hello&lt;span style="color:#d26464;font-weight:bold">\?&lt;/span>&lt;span style="color:#dcaeea">message&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">{&lt;/span>&lt;span style="color:#63c381">&amp;#34;result&amp;#34;&lt;/span>:&lt;span style="color:#63c381">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">}&lt;/span>%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="安装依赖">安装依赖&lt;/h3>
&lt;ul>
&lt;li>安装 buf&lt;/li>
&lt;/ul>
&lt;p>buf 用于代替 protoc 进行生成代码，可以避免使用复杂的 protoc 命令，避免 protoc 各种失败问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew tap bufbuild/buf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install buf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装 grpc-gateway&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加 buf 配置文件 buf.gen.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>version: v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plugins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out: proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opt: paths=source_relative
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: go-grpc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out: proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opt: paths=source_relative,require_unimplemented_servers=false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加配置文件 buf.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#98c379">v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">roots&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">proto&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现服务端">实现服务端&lt;/h3>
&lt;ul>
&lt;li>定义 proto&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">syntax&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">io&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">github.helloworlde&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">go_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;github.com/helloworlde/grpc-gateway;grpc_gateway&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;io.github.helloworlde&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_multiple_files&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_outer_classname&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;HelloGrpc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">Hello&lt;/span> (&lt;span style="color:#c1abea">HelloMessage&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">HelloResponse&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>生成代码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>buf generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现接口&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">pb&lt;/span> &lt;span style="color:#98c379">&amp;#34;github.com/helloworlde/grpc-gateway/proto/api&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span> &lt;span style="color:#c678dd">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> (&lt;span style="color:#c1abea">h&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">HelloService&lt;/span>) &lt;span style="color:#00b1f7">Hello&lt;/span>(&lt;span style="color:#c1abea">ctx&lt;/span> &lt;span style="color:#c1abea">context&lt;/span>.&lt;span style="color:#c1abea">Context&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#c1abea">HelloMessage&lt;/span>) (&lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#c1abea">HelloResponse&lt;/span>, &lt;span style="color:#ef8383">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">helloMessage&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#00b1f7">GetMessage&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#c1abea">HelloResponse&lt;/span>{&lt;span style="color:#c1abea">Result&lt;/span>: &lt;span style="color:#c1abea">helloMessage&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&lt;/span>&lt;span style="color:#c1abea">response&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动 Server&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">StartGrpcServer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">listener&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">net&lt;/span>.&lt;span style="color:#00b1f7">Listen&lt;/span>(&lt;span style="color:#98c379">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;:9090&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Fatalln&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Listen gRPC port failed: &amp;#34;&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">grpc&lt;/span>.&lt;span style="color:#00b1f7">NewServer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#00b1f7">RegisterHelloServiceServer&lt;/span>(&lt;span style="color:#c1abea">server&lt;/span>, &lt;span style="color:#c7bf54">&amp;amp;&lt;/span>&lt;span style="color:#c1abea">helloService&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Start gRPC Server on 0.0.0.0:9090&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">err&lt;/span> = &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#00b1f7">Serve&lt;/span>(&lt;span style="color:#c1abea">listener&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Fatalln&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Start gRPC Server failed: &amp;#34;&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#00b1f7">StartGrpcServer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 Server 后，会监听 8090 端口，对外提供服务&lt;/p></description></item><item><title>gRPC 服务使用 TLS 加密</title><link>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8-tls-%E5%8A%A0%E5%AF%86/</link><pubDate>Wed, 06 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8-tls-%E5%8A%A0%E5%AF%86/</guid><description>&lt;p>gRPC 支持使用 TLS 对请求进行加密&lt;/p>
&lt;blockquote>
&lt;p>SSL(Secure Socket Layer，安全套接字)，是面向连接的网络层和应用层协议之间的一种协议层；SSL 通过互相认证、使用数字签名确保完整性、使用加密确保隐私性，以实现客户端和服务端之间的安全通讯&lt;/p>
&lt;p>TLS(Transport Layer Security, 传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性&lt;/p>
&lt;p>SSL是基于 HTTP 之下 TCP 之上的一个协议层，在SSL更新到3.0时，IETF对SSL3.0进行了标准化，并添加了少数机制(但是几乎和SSL3.0无差异)，标准化后的IETF更名为TLS1.0(Transport Layer Security 安全传输层协议)，可以说TLS就是SSL的新版本3.1&lt;/p>
&lt;/blockquote>
&lt;p>相关项目参考 &lt;a href="https://github.com/helloworlde/grpc-java-sample">github.com/helloworlde/grpc-java-sample&lt;/a>&lt;/p>
&lt;h2 id="生成证书">生成证书&lt;/h2>
&lt;p>可以通过 openssl 生成一个自签名的证书，用于加密&lt;/p>
&lt;ol>
&lt;li>添加配置&lt;/li>
&lt;/ol>
&lt;p>指定证书的配置，其中 &lt;code>CN&lt;/code> 指定了访问的域名，如果实际域名与证书域名不一致，会导致连接失败&lt;/p>
&lt;ul>
&lt;li>certificate.conf&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>[req]
default_bits = 4096
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn
[dn]
C = CN
ST = BJ
O = helloworlde
CN = localhost
[req_ext]
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
IP.1 = ::1
IP.2 = 127.0.0.1
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>生成证书&lt;/li>
&lt;/ol>
&lt;p>生成自签名的证书，因为 Netty 的 &lt;code>SslContextBuilder&lt;/code> 和 &lt;code>SslContext&lt;/code> 仅支持 &lt;code>PKCS8&lt;/code> 格式的 key，所以需要将其他格式的 key 转换为 &lt;code>PKCS8&lt;/code> 格式&lt;/p></description></item><item><title>gRPC 中使用 Channelz</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E4%BD%BF%E7%94%A8-channelz/</link><pubDate>Mon, 04 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E4%BD%BF%E7%94%A8-channelz/</guid><description>&lt;p>gRPC 提供了 Channelz 用于对外提供服务的数据，用于调试、监控等；根据服务的角色不同，可以提供的数据有：&lt;/p>
&lt;ul>
&lt;li>服务端: Servers, Server, ServerSockets, Socket&lt;/li>
&lt;li>客户端: TopChannels, Channel, Subchannel&lt;/li>
&lt;/ul>
&lt;h2 id="channelz-服务定义">Channelz 服务定义&lt;/h2>
&lt;p>参考 Channelz 的设计 &lt;a href="https://github.com/grpc/proposal/blob/master/A14-channelz.md">gRPC Channelz&lt;/a> 以及服务定义 &lt;a href="https://github.com/grpc/grpc/blob/master/src/proto/grpc/channelz/channelz.proto">channelz.proto&lt;/a>，提供了以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">Channelz&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 返回所有的根 Channel(即应用直接创建的 Channel)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetTopChannels&lt;/span>(&lt;span style="color:#c1abea">GetTopChannelsRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetTopChannelsResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Channel ID 返回单个的 Channel 详情，包括 Subchannel，如果没有则返回 NOT_FOUND
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetChannel&lt;/span>(&lt;span style="color:#c1abea">GetChannelRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetChannelResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Subchannel ID 返回 Subchannel 详情
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetSubchannel&lt;/span>(&lt;span style="color:#c1abea">GetSubchannelRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetSubchannelResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 返回所有存在的 Server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetServers&lt;/span>(&lt;span style="color:#c1abea">GetServersRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetServersResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Server ID 返回 Server 详情
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetServer&lt;/span>(&lt;span style="color:#c1abea">GetServerRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetServerResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Server ID 返回 Server 所有的 Socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetServerSockets&lt;/span>(&lt;span style="color:#c1abea">GetServerSocketsRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetServerSocketsResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Socket ID 返回 Socket 详情
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetSocket&lt;/span>(&lt;span style="color:#c1abea">GetSocketRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetSocketResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;p>相关项目参考 &lt;a href="https://github.com/helloworlde/grpc-java-sample">github.com/helloworlde/grpc-java-sample&lt;/a>&lt;/p></description></item><item><title>gRPC 中打印请求二进制日志</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%89%93%E5%8D%B0%E8%AF%B7%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 04 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%89%93%E5%8D%B0%E8%AF%B7%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97/</guid><description>&lt;p>gRPC 支持将请求调用的参数、Header 等信息以二进制的方式输出到文件中，方便在必要时排查问题&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h4 id="1-添加依赖">1. 添加依赖&lt;/h4>
&lt;p>binlog 的依赖在 &lt;code>grpc-services&lt;/code>中，所以需要有该依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span>(&lt;span style="color:#63c381">&amp;#34;io.grpc:grpc-services:&lt;/span>&lt;span style="color:#98c379">${grpcVersion}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-添加-binarylogsink-实现">2. 添加 BinaryLogSink 实现&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomBinaryLogSink&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">BinaryLogSink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">outPath&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">OutputStream&lt;/span> &lt;span style="color:#c1abea">out&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">closed&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CustomBinaryLogSink&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">path&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">IOException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">File&lt;/span> &lt;span style="color:#c1abea">outFile&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">File&lt;/span>(&lt;span style="color:#c1abea">path&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">outPath&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">outFile&lt;/span>.&lt;span style="color:#b3d23c">getAbsolutePath&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Writing binary logs to {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">outFile&lt;/span>.&lt;span style="color:#b3d23c">getAbsolutePath&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedOutputStream&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">FileOutputStream&lt;/span>(&lt;span style="color:#c1abea">outFile&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">getPath&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">outPath&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">synchronized&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">write&lt;/span>(&lt;span style="color:#c1abea">MessageLite&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">closed&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Attempt to write after TempFileSink is closed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">writeDelimitedTo&lt;/span>(&lt;span style="color:#c1abea">out&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Caught exception while writing&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">closeQuietly&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">synchronized&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">close&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">IOException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">closed&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">closed&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">synchronized&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">closeQuietly&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Caught exception while closing&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-创建-channel-时指定-binarylog">3. 创建 Channel 时指定 BinaryLog&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">BinaryLog&lt;/span> &lt;span style="color:#c1abea">binaryLog&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">BinaryLogs&lt;/span>.&lt;span style="color:#b3d23c">createBinaryLog&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomBinaryLogSink&lt;/span>(&lt;span style="color:#98c379">&amp;#34;CUSTOM_PATH&amp;#34;&lt;/span>), &lt;span style="color:#98c379">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#c1abea">host&lt;/span>, &lt;span style="color:#c1abea">port&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setBinaryLog&lt;/span>(&lt;span style="color:#c1abea">binaryLog&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-指定环境变量">4. 指定环境变量&lt;/h4>
&lt;p>需要指定环境变量，设置需要输出的方法才会生效，设置 &lt;code>GRPC_BINARY_LOG_CONFIG=*&lt;/code>，&lt;code>*&lt;/code>代表打印所有的方法，具体指定可以参考 &lt;a href="https://github.com/helloworlde/proposal/blob/master/A16-binary-logging.md#control-interface">Control Interface&lt;/a>&lt;/p></description></item><item><title>gRPC 拦截器和监听器</title><link>https://blog.hellowood.dev/posts/grpc-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</link><pubDate>Sun, 03 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</guid><description>&lt;p>gRPC 拦截器用于在请求执行之前执行，以实现校验授权，记录调用行为，插入其他逻辑等；拦截器有 &lt;code>ClientInterceptor&lt;/code> 和 &lt;code>ServerInterceptor&lt;/code>，分别用于客户端和服务端&lt;/p>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;h3 id="拦截器接口定义">拦截器接口定义&lt;/h3>
&lt;ul>
&lt;li>ClientInterceptor&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@ThreadSafe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">ClientInterceptor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">interceptCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;h4 id="添加拦截器">添加拦截器&lt;/h4>
&lt;ul>
&lt;li>在构建 Channel 时添加拦截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#c1abea">host&lt;/span>, &lt;span style="color:#c1abea">port&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">intercept&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomClientInterceptor&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/li>
&lt;/ul>
&lt;p>然后会在 &lt;code>ManagedChannelImpl&lt;/code> 的构造方法中，使用拦截器将 Channel 实例封装，返回的 Channel 实例是 &lt;code>InterceptorChannel&lt;/code> 的实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">interceptorChannel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ClientInterceptors&lt;/span>.&lt;span style="color:#b3d23c">intercept&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#c1abea">interceptors&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.ClientInterceptors#intercept&lt;/li>
&lt;/ul>
&lt;p>当有多个拦截器时，会顺序的封装，最后添加的拦截器会最先执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#00b1f7">intercept&lt;/span>(&lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ClientInterceptor&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">interceptors&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Preconditions&lt;/span>.&lt;span style="color:#b3d23c">checkNotNull&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#98c379">&amp;#34;channel&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 遍历拦截器，创建 InterceptorChannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">ClientInterceptor&lt;/span> &lt;span style="color:#c1abea">interceptor&lt;/span> : &lt;span style="color:#c1abea">interceptors&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InterceptorChannel&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#c1abea">interceptor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="处理请求">处理请求&lt;/h4>
&lt;ul>
&lt;li>io.grpc.ClientInterceptors.InterceptorChannel#newCall&lt;/li>
&lt;/ul>
&lt;p>&lt;code>InterceptorChannel&lt;/code> 继承了 &lt;code>Channel&lt;/code>，在执行请求时，会调用&lt;code>channel.newCall&lt;/code>，在这个方法里，会调用拦截器的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">newCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">interceptor&lt;/span>.&lt;span style="color:#b3d23c">interceptCall&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">channel&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后返回自定义的 &lt;code>CustomForwardingClientCall&lt;/code>，在这个类的&lt;code>checkedStart&lt;/code>方法中，还创建了 &lt;code>CustomCallListener&lt;/code>, 这样在调用时，就可以实现 &lt;code>ClientCall&lt;/code> 和 &lt;code>ClientCallListener&lt;/code> 的事件监听，从而实现自定义的逻辑&lt;/p></description></item><item><title>gRPC 中监听 Sream 和 Transport 的事件</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9B%91%E5%90%AC-sream-%E5%92%8C-transport-%E7%9A%84%E4%BA%8B%E4%BB%B6/</link><pubDate>Wed, 23 Dec 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9B%91%E5%90%AC-sream-%E5%92%8C-transport-%E7%9A%84%E4%BA%8B%E4%BB%B6/</guid><description>&lt;p>gRPC 提供了拦截器可以监听请求的事件，但是对于 Stream 或者 Transport 的具体事件，无法通过拦截器实现；gRPC 提供了 StreamTracer 和 TransportFilter 支持这样的能力&lt;/p>
&lt;h2 id="streamtracer">StreamTracer&lt;/h2>
&lt;p>&lt;code>StreamTracer&lt;/code> 用于监听流的所有事件，包括流关闭、出入站消息、出入站流大小等信息&lt;/p>
&lt;p>&lt;code>StreamTracer&lt;/code> 有用于客户端的 &lt;code>ClientStreamTracer&lt;/code> 和用于服务端的 &lt;code>ServerStreamTracer&lt;/code>&lt;/p>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;p>客户端的 &lt;code>StreamTracer&lt;/code> 在拦截器中注入，当有请求被执行时，可以向 &lt;code>callOptions&lt;/code> 添加自定义的 &lt;code>ClientStreamTracer.Factory&lt;/code>，这样就会创建相应的 &lt;code>StreamTracer&lt;/code>，实现监听&lt;/p>
&lt;ul>
&lt;li>CustomClientInterceptor.java&lt;/li>
&lt;/ul>
&lt;p>在拦截器中指定&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomClientInterceptor&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">ClientInterceptor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">interceptCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">callOptions&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>.&lt;span style="color:#b3d23c">withStreamTracerFactory&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomClientStreamTracerFactory&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">next&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>.&lt;span style="color:#b3d23c">newCall&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CustomClientStreamTracerFactory.java&lt;/li>
&lt;/ul>
&lt;p>在实现类中重写需要监听的事件方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomClientStreamTracerFactory&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ClientStreamTracer&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomClientStreamTracerFactory&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">method&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">callOptions&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">next&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ClientStreamTracer&lt;/span> &lt;span style="color:#00b1f7">newClientStreamTracer&lt;/span>(&lt;span style="color:#c1abea">ClientStreamTracer&lt;/span>.&lt;span style="color:#b3d23c">StreamInfo&lt;/span> &lt;span style="color:#c1abea">info&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomClientStreamTracer&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">next&lt;/span>, &lt;span style="color:#c1abea">info&lt;/span>, &lt;span style="color:#c1abea">headers&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomClientStreamTracer&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ClientStreamTracer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomClientStreamTracer&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>, &lt;span style="color:#c1abea">StreamInfo&lt;/span> &lt;span style="color:#c1abea">info&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Method:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>.&lt;span style="color:#b3d23c">getFullMethodName&lt;/span>() &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; Next:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span>() &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; Header: &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>.&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端">服务端&lt;/h3>
&lt;p>服务端的 &lt;code>StreamTracer&lt;/code> 在构建 Server 时指定，在执行请求时会监听相应的方法&lt;/p></description></item><item><title>gRPC Server 端请求处理流程</title><link>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 15 Dec 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>[TOC]&lt;/p>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;ol>
&lt;li>创建并启动 ServerTransport&lt;/li>
&lt;/ol>
&lt;p>在 Server 启动的时候，最终调用 &lt;code>NettyServer&lt;/code> 的 &lt;code>start()&lt;/code> 方法，为 &lt;code>ServerBootstrap&lt;/code> 添加了 &lt;code>ChannelInitializer&lt;/code>，最终，当有新的连接建立时，会由 &lt;code>NettyServerHandler&lt;/code> 调用该类的 &lt;code>initChannel&lt;/code> 方法，初始化一个 &lt;code>NettyServerTransport&lt;/code>&lt;/p>
&lt;ul>
&lt;li>io.grpc.netty.NettyServer#start&lt;/li>
&lt;/ul>
&lt;p>在初始化 Netty Channel 时，会先创建 &lt;code>NettyServerTransport&lt;/code>，然后调用监听器的 &lt;code>Transport&lt;/code> 创建事件，添加一个超时取消任务；
然后会调用 &lt;code>Transport&lt;/code> 的 &lt;code>start&lt;/code> 方法启动 &lt;code>Transport&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">b&lt;/span>.&lt;span style="color:#b3d23c">childHandler&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ChannelInitializer&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Channel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">initChannel&lt;/span>(&lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">ch&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建基于 Netty 的 ServerTransport&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">NettyServerTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">NettyServerTransport&lt;/span>(&lt;span style="color:#8a93a5;font-style:italic">/*...*/&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServerTransportListener&lt;/span> &lt;span style="color:#c1abea">transportListener&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">synchronized&lt;/span> (&lt;span style="color:#c1abea">NettyServer&lt;/span>.&lt;span style="color:#b3d23c">this&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 调用监听器回调，Transport 创建事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transportListener&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>.&lt;span style="color:#b3d23c">transportCreated&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 启动监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transport&lt;/span>.&lt;span style="color:#b3d23c">start&lt;/span>(&lt;span style="color:#c1abea">transportListener&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ChannelFutureListener&lt;/span> &lt;span style="color:#c1abea">loopReleaser&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">LoopReleaser&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channelDone&lt;/span>.&lt;span style="color:#b3d23c">addListener&lt;/span>(&lt;span style="color:#c1abea">loopReleaser&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ch&lt;/span>.&lt;span style="color:#b3d23c">closeFuture&lt;/span>().&lt;span style="color:#b3d23c">addListener&lt;/span>(&lt;span style="color:#c1abea">loopReleaser&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.netty.NettyServerTransport#start&lt;/li>
&lt;/ul>
&lt;p>在启动 &lt;code>Transport&lt;/code> 时，会为当前的 &lt;code>Transport&lt;/code> 创建一个处理器，并绑定到 Netty 的 Channel 中&lt;/p></description></item><item><title>gRPC Server 端关闭流程</title><link>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%85%B3%E9%97%AD%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 05 Dec 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%85%B3%E9%97%AD%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="关闭-server">关闭 Server&lt;/h2>
&lt;p>关闭 Server 可以使用 &lt;code>shutdown&lt;/code> 或者 &lt;code>shutdownNow&lt;/code> 方法&lt;/p>
&lt;h4 id="shutdown">shutdown&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">shutdown&lt;/span>().&lt;span style="color:#b3d23c">awaitTermination&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>, &lt;span style="color:#c1abea">TimeUnit&lt;/span>.&lt;span style="color:#b3d23c">SECONDS&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.ServerImpl#shutdown&lt;/li>
&lt;/ul>
&lt;p>开始顺序的关闭 Server，已经存在的请求会继续执行，新的请求会被拒绝&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ServerImpl&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">shutdownTransportServers&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">synchronized&lt;/span> (&lt;span style="color:#c1abea">lock&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">shutdown&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shutdown&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shutdownTransportServers&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">started&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">shutdownTransportServers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transportServersTerminated&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 检查是否终止&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">checkForTermination&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">shutdownTransportServers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 遍历所有的 Server 并关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">InternalServer&lt;/span> &lt;span style="color:#c1abea">ts&lt;/span> : &lt;span style="color:#c1abea">transportServers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ts&lt;/span>.&lt;span style="color:#b3d23c">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关闭时，首先会检查 Server 是否已经关闭了，如果已经关闭了，则抛出异常；如果没有关闭，则会修改关闭状态，返huan连接池，通知其他的锁；
然后会遍历所有的 Server，调用其 &lt;code>shutdown&lt;/code> 方法进行关闭&lt;/p>
&lt;ul>
&lt;li>io.grpc.netty.NettyServer#shutdown&lt;/li>
&lt;/ul>
&lt;p>关闭 &lt;code>NettySerer&lt;/code>，添加关闭事件监听器，并等待关闭；在监听器中会释放资源，关闭协议协调器，关闭 Transport 等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果 channel 已经关闭了，则返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">channel&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">||&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">isOpen&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// Already closed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 添加监听器，用于在关闭时释放资源，关闭协议，关闭 Transport 等&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>().&lt;span style="color:#b3d23c">addListener&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ChannelFutureListener&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">operationComplete&lt;/span>(&lt;span style="color:#c1abea">ChannelFuture&lt;/span> &lt;span style="color:#c1abea">future&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">Exception&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">future&lt;/span>.&lt;span style="color:#b3d23c">isSuccess&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">log&lt;/span>(&lt;span style="color:#c1abea">Level&lt;/span>.&lt;span style="color:#b3d23c">WARNING&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Error shutting down server&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">future&lt;/span>.&lt;span style="color:#b3d23c">cause&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InternalInstrumented&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">SocketStats&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">stats&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">listenSocketStats&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">listenSocketStats&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">stats&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channelz&lt;/span>.&lt;span style="color:#b3d23c">removeListenSocket&lt;/span>(&lt;span style="color:#c1abea">stats&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sharedResourceReferenceCounter&lt;/span>.&lt;span style="color:#b3d23c">release&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">protocolNegotiator&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">synchronized&lt;/span> (&lt;span style="color:#c1abea">NettyServer&lt;/span>.&lt;span style="color:#b3d23c">this&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭 Transport&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">listener&lt;/span>.&lt;span style="color:#b3d23c">serverShutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭 channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">closeFuture&lt;/span>().&lt;span style="color:#b3d23c">await&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">InterruptedException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">log&lt;/span>(&lt;span style="color:#c1abea">Level&lt;/span>.&lt;span style="color:#b3d23c">FINE&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Interrupted while shutting down&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Thread&lt;/span>.&lt;span style="color:#b3d23c">currentThread&lt;/span>().&lt;span style="color:#b3d23c">interrupt&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.ServerImpl.ServerListenerImpl#serverShutdown&lt;/li>
&lt;/ul>
&lt;p>监听 Server 关闭事件，根据关闭的状态，选择调用 &lt;code>Transport&lt;/code> 的 &lt;code>shutdown&lt;/code> 或者 &lt;code>shutdownNow&lt;/code> 关闭 &lt;code>ServerTransport&lt;/code>&lt;/p></description></item><item><title>gRPC Server 端启动流程</title><link>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 05 Dec 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>gRPC Server 启动流程，底层实现以 Netty 为例；&lt;/p>
&lt;h2 id="核心类">核心类&lt;/h2>
&lt;ul>
&lt;li>&lt;code>io.grpc.Server&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Server 的定义接口，实现类是 &lt;code>io.grpc.internal.ServerImpl&lt;/code>，实现了服务、方法与方法处理器的绑定，端口监听，不同类型的 Server 实现的调用，Server 生命周期管理等&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.BindableService&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>由编译器生成的服务抽象类的基础接口，并将实现类绑定到服务器，提供将服务的实现的实例绑定到 Server 的方式&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.ServerInterceptor&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Server 端的拦截器，在方法调用之前会被调用&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.HandlerRegistry&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>方法处理器注册器，所有的方法注册器会注册在这里，通过服务名和方法名查找&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.ServerServiceDefinition&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>服务定义，包含服务描述信息，方法信息集合&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.ServerMethodDefinition&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>方法定义，包含方法描述信息，方法处理器&lt;/p>
&lt;h2 id="启动流程">启动流程&lt;/h2>
&lt;h3 id="启动大致流程">启动大致流程&lt;/h3>
&lt;ol>
&lt;li>创建 &lt;code>ServerBuilder&lt;/code>&lt;/li>
&lt;li>指定端口&lt;/li>
&lt;li>为 &lt;code>ServerBuilder&lt;/code> 添加方法
&lt;ol>
&lt;li>构建服务定义
&lt;ol>
&lt;li>通过生成的代码构建方法定义，将方法与处理器绑定&lt;/li>
&lt;li>将方法处理器添加到方法定义中&lt;/li>
&lt;li>将服务定义添加到服务注册器中&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>添加拦截器等其他的配置&lt;/li>
&lt;li>构建 &lt;code>Server&lt;/code> 实例
&lt;ol>
&lt;li>构建 &lt;code>ServerTransport&lt;/code> 实例 2. 遍历所有监听的地址，创建相应的 &lt;code>NettyServer&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>启动 &lt;code>Server&lt;/code>
&lt;ol>
&lt;li>遍历所有的 &lt;code>NettyServer&lt;/code>，调用 &lt;code>start&lt;/code> 方法启动
&lt;ol>
&lt;li>创建相应的 &lt;code>ServerBootstrap&lt;/code>，绑定监听的地址，可以接受连接&lt;/li>
&lt;li>创建 &lt;code>NettyServerTransport&lt;/code>，调用 &lt;code>start&lt;/code> 方法启动 &lt;code>Transport&lt;/code>&lt;/li>
&lt;li>为 &lt;code>NettyServerTransport&lt;/code> 创建 &lt;code>NettyServerHandler&lt;/code>，用于处理请求&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>保持 &lt;code>Server&lt;/code> 启动状态，启动完成&lt;/li>
&lt;/ol>
&lt;h3 id="server-定义">Server 定义&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Server&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ServerBuilder&lt;/span>.&lt;span style="color:#b3d23c">forPort&lt;/span>(&lt;span style="color:#c1abea">1234&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">addService&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">intercept&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomServerInterceptor&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">awaitTermination&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="绑定端口">绑定端口&lt;/h4>
&lt;p>指定了要监听的端口，会根据不同的 &lt;code>Server&lt;/code> 实现绑定端口&lt;/p></description></item><item><title>gRPC Channel</title><link>https://blog.hellowood.dev/posts/grpc-channel/</link><pubDate>Wed, 18 Nov 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-channel/</guid><description>&lt;p>&lt;code>Channel&lt;/code> 是用于执行 RPC 请求的概念上的端点连接，基于负载和配置，一个 &lt;code>Channel&lt;/code> 可以有 0 或多个真实连接&lt;/p>
&lt;p>&lt;code>Subchannel&lt;/code> 代表逻辑连接，最多维护一个物理连接发送 RPC，对应多个 Transport&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-channel-class-diagram.png" alt="grpc-source-code-channel-class-diagram.png">&lt;/p>
&lt;p>Channel 有多个子类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ManagedChannel&lt;/code>： 实现了生命周期管理能力的抽象子类
&lt;ul>
&lt;li>&lt;code>ManagedChannelImpl&lt;/code>： &lt;code>ManagedChannel&lt;/code> 的实现类，&lt;code>Channel&lt;/code> 的主要实现&lt;/li>
&lt;li>&lt;code>ManagedChannelOrphanWrapper&lt;/code>: &lt;code>ManagedChannel&lt;/code> 的包装类，用于引用 &lt;code>ManagedChannel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>RealChannel&lt;/code>：真正执行创建 &lt;code>ClientCallImpl&lt;/code> 实例&lt;/li>
&lt;li>&lt;code>SubchannelAsChannel&lt;/code>: 将 &lt;code>Subchannel&lt;/code> 转为 &lt;code>Channel&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Subchannel 的子类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SubchannelImpl&lt;/code>：Subchannel 的实现类&lt;/li>
&lt;/ul>
&lt;h2 id="方法">方法&lt;/h2>
&lt;h3 id="channel">Channel&lt;/h3>
&lt;ul>
&lt;li>发起调用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RequestT&lt;/span>, &lt;span style="color:#c1abea">ResponseT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RequestT&lt;/span>, &lt;span style="color:#c1abea">ResponseT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">newCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RequestT&lt;/span>, &lt;span style="color:#c1abea">ResponseT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">methodDescriptor&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>目标地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">authority&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="managedchannel">ManagedChannel&lt;/h3>
&lt;p>&lt;code>ManagedChannel&lt;/code> 是 &lt;code>Channel&lt;/code> 的子类，提供生命周期管理的 &lt;code>Channel&lt;/code>；由 &lt;code>ManagedChannelImpl&lt;/code> 实现功能&lt;/p>
&lt;h5 id="关闭">关闭&lt;/h5>
&lt;ul>
&lt;li>shutdown&lt;/li>
&lt;/ul>
&lt;p>初始化一个顺序关闭，既有的调用会继续执行，但是新的调用会被立即取消&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>shutdownNow&lt;/li>
&lt;/ul>
&lt;p>强制关闭 Channel，会取消所有的调用；即使是强制关闭也不会瞬间停止&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#00b1f7">shutdownNow&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>isShutdown&lt;/li>
&lt;/ul>
&lt;p>返回 &lt;code>Channel&lt;/code> 是否终止，终止的 &lt;code>Channel&lt;/code> 没有执行中的调用，相关的资源被释放&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">isShutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>awiatTermination&lt;/li>
&lt;/ul>
&lt;p>等待 &lt;code>Channel&lt;/code> 变为终止，如果超时则放弃等待&lt;/p></description></item><item><title>gRPC Client 启动流程</title><link>https://blog.hellowood.dev/posts/grpc-client-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 17 Nov 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-client-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>gRPC 启动初始化的流程，使用 Netty 作为底层的实现&lt;/p>
&lt;h2 id="初始化-channel">初始化 Channel&lt;/h2>
&lt;p>Channel 的初始化通过 &lt;code>ChannelBuilder&lt;/code> 构建
这里通过 &lt;code>forTarget&lt;/code> 设置了要解析的服务名称，会通过 &lt;code>NameResolver&lt;/code> 解析，转换为具体的地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forTarget&lt;/span>(&lt;span style="color:#98c379">&amp;#34;grpc-server&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>构建 ManagedChannel 实例&lt;/li>
&lt;/ul>
&lt;p>&lt;code>io.grpc.internal.AbstractManagedChannelImplBuilder#build&lt;/code>&lt;/p>
&lt;p>调用 build 时，会根据 builder 中的属性，创建 &lt;code>ManagedChannelImpl&lt;/code> 的实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#00b1f7">build&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ManagedChannelOrphanWrapper&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ManagedChannelImpl&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建 Transport 工厂&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">buildTransportFactory&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ExponentialBackoffPolicy&lt;/span>.&lt;span style="color:#b3d23c">Provider&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 线程池&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SharedResourcePool&lt;/span>.&lt;span style="color:#b3d23c">forResource&lt;/span>(&lt;span style="color:#c1abea">GrpcUtil&lt;/span>.&lt;span style="color:#b3d23c">SHARED_CHANNEL_EXECUTOR&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 计时器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">GrpcUtil&lt;/span>.&lt;span style="color:#b3d23c">STOPWATCH_SUPPLIER&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 统计和追踪拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">getEffectiveInterceptors&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 时间提供器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TimeProvider&lt;/span>.&lt;span style="color:#b3d23c">SYSTEM_TIME_PROVIDER&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化-channel-属性">初始化 Channel 属性&lt;/h2>
&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/li>
&lt;/ul>
&lt;p>为 &lt;code>ManagedChannel&lt;/code> 设置属性，初始化服务发现，负载均衡，拦截器等并创建真正的 Channel&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannelImpl&lt;/span>(&lt;span style="color:#c1abea">AbstractManagedChannelImplBuilder&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">builder&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ClientTransportFactory&lt;/span> &lt;span style="color:#c1abea">clientTransportFactory&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">BackoffPolicy&lt;/span>.&lt;span style="color:#b3d23c">Provider&lt;/span> &lt;span style="color:#c1abea">backoffPolicyProvider&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ObjectPool&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">Executor&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">balancerRpcExecutorPool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Supplier&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Stopwatch&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">stopwatchSupplier&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ClientInterceptor&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">interceptors&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">TimeProvider&lt;/span> &lt;span style="color:#c1abea">timeProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="设置服务名称">设置服务名称&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">target&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">checkNotNull&lt;/span>(&lt;span style="color:#c1abea">builder&lt;/span>.&lt;span style="color:#b3d23c">target&lt;/span>, &lt;span style="color:#98c379">&amp;#34;target&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="设置-transportfactory">设置 TransportFactory&lt;/h5>
&lt;p>创建了支持鉴权的代理的 &lt;code>TransportFactory&lt;/code>，用于支持向服务端发起请求进行鉴权&lt;/p></description></item><item><title>gRPC Stream</title><link>https://blog.hellowood.dev/posts/grpc-stream/</link><pubDate>Sun, 08 Nov 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-stream/</guid><description>&lt;p>Stream 在 gRPC 中代表一个真正的请求，包含要发送的 消息；Stream 分为 &lt;code>ClientStream&lt;/code> 和 &lt;code>ServerStream&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-stream-diagram.png" alt="grpc-source-code-stream-diagram.png">&lt;/p>
&lt;h2 id="clientstream">ClientStream&lt;/h2>
&lt;p>&lt;code>ClientStream&lt;/code> 接口继承 Stream 接口，有多个实现类或抽象实现类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ForwardingClientStream&lt;/code>: 用于转发的 &lt;code>ClientStream&lt;/code>，支持代理真正的流，可以用于触发一些动作，如统计等&lt;/li>
&lt;li>&lt;code>NoopClientStream&lt;/code>: 不做任何操作的 &lt;code>ClientStream&lt;/code>，用于空实现
&lt;ul>
&lt;li>&lt;code>FailingClientStream&lt;/code>: 用于失败的 &lt;code>ClientStream&lt;/code>，处理请求失败的场景&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>InProcessClientStream&lt;/code>: 进程内的 &lt;code>ClientStream&lt;/code>，用于测试，不会发出实际请求&lt;/li>
&lt;li>&lt;code>AbstractClientStream&lt;/code>: &lt;code>ClientStream&lt;/code> 的抽象实现类，实现了部分基础操作，如发送header，写入消息，半关闭等
&lt;ul>
&lt;li>&lt;code>NettyClientStream&lt;/code>: 基于 Netty 实现的 &lt;code>ClientStream&lt;/code>，实现了基于 Netty 的帧操作等&lt;/li>
&lt;li>&lt;code>OkHttpClientStream&lt;/code>: 基于 OkHttp 实现的 &lt;code>ClientStream&lt;/code>，实现了基于 OkHttp 的帧操作等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>start&lt;/li>
&lt;/ul>
&lt;p>开始一个新的流，对于每一个流，只能调用一次&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">start&lt;/span>(&lt;span style="color:#c1abea">ClientStreamListener&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>halfClose&lt;/li>
&lt;/ul>
&lt;p>从客户端关闭流，当关闭后，不能发送更多的消息，但是可以接收消息，只能调用一次&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">halfClose&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>cancel&lt;/li>
&lt;/ul>
&lt;p>异常终止流，当调用后不会再发送和接收消息，只有在 start 之后才可以被调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">cancel&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">reason&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>setDeadline&lt;/li>
&lt;/ul>
&lt;p>设置请求有效截止时间，过了这个时间之后就会终止请求执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">setDeadline&lt;/span>(&lt;span style="color:#e5c07b">@Nonnull&lt;/span> &lt;span style="color:#c1abea">Deadline&lt;/span> &lt;span style="color:#c1abea">deadline&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>getAttributes&lt;/li>
&lt;/ul>
&lt;p>获取流的属性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Attributes&lt;/span> &lt;span style="color:#00b1f7">getAttributes&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="监听器">监听器&lt;/h3>
&lt;p>ClientStreamListener 用于监听客户端流的事件&lt;/p>
&lt;ul>
&lt;li>onReady&lt;/li>
&lt;/ul>
&lt;p>当接收得此事件说明 Transport 已经准备好发送附加消息了&lt;/p></description></item><item><title>gRPC Transport</title><link>https://blog.hellowood.dev/posts/grpc-transport/</link><pubDate>Thu, 22 Oct 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-transport/</guid><description>&lt;p>Transport 分为 &lt;code>ClientTransport&lt;/code> 和 &lt;code>ServerTransport&lt;/code>，分别用于客户端和服务端&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-transport-classes-diagram.png" alt="grpc-source-code-transport-classes-diagram.png">&lt;/p>
&lt;h2 id="clienttransport">ClientTransport&lt;/h2>
&lt;p>&lt;code>ClientTransport&lt;/code> 与真正的 IP 地址是一一对应的，用于建立连接，创建流&lt;/p>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>&lt;code>ClientTransport&lt;/code> 有多个继承接口和实现类:&lt;/p>
&lt;ul>
&lt;li>支持失败的实现类 &lt;code>FailingClientTransport&lt;/code>，客户端启动时创建的流会快速失败&lt;/li>
&lt;li>支持生命周期管理的接口 &lt;code>ManagedClientTransport&lt;/code>
&lt;ul>
&lt;li>支持延迟处理的实现类 &lt;code>DelayedClientTransport&lt;/code>&lt;/li>
&lt;li>基于连接的接口 &lt;code>ConnectionClientTransport&lt;/code>
&lt;ul>
&lt;li>基于 Netty 实现的 &lt;code>NettyClientTransport&lt;/code>&lt;/li>
&lt;li>基于 OkHttp 实现的 &lt;code>OkHttpClientTransport&lt;/code>&lt;/li>
&lt;li>用于进程内处理请求 &lt;code>InProcessTransport&lt;/code>&lt;/li>
&lt;li>支持代理的抽象实现类 &lt;code>ForwardingConnectionClientTransport&lt;/code>
&lt;ul>
&lt;li>支持授权检查的实现类 &lt;code>CallCredentialsApplyingTransportFactory&lt;/code>&lt;/li>
&lt;li>用于统计的 &lt;code>CallTracingTransport&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>ClientTransport#newStream&lt;/li>
&lt;/ul>
&lt;p>创建新的流，用于给远程服务端发送消息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ClientStream&lt;/span> &lt;span style="color:#00b1f7">newStream&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span>, &lt;span style="color:#c7bf54">?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ClientTransport#ping&lt;/li>
&lt;/ul>
&lt;p>ping 远程的端点，当收到 ack 之后，会使用所给的 Executor 执行回调&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">ping&lt;/span>(&lt;span style="color:#c1abea">PingCallback&lt;/span> &lt;span style="color:#c1abea">callback&lt;/span>, &lt;span style="color:#c1abea">Executor&lt;/span> &lt;span style="color:#c1abea">executor&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ManagedClientTransport#start&lt;/li>
&lt;/ul>
&lt;p>启动 Transport，尝试建立连接，并启动监听器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Runnable&lt;/span> &lt;span style="color:#00b1f7">start&lt;/span>(&lt;span style="color:#c1abea">Listener&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="监听器">监听器&lt;/h3>
&lt;p>Transport 的 Listener 用于监听 Transport 事件，进行相应的处理&lt;/p>
&lt;ul>
&lt;li>监听就绪事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportReady&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监听使用中事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportInUse&lt;/span>(&lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">inUse&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监听关闭事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportShutdown&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">s&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监听终止事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportTerminated&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="clienttransport-流程">ClientTransport 流程&lt;/h3>
&lt;p>Transport 在 Channel 退出空闲模式时会被创建，然后通过 &lt;code>start&lt;/code> 方法启动，建立连接，当连接成功后触发 ready 回调，然后更新 LB 状态为 READY，然后可以执行发送请求到服务端&lt;/p></description></item><item><title>gRPC 使用自定义的 LoadBalancer</title><link>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-loadbalancer/</link><pubDate>Tue, 29 Sep 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-loadbalancer/</guid><description>&lt;p>gRPC 中提供了 &lt;code>round_robin&lt;/code>, &lt;code>pick_first&lt;/code>, &lt;code>grpclb&lt;/code>, &lt;code>HealthCheckingRoundRobin&lt;/code> 等负载均衡的实现，默认使用&lt;code>HealthCheckingRoundRobin&lt;/code>，该负载均衡支持检查 Subchannel 的健康状态&lt;/p>
&lt;p>LoadBalancer 主要类包括 &lt;code>LoadBalancerProvider&lt;/code>, &lt;code>LoadBalancer&lt;/code>, &lt;code>SubchannelPicker&lt;/code>, &lt;code>LoadBalancer.SubchannelStateListener &lt;/code>，所以实现自定义的 LoadBalancer 实现这几个类就可以&lt;/p>
&lt;h2 id="实现自定义的-loadbalancer">实现自定义的 LoadBalancer&lt;/h2>
&lt;p>自定义实现一个轮询策略的负载均衡器&lt;/p>
&lt;ul>
&lt;li>CustomLoadBalancerProvider.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomLoadBalancerProvider&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">LoadBalancerProvider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">isAvailable&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#00b1f7">getPriority&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">getPolicyName&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#34;custom_round_robin&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">LoadBalancer&lt;/span> &lt;span style="color:#00b1f7">newLoadBalancer&lt;/span>(&lt;span style="color:#c1abea">LoadBalancer&lt;/span>.&lt;span style="color:#b3d23c">Helper&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomLoadBalancer&lt;/span>(&lt;span style="color:#c1abea">helper&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CustomLoadBalancer.java&lt;/li>
&lt;/ul>
&lt;p>在 CustomLoadBalancer 中实现了地址的处理，根据地址创建 Subchannel，并启动 Subchannel 状态监听器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomLoadBalancer&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">LoadBalancer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Ref&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ConnectivityState&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#c1abea">STATE_INFO&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>.&lt;span style="color:#b3d23c">create&lt;/span>(&lt;span style="color:#98c379">&amp;#34;state-info&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Helper&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>, &lt;span style="color:#c1abea">Subchannel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">subchannelMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConcurrentHashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomLoadBalancer&lt;/span>(&lt;span style="color:#c1abea">Helper&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">helper&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">handleResolvedAddresses&lt;/span>(&lt;span style="color:#c1abea">ResolvedAddresses&lt;/span> &lt;span style="color:#c1abea">resolvedAddresses&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;处理地址:{}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">resolvedAddresses&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>().&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将解析的地址分割成单个 Address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">latestAddresses&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">resolvedAddresses&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">flatMap&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">splitAddressCollection&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">distinct&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 已经存在的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Set&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">originAddresses&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">keySet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 对新的 Address 创建 Subchannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>, &lt;span style="color:#c1abea">Subchannel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">newSubchannelMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">latestAddresses&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">filter&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">originAddresses&lt;/span>.&lt;span style="color:#b3d23c">contains&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">buildCreateSubchannelArgs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">helper&lt;/span>::&lt;span style="color:#c1abea">createSubchannel&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">processSubchannel&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toConcurrentMap&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span>::&lt;span style="color:#c1abea">getAddresses&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">s&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将已存在的 Subchannel 放到新的集合中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">originAddresses&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">filter&lt;/span>(&lt;span style="color:#c1abea">latestAddresses&lt;/span>::&lt;span style="color:#c1abea">contains&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">newSubchannelMap&lt;/span>.&lt;span style="color:#b3d23c">put&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>, &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">get&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭需要移除的 Subchannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">originAddresses&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">filter&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">latestAddresses&lt;/span>.&lt;span style="color:#b3d23c">contains&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">get&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span>::&lt;span style="color:#c1abea">shutdown&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannelMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">newSubchannelMap&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">CreateSubchannelArgs&lt;/span> &lt;span style="color:#00b1f7">buildCreateSubchannelArgs&lt;/span>(&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">CreateSubchannelArgs&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAddresses&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAttributes&lt;/span>(&lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">set&lt;/span>(&lt;span style="color:#c1abea">STATE_INFO&lt;/span>, &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Ref&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">IDLE&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Stream&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">splitAddressCollection&lt;/span>(&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Attributes&lt;/span> &lt;span style="color:#c1abea">attributes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>.&lt;span style="color:#b3d23c">getAttributes&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>, &lt;span style="color:#c1abea">attributes&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Subchannel&lt;/span> &lt;span style="color:#00b1f7">processSubchannel&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span> &lt;span style="color:#c1abea">subchannel&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">containsValue&lt;/span>(&lt;span style="color:#c1abea">subchannel&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;{} {} 已经存在&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">subchannel&lt;/span>, &lt;span style="color:#c1abea">subchannel&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">subchannel&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannel&lt;/span>.&lt;span style="color:#b3d23c">start&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomSubchannelStateListener&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>, &lt;span style="color:#c1abea">subchannel&lt;/span>, &lt;span style="color:#c1abea">helper&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannel&lt;/span>.&lt;span style="color:#b3d23c">requestConnection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">subchannel&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">handleNameResolutionError&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;命名解析失败:{}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">helper&lt;/span>.&lt;span style="color:#b3d23c">updateBalancingState&lt;/span>(&lt;span style="color:#c1abea">ConnectivityState&lt;/span>.&lt;span style="color:#b3d23c">TRANSIENT_FAILURE&lt;/span>, &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomSubchannelPicker&lt;/span>(&lt;span style="color:#c1abea">PickResult&lt;/span>.&lt;span style="color:#b3d23c">withNoResult&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">values&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">peek&lt;/span>(&lt;span style="color:#c1abea">s&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;关闭 {} {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span>::&lt;span style="color:#c1abea">shutdown&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>, &lt;span style="color:#c1abea">Subchannel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getSubchannelMap&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConcurrentHashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">subchannelMap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CustomSubchannelStateListener.java&lt;/li>
&lt;/ul>
&lt;p>Subchannel 的状态监听器，当 Subchannel 状态发生变化时进行处理&lt;/p></description></item><item><title>gRPC 超时时间与重试时间间隔</title><link>https://blog.hellowood.dev/posts/grpc-%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E4%B8%8E%E9%87%8D%E8%AF%95%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/</link><pubDate>Sun, 20 Sep 2020 22:41:50 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E4%B8%8E%E9%87%8D%E8%AF%95%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/</guid><description>&lt;blockquote>
&lt;p>gRPC 的超时时间生效机制以及重试超时时间间隔&lt;/p>
&lt;/blockquote>
&lt;h2 id="超时时间配置">超时时间配置&lt;/h2>
&lt;p>对指定的服务和方法单独设置超时时间，timeout 作用于所有的 RPC 请求（无论是否重试，都会在 timeout 的时间之后超时，进行中的重试请求会被取消）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;methodConfig&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;name&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;service&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;io.github.helloworlde.grpc.UserInfoService&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;retryPolicy&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;maxAttempts&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;initialBackoff&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;0.01s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;maxBackoff&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;0.1s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;backoffMultiplier&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;retryableStatusCodes&amp;#34;&lt;/span>: [&lt;span style="color:#63c381">&amp;#34;UNAVAILABLE&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;waitForReady&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;timeout&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="重试时间间隔">重试时间间隔&lt;/h2>
&lt;p>gRPC 的重试时间间隔是由 &lt;code>initialBackoff&lt;/code>, &lt;code>maxBackoff&lt;/code>, &lt;code>backoffMultiplier&lt;/code> 共同决定的，实现方法是 &lt;code>io.grpc.internal.RetriableStream.Sublistener#makeRetryDecision&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">maxAttempts&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">substream&lt;/span>.&lt;span style="color:#b3d23c">previousAttemptCount&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">1&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">isThrottled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">pushbackMillis&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">isRetryableStatusCode&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shouldRetry&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">backoffNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> (&lt;span style="color:#ef8383">long&lt;/span>) (&lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span> &lt;span style="color:#c1abea">random&lt;/span>.&lt;span style="color:#b3d23c">nextDouble&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Math&lt;/span>.&lt;span style="color:#b3d23c">min&lt;/span>((&lt;span style="color:#ef8383">long&lt;/span>) (&lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span> &lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">backoffMultiplier&lt;/span>), &lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">maxBackoffNanos&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">pushbackMillis&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;=&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shouldRetry&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">backoffNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">TimeUnit&lt;/span>.&lt;span style="color:#b3d23c">MILLISECONDS&lt;/span>.&lt;span style="color:#b3d23c">toNanos&lt;/span>(&lt;span style="color:#c1abea">pushbackMillis&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">initialBackoffNanos&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果开启了重试，且没有达到节流的限制，如果服务端有回推延时时间，则使用服务端回推的时间作为延时时间，初始延迟时间作为下次延时的初始时间；&lt;/p></description></item><item><title>gRPC 中的核心概念</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 20 Sep 2020 22:40:59 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid><description>&lt;h2 id="stub">Stub&lt;/h2>
&lt;p>Stub 层暴露给开发者，提供类型安全的绑定到正在适应的数据模型/IDL/接口&lt;/p>
&lt;h2 id="channel">Channel&lt;/h2>
&lt;p>Channel 层是传输处理之上的抽象，适合拦截器、装饰器，并比 Stub 层暴露更多的行为给应用
一个 Channel 可能有多个 Subchannel&lt;/p>
&lt;h3 id="subchannel">Subchannel&lt;/h3>
&lt;p>Subchannel 代表负载均衡过的 Channel&lt;/p>
&lt;h3 id="channel-状态">Channel 状态&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>CONNECTING
Channel 正在尝试建立连接，并且正在等待名称解析，TCP连接建立或TLS握手所涉及的步骤之一，创建时可以将其用作通道的初始状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>READY
Channel 握手成功建立连接，并且所有的后续通信尝试均已成功(或未发生任何失败)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TRANSIENT_FAILURE
发生了一些瞬时故障（例如TCP 3握手超时或套接字错误），处于此状态的通道最终将切换到 CONNECTING 状态，并尝试再次建立连接。由于重试是通过指数退避完成的，因此无法连接的通道在此状态下将开始花费很少的时间，但是由于尝试反复失败，因此通道在此状态下将花费越来越多的时间。对于许多非致命故障（例如，由于服务器尚不可用，TCP连接尝试超时），通道可能会在此状态下花费越来越多的时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IDLE
由于缺少新的或待处理的RPC，Channel 甚至没有尝试创建连接的状态；可以在这种状态下创建新的RPC，任何在通道上启动RPC的尝试都将使该 Channel 退出此状态以进行连接。如果指定的 IDLE_TIMEOUT 的通道上没有 RPC 活动，即在此期间没有新的或挂起的（活动的）RPC，则 READY 或 CONNECTING 的通道将切换到 IDLE；此外，在没有活动或暂挂RPC的情况下接收 GOAWAY 的通道也应切换到 IDLE，以避免试图断开连接的服务器上的连接过载。我们将使用默认的IDLE_TIMEOUT 300秒（5分钟）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SHUTDOWN
此频道已开始关闭，任何新的RPC应该立即失败，待处理的RPC可能会继续运行，直到应用程序将其取消为止。通道可能进入此状态，原因是应用程序明确请求关闭，或者尝试进行连接通信期间发生了不可恢复的错误。（截至2015年6月12日，（连接或通讯时没有已知的错误被归类为不可恢复。）进入此状态的通道永远不会离开此状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="transport">Transport&lt;/h2>
&lt;p>Transport 层承担在线上放置和获取字节的工作，被建模为 Stream 工厂，是真正的连接&lt;/p>
&lt;p>gRPC 有三个 Transport 实现：&lt;/p>
&lt;ol>
&lt;li>基于 Netty的 Transport 是主要的 Transport 实现，基于 Netty，可同时用于客户端和服务端&lt;/li>
&lt;li>基于 OkHttp 的 Transport 是轻量级的 Transport，基于 OkHttp，主要用于 Android 端并只作为客户端&lt;/li>
&lt;li>InProcess Transport 是当服务器和客户端在同一个进程内时使用，用于测试&lt;/li>
&lt;/ol></description></item><item><title>gRPC 重试流程</title><link>https://blog.hellowood.dev/posts/grpc-%E9%87%8D%E8%AF%95%E6%B5%81%E7%A8%8B/</link><pubDate>Sun, 20 Sep 2020 22:40:07 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E9%87%8D%E8%AF%95%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>当第一次调用失败，流监听器关闭的时候，会根据请求的处理状态和方法的配置，判断是否需要重试&lt;/p>
&lt;p>请求的处理状态有三种，在&lt;code>io.grpc.internal.ClientStreamListener.RpcProgress&lt;/code>中定义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>PROCESSED&lt;/code>: 请求被正常处理，按照返回的状态码决定是否要重试&lt;/li>
&lt;li>&lt;code>REFUSED&lt;/code>: 没有被服务端的应用逻辑层处理，直接重试，不计入重试次数&lt;/li>
&lt;li>&lt;code>DROPPED&lt;/code>: 请求被负载均衡丢弃了，不重试，如果是对冲则取消其他的对冲请求，直接提交&lt;/li>
&lt;/ul>
&lt;h2 id="发起请求">发起请求&lt;/h2>
&lt;ul>
&lt;li>io.grpc.stub.ClientCalls#blockingUnaryCall&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-blockingUnaryCall-diagram.png" alt="grpc-java-blockingUnaryCall-diagram.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ClientCallImpl#startInternal&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-client-call-start.png" alt="grpc-java-client-call-start.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl.ChannelTransportProvider#newRetriableStream&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-transport-provider-new-retriable-stream.png" alt="grpc-java-transport-provider-new-retriable-stream.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#start&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-retriable-stream-start.png" alt="grpc-java-retriable-stream-start.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#createSubstream&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-retriable-stream-create-sub-stream.png" alt="grpc-java-retriable-stream-create-sub-stream.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl.ChannelTransportProvider#newRetriableStream#RetryStream#newSubstream&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-retriable-stream-new-sub-stream.png" alt="grpc-java-retriable-stream-new-sub-stream.png">&lt;/p>
&lt;ol>
&lt;li>通过生成的代码中的方法，调用 &lt;code>io.grpc.stub.ClientCalls#blockingUnaryCall&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>首先通过 channel 创建&lt;code>ClientCall&lt;/code>，然后通过 &lt;code>futureUnaryCall&lt;/code> 提交请求，返回 Future，根据返回的 Future 循环等待，通过&lt;code>executor.waitAndDrain()&lt;/code>执行请求，直到 Future 完成，返回结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">RespT&lt;/span> &lt;span style="color:#00b1f7">blockingUnaryCall&lt;/span>(&lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ReqT&lt;/span> &lt;span style="color:#c1abea">req&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 创建新的调用的 ClientCall，指定了调用类型和执行器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">call&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">newCall&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>.&lt;span style="color:#b3d23c">withOption&lt;/span>(&lt;span style="color:#c1abea">ClientCalls&lt;/span>.&lt;span style="color:#b3d23c">STUB_TYPE_OPTION&lt;/span>, &lt;span style="color:#c1abea">StubType&lt;/span>.&lt;span style="color:#b3d23c">BLOCKING&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">withExecutor&lt;/span>(&lt;span style="color:#c1abea">executor&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 执行调用，发出请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ListenableFuture&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">responseFuture&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">futureUnaryCall&lt;/span>(&lt;span style="color:#c1abea">call&lt;/span>, &lt;span style="color:#c1abea">req&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">responseFuture&lt;/span>.&lt;span style="color:#b3d23c">isDone&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#8a93a5;font-style:italic">// 执行提交的 Runnable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">executor&lt;/span>.&lt;span style="color:#b3d23c">waitAndDrain&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">InterruptedException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">interrupt&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">call&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Thread interrupted&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">getUnchecked&lt;/span>(&lt;span style="color:#c1abea">responseFuture&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>执行 unary 调用 &lt;code>futureUnaryCall&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这里创建了 Future，通过 &lt;code>asyncUnaryRequestCall&lt;/code> 继续调用&lt;/p></description></item><item><title>gRPC 对冲原理</title><link>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E5%8E%9F%E7%90%86/</link><pubDate>Sun, 20 Sep 2020 22:39:26 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E5%8E%9F%E7%90%86/</guid><description>&lt;p>gRPC 对冲开启后，当请求在指定的时间间隔后没有返回时，会发起对冲请求，继续等待，如果依然没有返回，则重复发送直到接收到返回结果或者超时取消&lt;/p>
&lt;p>对冲适用于当下游服务部分节点故障无法及时响应或者响应不及时的场景，通过对冲可以减少请求的失败率，但是可能会导致延时增加&lt;/p>
&lt;p>对冲和重试的流程相似，在第一次发起请求的时候根据服务名和方法名决定使用哪种策略；如果是对冲策略，则在发起请求时提交一个延时任务，这个任务会发起一个新的请求，并在执行的时候再发起一个请求，并将这些请求添加到队列中；多个请求哪个先返回就使用哪个请求的结果，将其他的请求取消并提交流&lt;/p>
&lt;h2 id="执行流程">执行流程&lt;/h2>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#start&lt;/li>
&lt;/ul>
&lt;p>开始第一个 RPC 调用&lt;/p>
&lt;pre tabindex="0">&lt;code> @Override
 public final void start(ClientStreamListener listener) {
 // 构造一个 BufferEntry
 class StartEntry implements BufferEntry {
 @Override
 public void runWith(Substream substream) {
 substream.stream.start(new Sublistener(substream));
 }
 }

 synchronized (lock) {
 // 新建 BufferEntry，添加到 buffer 中
 state.buffer.add(new StartEntry());
 }

 // 创建 Substream
 Substream substream = createSubstream(0);
 hedgingPolicy = hedgingPolicyProvider.get();
 // 如果有对冲策略
 if (!HedgingPolicy.DEFAULT.equals(hedgingPolicy)) {
 // 如果对冲策略有效，则将重试策略置为 null
 isHedging = true;
 retryPolicy = RetryPolicy.DEFAULT;

 FutureCanceller scheduledHedgingRef = null;

 synchronized (lock) {
 // 将这个流添加到对冲中
 state = state.addActiveHedge(substream);
 // 没有提交的流，且没有达到最大对冲次数，且没有终止，且没有节流或没有达到节流阈值
 // 则创建对冲 Future
 if (hasPotentialHedging(state) &amp;amp;&amp;amp; (throttle == null || throttle.isAboveThreshold())) {
 scheduledHedging = scheduledHedgingRef = new FutureCanceller(lock);
 }
 }

 // 如果对冲请求不为空，则提交延时任务
 if (scheduledHedgingRef != null) {
 scheduledHedgingRef.setFuture(
 scheduledExecutorService.schedule(
 new HedgingRunnable(scheduledHedgingRef),
 hedgingPolicy.hedgingDelayNanos,
 TimeUnit.NANOSECONDS)
 );
 }
 }
 // 消耗缓冲的请求
 drain(substream);
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>io.grpc.internal.RetriableStream.HedgingRunnable&lt;/li>
&lt;/ul>
&lt;p>对冲任务，在执行的时候发起请求，并根据当前的提交的请求数量、状态等判断是否需要取消，如果不取消则再次提交一个延时任务&lt;/p></description></item><item><title>gRPC 自定义健康检查</title><link>https://blog.hellowood.dev/posts/grpc-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link><pubDate>Sun, 20 Sep 2020 22:38:15 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid><description>&lt;p>在 gRPC 中自定义健康检查逻辑，用于检查特定的组件(如检查 Redis、MQ 等)，或者结合其他的服务组件一起使用(如使用 Spring Boot 的健康检查)&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>gRPC 的健康检查服务是通过 &lt;code>health.proto&lt;/code>定义的&lt;/p>
&lt;ul>
&lt;li>health.proto&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">syntax&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">grpc&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">health.v1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">csharp_namespace&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Grpc.Health.V1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">go_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;google.golang.org/grpc/health/grpc_health_v1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_multiple_files&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_outer_classname&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;HealthProto&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;io.grpc.health.v1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HealthCheckRequest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HealthCheckResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">enum&lt;/span> &lt;span style="color:#c1abea">ServingStatus&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">UNKNOWN&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SERVING&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">NOT_SERVING&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SERVICE_UNKNOWN&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServingStatus&lt;/span> &lt;span style="color:#c1abea">status&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">Health&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 单次健康检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">Check&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 流式健康检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">Watch&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">stream&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>里面定义了两个方法，一个是用于单次检查的 &lt;code>Check&lt;/code>方法，一个是用于流式请求的 &lt;code>Watch&lt;/code>方法&lt;/p>
&lt;h3 id="自定义检查组件">自定义检查组件&lt;/h3>
&lt;ul>
&lt;li>CustomHealthCheckImpl.java&lt;/li>
&lt;/ul>
&lt;p>自定义健康检查逻辑，通过不同的组件名称返回相应的状态信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomHealthCheckImpl&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">HealthGrpc&lt;/span>.&lt;span style="color:#b3d23c">HealthImplBase&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">check&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">responseObserver&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">out&lt;/span>.&lt;span style="color:#b3d23c">println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;健康检查:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getService&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getServingStatus&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setStatus&lt;/span>(&lt;span style="color:#c1abea">servingStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseObserver&lt;/span>.&lt;span style="color:#b3d23c">onNext&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseObserver&lt;/span>.&lt;span style="color:#b3d23c">onCompleted&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">watch&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">responseObserver&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">out&lt;/span>.&lt;span style="color:#b3d23c">println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;健康检查 Stream:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getService&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getServingStatus&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setStatus&lt;/span>(&lt;span style="color:#c1abea">servingStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseObserver&lt;/span>.&lt;span style="color:#b3d23c">onNext&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#00b1f7">getServingStatus&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">service&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getService&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">switch&lt;/span> (&lt;span style="color:#c1abea">service&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span>.&lt;span style="color:#b3d23c">SERVING&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;mysql&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">checkMySQL&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;redis&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">checkRedis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span>.&lt;span style="color:#b3d23c">UNKNOWN&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;p>在 Server 端添加自定义的健康检查服务&lt;/p></description></item><item><title>gRPC 健康检查</title><link>https://blog.hellowood.dev/posts/grpc-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link><pubDate>Sun, 20 Sep 2020 22:37:34 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid><description>&lt;p>在 gRPC 中使用健康检查，在负载均衡前通过健康检查，只对健康的 Subchannel 发起请求，保证请求的成功率&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="server-端">Server 端&lt;/h3>
&lt;p>健康检查是一个独立的 Service，需要在 Server 端显式添加健康检查服务&lt;/p>
&lt;p>健康检查定义了两个方法，一个适用于单次请求的 &lt;code>check&lt;/code> 方法，另一个是适用于 Stream 流的 &lt;code>watch&lt;/code> 方法&lt;/p>
&lt;p>Server 端的健康检查由 &lt;code>io.grpc.services.HealthStatusManager&lt;/code>控制，抽象类是 &lt;code>io.grpc.health.v1.HealthGrpc.HealthImplBase&lt;/code>，具体实现是通过 &lt;code>io.grpc.services.HealthServiceImpl&lt;/code>&lt;/p>
&lt;ul>
&lt;li>在 Server 端添加健康检查服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">HealthStatusManager&lt;/span> &lt;span style="color:#c1abea">healthStatusManager&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HealthStatusManager&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Server&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ServerBuilder&lt;/span>.&lt;span style="color:#b3d23c">forPort&lt;/span>(&lt;span style="color:#c1abea">1234&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">addService&lt;/span>(&lt;span style="color:#c1abea">healthStatusManager&lt;/span>.&lt;span style="color:#b3d23c">getHealthService&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">addService&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，当 Server 端启动之后，就可以通过访问 &lt;code>grpc.health.v1.Health&lt;/code>服务获取当前的 Server 端的状态&lt;/p>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;ol>
&lt;li>添加配置&lt;/li>
&lt;/ol>
&lt;p>客户端开启健康检查有两个条件：&lt;/p>
&lt;ul>
&lt;li>配置了健康检查参数，配置的名称是 &lt;code>healthCheckConfig&lt;/code>，通过指定 &lt;code>serviceName&lt;/code> 的方式配置&lt;/li>
&lt;li>使用了支持健康检查的 LB (如 round_robin)&lt;/li>
&lt;/ul>
&lt;p>需要注意，这里的 &lt;code>serviceName&lt;/code>可以是组件名称，或者服务名称；服务端默认为 &lt;code>&amp;quot;&amp;quot;&lt;/code>， 如果想检查某个组件，需要自己实现健康检查的逻辑；配置中的 &lt;code>serviceName&lt;/code>只有在 NameReovler 解析到新的配置，且发生变化时才会更新，所以设置 &lt;code>serviceName&lt;/code> 意义不大&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">configMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">put&lt;/span>(&lt;span style="color:#98c379">&amp;#34;healthCheckConfig&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">put&lt;/span>(&lt;span style="color:#98c379">&amp;#34;serviceName&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forTarget&lt;/span>(&lt;span style="color:#98c379">&amp;#34;server&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">defaultServiceConfig&lt;/span>(&lt;span style="color:#c1abea">configMap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">defaultLoadBalancingPolicy&lt;/span>(&lt;span style="color:#98c379">&amp;#34;round_robin&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>执行健康检查&lt;/li>
&lt;/ol>
&lt;p>在发起请求前，会先使用 Service 的名称请求服务端健康检查服务，检查服务是否处于 &lt;code>SERVING&lt;/code> 状态，如果状态正常，则发起请求，否则将会失败&lt;/p></description></item><item><title>gRPC 负载均衡</title><link>https://blog.hellowood.dev/posts/grpc-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Sun, 20 Sep 2020 22:36:58 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>&lt;p>gRPC 内定义了 LoadBalancer 接口，用于负载均衡&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-loadbalancer-methods.png" alt="grpc-source-code-loadbalancer-methods.png">&lt;/p>
&lt;p>LoadBalancer 中的主要方法&lt;/p>
&lt;ul>
&lt;li>&lt;code>handleResolvedAddress&lt;/code>：处理 &lt;code>NameResolver&lt;/code> 解析的地址，用于创建 &lt;code>Subchannel&lt;/code>&lt;/li>
&lt;li>&lt;code>handleNameResolutionError&lt;/code>: 处理命名解析失败，会销毁已经存在的 &lt;code>Suchannel&lt;/code>&lt;/li>
&lt;li>&lt;code>requestConnection&lt;/code>: 创建连接，会为 &lt;code>Subchannel&lt;/code> 初始化 &lt;code>Transport&lt;/code>，并建立连接&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-loadbalancer-sub-class.png" alt="grpc-source-code-loadbalancer-sub-class.png">&lt;/p>
&lt;p>LoadBalancer 接口有多个实现类，如用于代理的 &lt;code>ForwardingLoadBalancer&lt;/code>；基于策略的 &lt;code>RoundRobinLoadBalancer&lt;/code>,&lt;code>PickFirstLoadBalancer&lt;/code>, &lt;code>GrpclbLoadBalancer&lt;/code>等；支持扩展功能的&lt;code>HealthCheckingLoadBalancer&lt;/code>, &lt;code>GracefulSwitchLoadBalancer&lt;/code> 等&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-loadbalancer-class-diagram.png" alt="grpc-source-code-loadbalancer-class-diagram.png">&lt;/p>
&lt;p>LoadBalancer 有多个内部类，用于实现负载均衡&lt;/p>
&lt;ul>
&lt;li>&lt;code>Factory&lt;/code>: 用于创建 &lt;code>LoadBalancer&lt;/code>，通过 &lt;code>LoadBalancerProvider&lt;/code> 实现&lt;/li>
&lt;li>&lt;code>Subchannel&lt;/code>: 逻辑连接，一个 &lt;code>Subchannel&lt;/code> 内可能包含多个 &lt;code>IP:PORT&lt;/code>&lt;/li>
&lt;li>&lt;code>Helper&lt;/code>: 用于创建 &lt;code>LoadBalancer&lt;/code>、&lt;code>Subchannel&lt;/code> 等&lt;/li>
&lt;li>&lt;code>SubchannelPicker&lt;/code>: &lt;code>Subchannel&lt;/code> 选择器，根据不同的策略使用不同的选择方式&lt;/li>
&lt;li>&lt;code>SubchannelStateListener&lt;/code>: &lt;code>Subchannel&lt;/code> 状态监听器，当 &lt;code>Subchannel&lt;/code> 状态发生变化时及时更新&lt;/li>
&lt;/ul>
&lt;p>LoadBalancer 的工作流程是：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>LoadBalancerRegistry&lt;/code> 或者 SPI 的方式注册 &lt;code>LoadBalancerProvider&lt;/code>&lt;/li>
&lt;li>调用 Channel Builder 的 &lt;code>defaultLoadBalancingPolicy&lt;/code> 设置负载均衡策略&lt;/li>
&lt;li>在 &lt;code>ManagedChannelImpl&lt;/code> 的构造方法中，创建 &lt;code>Factory&lt;/code>&lt;/li>
&lt;li>在 &lt;code>ManagedChannelImpl#exitIdleMode&lt;/code> 中创建 &lt;code>LoadBalancer&lt;/code> 实例&lt;/li>
&lt;li>将创建的实例作为参数传递给 &lt;code>NameResolverListener&lt;/code>&lt;/li>
&lt;li>当 &lt;code>NameResolver&lt;/code> 解析服务名称后，最终调用 &lt;code>handleResolvedAddresses &lt;/code>方法，根据不同的策略进行处理&lt;/li>
&lt;li>&lt;code>LoadBalancer&lt;/code> 根据解析的地址创建 &lt;code>Subchannel&lt;/code>&lt;/li>
&lt;li>&lt;code>Subchannel&lt;/code>调用 &lt;code>requestConnection&lt;/code> 方法建立连接&lt;/li>
&lt;/ol>
&lt;h2 id="创建-loadbalancer">创建 LoadBalancer&lt;/h2>
&lt;ol>
&lt;li>创建 Channel 前注册 Provider&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">LoadBalancerRegistry&lt;/span>.&lt;span style="color:#b3d23c">getDefaultRegistry&lt;/span>().&lt;span style="color:#b3d23c">register&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HealthCheckingRoundRobinLoadBalancerProvider&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>创建 Channel 时设置负载均衡策略&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forTarget&lt;/span>(&lt;span style="color:#98c379">&amp;#34;server&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">defaultLoadBalancingPolicy&lt;/span>(&lt;span style="color:#98c379">&amp;#34;round_robin&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>在 &lt;code>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/code> 构造方法中初始化 Factory&lt;/li>
&lt;/ol>
&lt;p>Factory 的实现类是 &lt;code>AutoConfiguredLoadBalancerFactory&lt;/code>&lt;/p></description></item><item><title>gRPC 命名解析</title><link>https://blog.hellowood.dev/posts/grpc-%E5%91%BD%E5%90%8D%E8%A7%A3%E6%9E%90/</link><pubDate>Sun, 20 Sep 2020 22:35:22 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%91%BD%E5%90%8D%E8%A7%A3%E6%9E%90/</guid><description>&lt;p>命名解析根据服务的 URI，从注册中心获取并解析服务实例 IP，默认支持 schema 为 DNS，grpclb，xds 等&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-name-resolver-diagram.png" alt="grpc-source-code-name-resolver-diagram.png">&lt;/p>
&lt;p>gRPC 的命名解析的父类接口是 &lt;code>NameResolver&lt;/code>
&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-name-resolver-class.png" alt="grpc-source-code-name-resolver-class.png">&lt;/p>
&lt;p>&lt;code>NameResolver&lt;/code> 包含有多个子类，用于实现命名解析
每个 &lt;code>NameResolver&lt;/code> 都有一个 &lt;code>Provider&lt;/code>，用于创建 &lt;code>NameResolver&lt;/code> 实例；所有的 &lt;code>Provider&lt;/code> 都注册到 &lt;code>NameResolverRegistry&lt;/code> 中，&lt;code>NameResolverRegistry&lt;/code> 创建 &lt;code>Factory&lt;/code> 实例，最终通过 &lt;code>Provider&lt;/code> 创建 &lt;code>NameResolver&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-name-resolver-with-sub-class.png" alt="grpc-source-code-name-resolver-with-sub-class.png">&lt;/p>
&lt;p>命名解析的整个工作流程是：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>NameResolverRegistry&lt;/code> 或者 SPI 方式注册 Provider&lt;/li>
&lt;li>调用 Channel 的 &lt;code>build&lt;/code> 方法创建 &lt;code>NameResovler.Factory&lt;/code>&lt;/li>
&lt;li>根据 Factory 最终调用 Provider 创建 &lt;code>NameResolver&lt;/code>，&lt;/li>
&lt;li>创建 &lt;code>Listener&lt;/code> 的实例&lt;/li>
&lt;li>调用 &lt;code>NameResolver&lt;/code> 的 &lt;code>start&lt;/code> 方法，传入 &lt;code>Listener&lt;/code> 实例&lt;/li>
&lt;li>创建 &lt;code>Runnable&lt;/code> 任务，通过调用 &lt;code>Listener&lt;/code> 的 &lt;code>onResult&lt;/code> 方法进行更新&lt;/li>
&lt;/ol>
&lt;h2 id="创建-nameresolver">创建 NameResolver&lt;/h2>
&lt;p>在 Channel 调用 &lt;code>build&lt;/code> 方式时，会在 &lt;code>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/code>的构造方法中获取 &lt;code>NameResolver.Factory&lt;/code>，这个属性的值是由调用 &lt;code>io.grpc.internal.AbstractManagedChannelImplBuilder#getNameResolverFactory&lt;/code> 方法获取的，这个方法里面的属性值来自于 &lt;code>io.grpc.NameResolverRegistry#asFactory&lt;/code>,&lt;code>NameResolverRegistry&lt;/code> 自己通过内部类 &lt;code>NameResolverFactory&lt;/code>创建了&lt;code>NameResovler.Factory&lt;/code> 的实例，在&lt;code>io.grpc.internal.ManagedChannelImpl#getNameResolver&lt;/code>中调用 Factory 的 &lt;code>newNameResolver&lt;/code>时，从 &lt;code>provider&lt;/code> 属性中获取根据优先级排序后的 Provider，通过 Provider 创建 &lt;code>NameResolver&lt;/code> 实例并返回第一个有效实例&lt;/p></description></item><item><title>gRPC 使用自定义的 NameResolver</title><link>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-nameresolver/</link><pubDate>Sun, 20 Sep 2020 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-nameresolver/</guid><description>&lt;p>在使用注册中心时，gRPC 并未提供注册中心的服务发现，需要自己实现 &lt;code>NameResolverProvider&lt;/code> 和 &lt;code>NameResolver&lt;/code>&lt;/p>
&lt;ul>
&lt;li>NameResolver&lt;/li>
&lt;/ul>
&lt;p>&lt;code>NameResolver&lt;/code> 里面重写了 &lt;code>start&lt;/code> 和 &lt;code>refresh&lt;/code> 方法，这两个方法都调用一个 &lt;code>resolve&lt;/code> 方法做服务发现；
&lt;code>resovle&lt;/code> 方法内部通过服务名从注册中心拉取服务实例列表，然后调用 &lt;code>Listener&lt;/code> 的 &lt;code>onResult&lt;/code>方法，将实例列表传递给 &lt;code>LoadBalancer&lt;/code>，完成服务解析
在服务运行期间，因为实例可能会发生变化，所以可以通过定时执行触发服务解析；如果注册中心支持，也可以通过回调触发&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomNameResolver&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">NameResolver&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">ScheduledExecutorService&lt;/span> &lt;span style="color:#c1abea">executorService&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ScheduledThreadPoolExecutor&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Listener2&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomNameResolver&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">getServiceAuthority&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">executorService&lt;/span>.&lt;span style="color:#b3d23c">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">start&lt;/span>(&lt;span style="color:#c1abea">Listener2&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">listener&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">resolve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">refresh&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">resolve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">resolve&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">executorService&lt;/span>.&lt;span style="color:#b3d23c">scheduleAtFixedRate&lt;/span>(() &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 从注册中心获取地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">InetSocketAddress&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">addressList&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getAddressList&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">addressList&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">||&lt;/span> &lt;span style="color:#c1abea">addressList&lt;/span>.&lt;span style="color:#b3d23c">size&lt;/span>() &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">SocketAddress&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">socketAddressList&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">addressList&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">toSocketAddress&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>(&lt;span style="color:#c1abea">socketAddressList&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">key&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>.&lt;span style="color:#b3d23c">create&lt;/span>(&lt;span style="color:#98c379">&amp;#34;CustomKey&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;CustomValue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Attributes&lt;/span> &lt;span style="color:#c1abea">attributes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>().&lt;span style="color:#b3d23c">set&lt;/span>(&lt;span style="color:#c1abea">key&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span>).&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ConfigOrError&lt;/span> &lt;span style="color:#c1abea">configOrError&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ConfigOrError&lt;/span>.&lt;span style="color:#b3d23c">fromError&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span>.&lt;span style="color:#b3d23c">NOT_FOUND&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ResolutionResult&lt;/span> &lt;span style="color:#c1abea">resolutionResult&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ResolutionResult&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAddresses&lt;/span>(&lt;span style="color:#c1abea">Arrays&lt;/span>.&lt;span style="color:#b3d23c">asList&lt;/span>(&lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAttributes&lt;/span>(&lt;span style="color:#c1abea">attributes&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setServiceConfig&lt;/span>(&lt;span style="color:#c1abea">configOrError&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">listener&lt;/span>.&lt;span style="color:#b3d23c">onResult&lt;/span>(&lt;span style="color:#c1abea">resolutionResult&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#c1abea">0&lt;/span>, &lt;span style="color:#c1abea">5&lt;/span>, &lt;span style="color:#c1abea">TimeUnit&lt;/span>.&lt;span style="color:#b3d23c">SECONDS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">SocketAddress&lt;/span> &lt;span style="color:#00b1f7">toSocketAddress&lt;/span>(&lt;span style="color:#c1abea">InetSocketAddress&lt;/span> &lt;span style="color:#c1abea">address&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#c1abea">address&lt;/span>.&lt;span style="color:#b3d23c">getHostName&lt;/span>(), &lt;span style="color:#c1abea">address&lt;/span>.&lt;span style="color:#b3d23c">getPort&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">InetSocketAddress&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getAddressList&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span> &lt;span style="color:#c1abea">inetSocketAddress&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#98c379">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">1234&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span> &lt;span style="color:#c1abea">inetSocketAddress2&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#98c379">&amp;#34;127.0.0.1&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">1234&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">Arrays&lt;/span>.&lt;span style="color:#b3d23c">asList&lt;/span>(&lt;span style="color:#c1abea">inetSocketAddress&lt;/span>, &lt;span style="color:#c1abea">inetSocketAddress2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>NameResolverProvider&lt;/li>
&lt;/ul>
&lt;p>&lt;code>NameResolverProvider&lt;/code> 主要用于注册 &lt;code>NameResolver&lt;/code>，可以设置默认的协议，是否可用，优先级等
优先级有效值是 0-10，gRPC 默认的 &lt;code>DnsNameResolver&lt;/code> 优先级是5，所以自定义的优先级要大于5&lt;/p></description></item><item><title>gRPC 中 Binlog 打印原理</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD-binlog-%E6%89%93%E5%8D%B0%E5%8E%9F%E7%90%86/</link><pubDate>Sun, 20 Sep 2020 22:33:59 +0000</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD-binlog-%E6%89%93%E5%8D%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;p>gRPC 支持将请求调用的参数、Header 等信息以二进制的方式输出到文件中&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>binlog 的依赖在 &lt;code>grpc-services&lt;/code>中，所以需要有该依赖&lt;/p>
&lt;ul>
&lt;li>创建 Channel 时指定&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">BinaryLog&lt;/span> &lt;span style="color:#c1abea">binaryLog&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">BinaryLogs&lt;/span>.&lt;span style="color:#b3d23c">createBinaryLog&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TempFileSink&lt;/span>(), &lt;span style="color:#98c379">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#c1abea">host&lt;/span>, &lt;span style="color:#c1abea">port&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setBinaryLog&lt;/span>(&lt;span style="color:#c1abea">binaryLog&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在创建时，需要指定打印的方法，&lt;code>*&lt;/code>代表打印所有的方法，具体指定可以参考 &lt;a href="https://github.com/helloworlde/proposal/blob/master/A16-binary-logging.md#control-interface">Control Interface&lt;/a>
也可以在创建时不指定参数，通过设置环境变量 &lt;code>GRPC_BINARY_LOG_CONFIG=*&lt;/code>来指定需要打印的方法
如果需要指定文件的生成位置，可以重写&lt;code>io.grpc.services.BinaryLogSink&lt;/code>，指定文件位置&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>在方法调用时，会判断有没有设置 binlog 对象，如果有则会封装方法，添加处理器和监听器；然后重新创建 &lt;code>ServerMethodDefinition&lt;/code>；通过二进制日志拦截器 &lt;code>io.grpc.services.BinlogHelper#getClientInterceptor&lt;/code> 拦截请求并写入日志&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ServerImpl.ServerTransportListenerImpl#startCall&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ServerStreamListener&lt;/span> &lt;span style="color:#00b1f7">startCall&lt;/span>(&lt;span style="color:#c1abea">ServerStream&lt;/span> &lt;span style="color:#c1abea">stream&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">fullMethodName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServerMethodDefinition&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">methodDef&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Context&lt;/span>.&lt;span style="color:#b3d23c">CancellableContext&lt;/span> &lt;span style="color:#c1abea">context&lt;/span>, &lt;span style="color:#c1abea">StatsTraceContext&lt;/span> &lt;span style="color:#c1abea">statsTraceCtx&lt;/span>, &lt;span style="color:#c1abea">Tag&lt;/span> &lt;span style="color:#c1abea">tag&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果 binlog 不为空，即需要记录binlog，则添加请求监听器和方法处理器记录 binlog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServerMethodDefinition&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span>, &lt;span style="color:#c7bf54">?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">wMethodDef&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">binlog&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">?&lt;/span> &lt;span style="color:#c1abea">interceptedDef&lt;/span> : &lt;span style="color:#c1abea">binlog&lt;/span>.&lt;span style="color:#b3d23c">wrapMethodDefinition&lt;/span>(&lt;span style="color:#c1abea">interceptedDef&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">startWrappedCall&lt;/span>(&lt;span style="color:#c1abea">fullMethodName&lt;/span>, &lt;span style="color:#c1abea">wMethodDef&lt;/span>, &lt;span style="color:#c1abea">stream&lt;/span>, &lt;span style="color:#c1abea">headers&lt;/span>, &lt;span style="color:#c1abea">context&lt;/span>, &lt;span style="color:#c1abea">tag&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.services.BinaryLogProvider#wrapMethodDefinition&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> public final &amp;lt;ReqT, RespT&amp;gt; ServerMethodDefinition&amp;lt;?, ?&amp;gt; wrapMethodDefinition(ServerMethodDefinition&amp;lt;ReqT, RespT&amp;gt; oMethodDef) {
 // 根据方法获取二进制日志拦截器，如果没有该方法则不拦截
 ServerInterceptor binlogInterceptor = getServerInterceptor(oMethodDef.getMethodDescriptor().getFullMethodName());
 if (binlogInterceptor == null) {
 return oMethodDef;
 }

 MethodDescriptor&amp;lt;byte[], byte[]&amp;gt; binMethod = BinaryLogProvider.toByteBufferMethod(oMethodDef.getMethodDescriptor());
 // 包装方法，添加了处理器和监听器
 ServerMethodDefinition&amp;lt;byte[], byte[]&amp;gt; binDef = InternalServerInterceptors.wrapMethod(oMethodDef, binMethod);
 // 创建处理器
 ServerCallHandler&amp;lt;byte[], byte[]&amp;gt; binlogHandler =
 InternalServerInterceptors.interceptCallHandlerCreate(binlogInterceptor, binDef.getServerCallHandler());
 // 创建服务方法定义
 return ServerMethodDefinition.create(binMethod, binlogHandler);
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>io.grpc.services.BinlogHelper#getClientInterceptor&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> public ClientInterceptor getClientInterceptor(final long callId) {
 return new ClientInterceptor() {
 boolean trailersOnlyResponse = true;

 @Override
 public &amp;lt;ReqT, RespT&amp;gt; ClientCall&amp;lt;ReqT, RespT&amp;gt; interceptCall(
 final MethodDescriptor&amp;lt;ReqT, RespT&amp;gt; method, CallOptions callOptions, Channel next) {
 final String methodName = method.getFullMethodName();
 final String authority = next.authority();
 final Deadline deadline = min(callOptions.getDeadline(), Context.current().getDeadline());

 return new SimpleForwardingClientCall&amp;lt;ReqT, RespT&amp;gt;(next.newCall(method, callOptions)) {
 @Override
 public void start(final ClientCall.Listener&amp;lt;RespT&amp;gt; responseListener, Metadata headers) {
 final Duration timeout = deadline == null ? null
 : Durations.fromNanos(deadline.timeRemaining(TimeUnit.NANOSECONDS));
 writer.logClientHeader(
 seq.getAndIncrement(),
 methodName,
 authority,
 timeout,
 headers,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId,
 /*peerAddress=*/ null);
 ClientCall.Listener&amp;lt;RespT&amp;gt; wListener =
 new SimpleForwardingClientCallListener&amp;lt;RespT&amp;gt;(responseListener) {
 @Override
 public void onMessage(RespT message) {
 writer.logRpcMessage(
 seq.getAndIncrement(),
 EventType.EVENT_TYPE_SERVER_MESSAGE,
 method.getResponseMarshaller(),
 message,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.onMessage(message);
 }

 @Override
 public void onHeaders(Metadata headers) {
 trailersOnlyResponse = false;
 writer.logServerHeader(
 seq.getAndIncrement(),
 headers,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId,
 getPeerSocket(getAttributes()));
 super.onHeaders(headers);
 }

 @Override
 public void onClose(Status status, Metadata trailers) {
 SocketAddress peer = trailersOnlyResponse
 ? getPeerSocket(getAttributes()) : null;
 writer.logTrailer(
 seq.getAndIncrement(),
 status,
 trailers,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId,
 peer);
 super.onClose(status, trailers);
 }
 };
 super.start(wListener, headers);
 }

 @Override
 public void sendMessage(ReqT message) {
 writer.logRpcMessage(
 seq.getAndIncrement(),
 EventType.EVENT_TYPE_CLIENT_MESSAGE,
 method.getRequestMarshaller(),
 message,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.sendMessage(message);
 }

 @Override
 public void halfClose() {
 writer.logHalfClose(
 seq.getAndIncrement(),
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.halfClose();
 }

 @Override
 public void cancel(String message, Throwable cause) {
 writer.logCancel(
 seq.getAndIncrement(),
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.cancel(message, cause);
 }
 };
 }
 };
 }
&lt;/code>&lt;/pre></description></item></channel></rss>