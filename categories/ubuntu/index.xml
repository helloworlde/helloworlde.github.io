<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ubuntu on HelloWood</title><link>https://blog.hellowood.dev/categories/ubuntu/</link><description>Recent content in Ubuntu on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 16 Sep 2024 03:41:36 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/categories/ubuntu/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Ubuntu 搭建 NFS 服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-ubuntu-%E6%90%AD%E5%BB%BA-nfs-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 27 Jan 2024 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-ubuntu-%E6%90%AD%E5%BB%BA-nfs-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>NFS(Network File System) 是由 Sun 公司提出的分布式文件系统协议，可以通过网络共享远程目录；默认没有加密，不提供身份验证，而是通过客户端 IP 或主机名限制客户端的访问&lt;/p>
&lt;h2 id="搭建-server-端">搭建 Server 端&lt;/h2>
&lt;h3 id="安装-nfs-kernel-server">安装 nfs-kernel-server&lt;/h3>
&lt;p>NFS 的 Server 端由 &lt;code>nfs-kernel-server&lt;/code> 提供，使用 apt 进行安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install -y nfs-kernel-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后，使用 &lt;code>systemctl&lt;/code> 查看状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl status nfs-mountd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>● nfs-mountd.service - NFS Mount Daemon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Loaded: loaded &lt;span style="color:#c7bf54">(&lt;/span>/lib/systemd/system/nfs-mountd.service; static&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Active: active &lt;span style="color:#c7bf54">(&lt;/span>running&lt;span style="color:#c7bf54">)&lt;/span> since Thu 2022-09-22 18:43:43 CST; 1h 5min ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Main PID: &lt;span style="color:#d19a66">128914&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>rpc.mountd&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tasks: &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>limit: 4415&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Memory: 556.0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU: 59ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CGroup: /system.slice/nfs-mountd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─128914 /usr/sbin/rpc.mountd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp systemd&lt;span style="color:#c7bf54">[&lt;/span>1&lt;span style="color:#c7bf54">]&lt;/span>: Starting NFS Mount Daemon...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp rpc.mountd&lt;span style="color:#c7bf54">[&lt;/span>128914&lt;span style="color:#c7bf54">]&lt;/span>: Version 2.6.1 starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp systemd&lt;span style="color:#c7bf54">[&lt;/span>1&lt;span style="color:#c7bf54">]&lt;/span>: Started NFS Mount Daemon.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改-nfs-配置">修改 NFS 配置&lt;/h3>
&lt;ul>
&lt;li>创建挂载目录并修改权限&lt;/li>
&lt;/ul>
&lt;p>首先，创建需要分享的目录，如 &lt;code>/data/nfs&lt;/code>&lt;/p></description></item><item><title>Ubuntu 22 环境初始化</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sun, 07 Jan 2024 18:03:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;p>在搭建 HomeLab 测试使用过程中，可能会经常创建新的 Ubuntu 虚拟机，或初始化树莓派，记录一些常用的初始化配置&lt;/p>
&lt;h2 id="修改主机名">修改主机名&lt;/h2>
&lt;p>将主机名改为 &lt;code>homelab&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hostnamectl hostname homelab
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="引入-ssh-公钥">引入 SSH 公钥&lt;/h2>
&lt;ul>
&lt;li>从本地导入&lt;/li>
&lt;/ul>
&lt;p>在本地执行，将公钥复制到要登录的机器上&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh-copy-id -i ~/.ssh/id_rsa.pub ubuntu@192.168.2.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-apt-源">修改 APT 源&lt;/h2>
&lt;p>将默认的 APT 源替换为&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华&lt;/a>的源&lt;/p>
&lt;ul>
&lt;li>修改镜像源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv /etc/apt/sources.list /etc/apt/sources.list.backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo bash -c &lt;span style="color:#63c381">&amp;#34;cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/apt/sources.list &amp;amp;&amp;amp; apt update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">EOF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 update 验证&lt;/p></description></item><item><title>树莓派 4b 使用 WiFi 从 SSD Headless 启动</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-wifi-%E4%BB%8E-ssd-headless-%E5%90%AF%E5%8A%A8/</link><pubDate>Sat, 24 Apr 2021 21:21:27 +0000</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-wifi-%E4%BB%8E-ssd-headless-%E5%90%AF%E5%8A%A8/</guid><description>&lt;p>树莓派已经默认支持从 SSD 启动，可以根据官方提供的工具初始化树莓派系统并启动；尝试通过安装 Ubuntu Server，不使用网线、显示器、键盘等，从 SSD 直接启动&lt;/p>
&lt;h2 id="依赖">依赖&lt;/h2>
&lt;ul>
&lt;li>树莓派 4&lt;/li>
&lt;li>Mac&lt;/li>
&lt;li>SSD&lt;/li>
&lt;/ul>
&lt;h2 id="安装-ubuntu-server">安装 Ubuntu Server&lt;/h2>
&lt;h3 id="1-安装-raspberry-pi-imager">1. 安装 Raspberry Pi Imager&lt;/h3>
&lt;p>Raspberry Pi Imager 是官方提供的树莓派镜像写入工具，可以通过 UI 操作，选择树莓派支持的系统，并直接写入到 SSD 或者 SD 卡中&lt;/p>
&lt;p>直接从 &lt;a href="https://www.raspberrypi.org/software/">https://www.raspberrypi.org/software/&lt;/a> 下载 Raspberry Pi Imager，并在 Mac 上安装&lt;/p>
&lt;h3 id="2-写入镜像">2. 写入镜像&lt;/h3>
&lt;p>选择 Ubuntu Server 21.04 64 bit 的镜像，第一次可能需要一些时间下载镜像&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiImagerChooseImage.png" alt="RaspberryPiImagerChooseImage.png">&lt;/p>
&lt;p>插入硬盘后选择要写入的硬盘，并点击写入&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiImagerChooseDisk.png" alt="RaspberryPiImagerChooseDisk.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiImageWriting.png" alt="RaspberryPiImageWriting.png">&lt;/p>
&lt;h3 id="3-配置">3. 配置&lt;/h3>
&lt;p>硬盘镜像写入完成后，会挂载一个名为 &lt;code>system-boot&lt;/code>的目录，进入该目录，修改配置&lt;/p>
&lt;h4 id="挂载文件">挂载文件&lt;/h4>
&lt;p>如果可以直接在 Mac 上修改文件，可以跳过这一步；如果文件是只读的，无法修改，可以将磁盘弹出，然后手动挂载或挂载到其他的机器上修改&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 查找磁盘&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fdisk -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disk /dev/mmcblk0: 59.63 GiB, &lt;span style="color:#d19a66">64021856256&lt;/span> bytes, &lt;span style="color:#d19a66">125042688&lt;/span> sectors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Units: sectors of &lt;span style="color:#d19a66">1&lt;/span> * &lt;span style="color:#dcaeea">512&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sector size &lt;span style="color:#c7bf54">(&lt;/span>logical/physical&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">512&lt;/span> bytes / &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I/O size &lt;span style="color:#c7bf54">(&lt;/span>minimum/optimal&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">512&lt;/span> bytes / &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disklabel type: dos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disk identifier: 0x4ec8ea53
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Device Boot Start End Sectors Size Id Type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mmcblk0p1 * &lt;span style="color:#d19a66">2048&lt;/span> &lt;span style="color:#d19a66">526335&lt;/span> &lt;span style="color:#d19a66">524288&lt;/span> 256M c W95 FAT32 &lt;span style="color:#c7bf54">(&lt;/span>LBA&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mmcblk0p2 &lt;span style="color:#d19a66">526336&lt;/span> &lt;span style="color:#d19a66">6366175&lt;/span> &lt;span style="color:#d19a66">5839840&lt;/span> 2.8G &lt;span style="color:#d19a66">83&lt;/span> Linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要修改的配置就在 &lt;code>/dev/mmcblk0p1&lt;/code> 这个用于 Boot 的目录下&lt;/p></description></item><item><title>树莓派 4b 无网线安装 Ubuntu 并初始化</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E6%97%A0%E7%BD%91%E7%BA%BF%E5%AE%89%E8%A3%85-ubuntu-%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sun, 15 Dec 2019 22:42:04 +0000</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E6%97%A0%E7%BD%91%E7%BA%BF%E5%AE%89%E8%A3%85-ubuntu-%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;blockquote>
&lt;p>必需设备：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>树莓派 4b&lt;/li>
&lt;li>SD 卡&lt;/li>
&lt;li>HDMI 线&lt;/li>
&lt;li>显示器&lt;/li>
&lt;li>键盘&lt;/li>
&lt;li>电源及数据线&lt;/li>
&lt;/ul>
&lt;h2 id="设置镜像">设置镜像&lt;/h2>
&lt;p>在树莓派官网的连接，找到 Ubuntu，根据指引，找到 Ubuntu 的镜像，即&lt;a href="https://ubuntu.com/download/raspberry-pi">https://ubuntu.com/download/raspberry-pi&lt;/a>
&lt;img src="https://img.hellowood.dev/picture/raspberrypi-ubuntu.png" alt="raspberrypi-ubuntu.png">&lt;/p>
&lt;h3 id="下载镜像">下载镜像&lt;/h3>
&lt;p>点击下载 64 位镜像，随后会开始下载&lt;a href="http://cdimage.ubuntu.com/releases/19.10.1/release/ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz?_ga=2.165606655.1314896456.1576331584-894154124.1576331584">ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz&lt;/a>这个文件&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-ubuntu-download.png" alt="raspberrypi-ubuntu-download.png">&lt;/p>
&lt;p>但是这个文件下载很慢，也没有国内的镜像，可以使用迅雷下载，或者直接下载上传的镜像 &lt;a href="https://img.hellowood.dev/picture/ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz">ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz&lt;/a>&lt;/p>
&lt;h3 id="刻录镜像">刻录镜像&lt;/h3>
&lt;h4 id="格式化-sd卡">格式化 SD卡&lt;/h4>
&lt;p>刻录镜像前，要先将 SD 卡格式化，在 Mac 上，可以使用官方推荐的&lt;a href="https://www.sdcard.org/downloads/formatter/">SD Card Formatter&lt;/a>, 也可以用上传到地址进行下载Mac 版：&lt;a href="https://img.hellowood.dev/picture/SDCardFormatterv5_Mac.zip">SDCardFormatterv5_Mac.zip&lt;/a>&lt;/p>
&lt;h4 id="刻录镜像-1">刻录镜像&lt;/h4>
&lt;p>刻录镜像有多种方式，不同平台操作不同，可以参考 &lt;a href="https://ubuntu.com/download/iot/installation-media">https://ubuntu.com/download/iot/installation-media&lt;/a>&lt;/p>
&lt;p>在 Mac 上，可以用官方推荐的软件&lt;a href="https://www.balena.io/etcher">balenaEtcher&lt;/a>，可以从上传的位置下载&lt;a href="https://img.hellowood.dev/picture/balenaEtcher-1.5.70.dmg">balenaEtcher-1.5.70.dmg&lt;/a>，也可以直接用命令行执行&lt;/p>
&lt;ul>
&lt;li>查找 SD 卡挂载名称&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>diskutil list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>/dev/disk0 (internal, physical):
 #: TYPE NAME SIZE IDENTIFIER
 0: GUID_partition_scheme *500.3 GB disk0
 1: EFI EFI 314.6 MB disk0s1
 2: Apple_APFS Container disk1 500.0 GB disk0s2

/dev/disk1 (synthesized):
 #: TYPE NAME SIZE IDENTIFIER
 0: APFS Container Scheme - +500.0 GB disk1
 Physical Store disk0s2
 1: APFS Volume Macintosh HD - 数据 280.9 GB disk1s1
 2: APFS Volume Preboot 82.4 MB disk1s2
 3: APFS Volume Recovery 528.5 MB disk1s3
 4: APFS Volume VM 8.6 GB disk1s4
 5: APFS Volume Macintosh HD 10.8 GB disk1s5
/dev/disk3
#: TYPE NAME SIZE IDENTIFIER
0: FDisk_partition_scheme *32.0 GB disk3
1: DOS_FAT_32 SD 32.0 GB disk3s1
&lt;/code>&lt;/pre>&lt;p>其中的 &lt;code>/dev/disk3&lt;/code>就是 SD卡&lt;/p></description></item><item><title>Ubuntu/Docker 替换软件源</title><link>https://blog.hellowood.dev/posts/ubuntu-docker-%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</link><pubDate>Mon, 27 May 2019 15:06:43 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-docker-%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</guid><description>&lt;h2 id="ubuntu">Ubuntu&lt;/h2>
&lt;h3 id="使用-sed-命令">使用 sed 命令&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo sed -i &lt;span style="color:#98c379">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apt/sources.list/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="手动修改">手动修改&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> /etc/apt/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mv sources.list sources.list.bak
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo vi sources.list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入以下内容&lt;/p>
&lt;pre tabindex="0">&lt;code>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse

deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse

deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse

deb http://archive.canonical.com/ubuntu/ xenial partner
deb http://extras.ubuntu.com/ubuntu/ xenial main
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-alpine-镜像替换软件源">Docker alpine 镜像替换软件源&lt;/h2>
&lt;h3 id="在-dockerfile-中添加">在 Dockerfile 中添加&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> sed -i &lt;span style="color:#98c379">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apk/repositories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改容器中软件源">修改容器中软件源&lt;/h3>
&lt;h4 id="使用-sed-命令-1">使用 sed 命令&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="color:#98c379">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apk/repositories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="手动修改-1">手动修改&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi etc/apk/repositories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入以下内容&lt;/p></description></item><item><title>Ubuntu 搭建 ShadowSocks 服务</title><link>https://blog.hellowood.dev/posts/ubuntu-%E6%90%AD%E5%BB%BA-shadowsocks-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 21 Oct 2018 22:39:52 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-%E6%90%AD%E5%BB%BA-shadowsocks-%E6%9C%8D%E5%8A%A1/</guid><description>&lt;blockquote>
&lt;p>在 Ubuntu 服务器上通过脚本安装 ShadowSocks 服务&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>来自 &lt;a href="https://teddysun.com/342.html">https://teddysun.com/342.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>下载安装脚本&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>改变脚本执行权限&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>chmod +x shadowsocks.sh
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>./shadowsocks.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks.log
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加配置
在执行过程中会提示设置端口，密码，加密算法等配置，根据需要自己选择即可，端口默认&lt;code>8899&lt;/code>，加密算法可选&lt;code>aes-256-cfb&lt;/code>，适合大多数设备使用&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Congratulations, Shadowsocks-python server install completed!
Your Server IP : 127.0.0.1
Your Server Port : 8899
Your Password : password
Your Encryption Method: aes-256-cfb

Welcome to visit:https://teddysun.com/342.html
Enjoy it!
&lt;/code>&lt;/pre>&lt;p>安装完成，在客户端设备添加配置即可&lt;/p>
&lt;ul>
&lt;li>
&lt;p>后续修改设置可以在 &lt;code>/etc/shadowsocks.json&lt;/code>中修改&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多账户多端口配置，修改配置文件 &lt;code>/etc/shadowsocks.json&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;server&amp;#34;:&amp;#34;0.0.0.0&amp;#34;,
 &amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;,
 &amp;#34;local_port&amp;#34;:1080,
 &amp;#34;port_password&amp;#34;:{
 &amp;#34;8989&amp;#34;:&amp;#34;password0&amp;#34;,
 &amp;#34;9001&amp;#34;:&amp;#34;password1&amp;#34;,
 &amp;#34;9002&amp;#34;:&amp;#34;password2&amp;#34;,
 &amp;#34;9003&amp;#34;:&amp;#34;password3&amp;#34;,
 &amp;#34;9004&amp;#34;:&amp;#34;password4&amp;#34;
 },
 &amp;#34;timeout&amp;#34;:300,
 &amp;#34;method&amp;#34;:&amp;#34;your_encryption_method&amp;#34;,
 &amp;#34;fast_open&amp;#34;: false
}
&lt;/code>&lt;/pre>&lt;h2 id="卸载">卸载&lt;/h2>
&lt;pre tabindex="0">&lt;code>./shadowsocks.sh uninstall
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu 服务器上传和下载文件</title><link>https://blog.hellowood.dev/posts/ubuntu-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 10 Apr 2018 14:47:07 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</guid><description>&lt;p>使用 &lt;code>scp&lt;/code> 命令完成文件的上传和下载&lt;/p>
&lt;h2 id="上传">上传&lt;/h2>
&lt;ul>
&lt;li>上传单个文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p port source_dictionary_file user@ServerIp:target_dictionary_file
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>prot 默认是22，如果使用默认可以不写&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>scp /User/hellowood/wechat.jpg root@192.168.0.2:/home/hellowood/wechat.jpg
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>上传整个文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p port -r source_dictionary user@ServerIp:target_dictionary
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>scp -r /User/hellowood/tomcat root@192.168.0.2:/home/hellowood/tomcat
&lt;/code>&lt;/pre>&lt;h2 id="下载">下载&lt;/h2>
&lt;ul>
&lt;li>下载单个文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p user@ServerIp:source_dictionary_file target_dictionary
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>scp root@192.168.0.2:/home/hellowood/wechat.jpg /User/hellowood/wechat.jpg
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>下载文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p port -r user@ServerIp:source_dictionary target_dictionry
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>scp -r root@192.168.0.2:/home/hellowood/tomcat /User/hellowood/tomcat
&lt;/code>&lt;/pre></description></item><item><title>Docker 配置 Nginx 访问宿主机目录下的应用</title><link>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AE-nginx-%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 10 Apr 2018 11:39:09 +0000</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AE-nginx-%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>使用 Nginx 将请求转发到宿主机的 Tomcat 应用&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置并启动-tomcat">配置并启动 Tomcat&lt;/h2>
&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;h2 id="配置-nginx">配置 Nginx&lt;/h2>
&lt;ul>
&lt;li>创建配置和日志文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>mkdir /home/nginx/conf
mkdir /home/nginx/logs
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>查询宿主机 IP&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker inspect --format &amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39; &amp;lt;container-ID&amp;gt;

# 或
docker inspect &amp;lt;container id&amp;gt;

# 或
docker inspect -f &amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; container_name_or_id
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加配置文件 &lt;code>nginx.conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>将 &lt;code>8084&lt;/code>端口转发到&lt;code>8080&lt;/code>端口，使用 &lt;code>log_format&lt;/code>目的是为了使用阿里云监控切分日志，可以没有&lt;/p>
&lt;pre tabindex="0">&lt;code>log_format proxyformat &amp;#34;$remote_addr $request_time $http_x_readtime [$time_local] \&amp;#34;$request_method http://$host$request_uri\&amp;#34; $status $body_bytes_sent \&amp;#34;$http_referer\&amp;#34; \&amp;#34;$upstream_addr\&amp;#34; \&amp;#34;$http_user_agent\&amp;#34; \&amp;#34;$upstream_response_time\&amp;#34; \&amp;#34;$request_time\&amp;#34;&amp;#34;;


 server {
 listen 80;
 server_name ali.hellowood.com.cn;
 location / {
 proxy_pass http://172.17.0.1:8080;
 proxy_set_header Host $http_host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>需要注意的是，Docker 会默认使用桥接路由，所以其 IP 和宿主机的 IP 位于同一 IP 段，并且默认宿主机的 IP 为第一个，即如果 Docker 的 IP 为 &lt;code>10.1.0.2&lt;/code>, 则可以通过 访问 &lt;code>10.1.0.1&lt;/code> 访问到宿主机&lt;/p></description></item><item><title>Docker 配置Ubuntu 下 Tomcat 和 Nginx 使用 HTTPS 访问</title><link>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AEubuntu-%E4%B8%8B-tomcat-%E5%92%8C-nginx-%E4%BD%BF%E7%94%A8-https-%E8%AE%BF%E9%97%AE/</link><pubDate>Sun, 08 Apr 2018 15:38:01 +0000</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AEubuntu-%E4%B8%8B-tomcat-%E5%92%8C-nginx-%E4%BD%BF%E7%94%A8-https-%E8%AE%BF%E9%97%AE/</guid><description>&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;h3 id="使用脚本自动安装">使用脚本自动安装&lt;/h3>
&lt;pre tabindex="0">&lt;code>curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh --mirror Aliyun
&lt;/code>&lt;/pre>&lt;h3 id="更改镜像地址">更改镜像地址&lt;/h3>
&lt;ul>
&lt;li>修改或新建 &lt;code>/etc/docker/daemon.json&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;registry-mirrors&amp;#34;: [
 &amp;#34;https://registry.docker-cn.com&amp;#34;
 ]
}
&lt;/code>&lt;/pre>&lt;h3 id="启动-docker">启动 Docker&lt;/h3>
&lt;pre tabindex="0">&lt;code>sudo systemctl daemon-reload
sudo systemctl enable docker
sudo systemctl start docker
&lt;/code>&lt;/pre>&lt;h2 id="配置-tomcat">配置 Tomcat&lt;/h2>
&lt;h3 id="启动-tomcat-容器">启动 Tomcat 容器&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker pull tomcat
docker run --name tomcat -d -p 8080:8080 tomcat
&lt;/code>&lt;/pre>&lt;h3 id="修改-tomcat-manager-应用">修改 Tomcat Manager 应用&lt;/h3>
&lt;ul>
&lt;li>修改 &lt;code>webapps/manager/META-INF/content.xml&lt;/code>，允许需要的IP访问，这里运行所有的IP访问&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;Context antiResourceLocking=&amp;#34;false&amp;#34; privileged=&amp;#34;true&amp;#34; &amp;gt;
 &amp;lt;Valve className=&amp;#34;org.apache.catalina.valves.RemoteAddrValve&amp;#34;
 allow=&amp;#34;^.*$&amp;#34; /&amp;gt;
 &amp;lt;Manager sessionAttributeValueClassNameFilter=&amp;#34;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&amp;#34;/&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="配置-tomcat-用户">配置 Tomcat 用户&lt;/h3>
&lt;ul>
&lt;li>修改 &lt;code>conf/tomcat-user.xml&lt;/code>，添加用户&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;role rolename=&amp;#34;admin-gui&amp;#34;/&amp;gt;
&amp;lt;role rolename=&amp;#34;manager-gui&amp;#34;/&amp;gt;
&amp;lt;user username=&amp;#34;tomcat&amp;#34; password=&amp;#34;tomcat&amp;#34; roles=&amp;#34;manager-gui,admin-gui&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="配置-nginx">配置 Nginx&lt;/h2>
&lt;h3 id="配置目录">配置目录&lt;/h3>
&lt;ul>
&lt;li>新建目录 &lt;code>/home/ubuntu/hellowood/dev/nginx/conf&lt;/code>, &lt;code>/home/ubuntu/hellowood/dev/nginx/log&lt;/code>, &lt;code>/home/ubuntu/hellowood/dev/nginx/certs&lt;/code>&lt;/li>
&lt;li>下载并解压相应的Nginx证书文件到 &lt;code>/home/ubuntu/hellowood/dev/nginx/conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="添加-nginx-配置">添加 Nginx 配置&lt;/h3>
&lt;ul>
&lt;li>nginx.conf&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>server {
 listen 80;
 listen 443 ssl;
 server_name hellowood.com.cn;
 ssl_certificate /etc/nginx/certs/hellowood.com.cn_bundle.crt;
 ssl_certificate_key /etc/nginx/certs/hellowood.com.cn.key;
 location / {
 proxy_pass http://tomcat:8080;
 }
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>http://tomcat:8080&lt;/code>: 将所有请求都转发到 &lt;code>tomcat&lt;/code> 容器的 &lt;code>8080&lt;/code>端口(不是映射端口)&lt;/p></description></item><item><title>Ubuntu安装配置 Jenkins</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-jenkins/</link><pubDate>Mon, 01 Jan 2018 12:12:32 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-jenkins/</guid><description>&lt;blockquote>
&lt;p>在 Ubuntu 下 Jenkins 服务&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-安装">1. 安装&lt;/h2>
&lt;ul>
&lt;li>安装前确认JDK环境配置是正确的&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c &amp;#39;echo deb http://pkg.jenkins.io/debian-stable binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&amp;#39;

sudo apt-get update
sudo apt-get install jenkins
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>等待安装完成，如果默认的8080端口没有被占用，则会自动启动 Jenkins 服务， 如果有其他程序占用了 8080 端口，则 Jenkins 会启动失败
##2. 更改 Jenkins 端口
需要更改两个文件&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>修改&lt;code>/etc/default/jenkins&lt;/code>文件，将 &lt;code>HTTP_PORT=8080&lt;/code>更改为你需要的端口&lt;/li>
&lt;li>修改&lt;code>/etc/init.d/jenkins&lt;/code>文件，将&lt;code>do_start&lt;/code>函数的&lt;code>check_tcp_port&lt;/code>命令改为需要的端口&lt;/li>
&lt;/ul>
&lt;p>##3. 启动 Jenkins 服务&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo /etc/init.d/jenkins start
&lt;/code>&lt;/pre>&lt;p>##4. 访问并配置&lt;/p>
&lt;blockquote>
&lt;p>访问 Jenkins 的地址，会要求填写 Jenkins 的密码，该密码可以在&lt;code>/var/log/jenkins/jenkins.log&lt;/code>中找到&lt;/p>
&lt;/blockquote></description></item><item><title>Ubuntu安装JDK</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85jdk/</link><pubDate>Mon, 01 Jan 2018 12:11:39 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85jdk/</guid><description>&lt;hr>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>1 创建文件夹&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir java
&lt;/code>&lt;/pre>&lt;p>2 下载JDK&lt;/p>
&lt;blockquote>
&lt;p>JDK 下载地址&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>wget --no-check-certificate --no-cookies --header &amp;#34;Cookie: oraclelicense=accept-securebackup-cookie&amp;#34; http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz
&lt;/code>&lt;/pre>&lt;p>3 解压&lt;/p>
&lt;pre tabindex="0">&lt;code> tar -zxvf jdk-8u144-linux-x64.tar.gz
&lt;/code>&lt;/pre>&lt;p>4 配置环境变量&lt;/p>
&lt;ul>
&lt;li>编辑配置文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo vim ~/.bash_profile
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>输入以下内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>export JAVA_HOME=/home/ubuntu/java/jdk1.8.0_144
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>使配置生效&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>source ~/.bash_profile
&lt;/code>&lt;/pre>&lt;p>5 检查是否配置正确&lt;/p>
&lt;pre tabindex="0">&lt;code>java -version
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>出现以下内容：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
ubuntu@local:~/java/jdk1.8.0_144$
&lt;/code>&lt;/pre>&lt;p>6 查看JDK的路径&lt;/p>
&lt;pre tabindex="0">&lt;code>whereis java
which java （java执行路径）
echo $JAVA_HOME
echo $PATH
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu安装 Nginx</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-nginx/</link><pubDate>Mon, 01 Jan 2018 12:10:38 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-nginx/</guid><description>&lt;blockquote>
&lt;p>在 Ubuntu 上安装 Nginx&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo apt-get install nginx
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>目录结构
&lt;ul>
&lt;li>所有文件都在 &lt;code>/etc/nginx/&lt;/code>目录下&lt;/li>
&lt;li>程序文件在&lt;code>/user/local/nginx/sbin/&lt;/code>目录下&lt;/li>
&lt;li>日志在&lt;code>/var/log/nginx/&lt;/code>目录下&lt;/li>
&lt;li>启动脚本为&lt;code>/etc/init.d/nginx&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;pre tabindex="0">&lt;code> sudo /etc/init.d/nginx start
&lt;/code>&lt;/pre>&lt;hr>
&lt;h1 id="nginx-源代码安装">Nginx 源代码安装&lt;/h1>
&lt;h2 id="安装-1">安装&lt;/h2>
&lt;ul>
&lt;li>下载&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> cd /usr/local
 //下载源码
 wget http://nginx.org/download/nginx-1.2.8.tar.gz

 // 解压
 tar -zxcf nginx-1.2.8.tar.gz
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>安装依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo apt-get install libpcre3
 sudo apt-get install libpcre3-dev
 sudo apt-get install zlib1g-dev
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>编译安装&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> cd nginx-1.2.8
 // 检查环境
 ./configure

 // 编译
 make

 // 安装
 make install
&lt;/code>&lt;/pre>&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>默认启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> cd /usr/local/nginx

 // 启动
 sbin/nginx
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置快捷启动方式&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> // 创建启动脚本
 sudo vi /etc/init.d/nginx

 // 增加执行权限
 sudo chmod a+x /etc/init.d/nginx

 // 启动
 sudo /etc/init.d/nginx start
 // 停止
 sudo /etc/init.d/nginx stop
 // 重启
 sudo /etc/init.d/nginx restart
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu安装 Redis -编译方式安装</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-redis-%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 2018 12:09:09 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-redis-%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</guid><description>&lt;blockquote>
&lt;p>使用 &lt;code>sudo apt install redis-server&lt;/code>安装的 Redis 并不是最新的，通过在官网下载来安装最新的 Redis&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-创建文件夹">1 创建文件夹&lt;/h2>
&lt;pre tabindex="0">&lt;code>mkdir redis
&lt;/code>&lt;/pre>&lt;h2 id="2-下载-redis">2 下载 Redis&lt;/h2>
&lt;pre tabindex="0">&lt;code>wget http://download.redis.io/releases/redis-4.0.1.tar.gz
&lt;/code>&lt;/pre>&lt;h2 id="3-解压">3 解压&lt;/h2>
&lt;pre tabindex="0">&lt;code> tar -xzvf redis-4.0.1.tar.gz
&lt;/code>&lt;/pre>&lt;h2 id="4-编译安装">4 编译安装&lt;/h2>
&lt;pre tabindex="0">&lt;code>cd redis-4.0.1
make
make test
sudo make install
&lt;/code>&lt;/pre>&lt;h2 id="5-配置">5 配置&lt;/h2>
&lt;ul>
&lt;li>设置登录密码&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># 取消注释requirepass
requirepass your_password
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>取消登录IP限制&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># 注释bind
# bind 127.0.0.1
&lt;/code>&lt;/pre>&lt;h2 id="6-启动">6 启动&lt;/h2>
&lt;pre tabindex="0">&lt;code>redis-server ./redis-4.0.1/redis.conf
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu搭建Redis服务器</title><link>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAredis%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 12:08:07 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAredis%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>在Ubuntu中搭建Redis服务器&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>###1 安装&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install redis-server
&lt;/code>&lt;/pre>&lt;p>###2 启动&lt;/p>
&lt;pre tabindex="0">&lt;code>redis-server
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>5617:C 18 Sep 12:57:10.437 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
5617:M 18 Sep 12:57:10.437 * Increased maximum number of open files to 10032 (it was originally set to 1024).
 _._
 _.-``__ &amp;#39;&amp;#39;-._
 _.-`` `. `_. &amp;#39;&amp;#39;-._ Redis 3.0.6 (00000000/0) 64 bit
 .-`` .-```. ```\/ _.,_ &amp;#39;&amp;#39;-._
 ( &amp;#39; , .-` | `, ) Running in standalone mode
 |`-._`-...-` __...-.``-._|&amp;#39;` _.-&amp;#39;| Port: 6379
 | `-._ `._ / _.-&amp;#39; | PID: 5617
 `-._ `-._ `-./ _.-&amp;#39; _.-&amp;#39;
 |`-._`-._ `-.__.-&amp;#39; _.-&amp;#39;_.-&amp;#39;|
 | `-._`-._ _.-&amp;#39;_.-&amp;#39; | http://redis.io
 `-._ `-._`-.__.-&amp;#39;_.-&amp;#39; _.-&amp;#39;
 |`-._`-._ `-.__.-&amp;#39; _.-&amp;#39;_.-&amp;#39;|
 | `-._`-._ _.-&amp;#39;_.-&amp;#39; |
 `-._ `-._`-.__.-&amp;#39;_.-&amp;#39; _.-&amp;#39;
 `-._ `-.__.-&amp;#39; _.-&amp;#39;
 `-._ _.-&amp;#39;
 `-.__.-&amp;#39;

5617:M 18 Sep 12:57:10.438 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
5617:M 18 Sep 12:57:10.438 # Server started, Redis version 3.0.6
5617:M 18 Sep 12:57:10.438 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &amp;#39;vm.overcommit_memory = 1&amp;#39; to /etc/sysctl.conf and then reboot or run the command &amp;#39;sysctl vm.overcommit_memory=1&amp;#39; for this to take effect.
5617:M 18 Sep 12:57:10.438 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &amp;#39;echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled&amp;#39; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
5617:M 18 Sep 12:57:10.438 * DB loaded from disk: 0.000 seconds
5617:M 18 Sep 12:57:10.438 * The server is now ready to accept connections on port 6379
&lt;/code>&lt;/pre>&lt;p>###3 启动客户端&lt;/p></description></item><item><title>Ubuntu搭建Shadowsocks服务器</title><link>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 00:58:24 +0000</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>在Ubuntu环境中搭建Shadowsocks服务&lt;/p>
&lt;/blockquote>
&lt;p>##1 安装Shadowsocks&lt;/p>
&lt;pre tabindex="0">&lt;code># 更新apt-get
sudo apt-get update

# 安装python包管理工具
sudo apt-get install python-pip

# 安装Shadowsocks
pip install shadowsocks
&lt;/code>&lt;/pre>&lt;p>##2 配置Shadowsocks&lt;/p>
&lt;ul>
&lt;li>创建配置文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>mkdir shadowsocks
vi config.json
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在config.json文件中添加以下配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;server&amp;#34;: &amp;#34;0.0.0.0&amp;#34;,
 &amp;#34;server_port&amp;#34;: 8623,
 &amp;#34;local_address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
 &amp;#34;local_port&amp;#34;: 1080,
 &amp;#34;password&amp;#34;: &amp;#34;your password&amp;#34;,
 &amp;#34;timeout&amp;#34;: 300,
 &amp;#34;method&amp;#34;: &amp;#34;aes-256-cfb&amp;#34;,
 &amp;#34;fast_open&amp;#34;: false
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置说明&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">字段&lt;/th>
 &lt;th style="text-align: left">说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">server&lt;/td>
 &lt;td style="text-align: left">服务端监听地址&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">server_port&lt;/td>
 &lt;td style="text-align: left">服务端端口&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">local_address&lt;/td>
 &lt;td style="text-align: left">本地监听地址&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">local_port&lt;/td>
 &lt;td style="text-align: left">本地监听端口&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">password&lt;/td>
 &lt;td style="text-align: left">密码&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">timeout&lt;/td>
 &lt;td style="text-align: left">超时时间（秒）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">method&lt;/td>
 &lt;td style="text-align: left">加密方法&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">fast_open&lt;/td>
 &lt;td style="text-align: left">是否启用TCP-Fast-Open，true或者false&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>##3 启动Shadowsocks&lt;/p>
&lt;ul>
&lt;li>启动：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d start
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>停止：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d stop
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>重启：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d restart
&lt;/code>&lt;/pre>&lt;p>##4 设置开机自启动&lt;/p></description></item></channel></rss>