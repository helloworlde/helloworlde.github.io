<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thrift on HelloWood</title><link>https://blog.hellowood.dev/categories/thrift/</link><description>Recent content in Thrift on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Sat, 20 Feb 2021 22:34:46 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/categories/thrift/index.xml" rel="self" type="application/rss+xml"/><item><title>Thrfit 客户端请求处理流程</title><link>https://blog.hellowood.dev/posts/thrfit-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>使用同步的非阻塞的服务端和客户端的请求处理流程&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端实现">客户端实现&lt;/h3>
&lt;p>使用 &lt;code>TSocket&lt;/code> 作为底层连接，协议使用 &lt;code>TBinaryProtocol&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TSocket&lt;/span>(&lt;span style="color:#98c379">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transport&lt;/span>.&lt;span style="color:#b3d23c">open&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TProtocol&lt;/span> &lt;span style="color:#c1abea">protocol&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TBinaryProtocol&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Client&lt;/span> &lt;span style="color:#c1abea">client&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Client&lt;/span>(&lt;span style="color:#c1abea">protocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">setMessage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Thrift&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">client&lt;/span>.&lt;span style="color:#b3d23c">sayHello&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;返回响应: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">TException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;h3 id="1-建立连接">1. 建立连接&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">transport&lt;/span>.&lt;span style="color:#b3d23c">open&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>org.apache.thrift.transport.TSocket#open&lt;/li>
&lt;/ul>
&lt;p>初始化 Socket，建立连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">open&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">socket_&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 初始化 Socket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">initSocket&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 建立连接&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">socket_&lt;/span>.&lt;span style="color:#b3d23c">connect&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#c1abea">host_&lt;/span>, &lt;span style="color:#c1abea">port_&lt;/span>), &lt;span style="color:#c1abea">connectTimeout_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 初始化流&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">inputStream_&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedInputStream&lt;/span>(&lt;span style="color:#c1abea">socket_&lt;/span>.&lt;span style="color:#b3d23c">getInputStream&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">outputStream_&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedOutputStream&lt;/span>(&lt;span style="color:#c1abea">socket_&lt;/span>.&lt;span style="color:#b3d23c">getOutputStream&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">iox&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">throw&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>(&lt;span style="color:#c1abea">TTransportException&lt;/span>.&lt;span style="color:#b3d23c">NOT_OPEN&lt;/span>, &lt;span style="color:#c1abea">iox&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-执行请求">2. 执行请求&lt;/h3>
&lt;p>使用 &lt;code>TProtocol&lt;/code> 构建 &lt;code>TServiceClient&lt;/code>，用于发送同步请求&lt;/p></description></item><item><title>Thrfit 服务端请求处理流程</title><link>https://blog.hellowood.dev/posts/thrfit-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>使用同步的非阻塞的服务端的请求处理流程&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端实现">服务端实现&lt;/h3>
&lt;p>使用 &lt;code>TThreadedSelectorServer&lt;/code> 作为服务端，支持接收连接，处理 IO 事件，执行请求由不同的线程实现；底层连接使用 &lt;code>ServerSocket&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">NonblockingServer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@SneakyThrows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span> &lt;span style="color:#c1abea">helloService&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Processor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Iface&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">helloServiceProcessor&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Processor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">helloService&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TNonblockingServerTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TNonblockingServerSocket&lt;/span>(&lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 配置参数以及处理器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span> &lt;span style="color:#c1abea">serverArgs&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">selectorThreads&lt;/span>(&lt;span style="color:#c1abea">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">workerThreads&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">acceptQueueSizePerThread&lt;/span>(&lt;span style="color:#c1abea">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">processor&lt;/span>(&lt;span style="color:#c1abea">helloServiceProcessor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TServer&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>(&lt;span style="color:#c1abea">serverArgs&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;h3 id="1-启动-server">1. 启动 Server&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">TServer&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>(&lt;span style="color:#c1abea">serverArgs&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>org.apache.thrift.server.AbstractNonblockingServer#serve&lt;/li>
&lt;/ul>
&lt;p>启动 Server，启动用于连接的线程 &lt;code>AcceptThread&lt;/code> 和用于处理 IO 事件的多个线程 &lt;code>SelectorThread&lt;/code>；然后开始监听 IO 事件，由线程池处理请求&lt;/p></description></item><item><title>Thrift 客户端异步请求</title><link>https://blog.hellowood.dev/posts/thrift-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid><description>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端">客户端&lt;/h3>
&lt;p>异步客户端调用使用 &lt;code>AsyncClient&lt;/code>，传输层使用 &lt;code>TNonblockingSocket&lt;/code>；需要实现 &lt;code>AsyncMethodCallback&lt;/code>作为回调，用于处理请求结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">AsyncClient&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">InterruptedException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建异步客户端&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TAsyncClientManager&lt;/span> &lt;span style="color:#c1abea">clientManager&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TAsyncClientManager&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TProtocolFactory&lt;/span> &lt;span style="color:#c1abea">protocolFactory&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TBinaryProtocol&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncClient&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span> &lt;span style="color:#c1abea">factory&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncClient&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span>(&lt;span style="color:#c1abea">clientManager&lt;/span>, &lt;span style="color:#c1abea">protocolFactory&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TNonblockingTransport&lt;/span> &lt;span style="color:#c1abea">nonblockingTransport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TNonblockingSocket&lt;/span>(&lt;span style="color:#98c379">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncClient&lt;/span> &lt;span style="color:#c1abea">asyncClient&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">factory&lt;/span>.&lt;span style="color:#b3d23c">getAsyncClient&lt;/span>(&lt;span style="color:#c1abea">nonblockingTransport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 异步回调&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">AsyncMethodCallback&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">callback&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">AsyncMethodCallback&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onComplete&lt;/span>(&lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;响应结果: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onError&lt;/span>(&lt;span style="color:#c1abea">Exception&lt;/span> &lt;span style="color:#c1abea">exception&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">error&lt;/span>(&lt;span style="color:#98c379">&amp;#34;请求失败: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">exception&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>(), &lt;span style="color:#c1abea">exception&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">setMessage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Async Thrift&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">asyncClient&lt;/span>.&lt;span style="color:#b3d23c">sayHello&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">callback&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">TException&lt;/span> &lt;span style="color:#c7bf54">|&lt;/span> &lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Thread&lt;/span>.&lt;span style="color:#b3d23c">sleep&lt;/span>(&lt;span style="color:#c1abea">3_000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;h3 id="构建-client-和回调">构建 Client 和回调&lt;/h3>
&lt;h4 id="1-构建-client">1. 构建 Client&lt;/h4>
&lt;p>异步的客户端由抽象类 &lt;code>TAsyncClient&lt;/code> 定义，实现类继承了 &lt;code>TAsyncClient&lt;/code>，同时实现了 &lt;code>AsyncIface&lt;/code>；
在构建其 Factory 时需要三个参数，分别是 &lt;code>TAsyncClientManager&lt;/code>，用于管理调用请求的所有流程；和 &lt;code>TProtocolFactory&lt;/code>，用于获取协议；还有 &lt;code>TNonblockingTransport&lt;/code>，用于底层的传输，必须是非阻塞的&lt;/p></description></item><item><title>Thrift 中的 Transport</title><link>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-transport/</link><pubDate>Mon, 01 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-transport/</guid><description>&lt;p>Thrift 中有 &lt;code>TTransport&lt;/code> 和 &lt;code>TServerTransport&lt;/code>，封装了底层传输层的数据读写；分别用于客户端和服务端&lt;/p>
&lt;h2 id="ttransport">TTransport&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-java-source-class-transport.png" alt="thrift-java-source-class-transport.png">&lt;/p>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>open&lt;/li>
&lt;/ul>
&lt;p>用于建立与 Server 端的连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">open&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>close&lt;/li>
&lt;/ul>
&lt;p>关闭连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">close&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>read&lt;/li>
&lt;/ul>
&lt;p>用于读取数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#00b1f7">read&lt;/span>(&lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">buf&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">off&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">len&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>write&lt;/li>
&lt;/ul>
&lt;p>用于写入数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">write&lt;/span>(&lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">buf&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">off&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">len&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>flush&lt;/li>
&lt;/ul>
&lt;p>清空缓冲区中的数据，发送给服务端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">flush&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现类">实现类&lt;/h3>
&lt;h4 id="非封装的-transport">非封装的 Transport&lt;/h4>
&lt;ul>
&lt;li>&lt;code>TNonblockingTransport&lt;/code>: 非阻塞的 Transport 的抽象类，底层使用 NIO&lt;/li>
&lt;li>&lt;code>TNonblockingSocket&lt;/code>: &lt;code>TNonblockingTransport&lt;/code> 的实现类，基于 SocketChannel 的 Transport，是非阻塞的&lt;/li>
&lt;li>&lt;code>TIOStreamTransport&lt;/code>: 基于 IO 流的 Transport&lt;/li>
&lt;li>&lt;code>TSocket&lt;/code>: &lt;code>TIOStreamTransport&lt;/code> 的子类，底层使用 &lt;code>Socket&lt;/code>&lt;/li>
&lt;li>&lt;code>TSimpleFileTransport&lt;/code>：基于文件的 Transport，会将流写入文件或者从文件读取流&lt;/li>
&lt;li>&lt;code>TFileTransport&lt;/code>: 基于文件的 Transport，会将流写入文件或者从文件读取流&lt;/li>
&lt;li>&lt;code>THttpClient&lt;/code>：基于 &lt;code>HttpClient&lt;/code> 或 &lt;code>HttpURLConnection&lt;/code>，会通过 HTTP 的方式发送请求，通常用于 &lt;code>TServlet&lt;/code> 的服务端&lt;/li>
&lt;li>&lt;code>ByteBuffer&lt;/code>: 基于 ByteBuffer 的 Transport&lt;/li>
&lt;li>&lt;code>TMemoryInputTransport&lt;/code>：基于内存数组的 Transport，会从底层的数组读取，用于测试场景&lt;/li>
&lt;li>&lt;code>TMemoryBuffer&lt;/code>：使用内存数组作为缓冲区的 Transport，用于测试场景&lt;/li>
&lt;/ul>
&lt;h4 id="封装的-transport">封装的 Transport&lt;/h4>
&lt;ul>
&lt;li>&lt;code>TZlibTransport&lt;/code>: 压缩的 Transport，会将流压缩后再发送&lt;/li>
&lt;li>&lt;code>AutoExpandingBufferReadTransport&lt;/code>: 可扩展读缓冲区的 Transport，使用可变数组作为缓冲区&lt;/li>
&lt;li>&lt;code>AutoExpandingBufferWriteTransport&lt;/code>: 可扩展写缓冲区的 Transport，使用可变数组作为缓冲区&lt;/li>
&lt;li>&lt;code>TSaslTransport&lt;/code>：支持 SASL(Simple Authentication and Security Layer) 认证的 Transport，有两个实现类，用于客户端的&lt;code>TSaslClientTransport&lt;/code> 和用于服务端的 &lt;code>TSaslServerTransport&lt;/code>&lt;/li>
&lt;li>&lt;code>TFramedTransport&lt;/code>：缓冲的 Transport，通过在前面带有4字节帧大小的消息来确保每次都完全读取消息&lt;/li>
&lt;li>&lt;code>TFastFramedTransport&lt;/code>： 复用并扩展了读写缓冲区的 Transport，避免每次都创建新的 byte 数组&lt;/li>
&lt;/ul>
&lt;h2 id="tservertransport">TServerTransport&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-java-source-class-server-transport.png" alt="thrift-java-source-class-server-transport.png">&lt;/p></description></item><item><title>Thrift 服务端异步请求</title><link>https://blog.hellowood.dev/posts/thrift-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</link><pubDate>Mon, 01 Feb 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid><description>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端">服务端&lt;/h3>
&lt;ul>
&lt;li>Server&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">AsyncServer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@SneakyThrows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloServiceAsyncImpl&lt;/span> &lt;span style="color:#c1abea">helloService&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceAsyncImpl&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncProcessor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncIface&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">helloServiceProcessor&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncProcessor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">helloService&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TNonblockingServerTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TNonblockingServerSocket&lt;/span>(&lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 配置参数以及处理器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span> &lt;span style="color:#c1abea">serverArgs&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">selectorThreads&lt;/span>(&lt;span style="color:#c1abea">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">workerThreads&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">acceptQueueSizePerThread&lt;/span>(&lt;span style="color:#c1abea">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">processor&lt;/span>(&lt;span style="color:#c1abea">helloServiceProcessor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TServer&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>(&lt;span style="color:#c1abea">serverArgs&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现&lt;/li>
&lt;/ul>
&lt;p>实现类需要实现 &lt;code>AsyncIface&lt;/code> 接口，方法定义中会有一个 &lt;code>AsyncMethodCallback&lt;/code>，用于处理响应回调&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">HelloServiceAsyncImpl&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncIface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>(&lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">AsyncMethodCallback&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">resultHandler&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;接收到请求: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloResponse&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setMessage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resultHandler&lt;/span>.&lt;span style="color:#b3d23c">onComplete&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;p>Server 端同步与异步处理的流程区别在于使用的 &lt;code>TProcessor&lt;/code> 不同；同步使用 &lt;code>TProcessor&lt;/code>，异步使用 &lt;code>TAsyncProcessor&lt;/code>；除此之外，其他的流程与使用 NIO 的同步处理没有区别&lt;/p></description></item><item><title>Thrift 中的 Protocol</title><link>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-protocol/</link><pubDate>Sun, 31 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-protocol/</guid><description>&lt;p>&lt;code>TProtocol&lt;/code> 是 Thrift 中协议的抽象类，定义了数据序列化和反序列化的接口&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-java-source-class-protocol.png" alt="thrift-java-source-class-protocol.png">&lt;/p>
&lt;h2 id="属性">属性&lt;/h2>
&lt;p>&lt;code>TProtocol&lt;/code> 中有 &lt;code>TTransport&lt;/code>类型的属性&lt;code>trans_&lt;/code>，用于与底层的传输层进行数据交互&lt;/p>
&lt;h2 id="方法">方法&lt;/h2>
&lt;p>&lt;code>TProtocol&lt;/code> 中的方法可以分为两类，分别用于写入和读取各种类型
其中 &lt;code>Message&lt;/code>，&lt;code>Struct&lt;/code>, &lt;code>Field&lt;/code>,&lt;code>Map&lt;/code>,&lt;code>List&lt;/code>,&lt;code>Set&lt;/code> 等类型会有开始和结束标志，一些还会写入或读取名称、序号等信息；可以参考 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-protocol-spec.md">Thrift Protocol Structure&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * 写入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeStructBegin&lt;/span>(&lt;span style="color:#c1abea">TStruct&lt;/span> &lt;span style="color:#c1abea">struct&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeStructEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeFieldBegin&lt;/span>(&lt;span style="color:#c1abea">TField&lt;/span> &lt;span style="color:#c1abea">field&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeFieldEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeFieldStop&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMapBegin&lt;/span>(&lt;span style="color:#c1abea">TMap&lt;/span> &lt;span style="color:#c1abea">map&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMapEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeListBegin&lt;/span>(&lt;span style="color:#c1abea">TList&lt;/span> &lt;span style="color:#c1abea">list&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeListEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeSetBegin&lt;/span>(&lt;span style="color:#c1abea">TSet&lt;/span> &lt;span style="color:#c1abea">set&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeSetEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeBool&lt;/span>(&lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">b&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeByte&lt;/span>(&lt;span style="color:#ef8383">byte&lt;/span> &lt;span style="color:#c1abea">b&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeI16&lt;/span>(&lt;span style="color:#ef8383">short&lt;/span> &lt;span style="color:#c1abea">i16&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeI32&lt;/span>(&lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">i32&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeI64&lt;/span>(&lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">i64&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeDouble&lt;/span>(&lt;span style="color:#ef8383">double&lt;/span> &lt;span style="color:#c1abea">dub&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeString&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">str&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeBinary&lt;/span>(&lt;span style="color:#c1abea">ByteBuffer&lt;/span> &lt;span style="color:#c1abea">buf&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * 读取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#00b1f7">readMessageBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readMessageEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TStruct&lt;/span> &lt;span style="color:#00b1f7">readStructBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readStructEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TField&lt;/span> &lt;span style="color:#00b1f7">readFieldBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readFieldEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TMap&lt;/span> &lt;span style="color:#00b1f7">readMapBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readMapEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TList&lt;/span> &lt;span style="color:#00b1f7">readListBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readListEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TSet&lt;/span> &lt;span style="color:#00b1f7">readSetBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readSetEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">readBool&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">byte&lt;/span> &lt;span style="color:#00b1f7">readByte&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">short&lt;/span> &lt;span style="color:#00b1f7">readI16&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#00b1f7">readI32&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#00b1f7">readI64&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">double&lt;/span> &lt;span style="color:#00b1f7">readDouble&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">readString&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">ByteBuffer&lt;/span> &lt;span style="color:#00b1f7">readBinary&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现类">实现类&lt;/h2>
&lt;ul>
&lt;li>&lt;code>TBinaryProtocol&lt;/code>: 二进制协议，根据 Thrift 的类型按 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-protocol-spec.md">Thrift Protocol Structure&lt;/a> 定义写入数据；参考 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-binary-protocol.md">Thrift Binary protocol encoding&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">strictWrite_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 写入版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">VERSION_1&lt;/span> &lt;span style="color:#c7bf54">|&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">version&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 被调用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 请求序号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByte&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TCompactProtocol&lt;/code>：压缩协议，会将请求内容进行压缩后写入，参考 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-compact-protocol.md">Thrift Compact protocol encoding
&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByteDirect&lt;/span>(&lt;span style="color:#c1abea">PROTOCOL_ID&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByteDirect&lt;/span>((&lt;span style="color:#c1abea">VERSION&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&lt;/span> &lt;span style="color:#c1abea">VERSION_MASK&lt;/span>) &lt;span style="color:#c7bf54">|&lt;/span> ((&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#c1abea">TYPE_SHIFT_AMOUNT&lt;/span>) &lt;span style="color:#c7bf54">&amp;amp;&lt;/span> &lt;span style="color:#c1abea">TYPE_MASK&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeVarint32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TTupleProtocol&lt;/code>：继承了 &lt;code>TCompactProtocol&lt;/code> 类，Scheme 使用 &lt;code>TupleScheme&lt;/code>，表示使用写消息体的方式序列化和反序列化，而不是 &lt;code>StandardScheme&lt;/code> 使用消息头和消息体的方式序列化和反序列化&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeBitSet&lt;/span>(&lt;span style="color:#c1abea">BitSet&lt;/span> &lt;span style="color:#c1abea">bs&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">vectorWidth&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">bytes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">toByteArray&lt;/span>(&lt;span style="color:#c1abea">bs&lt;/span>, &lt;span style="color:#c1abea">vectorWidth&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#ef8383">byte&lt;/span> &lt;span style="color:#c1abea">b&lt;/span> : &lt;span style="color:#c1abea">bytes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByte&lt;/span>(&lt;span style="color:#c1abea">b&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TJSONProtocol&lt;/code>：将消息序列化为 JSON，可以用于泛化调用的场景下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resetContext&lt;/span>(); &lt;span style="color:#8a93a5;font-style:italic">// THRIFT-3743&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONArrayStart&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONInteger&lt;/span>(&lt;span style="color:#c1abea">VERSION&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">b&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>.&lt;span style="color:#b3d23c">getBytes&lt;/span>(&lt;span style="color:#c1abea">StandardCharsets&lt;/span>.&lt;span style="color:#b3d23c">UTF_8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONString&lt;/span>(&lt;span style="color:#c1abea">b&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONInteger&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONInteger&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TSimpleJSONProtocol&lt;/code>: 将消息以 JSON 格式输出，没有实现读取，用于脚本语言&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resetWriteContext&lt;/span>(); &lt;span style="color:#8a93a5;font-style:italic">// THRIFT-3743&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">trans_&lt;/span>.&lt;span style="color:#b3d23c">write&lt;/span>(&lt;span style="color:#c1abea">LBRACKET&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">pushWriteContext&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ListContext&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByte&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TProtocolDecorator&lt;/code>：抽象实现，会将所有的操作都转发给被代理的类实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">concreteProtocol&lt;/span>.&lt;span style="color:#b3d23c">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">tMessage&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TMultiplexedProtocol&lt;/code>：&lt;code>TProtocolDecorator&lt;/code> 的实现类，在消息头部写入了服务的名称，会被 Server 端解析；用于有多个服务的 Server；其他的类型写入和读取由被代理的协议实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">TMessageType&lt;/span>.&lt;span style="color:#b3d23c">CALL&lt;/span> &lt;span style="color:#c7bf54">||&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">TMessageType&lt;/span>.&lt;span style="color:#b3d23c">ONEWAY&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">super&lt;/span>.&lt;span style="color:#b3d23c">writeMessageBegin&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TMessage&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SERVICE_NAME&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">SEPARATOR&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">super&lt;/span>.&lt;span style="color:#b3d23c">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">tMessage&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>StoredMessageProtocol&lt;/code>：&lt;code>TProtocolDecorator&lt;/code> 的实现类，代理其他协议，通常用于 Server 端，只获取请求头，具体的读取由被代理的协议实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#00b1f7">readMessageBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">messageBegin&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Thrfit 中的 Server</title><link>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84-server/</link><pubDate>Mon, 18 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84-server/</guid><description>&lt;p>Thrift 中有多种 Server 的实现，支持单线程、多线程、异步等多种方式&lt;/p>
&lt;h2 id="server-定义">Server 定义&lt;/h2>
&lt;h3 id="属性">属性&lt;/h3>
&lt;ul>
&lt;li>&lt;code>processorFactory_&lt;/code> : 处理器工厂&lt;/li>
&lt;li>&lt;code>serverTransport_&lt;/code>: 服务端 Transport&lt;/li>
&lt;li>&lt;code>eventHandler_&lt;/code> : 事件监听器，可以监听 Server 所有启动、关闭、处理请求相关的事件&lt;/li>
&lt;li>&lt;code>inputTransportFactory_&lt;/code> : 输入流工厂&lt;/li>
&lt;li>&lt;code>outputTransportFactory_&lt;/code> : 输出流工厂&lt;/li>
&lt;li>&lt;code>inputProtocolFactory_&lt;/code> : 输入流协议工厂&lt;/li>
&lt;li>&lt;code>outputProtocolFactory_&lt;/code> : 输出流协议工厂&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>serve&lt;/li>
&lt;/ul>
&lt;p>启动 Server，监听端口，对外提供服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>stop&lt;/li>
&lt;/ul>
&lt;p>关闭 Server，断开连接，释放并清除资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">stop&lt;/span>() {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现类">实现类&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-source-server-subclass.png" alt="thrift-source-server-subclass.png">&lt;/p>
&lt;h3 id="阻塞">阻塞&lt;/h3>
&lt;ul>
&lt;li>TSimpleServer&lt;/li>
&lt;/ul>
&lt;p>Server 的简单实现，是单线程阻塞的 Server，连接实现取决于 &lt;code>TServerTransport&lt;/code>具体类型；用于测试场景&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">serve&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 监听 Socket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">serverTransport_&lt;/span>.&lt;span style="color:#b3d23c">listen&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果有事件处理器，则调用其 preSever 方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">preServe&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 设置运行状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">setServing&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 只要没有关闭，就获取连接&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">stopped_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 接受连接&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">client&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">serverTransport_&lt;/span>.&lt;span style="color:#b3d23c">accept&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connectionContext&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">createContext&lt;/span>(&lt;span style="color:#c1abea">inputProtocol&lt;/span>, &lt;span style="color:#c1abea">outputProtocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 处理上下文事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">processContext&lt;/span>(&lt;span style="color:#c1abea">connectionContext&lt;/span>, &lt;span style="color:#c1abea">inputTransport&lt;/span>, &lt;span style="color:#c1abea">outputTransport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 处理请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">processor&lt;/span>.&lt;span style="color:#b3d23c">process&lt;/span>(&lt;span style="color:#c1abea">inputProtocol&lt;/span>, &lt;span style="color:#c1abea">outputProtocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 上下文删除事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">deleteContext&lt;/span>(&lt;span style="color:#c1abea">connectionContext&lt;/span>, &lt;span style="color:#c1abea">inputProtocol&lt;/span>, &lt;span style="color:#c1abea">outputProtocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭 Transport&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">inputTransport&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">outputTransport&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 修改服务状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">setServing&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>TThreadPoolServer&lt;/li>
&lt;/ul>
&lt;p>在 &lt;code>TSimpleServer&lt;/code> 的基础上优化，使用了线程池处理请求；构建参数中可以指定创建线程池的参数，支持线程池饱和后超时；连接实现取决于 &lt;code>TServerTransport&lt;/code>具体类型&lt;/p></description></item><item><title>Thrfit 中的核心概念</title><link>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 17 Jan 2021 22:34:46 +0000</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid><description>&lt;h2 id="服务端">服务端&lt;/h2>
&lt;pre tabindex="0">&lt;code> +-------------------------------------------+
 | Server |
 | (single-threaded, event-driven etc) |
 +-------------------------------------------+
 | Processor |
 | (compiler generated) |
 +-------------------------------------------+
 | Protocol |
 | (JSON, compact etc) |
 +-------------------------------------------+
 | Transport |
 | (raw TCP, HTTP etc) |
 +-------------------------------------------+
&lt;/code>&lt;/pre>&lt;p>Thrift Server 设计大致可以分为四层，分别是：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Server：负责连接调度、服务的生命周期，定义接口是&lt;code>TServer&lt;/code> - &lt;code>TSimpleServer&lt;/code>：简单的阻塞服务端 - &lt;code>TThreadPoolServer&lt;/code>：使用线程池的处理请求的阻塞服务端 - &lt;code>THsHaServer&lt;/code>：使用线程池处理请求的基于 NIO 的非阻塞服务端 - &lt;code>TThreadedSelectorServer&lt;/code>：使用多种线程池的基于 NIO 的非阻塞服务端&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Processor：处理请求，具体的实现由生成的代码处理，定义接口是 &lt;code>TProcessor&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>TBaseProcessor&lt;/code>：同步处理的 Processor&lt;/li>
&lt;li>&lt;code>TBaseAsyncProcessor&lt;/code>：异步处理的 Processor&lt;/li>
&lt;li>&lt;code>TMultiplexedProcessor&lt;/code>：支持多个服务的同步 Processor&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Protocol：请求协议，数据的编解码实现，定义接口是 &lt;code>TProtocol&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>TBinaryProtocol&lt;/code>：二进制协议&lt;/li>
&lt;li>&lt;code>TCompactProtocol&lt;/code>：压缩协议&lt;/li>
&lt;li>&lt;code>TJSONProtocol&lt;/code>：JSON 格式协议&lt;/li>
&lt;li>&lt;code>TMultiplexedProtocol&lt;/code>：支持多个 Processor 的封装协议，依赖于其他协议&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Transport：底层的连接，提供了读写的抽象实现；服务端定义是 &lt;code>TServerTransport&lt;/code>&lt;/p></description></item></channel></rss>