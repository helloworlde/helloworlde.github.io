<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Security on HelloWood</title><link>https://blog.hellowood.dev/categories/spring-security/</link><description>Recent content in Spring Security on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Tue, 17 Sep 2024 03:10:36 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/categories/spring-security/index.xml" rel="self" type="application/rss+xml"/><item><title>在使用 Spring Security 的 Remember Me 记住密码功能时遇到的问题和解决方法</title><link>https://blog.hellowood.dev/posts/spring-security-%E7%9A%84-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 00:37:35 +0000</pubDate><guid>https://blog.hellowood.dev/posts/spring-security-%E7%9A%84-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>在使用 Spring Security 的 Remember Me 记住密码功能时遇到的问题和解决方法&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="javalangillegalstateexception-userdetailsservice-is-required">java.lang.IllegalStateException: UserDetailsService is required.&lt;/h2>
&lt;ul>
&lt;li>配置信息(&lt;code>Security.java&lt;/code>)&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 @Autowired
 public void configureGlobal(AuthenticationManagerBuilder auth) {
 auth.authenticationProvider(customAuthenticationProvider);
 }

 //...

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 http.authorizeRequests()
 .antMatchers(ROOT_URL, LOGIN_URL, LOGIN_ERROR_URL, CSS_WILDCARD_URL, INDEX_URL)
 .permitAll();

 http.authorizeRequests()
 .anyRequest()
 .authenticated();

 http.authorizeRequests()
 .and()
 .rememberMe()
 .rememberMeServices(rememberMeServices())
 .key(INTERNAL_SECRET_KEY);

 // ...
 }

 @Bean
 public RememberMeServices rememberMeServices() {
 JdbcTokenRepositoryImpl rememberMeTokenRepository = new JdbcTokenRepositoryImpl();
 rememberMeTokenRepository.setDataSource(dataSource);

 PersistentTokenBasedRememberMeServices rememberMeServices =
 new PersistentTokenBasedRememberMeServices(INTERNAL_SECRET_KEY, userDetailsService(), rememberMeTokenRepository);

 rememberMeServices.setParameter(REMEMBER_ME);
 return rememberMeServices;
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>错误信息如下，发生该错误的原因是因为没有提供 UserDetailsService 的实例而出错，虽然调用了 &lt;code>userDetailsService()&lt;/code> 方法，
但实际上并没有起作用，所以需要提供自定义的 &lt;code>UserDetailsService&lt;/code> 实例注入&lt;/p></description></item><item><title>Spring Security 中实现 Remember Me 记住密码功能</title><link>https://blog.hellowood.dev/posts/spring-security-%E4%B8%AD%E5%AE%9E%E7%8E%B0-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 01 Jan 2018 00:35:56 +0000</pubDate><guid>https://blog.hellowood.dev/posts/spring-security-%E4%B8%AD%E5%AE%9E%E7%8E%B0-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD/</guid><description>&lt;blockquote>
&lt;p>在 Spring Boot 应用中使用 Spring Security 并实现 Remember Me 记住密码功能，实现自动登录&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>前置条件：在 Spring Boot 应用中已正确配置 Spring Security&lt;/p>
&lt;/blockquote>
&lt;p>##在页面添加记住密码的复选框&lt;/p>
&lt;pre tabindex="0">&lt;code> &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;remember-me&amp;#34;/&amp;gt; Remember me
&lt;/code>&lt;/pre>&lt;p>##在 Security Config 配置文件中启用记住密码功能(验证信息存放在内存中)&lt;/p>
&lt;ul>
&lt;li>SecurityConfig&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.springsecurity.security.CustomAuthenticationProvider;
 import cn.com.hellowood.springsecurity.security.CustomUserDetailsService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdater;

 @EnableWebSecurity
 public class SecurityConfig extends WebSecurityConfigurerAdapter {

 @Autowired
 private CustomAuthenticationProvider customAuthenticationProvider;

 @Autowired
 private CustomUserDetailsService userDetailsService;

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 // 任何用户都可以访问以下URI
 http.authorizeRequests()
 .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/login&amp;#34;, &amp;#34;/login-error&amp;#34;, &amp;#34;/css/**&amp;#34;, &amp;#34;/index&amp;#34;)
 .permitAll();

 // 其他URI均需要权限校验
 http.authorizeRequests()
 .anyRequest()
 .authenticated();

 // 只需要以下配置即可启用记住密码
 http.authorizeRequests()
 .and()
 .rememberMe();

 http.formLogin()
 .loginPage(&amp;#34;/login&amp;#34;)
 .usernameParameter(&amp;#34;username&amp;#34;)
 .passwordParameter(&amp;#34;password&amp;#34;)
 .successForwardUrl(&amp;#34;/user/index&amp;#34;)
 .failureUrl(&amp;#34;/login-error&amp;#34;);
 }

 @Autowired
 public void configureGlobal(AuthenticationManagerBuilder auth) {
 // 为了使用用户名密码校验实现了AuthenticationProvider和UserDetailsService类
 auth.authenticationProvider(customAuthenticationProvider);
 try {
 auth.userDetailsService(userDetailsService);
 } catch (Exception e) {
 e.printStackTrace();
 }
 }
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这样就可以使用记住密码了，选择记住密码登录后会在本地保存 Cookie，下次登录的时候通过 Cookie 校验用户信息；用户登录的信息保存在内存中，当内存断电或被清除之后该 Cookie 即使在有效期内也无法登录。&lt;/p></description></item><item><title>Spring Boot 中集成 Spring Security</title><link>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E9%9B%86%E6%88%90-spring-security/</link><pubDate>Mon, 01 Jan 2018 00:09:27 +0000</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E9%9B%86%E6%88%90-spring-security/</guid><description>&lt;blockquote>
&lt;p>Spring Boot 集成 Spring Security的简单应用，从数据库读取数据校验用户，页面使用Thymeleaf模板&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="项目地址-httpsgithubcomhelloworldespringsecurityhttpsgithubcomhelloworldespringsecurity">项目地址 &lt;a href="https://github.com/helloworlde/SpringSecurity">https://github.com/helloworlde/SpringSecurity&lt;/a>&lt;/h3>
&lt;h3 id="演示-httpprojecthellowoodcomcnsecurityhttpprojecthellowoodcomcnsecurity">演示 &lt;a href="http://project.hellowood.com.cn/Security/">http://project.hellowood.com.cn/Security/&lt;/a>&lt;/h3>
&lt;h2 id="创建-spring-boot-应用">创建 Spring Boot 应用&lt;/h2>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;pre tabindex="0">&lt;code> compile(&amp;#39;org.springframework.boot:spring-boot-starter-security&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;)
 compile(&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-thymeleaf&amp;#39;)
 runtime(&amp;#39;mysql:mysql-connector-java&amp;#39;)
 runtime(&amp;#39;org.springframework.boot:spring-boot-starter-tomcat&amp;#39;)
 testCompile(&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;)
 testCompile(&amp;#39;org.springframework.security:spring-security-test&amp;#39;)
&lt;/code>&lt;/pre>&lt;h2 id="创建用户表并插入数据">创建用户表并插入数据&lt;/h2>
&lt;pre tabindex="0">&lt;code> CREATE TABLE user (
 id INT AUTO_INCREMENT PRIMARY KEY,
 username VARCHAR(45) NOT NULL,
 password VARCHAR(45) NOT NULL,
 enabled INT NOT NULL DEFAULT 1
 );


 INSERT INTO user (username, password, enabled) VALUES (&amp;#39;username&amp;#39;, &amp;#39;password&amp;#39;, TRUE);
&lt;/code>&lt;/pre>&lt;h2 id="添加配置信息">添加配置信息&lt;/h2>
&lt;pre tabindex="0">&lt;code> spring.datasource.url=jdbc:mysql://localhost:3306/security?useSSL=false
 spring.datasource.username=security
 spring.datasource.password=security
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 mybatis.type-aliases-package=cn.com.hellowood.springsecurity.mapper
 mybatis.mapper-locations=mappers/**Mapper.xml
&lt;/code>&lt;/pre>&lt;h2 id="添加-security-配置文件">添加 Security 配置文件&lt;/h2>
&lt;pre tabindex="0">&lt;code>
 import cn.com.hellowood.springsecurity.security.CustomAuthenticationProvider;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

 @EnableWebSecurity
 public class SecurityConfig extends WebSecurityConfigurerAdapter {

 @Autowired
 private CustomAuthenticationProvider customAuthenticationProvider;

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 // 所有请求均可访问
 http.authorizeRequests()
 .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/login&amp;#34;, &amp;#34;/login-error&amp;#34;, &amp;#34;/css/**&amp;#34;, &amp;#34;/index&amp;#34;)
 .permitAll();

 // 其余所有请求均需要权限
 http.authorizeRequests()
 .anyRequest()
 .authenticated();

 // 配置登录页面的表单 action 必须是 &amp;#39;/login&amp;#39;, 用户名和密码的参数名必须是 &amp;#39;username&amp;#39; 和 &amp;#39;password&amp;#39;，
 // 登录失败的 url 是 &amp;#39;/login-error&amp;#39;
 http.formLogin()
 .loginPage(&amp;#34;/login&amp;#34;)
 .loginProcessingUrl(&amp;#34;/login&amp;#34;)
 .usernameParameter(&amp;#34;username&amp;#34;)
 .passwordParameter(&amp;#34;password&amp;#34;)
 .failureUrl(&amp;#34;/login-error&amp;#34;);
 }

 /**
 * Configure global.
 *
 * @param auth the auth
 * @throws Exception the exception
 */
 @Autowired
 public void configureGlobal(AuthenticationManagerBuilder auth) {
 // 使用自定义的 Authentication Provider
 auth.authenticationProvider(customAuthenticationProvider);
 }
 }
&lt;/code>&lt;/pre>&lt;h2 id="添加自定义的-authentication-provider-类">添加自定义的 Authentication Provider 类&lt;/h2>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.springsecurity.model.UserModel;
 import cn.com.hellowood.springsecurity.service.UserService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.authentication.AccountExpiredException;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.authentication.BadCredentialsException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.stereotype.Component;

 import javax.servlet.http.HttpSession;
 import java.util.ArrayList;
 import java.util.List;

 @Component
 public class CustomAuthenticationProvider implements AuthenticationProvider {

 private final Logger logger = LoggerFactory.getLogger(getClass());

 @Autowired
 private HttpSession session;

 @Autowired
 private UserService userService;

 /**
 * Validate user info is correct form database
 *
 * @param authentication
 * @return
 * @throws AuthenticationException
 */
 @Override
 public Authentication authenticate(Authentication authentication) throws AuthenticationException {
 String username = authentication.getName();
 String password = authentication.getCredentials().toString();
 List&amp;lt;GrantedAuthority&amp;gt; grantedAuthorities = new ArrayList&amp;lt;&amp;gt;();

 // 检查用户名密码是否正确
 UserModel user = userService.loadUserByUsernameAndPassword(username, password);
 if (user == null) {
 logger.error(&amp;#34;{} login failed, username or password is wrong&amp;#34;, username);
 throw new BadCredentialsException(&amp;#34;Username or password is not correct&amp;#34;);
 } else if (!user.getEnabled()) {
 throw new AccountExpiredException(&amp;#34;Account had expired&amp;#34;);
 }

 // 用户信息有效时将其放入 session 中
 session.setAttribute(&amp;#34;user&amp;#34;, user);
 Authentication auth = new UsernamePasswordAuthenticationToken(username, password, grantedAuthorities);
 return auth;
 }


 @Override
 public boolean supports(Class&amp;lt;?&amp;gt; authentication) {
 return authentication.equals(UsernamePasswordAuthenticationToken.class);
 }

 }
&lt;/code>&lt;/pre>&lt;h2 id="添加校验用户信息所需要的类">添加校验用户信息所需要的类&lt;/h2>
&lt;ul>
&lt;li>添加 UserModel.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 public class UserModel {

 private Integer id;

 private String username;

 private String password;

 private Boolean enabled;

 /**
 * Instantiates a new User model.
 */
 public UserModel() {
 }

 /**
 * Instantiates a new User model.
 *
 * @param id the id
 * @param username the username
 * @param password the password
 * @param enabled the enabled
 */
 public UserModel(Integer id, String username, String password, Boolean enabled) {
 this.id = id;
 this.username = username;
 this.password = password;
 this.enabled = enabled;
 }

 /**
 * Gets id.
 *
 * @return the id
 */
 public Integer getId() {
 return id;
 }

 /**
 * Sets id.
 *
 * @param id the id
 */
 public void setId(Integer id) {
 this.id = id;
 }

 /**
 * Gets username.
 *
 * @return the username
 */
 public String getUsername() {
 return username;
 }

 /**
 * Sets username.
 *
 * @param username the username
 */
 public void setUsername(String username) {
 this.username = username;
 }

 /**
 * Gets password.
 *
 * @return the password
 */
 public String getPassword() {
 return password;
 }

 /**
 * Sets password.
 *
 * @param password the password
 */
 public void setPassword(String password) {
 this.password = password;
 }

 /**
 * Gets enabled.
 *
 * @return the enabled
 */
 public Boolean getEnabled() {
 return enabled;
 }

 /**
 * Sets enabled.
 *
 * @param enabled the enabled
 */
 public void setEnabled(Boolean enabled) {
 this.enabled = enabled;
 }

 @Override
 public String toString() {
 return &amp;#34;UserModel{&amp;#34; +
 &amp;#34;id=&amp;#34; + id +
 &amp;#34;, username=&amp;#39;&amp;#34; + username + &amp;#39;\&amp;#39;&amp;#39; +
 &amp;#34;, password=&amp;#39;&amp;#34; + password + &amp;#39;\&amp;#39;&amp;#39; +
 &amp;#34;, enabled=&amp;#34; + enabled +
 &amp;#39;}&amp;#39;;
 }
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 UserService.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 import cn.com.hellowood.springsecurity.mapper.UserMapper;
 import cn.com.hellowood.springsecurity.model.UserModel;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;

 @Service(&amp;#34;userService&amp;#34;)
 public class UserService {

 @Autowired
 private UserMapper userMapper;

 /**
 * Load user by username and password user model.
 *
 * @param username the username
 * @param password the password
 * @return the user model
 */
 public UserModel loadUserByUsernameAndPassword(String username, String password) {
 return userMapper.getUserByUsernameAndPassword(username, password);
 }
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 UserMapper.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.springsecurity.model.UserModel;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;

 @Mapper
 public interface UserMapper {

 /**
 * Gets user by username and password.
 *
 * @param username the username
 * @param password the password
 * @return the user by username and password
 */
 UserModel getUserByUsernameAndPassword(@Param(&amp;#34;username&amp;#34;) String username,
 @Param(&amp;#34;password&amp;#34;) String password);
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 UserMapper.xml&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;
 &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34; &amp;gt;
 &amp;lt;mapper namespace=&amp;#34;cn.com.hellowood.springsecurity.mapper.UserMapper&amp;#34;&amp;gt;

 &amp;lt;resultMap id=&amp;#34;baseResultMap&amp;#34; type=&amp;#34;cn.com.hellowood.springsecurity.model.UserModel&amp;#34;&amp;gt;
 &amp;lt;id column=&amp;#34;id&amp;#34; property=&amp;#34;id&amp;#34; javaType=&amp;#34;java.lang.Integer&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;&amp;gt;&amp;lt;/id&amp;gt;
 &amp;lt;result column=&amp;#34;username&amp;#34; property=&amp;#34;username&amp;#34; javaType=&amp;#34;java.lang.String&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;password&amp;#34; property=&amp;#34;password&amp;#34; javaType=&amp;#34;java.lang.String&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;enabled&amp;#34; property=&amp;#34;enabled&amp;#34; javaType=&amp;#34;java.lang.Boolean&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;/resultMap&amp;gt;

 &amp;lt;select id=&amp;#34;getUserByUsernameAndPassword&amp;#34; resultType=&amp;#34;cn.com.hellowood.springsecurity.model.UserModel&amp;#34;&amp;gt;
 SELECT
 id,
 username,
 password,
 enabled
 FROM user
 WHERE username = #{username, jdbcType=VARCHAR}
 AND password = #{password, jdbcType=VARCHAR}
 &amp;lt;/select&amp;gt;
 &amp;lt;/mapper&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="添加页面">添加页面&lt;/h2>
&lt;ul>
&lt;li>index.html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Spring Security&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; th:href=&amp;#34;@{/css/main.css}&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34; th:href=&amp;#34;@{/css/bootstrap.min.css}&amp;#34;/&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;form action=&amp;#34;#&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;gt;Hello Spring Security&amp;lt;/h2&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Anyone can access this page&amp;lt;/h5&amp;gt;
 &amp;lt;div th:if=&amp;#34;${session.user} != null&amp;#34;&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Your username is &amp;lt;span th:text=&amp;#34;${session.user.username}&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h5&amp;gt;
 &amp;lt;a href=&amp;#34;/user/index&amp;#34; th:href=&amp;#34;@{/user/index}&amp;#34; class=&amp;#34;btn btn-success btn-block&amp;#34;&amp;gt;To Security page&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div th:if=&amp;#34;${session.user} == null&amp;#34;&amp;gt;
 &amp;lt;a href=&amp;#34;/index&amp;#34; th:href=&amp;#34;@{/login}&amp;#34; class=&amp;#34;btn btn-primary btn-block&amp;#34;&amp;gt;To Login page&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;div th:fragment=&amp;#34;logout&amp;#34; class=&amp;#34;logout&amp;#34; th:if=&amp;#34;${session.user} != null&amp;#34;&amp;gt;
 &amp;lt;form action=&amp;#34;#&amp;#34; th:action=&amp;#34;@{/logout}&amp;#34; method=&amp;#34;post&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-warning btn-block&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;Log out&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>login.html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Login page&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; th:href=&amp;#34;@{/css/main.css}&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34; th:href=&amp;#34;@{/css/bootstrap.min.css}&amp;#34;/&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;form th:action=&amp;#34;@{/login}&amp;#34; method=&amp;#34;post&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;gt;Please sign in&amp;lt;/h2&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;label for=&amp;#34;username&amp;#34; class=&amp;#34;sr-only&amp;#34;&amp;gt;Username&amp;lt;/label&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;username&amp;#34; name=&amp;#34;username&amp;#34;
 th:class=&amp;#34;${loginError} ? &amp;#39;form-control is-invalid&amp;#39; : &amp;#39;form-control&amp;#39;&amp;#34; placeholder=&amp;#34;Username&amp;#34;
 required=&amp;#34;required&amp;#34;
 autofocus=&amp;#34;autofocus&amp;#34;/&amp;gt;
 &amp;lt;div class=&amp;#34;invalid-feedback&amp;#34; th:if=&amp;#34;${loginError}&amp;#34;&amp;gt;
 Wrong username or password
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;label for=&amp;#34;password&amp;#34; class=&amp;#34;sr-only&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; id=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Password&amp;#34;
 required=&amp;#34;required&amp;#34;/&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-success btn-block&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;Sign in&amp;lt;/button&amp;gt;
 &amp;lt;a href=&amp;#34;/index&amp;#34; th:href=&amp;#34;@{/index}&amp;#34; class=&amp;#34;btn btn-primary btn-block&amp;#34;&amp;gt;Back to Home page&amp;lt;/a&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>user/index.html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Spring Security&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; th:href=&amp;#34;@{/css/main.css}&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34; th:href=&amp;#34;@{/css/bootstrap.min.css}&amp;#34;/&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;form action=&amp;#34;#&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;gt;Hello Spring Security&amp;lt;/h2&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Only logged in user can access this page&amp;lt;/h5&amp;gt;
 &amp;lt;div th:if=&amp;#34;${session.user} != null&amp;#34;&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Logged user is &amp;lt;span th:text=&amp;#34;${session.user.username}&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h5&amp;gt;
 &amp;lt;a href=&amp;#34;/index&amp;#34; th:href=&amp;#34;@{/index}&amp;#34; class=&amp;#34;btn btn-primary btn-block&amp;#34;&amp;gt;Back to Home page&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;div th:substituteby=&amp;#34;index::logout&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="添加-controller">添加 Controller&lt;/h2>
&lt;pre tabindex="0">&lt;code> import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;

 @Controller
 public class MainController {

 /**
 * Root page.
 *
 * @return the index page url
 */
 @RequestMapping(&amp;#34;/&amp;#34;)
 public String root() {
 return &amp;#34;redirect:/index&amp;#34;;
 }

 /**
 * Index page.
 *
 * @return the index page url
 */
 @RequestMapping(&amp;#34;/index&amp;#34;)
 public String index() {
 return &amp;#34;index&amp;#34;;
 }

 /**
 * User index page.
 *
 * @return the user index page url
 */
 @RequestMapping(&amp;#34;/user/index&amp;#34;)
 public String userIndex() {
 return &amp;#34;user/index&amp;#34;;
 }

 /**
 * Login page.
 *
 * @return the login page url
 */
 @RequestMapping(&amp;#34;/login&amp;#34;)
 public String login() {
 return &amp;#34;login&amp;#34;;
 }

 /**
 * Login error page.
 *
 * @param model the model
 * @return the login error page url
 */
 @RequestMapping(&amp;#34;/login-error&amp;#34;)
 public String loginError(Model model) {
 model.addAttribute(&amp;#34;loginError&amp;#34;, true);
 return &amp;#34;login&amp;#34;;
 }

 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;blockquote>
&lt;p>启动应用，访问&lt;a href="http://localhost:8080/user/index">http://localhost:8080/user/index&lt;/a>，此时没有登录，会被拦截并重定向到登录页面&lt;a href="http://localhost:8080/login">http://localhost:8080/login&lt;/a>，输入用户名 &lt;code>username&lt;/code> 和密码 &lt;code>password&lt;/code>，登录成功后再次访问&lt;a href="http://localhost:8080/user/index">http://localhost:8080/user/index&lt;/a>，此时该 url 可以正常访问，当输入错误的用户名或密码时会提示错误信息，说明 Spring Security 配置正确&lt;/p></description></item></channel></rss>