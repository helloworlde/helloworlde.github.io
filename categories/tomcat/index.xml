<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tomcat on HelloWood</title><link>https://blog.hellowood.dev/categories/tomcat/</link><description>Recent content in Tomcat on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Tue, 17 Sep 2024 03:10:36 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/categories/tomcat/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 配置 Nginx 访问宿主机目录下的应用</title><link>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AE-nginx-%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 10 Apr 2018 11:39:09 +0000</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AE-nginx-%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>使用 Nginx 将请求转发到宿主机的 Tomcat 应用&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置并启动-tomcat">配置并启动 Tomcat&lt;/h2>
&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;h2 id="配置-nginx">配置 Nginx&lt;/h2>
&lt;ul>
&lt;li>创建配置和日志文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>mkdir /home/nginx/conf
mkdir /home/nginx/logs
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>查询宿主机 IP&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker inspect --format &amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39; &amp;lt;container-ID&amp;gt;

# 或
docker inspect &amp;lt;container id&amp;gt;

# 或
docker inspect -f &amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; container_name_or_id
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加配置文件 &lt;code>nginx.conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>将 &lt;code>8084&lt;/code>端口转发到&lt;code>8080&lt;/code>端口，使用 &lt;code>log_format&lt;/code>目的是为了使用阿里云监控切分日志，可以没有&lt;/p>
&lt;pre tabindex="0">&lt;code>log_format proxyformat &amp;#34;$remote_addr $request_time $http_x_readtime [$time_local] \&amp;#34;$request_method http://$host$request_uri\&amp;#34; $status $body_bytes_sent \&amp;#34;$http_referer\&amp;#34; \&amp;#34;$upstream_addr\&amp;#34; \&amp;#34;$http_user_agent\&amp;#34; \&amp;#34;$upstream_response_time\&amp;#34; \&amp;#34;$request_time\&amp;#34;&amp;#34;;


 server {
 listen 80;
 server_name ali.hellowood.com.cn;
 location / {
 proxy_pass http://172.17.0.1:8080;
 proxy_set_header Host $http_host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>需要注意的是，Docker 会默认使用桥接路由，所以其 IP 和宿主机的 IP 位于同一 IP 段，并且默认宿主机的 IP 为第一个，即如果 Docker 的 IP 为 &lt;code>10.1.0.2&lt;/code>, 则可以通过 访问 &lt;code>10.1.0.1&lt;/code> 访问到宿主机&lt;/p></description></item><item><title>Docker 配置Ubuntu 下 Tomcat 和 Nginx 使用 HTTPS 访问</title><link>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AEubuntu-%E4%B8%8B-tomcat-%E5%92%8C-nginx-%E4%BD%BF%E7%94%A8-https-%E8%AE%BF%E9%97%AE/</link><pubDate>Sun, 08 Apr 2018 15:38:01 +0000</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AEubuntu-%E4%B8%8B-tomcat-%E5%92%8C-nginx-%E4%BD%BF%E7%94%A8-https-%E8%AE%BF%E9%97%AE/</guid><description>&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;h3 id="使用脚本自动安装">使用脚本自动安装&lt;/h3>
&lt;pre tabindex="0">&lt;code>curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh --mirror Aliyun
&lt;/code>&lt;/pre>&lt;h3 id="更改镜像地址">更改镜像地址&lt;/h3>
&lt;ul>
&lt;li>修改或新建 &lt;code>/etc/docker/daemon.json&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;registry-mirrors&amp;#34;: [
 &amp;#34;https://registry.docker-cn.com&amp;#34;
 ]
}
&lt;/code>&lt;/pre>&lt;h3 id="启动-docker">启动 Docker&lt;/h3>
&lt;pre tabindex="0">&lt;code>sudo systemctl daemon-reload
sudo systemctl enable docker
sudo systemctl start docker
&lt;/code>&lt;/pre>&lt;h2 id="配置-tomcat">配置 Tomcat&lt;/h2>
&lt;h3 id="启动-tomcat-容器">启动 Tomcat 容器&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker pull tomcat
docker run --name tomcat -d -p 8080:8080 tomcat
&lt;/code>&lt;/pre>&lt;h3 id="修改-tomcat-manager-应用">修改 Tomcat Manager 应用&lt;/h3>
&lt;ul>
&lt;li>修改 &lt;code>webapps/manager/META-INF/content.xml&lt;/code>，允许需要的IP访问，这里运行所有的IP访问&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;Context antiResourceLocking=&amp;#34;false&amp;#34; privileged=&amp;#34;true&amp;#34; &amp;gt;
 &amp;lt;Valve className=&amp;#34;org.apache.catalina.valves.RemoteAddrValve&amp;#34;
 allow=&amp;#34;^.*$&amp;#34; /&amp;gt;
 &amp;lt;Manager sessionAttributeValueClassNameFilter=&amp;#34;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&amp;#34;/&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="配置-tomcat-用户">配置 Tomcat 用户&lt;/h3>
&lt;ul>
&lt;li>修改 &lt;code>conf/tomcat-user.xml&lt;/code>，添加用户&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;role rolename=&amp;#34;admin-gui&amp;#34;/&amp;gt;
&amp;lt;role rolename=&amp;#34;manager-gui&amp;#34;/&amp;gt;
&amp;lt;user username=&amp;#34;tomcat&amp;#34; password=&amp;#34;tomcat&amp;#34; roles=&amp;#34;manager-gui,admin-gui&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="配置-nginx">配置 Nginx&lt;/h2>
&lt;h3 id="配置目录">配置目录&lt;/h3>
&lt;ul>
&lt;li>新建目录 &lt;code>/home/ubuntu/hellowood/dev/nginx/conf&lt;/code>, &lt;code>/home/ubuntu/hellowood/dev/nginx/log&lt;/code>, &lt;code>/home/ubuntu/hellowood/dev/nginx/certs&lt;/code>&lt;/li>
&lt;li>下载并解压相应的Nginx证书文件到 &lt;code>/home/ubuntu/hellowood/dev/nginx/conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="添加-nginx-配置">添加 Nginx 配置&lt;/h3>
&lt;ul>
&lt;li>nginx.conf&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>server {
 listen 80;
 listen 443 ssl;
 server_name hellowood.com.cn;
 ssl_certificate /etc/nginx/certs/hellowood.com.cn_bundle.crt;
 ssl_certificate_key /etc/nginx/certs/hellowood.com.cn.key;
 location / {
 proxy_pass http://tomcat:8080;
 }
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>http://tomcat:8080&lt;/code>: 将所有请求都转发到 &lt;code>tomcat&lt;/code> 容器的 &lt;code>8080&lt;/code>端口(不是映射端口)&lt;/p></description></item><item><title>Tomcat9 配置HTTPS连接</title><link>https://blog.hellowood.dev/posts/tomcat9-%E9%85%8D%E7%BD%AEhttps%E8%BF%9E%E6%8E%A5/</link><pubDate>Mon, 01 Jan 2018 12:01:18 +0000</pubDate><guid>https://blog.hellowood.dev/posts/tomcat9-%E9%85%8D%E7%BD%AEhttps%E8%BF%9E%E6%8E%A5/</guid><description>&lt;blockquote>
&lt;p>Tomcat中配置HTTPS连接可以分为两步：1. 生成证书&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code> 2. 配置Tomcat
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>准备工作&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JDK&lt;/li>
&lt;li>Tomcat&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="1-生成证书">1. 生成证书&lt;/h1>
&lt;blockquote>
&lt;p>证书可以使用Java来生成&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>直接使用命令生成证书&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>keytool -genkeypair -alias &amp;#34;tomcat&amp;#34; -keyalg &amp;#34;RSA&amp;#34; -keystore &amp;#34;d:\DevConfig\tomcat.keystore&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="http://img.blog.csdn.net/20170424210011905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="生成Keystore">&lt;/p>
&lt;blockquote>
&lt;p>这样就会在&lt;code>F:\&lt;/code>下生成一个&lt;code>tomcat.keystore&lt;/code> 文件
密码在配置tomcat的时候会用到&lt;/p>
&lt;/blockquote>
&lt;h1 id="2-配置tomcat">2. 配置Tomcat&lt;/h1>
&lt;ul>
&lt;li>修改&lt;code>TOMCAT_HOME\conf\server.xml&lt;/code>文件，将以下内容粘贴到Tomcat配置文件中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;Connector
 protocol=&amp;#34;org.apache.coyote.http11.Http11NioProtocol&amp;#34;
 port=&amp;#34;8443&amp;#34; maxThreads=&amp;#34;200&amp;#34;
 scheme=&amp;#34;https&amp;#34; secure=&amp;#34;true&amp;#34; SSLEnabled=&amp;#34;true&amp;#34;
 keystoreFile=&amp;#34;F:\tomcat.keystore&amp;#34; keystorePass=&amp;#34;tomcat&amp;#34;
 clientAuth=&amp;#34;false&amp;#34; sslProtocol=&amp;#34;TLS&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>保存后启动Tomcat，访问&lt;code>https://localhost:8433&lt;/code>即可&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.blog.csdn.net/20170424211734554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Tomcat Https">&lt;/p>
&lt;ul>
&lt;li>因为CA证书是自己生成的，不被浏览器认可，所以会被当做不安全网站，但不影响使用&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>需要注意在配置文件有三种不同的实现方式&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> - JSSE （作为Java运行部分）
 - JSSE （使用OpenSSL）
 - APR （使用OpenSSL）
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这三种方式对应的配置文件并不一样，需要特别注意&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>另外&lt;code>protocol&lt;/code>如果写成&lt;code>HTTP/1.1&lt;/code>也会报错，应当使用以下三个中的一个，当使用APR的时候需要从&lt;a href="http://tomcat.apache.org/tomcat-7.0-doc/apr.html">下载&lt;code>tcnative-1.dll&lt;/code>&lt;/a>放到Tomcat的bin目录下，否则会报错&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>org.apache.coyote.http11.Http11NioProtocol
org.apache.coyote.http11.Http11Nio2Protocol
org.apache.coyote.http11.Http11AprProtocol
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这里的配置是第一种方式，也是最简单的方式&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>详细配置请看官方文档 &lt;a href="http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html">http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html&lt;/a>&lt;/p></description></item><item><title>Tomcat启动时一直停留在一个应用的发布的解决办法</title><link>https://blog.hellowood.dev/posts/tomcat%E5%90%AF%E5%8A%A8%E6%97%B6%E4%B8%80%E7%9B%B4%E5%81%9C%E7%95%99%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%8F%91%E5%B8%83%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 01:05:02 +0000</pubDate><guid>https://blog.hellowood.dev/posts/tomcat%E5%90%AF%E5%8A%A8%E6%97%B6%E4%B8%80%E7%9B%B4%E5%81%9C%E7%95%99%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%8F%91%E5%B8%83%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>Tomcat在启动时一直停留在某一个应用无法启动或者需要很长时间才能启动，提示&lt;code>Deploying web application directory [/home/dev/tomcat/apache-tomcat-9.0.0.M26/webapps/ROOT&lt;/code>，可以通过如下配置来加速启动&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>###修改**&lt;code>${JAVA_HOME}/jre/lib/security/java.security&lt;/code>&lt;strong>文件 ###修改&lt;/strong>&lt;code>securerandom.source=file:/dev/random&lt;/code>&lt;strong>为&lt;/strong>&lt;code>securerandom.source=file:/dev/./urandom&lt;/code>**即可&lt;/p>
&lt;h2 id="解释">解释&lt;/h2>
&lt;blockquote>
&lt;p>这是因为Tomcat 7以上的版本在启动的时候会使用 &lt;code>org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom&lt;/code>类产生安全随机类&lt;code>SecureRandom&lt;/code>的实例作为会话ID
SHA1PRNG算法是基于SHA-1算法实现且保密性较强的伪随机数生成器。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在SHA1PRNG中，有一个种子产生器，它根据配置执行各种操作。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Linux中的随机数可以从两个特殊的文件中产生，一个是/dev/urandom.另外一个是/dev/random。他们产生随机数的原理是利用当前系统的熵池来计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这就是为什么会有/dev/urandom和/dev/random这两种不同的文件，后者在不能产生新的随机数时会阻塞程序，而前者不会（ublock），当然产生的随机数效果就不太好了，这对加密解密这样的应用来说就不是一种很好的选择。/dev/random会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回，所以使用/dev/random比使用/dev/urandom产生大量随机数的速度要慢。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>具体参考
&lt;a href="https://wiki.apache.org/tomcat/HowTo/FasterStartUp">https://wiki.apache.org/tomcat/HowTo/FasterStartUp&lt;/a>
&lt;a href="https://my.oschina.net/wangnian/blog/687914">https://my.oschina.net/wangnian/blog/687914&lt;/a>&lt;/p></description></item></channel></rss>