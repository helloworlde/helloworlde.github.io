<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HomeLab on HelloWood</title><link>https://blog.hellowood.dev/tags/homelab/</link><description>Recent content in HomeLab on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 16 Sep 2024 03:53:10 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/tags/homelab/index.xml" rel="self" type="application/rss+xml"/><item><title>Frigate 使用 Hailo 8 或 Hailo 8L 进行对象识别</title><link>https://blog.hellowood.dev/posts/frigate-%E4%BD%BF%E7%94%A8-hailo-8-%E6%88%96-hailo-8l-%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E8%AF%86%E5%88%AB/</link><pubDate>Sun, 01 Sep 2024 11:25:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/frigate-%E4%BD%BF%E7%94%A8-hailo-8-%E6%88%96-hailo-8l-%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E8%AF%86%E5%88%AB/</guid><description>&lt;p>Hailo8/Hailo-8L 是一家以色列的边缘人工智能公司发布的边缘加速器，定位和 &lt;a href="https://coral.ai/products/">Google Coral TPU&lt;/a> 完全一致；Hailo-8 算力为 26 TOPS，Hailo-8L 算力为 13 TOPS&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">特性&lt;/th>
 &lt;th style="text-align: left">Google Coral TPU&lt;/th>
 &lt;th style="text-align: left">Hailo8&lt;/th>
 &lt;th style="text-align: left">Hailo8L&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>支持框架&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">TensorFlow, TensorFlow Lite&lt;/td>
 &lt;td style="text-align: left">TensorFlow, TensorFlow Lite, Keras, PyTorch, ONNX&lt;/td>
 &lt;td style="text-align: left">TensorFlow, TensorFlow Lite, Keras, PyTorch, ONNX&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>支持模型&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">MobileNet, Inception, EfficientNet 等&lt;/td>
 &lt;td style="text-align: left">ResNet-50, MobileNet_v2, SSD, YOLOv3, YOLOv5 等&lt;/td>
 &lt;td style="text-align: left">ResNet-50, MobileNet_v2, SSD, YOLOv3, YOLOv5 等&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>模型功能&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">对象识别、对象分类，语义分割，姿态识别，音频分类&lt;/td>
 &lt;td style="text-align: left">对象识别、对象分类，语义分割，姿态识别，深度估计，人脸检测，人脸识别等&lt;/td>
 &lt;td style="text-align: left">对象识别、对象分类，语义分割，姿态识别，深度估计，人脸检测，人脸识别等&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>硬件性能&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">4 TOPS&lt;/td>
 &lt;td style="text-align: left">26 TOPS&lt;/td>
 &lt;td style="text-align: left">13 TOPS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>发布时间&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">2019年&lt;/td>
 &lt;td style="text-align: left">2021年&lt;/td>
 &lt;td style="text-align: left">2023年&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>功耗&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">0.5-2 W&lt;/td>
 &lt;td style="text-align: left">2.5-4.6 W&lt;/td>
 &lt;td style="text-align: left">1.8-3.2 W&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>每W性能&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">8 TOPS/W&lt;/td>
 &lt;td style="text-align: left">10.4 TOPS/W&lt;/td>
 &lt;td style="text-align: left">7.2 TOPS/W&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>当前价格&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">约300~1000¥&lt;/td>
 &lt;td style="text-align: left">约 1300¥&lt;/td>
 &lt;td style="text-align: left">约550¥&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>支持的操作系统&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">Linux, Windows, MacOS&lt;/td>
 &lt;td style="text-align: left">Linux, Windows&lt;/td>
 &lt;td style="text-align: left">Linux, Windows&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>可扩展性&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">不支持多芯片&lt;/td>
 &lt;td style="text-align: left">支持多芯片并行处理&lt;/td>
 &lt;td style="text-align: left">支持多芯片并行处理&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>应用领域&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">物联网设备、嵌入式系统&lt;/td>
 &lt;td style="text-align: left">工业自动化、智能监控、自动驾驶&lt;/td>
 &lt;td style="text-align: left">工业自动化、智能监控、智能零售&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Frigate 的最新的代码已经合并了 Hailo8L 的 PR，预计将会在 0.15 版本中正式发布，PR 参考 &lt;a href="https://github.com/blakeblackshear/frigate/pull/12431">Initial support for Hailo-8L&lt;/a> 和 &lt;a href="https://github.com/blakeblackshear/frigate/pull/12820">Hailo amd64 support&lt;/a>；虽然 PR 中支持的设备是 Hailo-8L，但是经过测试验证，只需要替换对应的模型，Hailo-8 也是可以正常运行的（Hailo-8 和 Hailo-8L 的模型不能互相使用）&lt;/p></description></item><item><title>基于 Frigate 使用 Double Take 和 DeepStack 对视频监控进行人脸识别</title><link>https://blog.hellowood.dev/posts/%E5%9F%BA%E4%BA%8E-frigate-%E4%BD%BF%E7%94%A8-double-take-%E5%92%8C-deepstack-%E5%AF%B9%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link><pubDate>Fri, 16 Aug 2024 09:29:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9F%BA%E4%BA%8E-frigate-%E4%BD%BF%E7%94%A8-double-take-%E5%92%8C-deepstack-%E5%AF%B9%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid><description>&lt;p>Double Take 是一个训练和识别人脸的工具，支持对 Frigate 中检测到的人物对象进行人脸识别，可以用于统计监控中出现的人物信息。不过经过测试，只适用于门禁、闸机等有清晰人脸的场景，日常的监控因安装位置、角度等原因无法提供清晰的人脸，因此识别的准确度和有效性并不高&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-frigate-double-take-face-double-take-detect.png" alt="homelab-frigate-double-take-face-double-take-detect.png">&lt;/p>
&lt;p>Double Take 的原理是通过监听 Frigate 识别到对象后发出的 MQTT 消息，根据消息获取对应事件的快照，并将其发送给识别的服务，如 Deepstack/CodeProject.AI 等，然后根据识别结果显示该事件中出现的人脸信息&lt;/p>
&lt;p>Double Take 作者似乎已经放弃维护了，上次更新还是在两年前(2022-10-28)，尽管作者在今年的一月份(2024-1-7)声明计划&lt;a href="https://github.com/jakowenko/double-take/issues/343">开发 2.0 版本&lt;/a>，但是截止到8月份也没有任何进展，看起来作者在21年成为 24G.com 这家公司的 DevOps 总监后便没有精力投入到开源项目中了；不过，另外一位作者 skrashevich 在其 fork 的仓库 &lt;a href="https://github.com/skrashevich/double-take">skrashevich/double-take&lt;/a>中提交了不少 2.0 版本的计划的功能&lt;/p>
&lt;h2 id="部署依赖服务">部署依赖服务&lt;/h2>
&lt;p>Double Take 依赖 Frigate、MQTT 和人脸识别服务，部署在使用 Intel CPU 的 NUC 上，系统是 Ubuntu 22，地址是 192.168.31.254&lt;/p>
&lt;h3 id="部署-mqtt">部署 MQTT&lt;/h3>
&lt;p>MQTT 使用 emqx 提供的镜像进行部署，方便本地使用，参考&lt;a href="https://docs.emqx.com/zh/emqx/latest/deploy/install-docker-ce.html">通过 Docker 运行 EMQX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mqtt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">emqx/emqx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">mqtt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;1883:1883&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8083:8083&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8084:8084&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8883:8883&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;18083:18083&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动后访问 18083端口，&lt;a href="http://192.168.31.254:18083/">http://192.168.31.254:18083/&lt;/a>，默认的用户名密码是 &lt;code>admin&lt;/code>，密码是 &lt;code>public&lt;/code>&lt;/p></description></item><item><title>使用家庭宽带公网 IPV6 自建 Tailscale 的 DERP 节点</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%AE%B6%E5%BA%AD%E5%AE%BD%E5%B8%A6%E5%85%AC%E7%BD%91-ipv6-%E8%87%AA%E5%BB%BA-tailscale-%E7%9A%84-derp-%E8%8A%82%E7%82%B9/</link><pubDate>Tue, 11 Jun 2024 21:33:44 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%AE%B6%E5%BA%AD%E5%AE%BD%E5%B8%A6%E5%85%AC%E7%BD%91-ipv6-%E8%87%AA%E5%BB%BA-tailscale-%E7%9A%84-derp-%E8%8A%82%E7%82%B9/</guid><description>&lt;p>日常使用 Tailscale 连接异地的设备，但是因为经常出现无法直接连接，需要通过香港或东京的 DERP 服务器进行转发，导致延迟很高，影响网络质量；因此计划使用自建的 DERP 解决无法直连的问题；如果部署在国内的服务器上绑定域名需要备案，但是活动购买的服务器限制性能限制带宽限制流量还要单独购买公网 IP，并不合适；国外的延迟高可能还不如 Tailscale 官方的 DERP；&lt;/p>
&lt;p>另外自建的 DERP 服务器要求节点能够直接通过公网访问，不能在 NAT 或者负载均衡后面，因此基于家庭宽带的公网 IPV6 自建 DERP 服务器最合适&lt;/p>
&lt;h2 id="现状">现状&lt;/h2>
&lt;p>检测 tailscale 的网络节点，延迟最低的是东京的节点，延迟在 70 ms 左右&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tailscale netcheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Report:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* UDP: &lt;span style="color:#ef8383">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* IPv4: yes, xxx.xxx.xxx.xxx:39325
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* IPv6: yes, &lt;span style="color:#c7bf54">[&lt;/span>2409:xxxx:xxxx:xxxx::xxxx&lt;span style="color:#c7bf54">]&lt;/span>:34341
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* MappingVariesByDestIP: &lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* HairPinning: &lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* PortMapping:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* CaptivePortal: &lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* Nearest DERP: Tokyo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* DERP latency:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		- tok: 71.6ms &lt;span style="color:#c7bf54">(&lt;/span>Tokyo&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		- hkg: 93.1ms &lt;span style="color:#c7bf54">(&lt;/span>Hong Kong&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		- sin: 100.5ms &lt;span style="color:#c7bf54">(&lt;/span>Singapore&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自建-derp-节点">自建 DERP 节点&lt;/h2>
&lt;h3 id="1-要求">1. 要求&lt;/h3>
&lt;ul>
&lt;li>可访问的公网 IPV4 或 IPV6 地址&lt;/li>
&lt;li>域名，DERP 不修改源码必须要使用域名访问&lt;/li>
&lt;li>开放 DERP和 STUN端口&lt;/li>
&lt;/ul>
&lt;p>tailscale 的 &lt;a href="https://tailscale.com/kb/1118/custom-derp-servers#prerequisites">Prerequisites&lt;/a>文档中要求开放HTTP/HTTPS/STUN 三个端口，默认是 80/443/3478 端口，实际上有 HTTPS/STUN 就够了&lt;/p></description></item><item><title>Linux Docker容器开启IPv6</title><link>https://blog.hellowood.dev/posts/linux-docker%E5%AE%B9%E5%99%A8%E5%BC%80%E5%90%AFipv6/</link><pubDate>Sun, 21 Apr 2024 21:25:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/linux-docker%E5%AE%B9%E5%99%A8%E5%BC%80%E5%90%AFipv6/</guid><description>&lt;p>局域网开启了 IPv6 后，发现 Docker 因为没有开启 IPv6 无法访问了，因此需要为 Docker 开启 IPv6，根据官方文档提示，IPv6 仅在运行于 Linux 主机上的 Docker 守护进程上受支持&lt;/p>
&lt;p>Docker 支持只给特定的网络开启 IPv6，也支持给 bridge 网络开启 IPv6&lt;/p>
&lt;h2 id="只给特定的网络开启-ipv6">只给特定的网络开启 IPv6&lt;/h2>
&lt;p>这种方式不会修改默认的网络配置，指定特定的网络生效&lt;/p>
&lt;ul>
&lt;li>修改配置
修改 &lt;code>/etc/docker/daemon.json&lt;/code> 文件，开启 IPv6 网络&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;experimental&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;ip6tables&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>重启 docker&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo systemctl restart docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建 IPv6 网络&lt;/li>
&lt;/ul>
&lt;p>创建名为 &lt;code>homelab-v6&lt;/code> 的 IPv6 网络，并指定子网范围&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker network create --ipv6 --subnet 2001:0DB8::/112 homelab-v6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>测试验证&lt;/li>
&lt;/ul>
&lt;p>启动一个 busybox 容器，ping 阿里巴巴的 IPv6 DNS 地址 &lt;code>2400:3200::1&lt;/code>，发现可以正常访问，说明已经成功开启 IPv6&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --network&lt;span style="color:#c7bf54">=&lt;/span>homelab-v6 --rm -it busybox ping -6 -c1 2400:3200::1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PING 2400:3200::1 &lt;span style="color:#c7bf54">(&lt;/span>2400:3200::1&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">56&lt;/span> data bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">64&lt;/span> bytes from 2400:3200::1: &lt;span style="color:#dcaeea">seq&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#dcaeea">ttl&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">117&lt;/span> &lt;span style="color:#dcaeea">time&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>2040.345 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- 2400:3200::1 ping statistics ---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> packets transmitted, &lt;span style="color:#d19a66">1&lt;/span> packets received, 0% packet loss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>round-trip min/avg/max &lt;span style="color:#c7bf54">=&lt;/span> 2040.345/2040.345/2040.345 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="给-bridge-开启-ipv6">给 bridge 开启 IPv6&lt;/h2>
&lt;p>给 bridge 开启 IPv6 相当于默认给所有没有指定网络的容器都开启了 IPv6；此时需要在配置文件中指定 IPv6 子网范围&lt;/p></description></item><item><title>使用 Ubuntu 搭建 NFS 服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-ubuntu-%E6%90%AD%E5%BB%BA-nfs-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 27 Jan 2024 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-ubuntu-%E6%90%AD%E5%BB%BA-nfs-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>NFS(Network File System) 是由 Sun 公司提出的分布式文件系统协议，可以通过网络共享远程目录；默认没有加密，不提供身份验证，而是通过客户端 IP 或主机名限制客户端的访问&lt;/p>
&lt;h2 id="搭建-server-端">搭建 Server 端&lt;/h2>
&lt;h3 id="安装-nfs-kernel-server">安装 nfs-kernel-server&lt;/h3>
&lt;p>NFS 的 Server 端由 &lt;code>nfs-kernel-server&lt;/code> 提供，使用 apt 进行安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install -y nfs-kernel-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后，使用 &lt;code>systemctl&lt;/code> 查看状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl status nfs-mountd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>● nfs-mountd.service - NFS Mount Daemon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Loaded: loaded &lt;span style="color:#c7bf54">(&lt;/span>/lib/systemd/system/nfs-mountd.service; static&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Active: active &lt;span style="color:#c7bf54">(&lt;/span>running&lt;span style="color:#c7bf54">)&lt;/span> since Thu 2022-09-22 18:43:43 CST; 1h 5min ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Main PID: &lt;span style="color:#d19a66">128914&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>rpc.mountd&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tasks: &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>limit: 4415&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Memory: 556.0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU: 59ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CGroup: /system.slice/nfs-mountd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─128914 /usr/sbin/rpc.mountd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp systemd&lt;span style="color:#c7bf54">[&lt;/span>1&lt;span style="color:#c7bf54">]&lt;/span>: Starting NFS Mount Daemon...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp rpc.mountd&lt;span style="color:#c7bf54">[&lt;/span>128914&lt;span style="color:#c7bf54">]&lt;/span>: Version 2.6.1 starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp systemd&lt;span style="color:#c7bf54">[&lt;/span>1&lt;span style="color:#c7bf54">]&lt;/span>: Started NFS Mount Daemon.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改-nfs-配置">修改 NFS 配置&lt;/h3>
&lt;ul>
&lt;li>创建挂载目录并修改权限&lt;/li>
&lt;/ul>
&lt;p>首先，创建需要分享的目录，如 &lt;code>/data/nfs&lt;/code>&lt;/p></description></item><item><title>Ubuntu 22 环境初始化</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sun, 07 Jan 2024 18:03:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;p>在搭建 HomeLab 测试使用过程中，可能会经常创建新的 Ubuntu 虚拟机，或初始化树莓派，记录一些常用的初始化配置&lt;/p>
&lt;h2 id="修改主机名">修改主机名&lt;/h2>
&lt;p>将主机名改为 &lt;code>homelab&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hostnamectl hostname homelab
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="引入-ssh-公钥">引入 SSH 公钥&lt;/h2>
&lt;ul>
&lt;li>从本地导入&lt;/li>
&lt;/ul>
&lt;p>在本地执行，将公钥复制到要登录的机器上&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh-copy-id -i ~/.ssh/id_rsa.pub ubuntu@192.168.2.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-apt-源">修改 APT 源&lt;/h2>
&lt;p>将默认的 APT 源替换为&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华&lt;/a>的源&lt;/p>
&lt;ul>
&lt;li>修改镜像源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv /etc/apt/sources.list /etc/apt/sources.list.backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo bash -c &lt;span style="color:#63c381">&amp;#34;cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/apt/sources.list &amp;amp;&amp;amp; apt update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">EOF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 update 验证&lt;/p></description></item><item><title>Proxmox VE 创建自定义的 LXC 容器 CT 模板</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-lxc-%E5%AE%B9%E5%99%A8-ct-%E6%A8%A1%E6%9D%BF/</link><pubDate>Sun, 07 Jan 2024 12:00:10 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-lxc-%E5%AE%B9%E5%99%A8-ct-%E6%A8%A1%E6%9D%BF/</guid><description>&lt;p>LXC 是一种操作系统级别的虚拟化容器技术，可以理解为比 VM 更轻量的容器虚拟机；Docker 适用于为服务提供隔离环境，LXC 容器适用于作为虚拟机进行隔离；在 PVE 上 LXC 称为 CT&lt;/p>
&lt;p>在使用 PVE 的过程中会创建多个容器，容器的基础配置基本相同，通过模板的方式创建更方便；虽然 LXC 容器提供了类似 Dockerfile 的配置文件可以创建镜像，但是使用起来比较复杂，学习成本较高；因此可以基于 LXC 容器进行初始化，然后将修改后的 LXC 容器作为基础创建模板&lt;/p>
&lt;h2 id="创建-lxc-容器">创建 LXC 容器&lt;/h2>
&lt;p>以 Ubuntu 容器为例进行模板的创建，在 PVE 控制页面创建一个 LXC 容器并启动&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-ct-template-create-ct-by-origin-template.png" alt="homelab-pve-ct-template-create-ct-by-origin-template.png">&lt;/p>
&lt;h2 id="初始化-lxc-容器配置">初始化 LXC 容器配置&lt;/h2>
&lt;p>登录到创建的 LXC 容器中，根据需求安装需要用到的软件和配置进行初始化，可以参考 &lt;a href="https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96">ubuntu-22-环境初始化&lt;/a>&lt;/p>
&lt;h2 id="创建-ct-模板">创建 CT 模板&lt;/h2>
&lt;h3 id="清理容器">清理容器&lt;/h3>
&lt;p>清理容器的目的是删除可能变化配置和不需要的文件及配置&lt;/p>
&lt;ul>
&lt;li>清除无效软件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt autoremove
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>清除 DNS 和主机名配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm /etc/resolv.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm /etc/hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>清除操作命令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">history&lt;/span> -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="备份-lxc-容器">备份 LXC 容器&lt;/h3>
&lt;p>清理完成后，回到 PVE 的控制页面，选择刚才创建的 CT 容器进行备份&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-ct-template-backup-ct-as-template.png" alt="homelab-pve-ct-template-backup-ct-as-template.png">&lt;/p>
&lt;h3 id="将备份作为-ct-模板">将备份作为 CT 模板&lt;/h3>
&lt;p>登录到 PVE 机器，将刚才的备份从 &lt;code>/var/lib/vz/dump/&lt;/code> 目录移动到存放 CT 模板的 &lt;code>/var/lib/vz/template/cache/&lt;/code> 目录&lt;/p></description></item><item><title>在黑群晖使用 Docker 部署 Proxmox Backup Server</title><link>https://blog.hellowood.dev/posts/%E5%9C%A8%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-proxmox-backup-server/</link><pubDate>Sat, 23 Dec 2023 21:52:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9C%A8%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-proxmox-backup-server/</guid><description>&lt;p>Proxmox Backup Server 是 PVE 容器、虚拟机的备份解决方案，支持增量、重复数据消除备份，可以节省存储空间，同时支持加密和完整性校验&lt;/p>
&lt;p>Proxmox Backup Server 官方提供了 iso 格式的镜像，同时社区也有开源的 Docker 镜像的部署方式，为了在黑群晖上部署方便，使用 Docker 的方式进行部署，项目地址：&lt;a href="https://github.com/ayufan/pve-backup-server-dockerfiles">https://github.com/ayufan/pve-backup-server-dockerfiles&lt;/a>&lt;/p>
&lt;h2 id="部署-proxmox-backup-server">部署 Proxmox Backup Server&lt;/h2>
&lt;p>使用 Docker 或者 Docker Compose 方式部署都可以&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>需要注意，要使用 tmpfs 方式挂载 /run 目录，用于容器内部创建临时文件和目录；&lt;/p>
&lt;p>&lt;code>/etc/proxmox-backup&lt;/code>: 用于存储 PVE Backup Server 的配置信息
&lt;code>/var/log/proxmox-backup&lt;/code>: 用于存储日志信息
&lt;code>/var/lib/proxmox-backup&lt;/code>：用于存储数据
&lt;code>/backups&lt;/code>：存储容器、虚拟机的备份数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;2.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pve-backup-server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">ayufan/proxmox-backup-server:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8007:8007&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/docker/PVEBackup/etc:/etc/proxmox-backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/docker/PVEBackup/log:/var/log/proxmox-backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/docker/PVEBackup/lib:/var/lib/proxmox-backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/BackupServer:/backups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tmpfs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/run&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置完成后启动容器，访问 &lt;code>https://&amp;lt;ip&amp;gt;:8007/&lt;/code> 端口即可进行登录，默认的用户名是 &lt;code>admin&lt;/code>，密码是 &lt;code>pbspbs&lt;/code>，选择 &lt;code>Proxmox Backup authentication server&lt;/code> 领域进行登录&lt;/p></description></item><item><title>使用 Cloudflare Worker 和 R2 代理 OSS 图床</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-worker-%E5%92%8C-r2-%E4%BB%A3%E7%90%86-oss-%E5%9B%BE%E5%BA%8A/</link><pubDate>Sat, 23 Dec 2023 19:14:05 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-worker-%E5%92%8C-r2-%E4%BB%A3%E7%90%86-oss-%E5%9B%BE%E5%BA%8A/</guid><description>&lt;p>因为笔记可能会在多个平台发布，因此之前使用阿里云的 OSS 作为图片存储，直接将 OSS 的地址暴露到公网进行访问；但是随着流量逐渐增加，每月产生的流量费用也水高船涨，更重要的是 OSS 只支持 Refer 限制，并不能保证安全，在看到有人分享被刷 CDN 产生巨额费用后觉得必须要重视安全问题。&lt;/p>
&lt;p>赛博菩萨 Cloudflare 提供了 R2 作为存储，提供了 5GB 免费的容量，对于个人完全够用了；同时 Worker 支持 CDN 缓存及就近访问，因此使用 Worker 代理 R2 访问完全能满足我的需求&lt;/p>
&lt;p>考虑到有多个平台都是用了 OSS 作为链接，需要逐步迁移；因此，使用 Workers 优先从 R2 读取，如果 R2 没有则从 OSS 获取，并存储到 R2 中&lt;/p>
&lt;h2 id="安装-wrangler">安装 wrangler&lt;/h2>
&lt;p>在本地使用 wrangler 开发 Worker&lt;/p>
&lt;ul>
&lt;li>安装 wrangler&lt;/li>
&lt;/ul>
&lt;p>参考 &lt;a href="https://developers.cloudflare.com/workers/wrangler/install-and-update/">Install/Update Wrangler&lt;/a> 进行安装&lt;/p>
&lt;h2 id="创建-r2">创建 R2&lt;/h2>
&lt;p>在 Cloudflare 管理平台创建 R2，或者通过 wrangler 进行创建，参考 &lt;a href="https://developers.cloudflare.com/r2/buckets/create-buckets/">Create buckets&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wrangler r2 bucket create picture
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建-worker">创建 Worker&lt;/h2>
&lt;ul>
&lt;li>创建项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm create cloudflare@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 R2 绑定到 Worker&lt;/li>
&lt;/ul>
&lt;p>修改 wrangler.toml 配置文件，将 R2 绑定到当前 worker&lt;/p></description></item><item><title>使用阿尔卡特猫棒替换北京移动 GPON 光猫</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E9%98%BF%E5%B0%94%E5%8D%A1%E7%89%B9%E7%8C%AB%E6%A3%92%E6%9B%BF%E6%8D%A2%E5%8C%97%E4%BA%AC%E7%A7%BB%E5%8A%A8-gpon-%E5%85%89%E7%8C%AB/</link><pubDate>Mon, 27 Nov 2023 18:08:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E9%98%BF%E5%B0%94%E5%8D%A1%E7%89%B9%E7%8C%AB%E6%A3%92%E6%9B%BF%E6%8D%A2%E5%8C%97%E4%BA%AC%E7%A7%BB%E5%8A%A8-gpon-%E5%85%89%E7%8C%AB/</guid><description>&lt;p>最近移动送了条免费宽带，刚好联通宽带到期了，可以无缝衔接上；之前使用的是 ODI 猫棒+兮克的 SKS3200M-8GPY1XF 交换机，因此想继续使用 ODI 猫棒，但是一番尝试后始终无法成功拨号，于是改成了使用阿尔卡特猫棒&lt;/p>
&lt;p>阿尔卡特猫棒型号为 G-010S-P，版本为 6BA1896SPE2C05&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-network-gpon-pon-stick-setup-status.png" alt="homelab-network-gpon-pon-stick-setup-status.png">&lt;/p>
&lt;h2 id="宽带配置">宽带配置&lt;/h2>
&lt;ul>
&lt;li>改为桥接模式&lt;/li>
&lt;/ul>
&lt;p>首先要将宽带改为桥接模式，在安装时直接让运维小哥改了；如果没有修改可以联系宽带帮忙修改&lt;/p>
&lt;ul>
&lt;li>获取光猫的超级管理员密码&lt;/li>
&lt;/ul>
&lt;p>北京移动的超级管理员用户名是 &lt;code>CMCCAdmin&lt;/code>，密码是 &lt;code>aDm8H%MdA&lt;/code>；但是我尝试登陆时提示失败，然后联系运维小哥，使用光猫的 SN 和宽带账号授权之后可以正常登录了&lt;/p>
&lt;p>光猫信息如下：&lt;/p>
&lt;ul>
&lt;li>产品名称：吉比特无源光纤接入用户端设备（GPON ONU）&lt;/li>
&lt;li>产品类型：中国移动智能家庭网关 类型11&lt;/li>
&lt;li>产品型号：SK-D747&lt;/li>
&lt;li>电源：12V&amp;mdash;1.5A&lt;/li>
&lt;li>CMIIT ID: 2022XXXXXX&lt;/li>
&lt;li>设备标识：XXXXXX-光猫 SN&lt;/li>
&lt;li>MAC: XXXXXXXXXXX&lt;/li>
&lt;li>SN: 光猫 SN&lt;/li>
&lt;/ul>
&lt;h2 id="获取认证信息">获取认证信息&lt;/h2>
&lt;p>北京移动的认证使用的是光猫的 SN + PLOAM 密码&lt;/p>
&lt;ul>
&lt;li>SN&lt;/li>
&lt;/ul>
&lt;p>光猫 SN 在光猫背面即可看到，也可以登录后在设备信息中查看&lt;/p>
&lt;ul>
&lt;li>PLOAM 密码&lt;/li>
&lt;/ul>
&lt;p>PLOAM 密码的路径为网络-远程管理-认证，&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-network-gpon-model-info-ploam-password.png" alt="homelab-network-gpon-model-info-ploam-password.png">&lt;/p>
&lt;ul>
&lt;li>VLAN ID&lt;/li>
&lt;/ul>
&lt;p>北京移动的 VLAN ID 为 10&lt;/p>
&lt;h2 id="配置猫棒">配置猫棒&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;p>猫棒启动后，进入管理后台，这款猫棒默认的地址是 &lt;a href="http://192.168.1.10">http://192.168.1.10&lt;/a>，默认用户名 &lt;code>root&lt;/code>，密码 &lt;code>password&lt;/code>&lt;/p>
&lt;p>登录后，选择 GPON-互操作兼容配置，配置上面获取到的认证信息&lt;/p>
&lt;ul>
&lt;li>GPON SN: 光猫的 SN&lt;/li>
&lt;li>Ploam password: 光猫获取到的认证密码&lt;/li>
&lt;li>默认PVID: VLAN ID &lt;code>10&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>配置后，点击应用配置&lt;/p></description></item><item><title>使用 Cloudflare Tunnels 通过 Web SSH 访问服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8cloudflare-tunnels%E9%80%9A%E8%BF%87web-ssh%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 06 Oct 2023 15:25:13 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8cloudflare-tunnels%E9%80%9A%E8%BF%87web-ssh%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>Cloudflre 的 Zero Trust 支持通过 Tunnels 访问 SSH 类型的应用，可以通过 Web SSH 的方式访问服务器；支持多种登陆认证方式，安全性远高于直接暴露公网端口&lt;/p>
&lt;h2 id="创建-ssh-应用">创建 SSH 应用&lt;/h2>
&lt;ul>
&lt;li>创建应用&lt;/li>
&lt;/ul>
&lt;p>在 Cloudflare 控制台 &amp;gt; Zero Trust &amp;gt; Access &amp;gt; Applications 选择 Add an application 创建新的应用；应用类型为 Self-hosted&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-application-create.png" alt="homelab-cloudflare-ssh-application-create.png">&lt;/p>
&lt;ul>
&lt;li>配置应用信息&lt;/li>
&lt;/ul>
&lt;p>指定应用名称，并为应用配置域名；session 的过期时间可以按需配置&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-application.png" alt="homelab-cloudflare-ssh-configuration-application.png">&lt;/p>
&lt;ul>
&lt;li>指定访问策略&lt;/li>
&lt;/ul>
&lt;p>需要配置访问策略，只允许特定的邮箱登陆；如果需要使用其他的认证方式，如 GitHub/Google SSO 等，可以在 Cloudflare 控制台 &amp;gt; Zero Trust &amp;gt; Settings &amp;gt; Authentication &amp;gt; Login Methods 中添加&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-policy.png" alt="homelab-cloudflare-ssh-configuration-policy.png">&lt;/p>
&lt;ul>
&lt;li>修改应用类型&lt;/li>
&lt;/ul>
&lt;p>在 Additional settings 中，将 Browser rendering 的类型改为 SSH；然后选择保存，这样就配置好 SSH 应用了&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-set-application-type.png" alt="homelab-cloudflare-ssh-set-application-type.png">&lt;/p>
&lt;h2 id="配置-tunnels">配置 Tunnels&lt;/h2>
&lt;p>关于 Tunnels 配置安装请参考 &lt;a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8Cloudflare-Tunnels%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE/">使用Cloudflare-Tunnels提供服务公网访问&lt;/a>&lt;/p></description></item><item><title>Linux 环境下配置不间断电源 UPS</title><link>https://blog.hellowood.dev/posts/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%B8%8D%E9%97%B4%E6%96%AD%E7%94%B5%E6%BA%90ups/</link><pubDate>Wed, 04 Oct 2023 15:22:56 +0800</pubDate><guid>https://blog.hellowood.dev/posts/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%B8%8D%E9%97%B4%E6%96%AD%E7%94%B5%E6%BA%90ups/</guid><description>&lt;p>UPS (Uninterruptible Power Supply)，是一种含有储能装置的不间断电源。主要用于给部分对电源稳定性要求较高的设备，提供不间断的电源&lt;/p>
&lt;p>一般的 UPS 都支持通过 USB 连接到电脑或者 NAS 等设备上，Linux/Mac/Windows 均支持使用 UPS；&lt;/p>
&lt;p>因为电路不稳定，存在偶尔断电的情况，因此希望通过 UPS 保护树莓派、路由器、光猫、硬盘录像机等设备；将 UPS 通过 USB 接口连接到树莓派，由树莓派控制其他设备在断电时关机&lt;/p>
&lt;h2 id="安装-nut">安装 NUT&lt;/h2>
&lt;p>&lt;a href="https://networkupstools.org/">NUT&lt;/a>(Network UPS Tools) 是一种开源软件工具，其主要功能特点是实时监控与管理不间断电源（UPS）设备，支持多种通信协议，自动执行操作以应对电力故障，适用于多平台，并允许集中管理多个UPS设备，以确保与这些设备连接的计算机和设备在电力问题发生时能够继续正常运行或安全关闭&lt;/p>
&lt;p>NUT中的主要软件组件和功能：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Driver（驱动程序）：NUT包括各种不同制造商的UPS设备的驱动程序，使NUT能够与多种型号的UPS设备通信。这些驱动程序负责与UPS设备建立连接，并获取有关电源状态、电池状态和其他参数的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upsd（UPS守护进程）：upsd是NUT的核心守护进程，负责与UPS设备通信，并将UPS状态信息提供给其他NUT组件和客户端。它可以通过网络协议（如SNMP、HTTP、XML-RPC等）向其他计算机提供UPS状态信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upsmon（UPS监控守护进程）：upsmon监控守护进程用于监视UPS状态，并在检测到电力问题时执行操作。它可以配置为执行自定义脚本、关闭计算机或发送警报通知，以确保系统的连续性和数据完整性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upslog（UPS事件记录器）：upslog用于记录UPS事件和状态信息，以便后续分析和故障排除。它可以生成日志文件，其中包含UPS的运行历史和电力事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nutclient（NUT客户端工具）：NUT提供了一些用于监控和管理UPS的命令行工具，例如upsc用于查询UPS状态，upscmd用于发送命令到UPS，以及upsrw用于修改UPS配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> apt install -y nut
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通过-usb-连接-ups">通过 USB 连接 UPS&lt;/h2>
&lt;p>在将 UPS 通过 USB 连接到树莓派后，可以通过查看 USB 设备进行检查&lt;/p>
&lt;ul>
&lt;li>检查 USB 连接&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo lsusb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中的 Device 003 就是 UPS，说明 USB 连接正常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">003&lt;/span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">002&lt;/span> Device 002: ID 174c:55aa ASMedia Technology Inc. ASM1051E SATA 6Gb/s bridge, ASM1053E SATA 6Gb/s bridge, ASM1153 SATA 3Gb/s bridge, ASM1153E SATA 6Gb/s bridge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">002&lt;/span> Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">001&lt;/span> Device 003: ID 0463:ffff MGE UPS Systems UPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">001&lt;/span> Device 002: ID 2109:3431 VIA Labs, Inc. Hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">001&lt;/span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过 &lt;code>nut-scanner&lt;/code> 检查 UPS 设备&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nut-scanner -q
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正确识别到连接的 UPS 设备，驱动为 &lt;code>usbhid-ups&lt;/code>，产品为 &lt;code>SANTAK TG-BOX&lt;/code>&lt;/p></description></item><item><title>WireGuard对端动态IP时主动更新地址</title><link>https://blog.hellowood.dev/posts/wireguard%E5%AF%B9%E7%AB%AF%E5%8A%A8%E6%80%81ip%E6%97%B6%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%9C%B0%E5%9D%80/</link><pubDate>Sun, 24 Sep 2023 18:37:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/wireguard%E5%AF%B9%E7%AB%AF%E5%8A%A8%E6%80%81ip%E6%97%B6%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%9C%B0%E5%9D%80/</guid><description>&lt;p>如果 WireGuard 对端的 &lt;code>Endpoint&lt;/code> 是一个域名，这个域名只会在启动的时候解析一次，后续不会更新；当这个域名发生变化时，WireGuard 连接就会断开&lt;/p>
&lt;p>wireguard-tools 的仓库中提供了检测 IP 变化并更新 &lt;code>Endpoint&lt;/code> 的脚本 &lt;a href="https://git.zx2c4.com/wireguard-tools/tree/contrib/reresolve-dns/reresolve-dns.sh">https://git.zx2c4.com/wireguard-tools/tree/contrib/reresolve-dns/reresolve-dns.sh&lt;/a>，因此可以使用该脚本，通过定时任务的方式可以实现域名 IP 变化后更新 WireGuard&lt;/p>
&lt;ul>
&lt;li>下载仓库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://git.zx2c4.com/wireguard-tools /usr/share/wireguard-tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置更新服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cat &lt;span style="color:#98c379">&amp;lt;&amp;lt;EOL &amp;gt; /etc/systemd/system/wireguard-update-dns.service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Description=Update DNS of all WireGuard endpoints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Wants=network.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">After=network.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Type=oneshot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">ExecStart=/bin/sh -c &amp;#39;for i in /etc/wireguard/*.conf; do /usr/share/wireguard-tools/contrib/reresolve-dns/reresolve-dns.sh &amp;#34;\$i&amp;#34;; done&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">EOL&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置定时任务服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cat &lt;span style="color:#98c379">&amp;lt;&amp;lt;EOL &amp;gt; /etc/systemd/system/wireguard-update-dns.timer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Description=Update DNS of all WireGuard endpoints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Timer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">OnCalendar=*:*:0/30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Install]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">WantedBy=timers.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">EOL&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl &lt;span style="color:#ef8383">enable&lt;/span> wireguard-update-dns.service wireguard-update-dns.timer --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，就会每隔 30s 检测并更新一次 Endpoint 的地址了&lt;/p></description></item><item><title>使用WireGuard连接异地局域网</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%9C%B0%E5%B1%80%E5%9F%9F%E7%BD%91/</link><pubDate>Sun, 24 Sep 2023 17:56:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%9C%B0%E5%B1%80%E5%9F%9F%E7%BD%91/</guid><description>&lt;p>最近使用 Frigate 做家庭监控，因为 Frigate 部署在自己的 HomeLab 服务器里，有几个监控在老家，需要跨地域访问；有以下几种方案：&lt;/p>
&lt;ol>
&lt;li>使用公网映射：将老家的监控映射到公网，但是在公网开放监控并不安全，另外还需要申请公网IP&lt;/li>
&lt;li>使用 TailScale 组网：测试过程中发现 TailScale 需要从香港中转，延迟很高，视频经常断开；自己部署 DERP 服务端同样需要在公网开放多个端口，不安全并且比较麻烦&lt;/li>
&lt;li>使用 Cloudflare Tunnel 转发：使用 Tunnel 延迟也很高，并不稳定&lt;/li>
&lt;li>使用 WireGuard 组网：对端直接连接，延迟低，仅需要开放一个 UDP 端口，较安全&lt;/li>
&lt;/ol>
&lt;p>最终选择使用 WireGuard 组网方案，在老家放了一台树莓派4B，用于运行 WireGuard 进行流量转发；HomeLab 服务器部署了一台 LXC 容器运行 WireGuard，用于连接树莓派；开启了局域网转发后，本地的局域网设备可以和老家的局域网设备互相通信&lt;/p>
&lt;blockquote>
&lt;p>注意：需要对端其中一方有可以直接访问的公网IP&lt;/p>
&lt;/blockquote>
&lt;p>关于 WireGuard 的介绍可以参考 &lt;a href="https://www.wireguard.com/">WireGuard&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-wireguard-vpn-for-sub-network.svg" alt="homelab-wireguard-vpn-for-sub-network.svg">&lt;/p>
&lt;h2 id="安装配置-wireguard">安装配置 WireGuard&lt;/h2>
&lt;h3 id="安装-wireguard">安装 wireguard&lt;/h3>
&lt;p>因为 LXC 容器和树莓派都使用的是 Ubuntu 22.04 的系统，因此直接使用 apt 安装即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> apt install -y wireguard-tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成密钥对">生成密钥对&lt;/h3>
&lt;p>详细操作参考 &lt;a href="https://www.wireguard.com/quickstart/#key-generation">Key Generation&lt;/a>&lt;/p>
&lt;ul>
&lt;li>创建文件夹并修改权限&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir wireguard &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ef8383">cd&lt;/span> wireguard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">umask&lt;/span> &lt;span style="color:#d19a66">077&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>umask 077&lt;/code> 的作用是设置系统默认文件和文件夹的权限为只有创建用户拥有全部权限（读、写和执行）&lt;/p>
&lt;ul>
&lt;li>创建 OpenWrt 密钥对&lt;/li>
&lt;/ul>
&lt;p>先创建私钥，然后使用私钥创建公钥&lt;/p></description></item><item><title>使用 Docker 部署 Clash Premium</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2clash-premium/</link><pubDate>Sat, 09 Sep 2023 21:32:33 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2clash-premium/</guid><description>&lt;p>Clash Premium 是 Clash 的闭源内核版本，相比 Clash 开源版本，最大的特点是支持规则集和代理服务订阅能力&lt;/p>
&lt;h2 id="订阅格式转换">订阅格式转换&lt;/h2>
&lt;p>大部分订阅是 base64 编码的节点，无法被 Clash 直接使用，因此需要进行订阅格式转换，具体请参考 &lt;a href="https://blog.hellowood.dev/posts/clash-%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2/">Clash 使用 Docker 部署&lt;/a> 或使用在线工具直接转换：&lt;a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/&lt;/a>&lt;/p>
&lt;h2 id="修改配置">修改配置&lt;/h2>
&lt;h3 id="基础配置">基础配置&lt;/h3>
&lt;p>基础配置部分用于指定 Clash 的端口、代理模式等；使用 TUN 后可以代理 UDP 流量，开启 tracing 可以对 Clash 进行性能监控&lt;/p>
&lt;ul>
&lt;li>config.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">7890&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">socks-port&lt;/span>: &lt;span style="color:#d19a66">7891&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">redir-port&lt;/span>: &lt;span style="color:#d19a66">7892&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">allow-lan&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">mode&lt;/span>: &lt;span style="color:#98c379">rule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">log-level&lt;/span>: &lt;span style="color:#98c379">info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 控制端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">external-controller&lt;/span>: :&lt;span style="color:#d19a66">9090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 访问密码，建议设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">secret&lt;/span>: &lt;span style="color:#63c381">&amp;#34;123456&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># TUN 模式，用于代理 TCP、UDP、ICMP 流量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">tun&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enable&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stack&lt;/span>: &lt;span style="color:#98c379">system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">auto-route&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">auto-redir&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">auto-detect-interface&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 用于性能分析&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">profile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tracing&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置策略组">配置策略组&lt;/h3>
&lt;p>代理提供方 &lt;code>proxy-providers&lt;/code> 用于为策略组 &lt;code>proxy-groups&lt;/code> 提供代理节点；这部分用于取代 Clash 中的 &lt;code>proxies&lt;/code>&lt;/p></description></item><item><title>在PVE的LXC容器中直通核心显卡</title><link>https://blog.hellowood.dev/posts/%E5%9C%A8pve%E7%9A%84lxc%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9B%B4%E9%80%9A%E6%A0%B8%E5%BF%83%E6%98%BE%E5%8D%A1/</link><pubDate>Sat, 09 Sep 2023 17:53:36 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9C%A8pve%E7%9A%84lxc%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9B%B4%E9%80%9A%E6%A0%B8%E5%BF%83%E6%98%BE%E5%8D%A1/</guid><description>&lt;p>在 ProxmoxVE 平台中使用 LXC 容器使用 Docker 部署 &lt;a href="https://frigate.video/">frigate&lt;/a> 时(或其他需要GPU的容器如Jellyfin等)，需要使用 GPU 对 ffmpeg 进行加速，因此需要将宿主机 N5105 的核心显卡挂载到 LXC 容器到 Docker 容器中&lt;/p>
&lt;h2 id="安装核显驱动">安装核显驱动&lt;/h2>
&lt;ul>
&lt;li>查看设备&lt;/li>
&lt;/ul>
&lt;p>如果能够看到 PCI 设备中包含核心显卡，说明设备识别正常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lspci | grep VGA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00:02.0 VGA compatible controller: Intel Corporation JasperLake &lt;span style="color:#c7bf54">[&lt;/span>UHD Graphics&lt;span style="color:#c7bf54">]&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>rev 01&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查看驱动&lt;/li>
&lt;/ul>
&lt;p>可以看到 card0 和 renderD128 都存在，说明驱动正常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ls /dev/dri/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>by-path card0	renderD128
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通常不需要安装驱动，如果设备没有正确识别，可以参考 &lt;a href="https://dgpu-docs.intel.com/driver/installation.html#ubuntu-install-steps">https://dgpu-docs.intel.com/driver/installation.html#ubuntu-install-steps&lt;/a> 进行安装&lt;/p>
&lt;h2 id="创建-lxc-容器">创建 LXC 容器&lt;/h2>
&lt;p>如图，在 PVE的控制界面，选择创建 CT 容器；配置中取消 &amp;ldquo;无特权容器&amp;rdquo; 的勾选，模板选择 CentOS 或 Ubuntu 等均可&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-lxc-intel-graphics-mount-1.png" alt="homelab-pve-lxc-intel-graphics-mount-1.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-lxc-intel-graphics-mount-2.png" alt="homelab-pve-lxc-intel-graphics-mount-2.png">&lt;/p>
&lt;p>创建完成后，即可看到容器的 ID，即VMID，这里是 104&lt;/p>
&lt;h2 id="修改核心显卡直通">修改核心显卡直通&lt;/h2>
&lt;p>修改核心显卡直通，需要使用 PVE 宿主机的命令行修改 LXC 容器的配置文件&lt;/p></description></item><item><title>小米路由器 4A 千兆版刷入 OpenWrt</title><link>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-4a-%E5%8D%83%E5%85%86%E7%89%88%E5%88%B7%E5%85%A5-openwrt/</link><pubDate>Fri, 25 Aug 2023 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-4a-%E5%8D%83%E5%85%86%E7%89%88%E5%88%B7%E5%85%A5-openwrt/</guid><description>&lt;p>因为买了新的路由器，之前的小米 4A 千兆版被淘汰下来了，因此想刷个 OpenWrt 测试一下&lt;/p>
&lt;h2 id="依赖">依赖&lt;/h2>
&lt;ul>
&lt;li>电脑 Win/Mac/Linux，需要支持网线连接，如果是 Mac，需要一个网线转接器&lt;/li>
&lt;li>小米路由器 4A 千兆版&lt;/li>
&lt;li>Python3 环境&lt;/li>
&lt;li>网线&lt;/li>
&lt;/ul>
&lt;h2 id="开启路由器-ssh">开启路由器 SSH&lt;/h2>
&lt;p>需要先开启路由器的 SSH，小米的固件只有开发版支持 SSH，但是现在所有的版本基本都不会放出开发版；所以只能通过破解的方式开启(开启后不支持保修)；&lt;/p>
&lt;p>因为小米路由器系统存在 &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-18370">CVE-2019-18370&lt;/a> 漏洞，所以可以通过该漏洞开启 SSH；需要使用项目 &lt;a href="https://github.com/acecilia/OpenWRTInvasion">acecilia/OpenWRTInvasion&lt;/a> 提供的脚本&lt;/p>
&lt;ul>
&lt;li>下载 &lt;a href="https://github.com/acecilia/OpenWRTInvasion">acecilia/OpenWRTInvasion&lt;/a> ，并安装依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/acecilia/OpenWRTInvasion.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> OpenWRTInvasion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip3 install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>执行脚本&lt;/li>
&lt;/ul>
&lt;p>通过 WiFi 或有线的方式连接到路由器，然后进入命令行，执行以下命令，运行 &lt;code>remote_command_execution_vulnerability.py&lt;/code> 脚本；执行脚本时需要输入路由器的地址和后台访问密码；地址如果没有改动默认就是 &lt;code>192.168.31.1&lt;/code>，或者访问 &lt;code>miwifi.com&lt;/code>也可以直接访问到；如果选择了离线模式，会在本地启动一个 ftp server&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python3 remote_command_execution_vulnerability.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在执行结束后，会输出提示信息，用于通过 SSH 访问路由器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>here two options to provide the files needed &lt;span style="color:#c678dd">for&lt;/span> invasion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1. Use a &lt;span style="color:#ef8383">local&lt;/span> TCP file server runing on random port to provide files in &lt;span style="color:#ef8383">local&lt;/span> directory &lt;span style="color:#98c379">`&lt;/span>script_tools&lt;span style="color:#98c379">`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. Download needed files from remote github repository. &lt;span style="color:#c7bf54">(&lt;/span>choose this option only &lt;span style="color:#c678dd">if&lt;/span> github is accessable inside router device.&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Which option &lt;span style="color:#c678dd">do&lt;/span> you prefer? &lt;span style="color:#c7bf54">(&lt;/span>default: 1&lt;span style="color:#c7bf54">)&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>****************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>router_ip_address: miwifi.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stok: f19c778f7bc6fbe92cc70a6c6bd2bd4f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file provider: &lt;span style="color:#ef8383">local&lt;/span> file server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>****************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start uploading config file...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#ef8383">exec&lt;/span> command...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">local&lt;/span> file server is runing on 0.0.0.0:57165. &lt;span style="color:#dcaeea">root&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">&amp;#39;script_tools&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">local&lt;/span> file server is getting &lt;span style="color:#98c379">&amp;#39;busybox-mipsel&amp;#39;&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> 192.168.31.1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">local&lt;/span> file server is getting &lt;span style="color:#98c379">&amp;#39;dropbearStaticMipsel.tar.bz2&amp;#39;&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> 192.168.31.1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">done&lt;/span>! Now you can connect to the router using several options: &lt;span style="color:#c7bf54">(&lt;/span>user: root, password: root&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* telnet miwifi.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* ssh -oKexAlgorithms&lt;span style="color:#c7bf54">=&lt;/span>+diffie-hellman-group1-sha1 -c 3des-cbc -o &lt;span style="color:#dcaeea">UserKnownHostsFile&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>/dev/null root@miwifi.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* ftp: using a program like cyberduck
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>SSH 访问路由器&lt;/li>
&lt;/ul>
&lt;p>通过指定参数的方式，使用 SSH 访问路由器，用户名密码都是 &lt;code>root&lt;/code>&lt;/p></description></item><item><title>使用arpl在PVE上安装黑群晖</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8arpl%E5%9C%A8pve%E4%B8%8A%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</link><pubDate>Sat, 01 Jul 2023 16:12:02 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8arpl%E5%9C%A8pve%E4%B8%8A%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</guid><description>&lt;p>&lt;a href="https://github.com/fbelavenuto/arpl">arpl&lt;/a> 是 GitHub 上开源的自动装载程序，能够实现使用 arpl 在物理机或虚拟机中安装黑群晖&lt;/p>
&lt;h2 id="1-下载-arpl">1. 下载 arpl&lt;/h2>
&lt;p>在 GitHub 项目 &lt;a href="https://github.com/fbelavenuto/arpl">fbelavenuto/arpl&lt;/a> 的 &lt;a href="https://github.com/fbelavenuto/arpl/releases">Releases&lt;/a> 中选择下载最新版本，选择 &lt;code>img.zip&lt;/code> 后缀的文件进行下载&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-arpl-download.png" alt="homelab-nas-synology-arpl-download.png">&lt;/p>
&lt;p>解压后可以得到一个名为 &lt;code>arpl.img&lt;/code> 的文件，这个文件用于后续安装黑群晖&lt;/p>
&lt;h2 id="2-配置虚拟机">2. 配置虚拟机&lt;/h2>
&lt;h3 id="21-上传-arpl">2.1 上传 arpl&lt;/h3>
&lt;p>将 &lt;code>arpl.img&lt;/code> 文件上传到 PVE 的 ISO 镜像中，用于后续引导黑群晖&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-upload-arpl-img.png" alt="homelab-nas-synology-upload-arpl-img.png">&lt;/p>
&lt;h3 id="22-创建虚拟机">2.2 创建虚拟机&lt;/h3>
&lt;p>在 PVE 中创建一个新的虚拟机，操作系统选择 &amp;lsquo;不使用任何介质&amp;rsquo;，不使用磁盘，或者在创建后将磁盘删除&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-create-vm-instance.png" alt="homelab-nas-synology-create-vm-instance.png">&lt;/p>
&lt;h3 id="23-配置磁盘">2.3 配置磁盘&lt;/h3>
&lt;h4 id="231-将-arpl-作为磁盘导入虚拟机">2.3.1 将 arpl 作为磁盘导入虚拟机&lt;/h4>
&lt;p>使用 PVE 的命令行，使用以下命令将 arpl.img 作为虚拟机的磁盘导入，虚拟机 ID 为 101&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qm importdisk &lt;span style="color:#d19a66">101&lt;/span> /var/lib/vz/template/iso/arpl.img local-lvm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在控制台修改磁盘 &amp;lsquo;总线/设备&amp;rsquo; 为 SATA 并添加&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-arpl-import-as-disk-set-sata.png" alt="homelab-nas-synology-arpl-import-as-disk-set-sata.png">&lt;/p>
&lt;h4 id="232-配置系统硬盘">2.3.2 配置系统硬盘&lt;/h4>
&lt;p>在控制台再添加一个 SATA 硬盘，用于安装群晖系统及套件&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-arpl-system-disk.png" alt="homelab-nas-synology-arpl-system-disk.png">&lt;/p></description></item><item><title>使用兮克 2.5G 交换机将北京联通 EPON 改为 ODI 猫棒接入</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%85%AE%E5%85%8B-2.5g-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B0%86%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A-epon-%E6%94%B9%E4%B8%BA-odi-%E7%8C%AB%E6%A3%92%E6%8E%A5%E5%85%A5/</link><pubDate>Mon, 19 Jun 2023 08:54:44 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%85%AE%E5%85%8B-2.5g-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B0%86%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A-epon-%E6%94%B9%E4%B8%BA-odi-%E7%8C%AB%E6%A3%92%E6%8E%A5%E5%85%A5/</guid><description>&lt;p>最近入手了兮克2.5G交换机（兮克SKS1200-8GPY1XF），有 8 个 2.5G 电口和 1 个 10G SFP+ 光口；支持多种组网模式，其中一种是支持使用猫棒接入，由路由器拨号后再回接到交换机，这样就可以替换掉光猫了
(注意：兮克 SKS1200-8GPY1XF 不支持 VLAN 隔离，将网线接到路由器再回接会形成环路，导致网络频繁抖动；建议使用最新的支持 VLAN 隔离的版本)&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-switch-sfp-network.png" alt="homelab-switch-sfp-network.png">&lt;/p>
&lt;p>替换光猫有以下原因：&lt;/p>
&lt;ol>
&lt;li>千兆及以上宽带突破不到千兆限制：运营商的千兆光猫一般只能跑到 950M左右，而 EPON 支持 1.25G 下行，GPON 支持 2.5G 下行&lt;/li>
&lt;li>减少光猫空间占用：光猫体积较大，替换成猫棒可以减少空间占用，对于将网络设备放在弱电箱的用户比较合适&lt;/li>
&lt;li>瞎折腾：纯粹为了体验和折腾&lt;/li>
&lt;/ol>
&lt;h2 id="名词解释">名词解释&lt;/h2>
&lt;ul>
&lt;li>猫棒&lt;/li>
&lt;/ul>
&lt;p>猫棒(Pon Stick) 就是 SFP 封装的猫，分为 GPON、EPON 等，接口是 SFP，可插到有 SFP 口的交换机、路由器或者网卡上来代替光猫，具有光猫完整的功能；优点是体积小，网速比普通光猫高；缺点是性能羸弱，发热量大，不够稳定&lt;/p>
&lt;ul>
&lt;li>光模块&lt;/li>
&lt;/ul>
&lt;p>光模块工作在OSI模型的物理层，是光纤通信系统中的核心器件之一。它主要由光电子器件（光发射器、光接收器）、功能电路和光接口等部分组成，主要作用就是实现光纤通信中的光电转换和电光转换功能；光模块是一个光电转换器，而猫棒是有 CPU、内存、系统的光猫，两者都使用 SFP 接口&lt;/p>
&lt;ul>
&lt;li>SFP/SFP+&lt;/li>
&lt;/ul>
&lt;p>SFP（Small Form-Factor Pluggable）和SFP+（Enhanced Small Form-Factor Pluggable）是两种不同的光模块类型，主要区别是它们支持的传输速率不同；SFP 模块支持最高传输速率为1.25 Gbps，而 SFP+ 模块支持最高传输速率为10 Gbps。此外，SFP+ 可以向下兼容 SFP 插槽，因此可以将 SFP+ 插入 SFP 插槽中，但反之则不行&lt;/p>
&lt;ul>
&lt;li>UPC/APC/SC：&lt;/li>
&lt;/ul>
&lt;p>UPC（Ultra Physical Contact）、APC（Angled Physical Contact）和SC（Subscriber Connector）都是光纤接口的类型；通常 APC 是绿色的接头，用于机房等场景；SC 是蓝色的接头，一般家用光纤都是 SC 接口&lt;/p></description></item><item><title>使用WireGuard从外网访问OpenWrt</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E4%BB%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AEopenwrt/</link><pubDate>Mon, 12 Jun 2023 16:30:22 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E4%BB%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AEopenwrt/</guid><description>&lt;p>在使用过程中，如果通过DDNS 的方式将 OpenWrt 暴露在公网中，很容易遭受攻击或者入侵，因此可以使用 WireGuard 作为 VPN 进行访问，更加安全；因此，使用 OpenWrt 搭建 WireGuard VPN，实现从外网访问 OpenWrt&lt;/p>
&lt;p>&lt;a href="https://www.wireguard.com/">WireGuard&lt;/a> 是一种现代的 VPN 协议，可以快速、安全地建立虚拟私人网络连接。相比于传统的 VPN 协议，如 OpenVPN 和I PSec，WireGuard 具有更简单的设计、更快的速度、更高的安全性和更小的代码量&lt;/p>
&lt;h2 id="核心概念">核心概念&lt;/h2>
&lt;p>WireGuard中主要涉及以下几个概念：&lt;/p>
&lt;ul>
&lt;li>接口（Interface）：表示一个 WireGuard 端点（Peer）的虚拟网络接口，用于处理加密和解密流量、路由和其他传输信息。&lt;/li>
&lt;li>对等端（Peer）：表示使用 WireGuard 连接的每个设备或节点。每个 Peer 在连接时需要交换公钥和预共享密钥等信息。&lt;/li>
&lt;li>公钥（PublicKey）：每个 WireGuard 对等端拥有的公钥，用于加密通信流量和生成预共享密钥。&lt;/li>
&lt;li>私钥（PrivateKey）：与每个公钥相配对的私钥，只应该存储在拥有者的设备上。&lt;/li>
&lt;li>端点（Endpoint）：是在网络中可访问某个 Peer 的 IP 地址和端口号，用于建立连接。&lt;/li>
&lt;li>IP 分配（IP Address Assignment）：指定每个接口使用的 IPv4/IPv6 前缀范围。&lt;/li>
&lt;li>允许 IP（Allowed IP）：定义被 WireGuard 处理的哪些 IP 包，以及将这些包重新路由到哪个接口。&lt;/li>
&lt;li>预共享密钥（Pre-shared Key）：在 Peer 之间建立安全连接时使用的共享密钥，用于加密数据包。&lt;/li>
&lt;li>Listen Port（监听端口）：一个 Peer 监听的 UDP 端口号。其他 Peer 使用此端口发送数据包到该 Peer&lt;/li>
&lt;/ul>
&lt;h2 id="配置-openwrt">配置 OpenWrt&lt;/h2>
&lt;h3 id="安装-wireguard">安装 WireGuard&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> opkg install wireguard-tools luci-app-wireguard luci-i18n-wireguard-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此命令会自动安装 WireGuard 的依赖，也可以在管理界面进行安装；安装完成后打开 OpenWrt 管理界面-状态，就可以看到 WireGuard 的控制界面了；此时提示未配置 WireGuard 端口，需要在网络-接口中进行配置&lt;/p></description></item><item><title>Proxmox VE 添加监控</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E6%B7%BB%E5%8A%A0%E7%9B%91%E6%8E%A7/</link><pubDate>Sun, 09 Apr 2023 21:29:39 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E6%B7%BB%E5%8A%A0%E7%9B%91%E6%8E%A7/</guid><description>&lt;p>PVE 支持添加 &lt;a href="https://graphiteapp.org/">Graphite&lt;/a> 或者 &lt;a href="https://www.influxdata.com/">InfluxDB&lt;/a> 作为指标数据的存储；在添加配置后，PVE 会主动将配置信息发送到对应的存储中，用于记录和监控 PVE 的状态&lt;/p>
&lt;p>基于 Docker 容器，使用 InfluxDB 和 Grafana 对 PVE 进行监控，效果如图：&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-promoxve-monitor-metrics-dashboard.png" alt="homelab-promoxve-monitor-metrics-dashboard.png">&lt;/p>
&lt;h2 id="配置-influxdb">配置 InfluxDB&lt;/h2>
&lt;p>使用的是 InfluxDB 2 版本，使用 Flux 语法进行查询；因此需要启动 InfluxDB 2 的容器，使用 DockerCompose 方便配置&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">influxdb&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">influxdb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">influxdb:2.6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8086:8086&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/influx/data:/var/lib/influxdb2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/influx/config:/etc/influxdb2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_MODE&lt;/span>: &lt;span style="color:#98c379">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_USERNAME&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_PASSWORD&lt;/span>: &lt;span style="color:#98c379">qwertyuiop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_ORG&lt;/span>: &lt;span style="color:#98c379">influx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_BUCKET&lt;/span>: &lt;span style="color:#98c379">influx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_ADMIN_TOKEN&lt;/span>: &lt;span style="color:#d19a66">123456&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>DOCKER_INFLUXDB_INIT_MODE&lt;/code>它用于指定容器启动时运行的初始化模式。该变量有两个有效值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>setup&lt;/code>: 表示在容器首次启动时，将执行InfluxDB初始化脚本并创建管理员用户。&lt;/li>
&lt;li>&lt;code>skip&lt;/code>：表示跳过初始化脚本的执行，直接启动InfluxDB服务。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>DOCKER_INFLUXDB_INIT_PASSWORD&lt;/code> 不能设置的太简单，否则 InfluxDB 启动时会报错
&lt;code>DOCKER_INFLUXDB_INIT_ORG&lt;/code> 用于指定 InfluxDB 的组织
&lt;code>DOCKER_INFLUXDB_INIT_BUCKET&lt;/code> 用于指定初始化使用的 Bucket
&lt;code>DOCKER_INFLUXDB_INIT_ADMIN_TOKEN&lt;/code> 用于访问时进行鉴权&lt;/p>
&lt;h2 id="配置-pve">配置 PVE&lt;/h2>
&lt;p>在 PVE 的服务器视图下，选择数据中心 - 指标服务器，选择添加 InfluxDB，输入相关的配置；协议选择 HTTP，组织添加 &lt;code>DOCKER_INFLUXDB_INIT_ORG&lt;/code> 配置的值，插槽添加 &lt;code>DOCKER_INFLUXDB_INIT_BUCKET&lt;/code> 配置的 Bucket， 令牌填写 &lt;code>DOCKER_INFLUXDB_INIT_ADMIN_TOKEN&lt;/code> 配置的 token&lt;/p></description></item><item><title>N5105 Promox VE 虚拟机频繁死机问题处理</title><link>https://blog.hellowood.dev/posts/n5105-promox-ve-%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%A2%91%E7%B9%81%E6%AD%BB%E6%9C%BA%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</link><pubDate>Sat, 25 Mar 2023 21:31:50 +0800</pubDate><guid>https://blog.hellowood.dev/posts/n5105-promox-ve-%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%A2%91%E7%B9%81%E6%AD%BB%E6%9C%BA%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</guid><description>&lt;p>使用 N5105 作为 HomeLab 的服务器；之前安装的 ESXi，使用 Ubuntu 22 的时候经常会出现 Ubuntu CPU 占用达到100%，然后死机；但是其他的虚拟机都没有问题，因为对 Linux 并不熟，查看了 ESXi 和 Ubuntu 日志并没有异常；后面安装黑群晖一直失败，因此换到了 Proxmox VE&lt;/p>
&lt;p>换到 PVE 后依然存在同样的问题，以为是服务的问题，于是给 Docker 容器添加了资源限制，无效后迁移到了 CentOS 部署，发现还是同样的问题；并且越来越频繁，从一天一次变成了几小时一次，几乎无法使用&lt;/p>
&lt;p>猜测会不会是硬件问题，一番搜索发现在 N5105 上居然是个普遍的问题&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>这个问题于 2022-08-04 在 Proxmox 的问题反馈中提交：&lt;a href="https://bugzilla.proxmox.com/show_bug.cgi?id=4188">Bug 4188 - VMs freeze on Intel N5105 CPU&lt;/a>，描述中&amp;quot;到运行Intel N5105 CPU的一些用户注意到在Proxmox上运行的虚拟机会冻结，并记录了各种错误。虚拟机会冻结，控制台无法输入，CPU利用率达到最大值，直到强制重启虚拟机&amp;quot;，现象和我遇到的是一样的，说明该现象是通病；&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-vm-freeze-issue-bug-feedback.png" alt="homelab-pve-vm-freeze-issue-bug-feedback.png">&lt;/p>
&lt;p>2022-9-13 在帖子 &lt;a href="https://forum.proxmox.com/threads/opt-in-linux-5-19-kernel-for-proxmox-ve-7-x-available.115090/">Opt-in Linux 5.19 Kernel for Proxmox VE 7.x available&lt;/a> 中，PVE员工宣布将 PVE 的内核升级到 5.19版本，在 Bug 反馈到讨论中有不少人确认有效&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-vm-freeze-issue-519-kenel.png" alt="homelab-pve-vm-freeze-issue-519-kenel.png">&lt;/p>
&lt;p>这个问题在 2022-12-06 状态变更为 &amp;lsquo;FIX PACKAGED&amp;rsquo;；在 2022-12-14，PVE员工宣布支持将内核升级到 6.1&lt;/p></description></item><item><title>OpenWrt 桥接充当交换机</title><link>https://blog.hellowood.dev/posts/openwrt-%E6%A1%A5%E6%8E%A5%E5%85%85%E5%BD%93%E4%BA%A4%E6%8D%A2%E6%9C%BA/</link><pubDate>Tue, 21 Mar 2023 21:33:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E6%A1%A5%E6%8E%A5%E5%85%85%E5%BD%93%E4%BA%A4%E6%8D%A2%E6%9C%BA/</guid><description>&lt;h2 id="需求背景">需求背景&lt;/h2>
&lt;p>使用的路由器只有 3 个 LAN 口，在购入 NAS 后网口捉襟见肘，并且 NAS 不支持 Wi-Fi，因此需要更多的网口支持设备连接&lt;/p>
&lt;p>路由器是小米的 Redmi AX6000， 支持WiFi 6E，协商速度能达到2400Mbps，但却只有千兆的网口；因为家里的两台电脑和 NAS 都是 2.5G 的网口和 WiFi6E 的无线网卡，想要 NAS 高速读写就需要 2.5G 以上的交换机；但是 2.5G 的交换机价格都在 400+，性价比不高&lt;/p>
&lt;p>日常将四网口的 N5105 作为 HomeLab 的服务器使用，只有一个网口连接到路由器，其他三个网口空闲；因此想将 N5105 作为交换机，用于连接 NAS 和电脑；有三种方案：&lt;/p>
&lt;ol>
&lt;li>路由器和 N5105 做链路聚合，NAS连接到 N5105，电脑通过 WiFi 访问；速度能达到 2000Mbps，不过这样额外占用了两个网口，但是好处是所有的支持 WiFi6 的设备都能高速访问 NAS&lt;/li>
&lt;li>不做链路聚合，这样能够多三个 2.5G 的网口；NAS 和电脑都通过网线连接到 N5105，通过网线连接的设备均能以 2.5G 的速度访问 NAS&lt;/li>
&lt;li>为 N5105 添加 WiFi6E 无线网卡，并启用混杂模式，NAS 通过网线连接到 N5105，电脑通过 WiFi 访问 NAS；所有支持 WiFi6 的设备可以 2400Mbps 的速度访问 NAS；但是需要额外购买一张 WiFi6 的无线网卡，并且设备需要连接到 N5150 的 WiFi网络上&lt;/li>
&lt;/ol>
&lt;p>基于以上考虑，不做链路聚合成本最低且能扩展网口，添加 WiFi6 网卡效果最好；因为手头没有 WiFi6 的网卡，因此先通过不做链路聚合的方式实现&lt;/p></description></item><item><title>OpenWrt 在 PVE 中以虚拟机方式安装</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-pve-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 20 Mar 2023 21:35:17 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-pve-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="下载镜像">下载镜像&lt;/h2>
&lt;ul>
&lt;li>下载镜像&lt;/li>
&lt;/ul>
&lt;p>在 &lt;a href="https://openwrt.org/zh/downloads">https://openwrt.org/zh/downloads&lt;/a> 选择稳定发行版，然后选择需要下载的版本；这里使用当前最新的 22.03.3 版本，使用&lt;a href="https://mirrors.aliyun.com/openwrt/">阿里云 OpenWrt 镜像&lt;/a>进行下载&lt;/p>
&lt;p>选择下载 &lt;code>generic-ext4-combined-efi.img.gz&lt;/code> 这个压缩文件，用于 bios 引导&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-ima-download.png" alt="homelab-openwrt-esxi-ima-download.png">&lt;/p>
&lt;ul>
&lt;li>解压&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>gunzip&lt;/code> 命令解压 &lt;code>gz&lt;/code> 压缩文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gunzip openwrt-22.03.3-x86-64-generic-ext4-combined-efi.img.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将下载的镜像解压后得到 &lt;code>img&lt;/code>格式的文件&lt;/p>
&lt;h2 id="虚拟机配置">虚拟机配置&lt;/h2>
&lt;h3 id="创建虚拟机">创建虚拟机&lt;/h3>
&lt;ol>
&lt;li>创建虚拟机，输入名称&lt;/li>
&lt;li>操作系统这里选择 &amp;ldquo;不使用任何介质&amp;rdquo;&lt;/li>
&lt;li>磁盘这里，选择左侧删除按钮，将磁盘删除；因为会将 img 文件导入作为磁盘，因此这里不需要&lt;/li>
&lt;li>按需配置 CPU 和内存；通常 1核和 512M就已经足够了&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-configuration.png" alt="homelab-openwrt-pve-init-configuration.png">&lt;/p>
&lt;h3 id="添加硬盘">添加硬盘&lt;/h3>
&lt;ul>
&lt;li>上传 img 镜像&lt;/li>
&lt;/ul>
&lt;p>选择 local - ISO镜像，将解压后的 img 文件上传到 PVE&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-upload-img.png" alt="homelab-openwrt-pve-init-upload-img.png">&lt;/p>
&lt;p>等待上传完成，记录上传后的地址，即 target file 后面的路径，需要在导入时使用&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-upload-img-result.png" alt="homelab-openwrt-pve-init-upload-img-result.png">&lt;/p>
&lt;ul>
&lt;li>将 img 镜像导入为虚拟磁盘&lt;/li>
&lt;/ul>
&lt;p>打开 PVE 的 shell，执行导入命令，将 img 作为虚拟磁盘，导入到 106 虚拟机（即刚才创建的虚拟机的 vmid）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qm importdisk &lt;span style="color:#d19a66">106&lt;/span> /var/lib/vz/template/iso/openwrt-22.03.3-x86-64-generic-ext4-combined-efi.img local-lvm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-convert-img-to-disk.png" alt="homelab-openwrt-pve-init-convert-img-to-disk.png">&lt;/p></description></item><item><title>树莓派 4b 使用 CSI 摄像头</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-csi-%E6%91%84%E5%83%8F%E5%A4%B4/</link><pubDate>Sat, 11 Mar 2023 21:38:25 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-csi-%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>&lt;p>树莓派 4b 支持通过 USB 或者摄像头 CSI 接口连接摄像头，因此可以使用树莓派 4b 作为监控&lt;/p>
&lt;p>基于安装了 Ubuntu Server 22.04 LTS 的树莓派 4b 进行测试&lt;/p>
&lt;p>带有红外补光灯的摄像头功率大概5-7w左右，因此使用树莓派 4b 连接时需要有 5V3A 的电源，否则当开启摄像头后树莓派会不断重启&lt;/p>
&lt;h2 id="接入摄像头">接入摄像头&lt;/h2>
&lt;h3 id="连接摄像头">连接摄像头&lt;/h3>
&lt;p>如图所示，通过排线连接摄像头和树莓派（图片来自 &lt;a href="https://projects.raspberrypi.org/en/projects/getting-started-with-picamera">Getting started with the Camera Module&lt;/a>）&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-connect.jpeg" alt="raspberrypi-4b-camara-setup-connect.jpeg">&lt;/p>
&lt;h3 id="开启摄像头">开启摄像头&lt;/h3>
&lt;p>开启摄像头需要先安装 &lt;code>raspi-config&lt;/code> 软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install -y raspi-config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行 &lt;code>raspi-config&lt;/code>，选择用户 &lt;code>pi&lt;/code> 进行配置；&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-enable-user-pi-0.png" alt="raspberrypi-4b-camara-setup-enable-user-pi-0.png">&lt;/p>
&lt;p>接着选择第三个接口配置&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-enable-interface-1.png" alt="raspberrypi-4b-camara-setup-enable-interface-1.png">&lt;/p>
&lt;p>然后选择第一个，配置摄像头，选择开启即可；开启完成后，需要关闭树莓派，连接摄像头并重新开机&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-enable-camare-2.png" alt="raspberrypi-4b-camara-setup-enable-camare-2.png">&lt;/p>
&lt;h3 id="检查摄像头信息">检查摄像头信息&lt;/h3>
&lt;ul>
&lt;li>检查连接状态&lt;/li>
&lt;/ul>
&lt;p>重启后检查设备连接状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vcgencmd get_camera
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">supported&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#dcaeea">detected&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>1, libcamera &lt;span style="color:#dcaeea">interfaces&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回信息提示检查到了一个摄像头并且支持该摄像头&lt;/p>
&lt;ul>
&lt;li>查看摄像头信息&lt;/li>
&lt;/ul>
&lt;p>查看摄像头信息需要使用 &lt;code>v4l-utils&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install -y v4l-utils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>v4l-utils&lt;/code> 列出设备&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>v4l2-ctl --list-devices
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bcm2835-codec-decode &lt;span style="color:#c7bf54">(&lt;/span>platform:bcm2835-codec&lt;span style="color:#c7bf54">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video31
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/media1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bcm2835-isp &lt;span style="color:#c7bf54">(&lt;/span>platform:bcm2835-isp&lt;span style="color:#c7bf54">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video14
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video15
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video21
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video23
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/media0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/media2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mmal service 16.1 &lt;span style="color:#c7bf54">(&lt;/span>platform:bcm2835-v4l2-0&lt;span style="color:#c7bf54">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中的 &lt;code>/dev/video0&lt;/code> 就是通过排线连接的摄像头&lt;/p></description></item><item><title>树莓派 4b 使用摄像头推送流到 RTMP 服务器</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8E%A8%E9%80%81%E6%B5%81%E5%88%B0-rtmp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 11 Mar 2023 21:36:47 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8E%A8%E9%80%81%E6%B5%81%E5%88%B0-rtmp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>使用树莓派 4b，基于 Ubuntu 22.04，将摄像头的监控内容推送到 RTMP 服务器，用于其他服务从 RTMP 获取视频，进行视频分析和事件告警ss
树莓派摄像头使用排线进行连接，通过 ffmpeg 将视频流推送到 &lt;a href="https://ossrs.io/lts/zh-cn/docs/v4/doc/introduction">SRS&lt;/a> 服务器（SRS是一个简单高效的实时视频服务器，支持RTMP/WebRTC/HLS/HTTP-FLV/SRT/GB28181）&lt;/p>
&lt;p>树莓派连接摄像头可以参考 &lt;a href="https://blog.hellowood.dev">树莓派 4b 使用摄像头&lt;/a>&lt;/p>
&lt;h2 id="安装-ffmpeg">安装 ffmpeg&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> apt-get install -y ffmpeg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-srs">安装 SRS&lt;/h2>
&lt;p>SRS 使用 Docker Compose 进行部署；用于处理 ffmpeg 推送的视频流&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">srs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#63c381">&amp;#34;registry.cn-hangzhou.aliyuncs.com/ossrs/srs:4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#63c381">&amp;#34;srs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">srs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;1935:1935&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;1985:1985&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8080:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;./data:/srs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-ffmpeg-推送流到-srs">使用 ffmpeg 推送流到 SRS&lt;/h2>
&lt;p>通过 ffmpeg 将视频内容推送到 SRS&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ffmpeg -f v4l2 -input_format mjpeg -video_size 1280x720 -framerate &lt;span style="color:#d19a66">30&lt;/span> -i /dev/video0 -c:v libx264 -preset veryfast -tune zerolatency -b:v 2M -minrate 2M -maxrate 2M -bufsize 1M -g &lt;span style="color:#d19a66">60&lt;/span> -an -f flv rtmp://192.168.2.5/live/livestream
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其各个参数含义如下：&lt;/p></description></item><item><title>Proxmox VE 安装初始化</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Mon, 27 Feb 2023 21:41:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;blockquote>
&lt;p>Proxmox VE，是一个开源的服务器虚拟化环境Linux发行版。Proxmox VE基于Debian，使用基于Ubuntu的定制内核，包含安装程序、网页控制台和命令行工具，并且向第三方工具提供了REST API - 维基百科&lt;/p>
&lt;/blockquote>
&lt;p>PVE 和 Vmware ESXi 类似，都支持虚拟化环境；PVE 基于 Linux，扩展性更强&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>下载 ISO 镜像&lt;/li>
&lt;/ul>
&lt;p>PVE的镜像可在 PVE 官网的&lt;a href="https://www.proxmox.com/en/downloads/category/iso-images-pve">下载页面&lt;/a>进行下载&lt;/p>
&lt;ul>
&lt;li>制作启动盘&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;a href="https://rufus.ie/zh/">Rufus&lt;/a> 或者 &lt;a href="https://www.balena.io/etcher">balenaEtcher&lt;/a> 将下载的 ISO 镜像写入到 U 盘或者移动硬盘中&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-write-iso.png" alt="homelab-pve-install-write-iso.png">&lt;/p>
&lt;ul>
&lt;li>插入主机并启动&lt;/li>
&lt;/ul>
&lt;p>启动后选择安装 Proxmox VE&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-start-install.png" alt="homelab-pve-install-start-install.png">&lt;/p>
&lt;ul>
&lt;li>设置 IP 地址&lt;/li>
&lt;/ul>
&lt;p>IP地址用于后续访问，可以通过DHCP获取，也可以设置为固定的 IP&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-set-ip.png" alt="homelab-pve-install-set-ip.png">&lt;/p>
&lt;ul>
&lt;li>安装完成&lt;/li>
&lt;/ul>
&lt;p>安装完成后，会提示重启&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-completed.png" alt="homelab-pve-install-completed.png">&lt;/p>
&lt;ul>
&lt;li>登录&lt;/li>
&lt;/ul>
&lt;p>重启完成后，在命令行会提示访问的地址，默认端口是 8006，&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-login-page.png" alt="homelab-pve-install-login-page.png">&lt;/p>
&lt;p>通过 HTTPS 协议访问；如 &lt;a href="https://192.168.17.129:8006">https://192.168.17.129:8006&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-web-login-page.png" alt="homelab-pve-install-web-login-page.png">&lt;/p></description></item><item><title>Traefik 使用 Google GitHub OAuth 进行鉴权登陆</title><link>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-google-github-oauth-%E8%BF%9B%E8%A1%8C%E9%89%B4%E6%9D%83%E7%99%BB%E9%99%86/</link><pubDate>Wed, 15 Feb 2023 21:42:38 +0800</pubDate><guid>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-google-github-oauth-%E8%BF%9B%E8%A1%8C%E9%89%B4%E6%9D%83%E7%99%BB%E9%99%86/</guid><description>&lt;p>在使用 Traefik 作为 Homelab 的网关时，考虑到部分服务涉及隐私，因此需要限制用户登陆后才能使用；&lt;/p>
&lt;p>Traefik 支持使用 HTTP 中间件，可以将鉴权信息转发给其他服务进行鉴权，因此，使用 &lt;a href="https://github.com/thomseddon/traefik-forward-auth">https://github.com/thomseddon/traefik-forward-auth&lt;/a> 作为鉴权的服务，该服务默认使用 Google OAuth，因此，可以通过 Google 账号登陆访问内部服务；该服务也支持任何 OAuth 标准的认证服务，如 GitHub，微软等&lt;/p>
&lt;h2 id="申请-oauth-应用">申请 OAuth 应用&lt;/h2>
&lt;p>在 &lt;a href="https://console.cloud.google.com/apis/credentials">Google Cloud&lt;/a> 创建新的应用，选择 &amp;ldquo;APIs and Services&amp;rdquo; -&amp;gt; &amp;ldquo;Credentials&amp;rdquo;，选择 &amp;ldquo;CREATE CREDENTIALS&amp;rdquo; -&amp;gt; &amp;ldquo;OAuth Client ID&amp;rdquo;，应用类型选择 &amp;ldquo;Web Application&amp;rdquo;，填写名称，重定向 URL 为要访问的 URL + 认证路径，traefik-forward-auth 的认证路径为 &lt;code>/_oauth&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-traefik-sso-google-oauth-apply-oauth-app.png" alt="homelab-traefik-sso-google-oauth-apply-oauth-app.png">&lt;/p>
&lt;p>确认后会提示 Client ID 和 Client Secret，需要保存好，作为 traefik-forward-auth 配置&lt;/p>
&lt;h2 id="为特定的服务添加认证">为特定的服务添加认证&lt;/h2>
&lt;p>认证特定的服务，需要启动 traefik-forward-auth 服务，然后为要认证的服务添加中间件即可；如这里给 whoami 服务添加了名为 &lt;code>traefik-forward-auth&lt;/code> 的 HTTP 中间件&lt;/p>
&lt;p>这里通过将域名指向本地的方式进行测试，如在 &lt;code>/etc/hosts&lt;/code> 中添加 &lt;code>whoami.homelab.io&lt;/code>相关的域名作为 whoami 服务的域名：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/hosts&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>127.0.0.1 whoami.homelab.io
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>需要将 &lt;code>GOOGLE_CLIENT_ID&lt;/code> 和 &lt;code>GOOGLE_CLIENT_SECRET&lt;/code> 替换为自己申请的&lt;/p></description></item><item><title>使用培正 PZEM 004T 和 HomeAssistant 监测家庭用电情况</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%9F%B9%E6%AD%A3-pzem-004t-%E5%92%8C-homeassistant-%E7%9B%91%E6%B5%8B%E5%AE%B6%E5%BA%AD%E7%94%A8%E7%94%B5%E6%83%85%E5%86%B5/</link><pubDate>Sun, 12 Feb 2023 21:44:13 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%9F%B9%E6%AD%A3-pzem-004t-%E5%92%8C-homeassistant-%E7%9B%91%E6%B5%8B%E5%AE%B6%E5%BA%AD%E7%94%A8%E7%94%B5%E6%83%85%E5%86%B5/</guid><description>&lt;p>培正 PZEM-004T 是一个电能监控模块，能够监测家庭用电的电压，电流，频率，实时功率，耗电量等信息；支持通过 UART 协议进行读取；因此可以使用 ESP8266 或者 ESP32 等模块，将用电信息添加到 HomeAssistant 中&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-homeassistant-power-monitor-pannel.png" alt="homelab-homeassistant-power-monitor-pannel.png">&lt;/p>
&lt;h2 id="硬件">硬件&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">硬件&lt;/th>
 &lt;th style="text-align: left">价格&lt;/th>
 &lt;th style="text-align: left">数量&lt;/th>
 &lt;th style="text-align: left">备注&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">peacefair PZEM-004T 100A 主机+开合式CT&lt;/td>
 &lt;td style="text-align: left">42&lt;/td>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: left">电表，建议使用开合式CT，不需要改动电路&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">220V 转 5V1A 供电模块&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: left">用于为培正电表和 3v 模块供电&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">5V 转 3.3V 供电模块&lt;/td>
 &lt;td style="text-align: left">3.5&lt;/td>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: left">用于为 ESP-01S 模块供电&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">40P杜邦线母对母&lt;/td>
 &lt;td style="text-align: left">2.6&lt;/td>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: left">用于连接所有的模块&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">40P杜邦线母对公&lt;/td>
 &lt;td style="text-align: left">2.6&lt;/td>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: left">用于连接所有的模块&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>##1. ESP-01S 刷入 esphome 固件&lt;/p>
&lt;h3 id="运行-esphome-容器">运行 esphome 容器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#63c381">&amp;#34;esphome&amp;#34;&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 6052:6052 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -e &lt;span style="color:#dcaeea">TZ&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>Asia/Shanghai &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --hostname&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#63c381">&amp;#34;esphome&amp;#34;&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v ~/esphome/config:/config &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --privileged &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> esphome/esphome
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="刷入固件">刷入固件&lt;/h3>
&lt;p>启动后访问 &lt;a href="http://localhost:6052/">http://localhost:6052/&lt;/a>，选择添加设备，完整配置文件如下：&lt;/p></description></item><item><title>使用 PowerCLI 的 Docker 容器自行构建 ESXi 镜像</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-powercli-%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E8%87%AA%E8%A1%8C%E6%9E%84%E5%BB%BA-esxi-%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 07 Feb 2023 21:45:26 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-powercli-%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E8%87%AA%E8%A1%8C%E6%9E%84%E5%BB%BA-esxi-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>参考 &lt;a href="https://helloworlde.github.io/2022/08/11/N5105-%E6%9E%84%E5%BB%BA-Esxi-%E9%95%9C%E5%83%8F/">N5105 构建 ESXi 镜像&lt;/a>，在使用 ESXi 7 时，基于 Windows 系统，使用 PowerCLI 为 ESXi 7 的镜像添加了 NVMe 和 Intel I225V 网卡的驱动；&lt;/p>
&lt;p>虽然当时已经可以在 Linux 或者 MacOS 上使用 PowerShell，但是因为 PowerCLI 不支持 Core 版本的 PowerShell，会提示 &lt;code>Exception: The VMware.ImageBuilder module is not currently supported on the Core edition of PowerShell&lt;/code>；导致只能使用 Windows 构建，对于没有 Windows 系统的用户非常不方便。&lt;/p>
&lt;p>PowerCLI 新版本已经支持了 Core 版本的 PowerShell，因此可以通过在 Linux/MacOS/Docker 等平台直接构建 ESXi 镜像；&lt;/p>
&lt;p>本次使用 PowerCLI 的 Docker 容器，为 ESXi 8 镜像添加 NVMe 和网卡驱动&lt;/p>
&lt;h2 id="1-下载所需的镜像和驱动">1. 下载所需的镜像和驱动&lt;/h2>
&lt;h3 id="11-申请-esxi-授权">1.1 申请 ESXi 授权&lt;/h3>
&lt;p>ESXi 需要先注册申请，等待人工审核通过后就可以下载免费版本；如果没有任何反馈，可以点击申请页下面的 &lt;a href="https://www.vmware.com/support/us_support.html">Contact us&lt;/a> 提工单给 VMWare；&lt;/p></description></item><item><title>HomeAssistant 基于容器搭建与使用</title><link>https://blog.hellowood.dev/posts/homeassistant-%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 13 Nov 2022 21:51:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/homeassistant-%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>&lt;a href="https://www.home-assistant.io/">HomeAssistant&lt;/a> 是免费开源的智能家庭自动化控制系统，支持接入多种平台，如 HomeKit，米家，ESPHome 等；国内大部分应用场景是将米家的设备通过 HomeAssistant 接入苹果生态，或者使用第三方组件，监控水电气等&lt;/p>
&lt;h2 id="基于容器搭建">基于容器搭建&lt;/h2>
&lt;p>HomeAssistant 支持多种运行方式，如以OS方式运行，或者使用二进制或容器等方式运行；容器等方式更方便管理&lt;/p>
&lt;h3 id="使用-docker-直接运行">使用 Docker 直接运行&lt;/h3>
&lt;p>在 Linux 服务器使用容器启动 HomeAssistant，HomeAssistant 的所有配置和数据都在 &lt;code>/config&lt;/code> 目录下，为了持久化数据，将当前路径挂载到 HomeAssistant 的 config 目录下；因为 HomeAssistant 需要访问局域网内的其他设备，因此，建议容器的网络模式使用 &lt;code>host&lt;/code>，或者通过 &lt;code>macvlan&lt;/code> 驱动为其单独创建网络&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#63c381">&amp;#34;home-assistant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v &lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">pwd&lt;/span>&lt;span style="color:#98c379">}&lt;/span>:/config &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /etc/localtime:/etc/localtime:ro &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --net&lt;span style="color:#c7bf54">=&lt;/span>host &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> homeassistant/home-assistant
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-docker-compose-启动">使用 Docker Compose 启动&lt;/h3>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>version: &lt;span style="color:#98c379">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> homeassistant:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container_name: homeassistant
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: &lt;span style="color:#63c381">&amp;#34;homeassistant/home-assistant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> privileged: &lt;span style="color:#ef8383">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> network_mode: host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> restart: always
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> healthcheck:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test: &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#63c381">&amp;#34;CMD&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;wget&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-q&amp;#34;&lt;/span>,&lt;span style="color:#63c381">&amp;#34;--spider&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;http://localhost:8123&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> interval: 15s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeout: 10s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> retries: &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_period: 90s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;./config:/config&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动后，通过访问服务器的 8123 接口，使用用户名 &lt;code>admin&lt;/code> 和密码 &lt;code>admin&lt;/code> 访问即可进入 HomeAssistant&lt;/p></description></item><item><title>OpenWrt 使用 Lets Encrypt 证书开启 HTTPS 访问</title><link>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-lets-encrypt-%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AF-https-%E8%AE%BF%E9%97%AE/</link><pubDate>Fri, 11 Nov 2022 21:57:52 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-lets-encrypt-%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AF-https-%E8%AE%BF%E9%97%AE/</guid><description>&lt;p>OpenWrt 支持开启 HTTPS 访问，但是自签发的证书无法通过 Chrome 等浏览器的认证；因此需要使用 Let&amp;rsquo;s Encrypt 申请证书；通过 uHTTPd 应用配置证书，使用 DNS 验证的方式申请证书&lt;/p>
&lt;p>配置 HTTPS 访问需要使用到公网 IP 和域名，需要确认已经可以通过公网访问，并且可以修改域名的解析&lt;/p>
&lt;h2 id="安装-uhttpd">安装 uHTTPd&lt;/h2>
&lt;p>uHTTPd 用于 OpenWrt 配置 Web 服务，如端口，证书等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-app-uhttpd luci-i18n-uhttpd-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后即可在服务-uHTTPd 页面查看端口和证书配置&lt;/p>
&lt;h2 id="安装配置-acme">安装配置 ACME&lt;/h2>
&lt;p>&lt;a href="https://letsencrypt.org/zh-cn/docs/client-options/">ACME&lt;/a> 是 Let&amp;rsquo;s Encrypt 官方支持的客户端；OpenWrt 支持使用 ACME 申请证书，在 ACME 应用中添加证书相关配置即可&lt;/p>
&lt;h3 id="安装-acme">安装 ACME&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install acme luci-app-acme luci-i18n-acme-zh-cn acme-dnsapi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后可以在服务-ACME 证书中进行配置&lt;/p>
&lt;h3 id="配置-acme">配置 ACME&lt;/h3>
&lt;h4 id="配置账户信息">配置账户信息&lt;/h4>
&lt;p>首先需要为 ACME 配置邮箱，用于接受证书过期等信息；在 ACME 全局配置-电子邮件帐户添加即可&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-acme-email-config.png" alt="homelab-openwrt-acme-email-config.png">&lt;/p>
&lt;h4 id="配置证书">配置证书&lt;/h4>
&lt;ul>
&lt;li>常规设置&lt;/li>
&lt;/ul>
&lt;p>在证书配置中，添加一个新的配置；这里使用阿里云作为 DNS 解析；&lt;/p></description></item><item><title>Clash 使用 Docker 部署</title><link>https://blog.hellowood.dev/posts/clash-%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2/</link><pubDate>Wed, 26 Oct 2022 11:20:19 +0000</pubDate><guid>https://blog.hellowood.dev/posts/clash-%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2/</guid><description>&lt;p>使用 Clash Premium 版本请参考 &lt;a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2clash-premium/">使用 Docker 部署 Clash Premium&lt;/a>&lt;/p>
&lt;p>在一些场景下无法使用 Clash 客户端进行代理，也无法使用软路由，这时候可以由一台服务器运行 Clash，作为其他客户端的代理；同时 Clash 支持以 Docker 容器的方式运行，方便部署和运维&lt;/p>
&lt;h2 id="订阅格式转换">订阅格式转换&lt;/h2>
&lt;p>机场提供的订阅可能无法被 Clash 直接使用，或者分流配置不合理，需要转换格式；可以使用在线的订阅转换工具，如 &lt;a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/&lt;/a>等，也可以使用开源的服务自行搭建；&lt;/p>
&lt;p>为了安全和隐私，可以基于 &lt;a href="https://github.com/CareyWang/sub-web">https://github.com/CareyWang/sub-web&lt;/a> 和 &lt;a href="https://github.com/tindy2013/subconverter">https://github.com/tindy2013/subconverter&lt;/a> 服务搭建，分别是前端和后端服务&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">subweb&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">careywong/subweb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">subweb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">subweb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#d19a66">18080&lt;/span>:&lt;span style="color:#d19a66">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">TZ=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">subconverter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">tindy2013/subconverter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">subconverter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">subconverter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#d19a66">25500&lt;/span>:&lt;span style="color:#d19a66">25500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">TZ=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后，选择进阶模式，填写后端地址为 subconverter 容器的地址；选择远程配置（推荐 Ytoo/NyanCAT，配置更全面），然后填入订阅链接生成即可得到新的订阅链接&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-clash-proxy-config-convert-to-clash.png" alt="homelab-clash-proxy-config-convert-to-clash.png">&lt;/p>
&lt;ul>
&lt;li>自定义配置&lt;/li>
&lt;/ul>
&lt;p>如果有自定义配置，可以指定远程配置，参考&lt;a href="https://github.com/tindy2013/subconverter/blob/master/README-cn.md#%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE">外部配置&lt;/a>，指定 &lt;code>clash_rule_base&lt;/code> 配置模板；不过该方式比较麻烦，自己使用可以直接通过更改 subconverter 默认配置的方式实现；&lt;/p>
&lt;p>subconverter 默认的配置是 &lt;code>/base/pref.toml&lt;/code>文件，其中指定了 clash 的配置文件模板为 &lt;code>clash_rule_base = &amp;quot;base/all_base.tpl&amp;quot;&lt;/code>，所以修改 &lt;code>base/all_base.tpl&lt;/code> 文件即可&lt;/p></description></item><item><title>小米 Redmi AX6S(AX3200) 刷入 OpenWrt 及使用体验</title><link>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3-redmi-ax6s-ax3200-%E5%88%B7%E5%85%A5-openwrt-%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Sun, 09 Oct 2022 11:20:19 +0000</pubDate><guid>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3-redmi-ax6s-ax3200-%E5%88%B7%E5%85%A5-openwrt-%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>&lt;p>买了小米 Redmi AX3000 路由器后发现是 RA81 型号，这个型号目前无法刷入 OpenWrt；但是因为当前使用的 OpenWrt 作为旁路由的方式并不稳定，所以想更换一个可以刷入 OpenWrt 的路由器&lt;/p>
&lt;p>一番搜索之后发现 Redmi AX6S 相对更稳定，且已有 OpenWrt 的正式版本固件，因此又购入了一台新的 AX6S，准备刷入 OpenWrt 作为主路由使用&lt;/p>
&lt;p>AX6S有 RB01 和 RB03 两个版本，硬件完全相同；国内售卖的基本都是 RB03，可以通过刷入开发版固件的方式开启 telnet，RB01 只能拆机后通过 UART 接口写入的方式开启 telnet&lt;/p>
&lt;h2 id="刷入-openwrt">刷入 OpenWrt&lt;/h2>
&lt;h3 id="将固件升级为测试版">将固件升级为测试版&lt;/h3>
&lt;p>将固件升级为测试版是为了开启 telnet，方便输入 OpenWrt 的固件；可以通过 &lt;code>telnet 192.168.31.1&lt;/code> 测试，通常是没有开启的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>telnet 192.168.31.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Trying 192.168.31.1...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>telnet: connect to address 192.168.31.1: Connection refused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>telnet: Unable to connect to remote host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>下载测试版固件并升级&lt;/li>
&lt;/ol>
&lt;p>首先下载测试版本固件&lt;a href="https://github.com/YangWang92/AX6S-unlock/raw/master/miwifi_rb03_firmware_stable_1.2.7.bin">miwifi_rb03_firmware_stable_1.2.7 &lt;/a>；在初始化路由器配置后，进入到路由器控制台，选择升级；
&lt;img src="https://img.hellowood.dev/picture/homelab-miwifi-ax6s-openwrt-upgrade.png" alt="homelab-miwifi-ax6s-openwrt-upgrade.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-miwifi-ax6s-openwrt-upgrade-ongoing.png" alt="homelab-miwifi-ax6s-openwrt-upgrade-ongoing.png">&lt;/p>
&lt;p>升级完成后路由器会重启，页面有水印提示 &lt;code>Only For Test&lt;/code>；
&lt;img src="https://img.hellowood.dev/picture/homelab-miwifi-ax6s-openwrt-upgrade-complted.png" alt="homelab-miwifi-ax6s-openwrt-upgrade-complted.png">&lt;/p>
&lt;p>此时使用 telnet 测试会发现已经可以登陆了&lt;/p></description></item><item><title>OpenWrt 使用 SmartDNS</title><link>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-smartdns/</link><pubDate>Tue, 27 Sep 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-smartdns/</guid><description>&lt;p>&lt;a href="https://pymumu.github.io/smartdns/">SmartDNS&lt;/a> 是由国内用户开发的本地 DNS 服务器，从多个上游获取 DNS 结果，并将访问速度最快的地址返回给客户端；SmartDNS 可以运行在多个平台，如 Linux, OpenWrt 等&lt;/p>
&lt;p>在 OpenWrt 中运行 SmartDNS，将其作为 dnsmasq 的上游或作为唯一的 DNS 服务器，用于提升 DNS 解析速度&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>SmartDNS 的安装非常简单，使用 opkg 命令即可安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install smartdns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-app-smartdns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-i18n-smartdns-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-smartdns">配置 SmartDNS&lt;/h2>
&lt;p>安装完成后，在服务-SmartDNS 常规配置中，选择启用 SmartDNS，然后添加上游 DNS 服务器（也可以直接在命令行修改 &lt;code>/etc/config/smartdns&lt;/code> 配置文件）&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-dns-smartdns-upstream.png" alt="homelab-openwrt-dns-smartdns-upstream.png">&lt;/p>
&lt;p>这样，SmartDNS 会运行在路由器的 6053 端口上&lt;/p>
&lt;h2 id="配置-dnsmasq">配置 Dnsmasq&lt;/h2>
&lt;p>OpenWrt 默认的 DHCP 和 DNS 服务由 Dnsmasq 提供，所以需要配置 SmartDNS 作为 Dnsmasq 的上游 DNS 服务器&lt;/p>
&lt;p>在网络-DHCP/DNS -常规设置中，添加 DNS 转发，将 SmartDNS 作为 Dnsmasq 的上游
&lt;img src="https://img.hellowood.dev/picture/homelab-oepnwrt-smart-dns-as-dnsmasq-upstream.png" alt="homelab-oepnwrt-smart-dns-as-dnsmasq-upstream.png">&lt;/p></description></item><item><title>OpenWrt-监控</title><link>https://blog.hellowood.dev/posts/openwrt-%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 26 Sep 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E7%9B%91%E6%8E%A7/</guid><description>&lt;p>OpenWrt 默认提供了内存，连接等信息，但是这些信息不够完善，不能全面的反馈 OpenWrt 的状态；可以通过使用第三方的软件来实现监控，常用的有 &lt;a href="https://openwrt.org/packages/pkgdata/netdata">Netdata&lt;/a> 和 &lt;a href="https://openwrt.org/packages/pkgdata/prometheus">Prometheus&lt;/a>&lt;/p>
&lt;h2 id="通过-netdata-监控">通过 Netdata 监控&lt;/h2>
&lt;p>Netdata 提供了可以在 OpenWrt 直接查看的 UI，可以查看包括 CPU，负载，内存，网络，硬盘，防火墙等常用信息的实时监控&lt;/p>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install netdata
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成之后，即可在 OpenWrt 的 19999 端口查看监控数据&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-metrics-netdata.png" alt="homelab-openwrt-metrics-netdata.png">&lt;/p>
&lt;ul>
&lt;li>通过 Prometheus 抓取数据&lt;/li>
&lt;/ul>
&lt;p>Netdata 默认只能查看实时数据，如果想查询历史数据或者只关心特定指标，可以通过 Prometheus 抓取，使用 Grafana 查看；Netdata 支持 Prometheus 格式的数据抓取，路径是&lt;code>/api/v1/allmetrics?format=prometheus_all_hosts&lt;/code>；如 &lt;a href="http://192.168.2.2:19999/api/v1/allmetrics?format=prometheus_all_hosts">http://192.168.2.2:19999/api/v1/allmetrics?format=prometheus_all_hosts&lt;/a>&lt;/p>
&lt;p>Prometheus 任务配置：需要注意，要添加参数 &lt;code>format=prometheus_all_hosts&lt;/code> 才可以抓取到 Prometheus 格式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#e06c75">job_name&lt;/span>: &lt;span style="color:#98c379">openwrt-netdata&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">honor_timestamps&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scrape_interval&lt;/span>: &lt;span style="color:#98c379">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scrape_timeout&lt;/span>: &lt;span style="color:#98c379">5s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metrics_path&lt;/span>: &lt;span style="color:#98c379">/api/v1/allmetrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scheme&lt;/span>: &lt;span style="color:#98c379">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">format&lt;/span>: [&lt;span style="color:#63c381">&amp;#34;prometheus_all_hosts&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#e06c75">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#d19a66">192.168.2.2&lt;/span>:&lt;span style="color:#d19a66">19999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通过-grafana-监控">通过 Grafana 监控&lt;/h2>
&lt;p>OpenWrt 提供了 Prometheus 数据导出的软件，安装软件后便可以配置 Prometheus 抓取数据&lt;/p>
&lt;ul>
&lt;li>安装软件&lt;/li>
&lt;/ul>
&lt;p>安装需要的 Prometheus 数据导出软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install prometheus-node-exporter-lua &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>prometheus-node-exporter-lua-nat_traffic &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>prometheus-node-exporter-lua-netstat &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>prometheus-node-exporter-lua-openwrt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 OpenWrt 有无线网络，可以安装无线网络数据 的抓取&lt;/p></description></item><item><title>Docker 使用 NFS 作为数据卷存储</title><link>https://blog.hellowood.dev/posts/docker-%E4%BD%BF%E7%94%A8-nfs-%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AD%98%E5%82%A8/</link><pubDate>Thu, 22 Sep 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E4%BD%BF%E7%94%A8-nfs-%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AD%98%E5%82%A8/</guid><description>&lt;p>在搭建 HomeLab 的过程中，出现因虚拟机故障导致容器挂载在虚拟机上的数据丢失的问题，因此，将数据挂载在虚拟机上仍然存在风险；同时为了将计算和数据分离，HomeLab 所在的服务器只做计算，将数据存储转移到 NAS上；因此，使用 NFS 作为 Docker 的数据卷，将数据挂载到远程的 NAS 存储中&lt;/p>
&lt;p>Docker 支持 Samba/NFS 等协议的远程存储&lt;/p>
&lt;h2 id="创建-docker-nfs-数据卷">创建 Docker NFS 数据卷&lt;/h2>
&lt;p>通过 docker 命令创建 NFS 的数据卷，在创建时，指定驱动为 &lt;code>local&lt;/code>，类型是 &lt;code>nfs&lt;/code>，同时指定地址和协议版本，以及服务端的挂载路径，名称为 &lt;code>nginx-volume&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker volume create --driver &lt;span style="color:#ef8383">local&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>--opt &lt;span style="color:#dcaeea">type&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>nfs &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>--opt &lt;span style="color:#dcaeea">o&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#dcaeea">addr&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>192.168.2.10,nolock,vers&lt;span style="color:#c7bf54">=&lt;/span>4,soft,rw &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>--opt &lt;span style="color:#dcaeea">device&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>:/workspaces/data/docker/nginx &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>nginx-volume
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 &lt;code>nginx-volume&lt;/code> 信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker volume inspect nginx-volume
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;CreatedAt&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;2022-09-22T14:48:26+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Driver&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;local&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Labels&amp;#34;&lt;/span>: &lt;span style="color:#c7bf54">{}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Mountpoint&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;/var/lib/docker/volumes/nginx-volume/_data&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Name&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;nfs-volume&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Options&amp;#34;&lt;/span>: &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;device&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;:/workspaces/data/docker/nginx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;o&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;addr=192.168.2.10,nolock,vers=4,soft,rw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;nfs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Scope&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="容器中使用-nfs-数据卷">容器中使用 NFS 数据卷&lt;/h2>
&lt;h3 id="在容器中挂载">在容器中挂载&lt;/h3>
&lt;p>以 Nginx 为例，挂载 &lt;code>nginx-volume&lt;/code> 到容器中；也可以使用 &lt;code>-v nginx-volume:/data&lt;/code>的方式挂载，这两个命令的区别在于如果挂载的数据卷不存在，&lt;code>-v&lt;/code> 会创建一个，而 &lt;code>--mount&lt;/code>会报错&lt;/p></description></item><item><title>Esxi 挂载物理磁盘到虚拟机</title><link>https://blog.hellowood.dev/posts/esxi-%E6%8C%82%E8%BD%BD%E7%89%A9%E7%90%86%E7%A3%81%E7%9B%98%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 12 Sep 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/esxi-%E6%8C%82%E8%BD%BD%E7%89%A9%E7%90%86%E7%A3%81%E7%9B%98%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>&lt;p>在使用 NAS 时，需要将硬盘直接挂载到 NAS 服务所在的虚拟机上；Esxi 支持将整块物理磁盘作为虚拟磁盘进行挂载&lt;/p>
&lt;h2 id="将物理磁盘添加为虚拟磁盘">将物理磁盘添加为虚拟磁盘&lt;/h2>
&lt;p>在将磁盘连接到设备上之后，需要使用 SSH 登录 Esxi 进行操作&lt;/p>
&lt;ul>
&lt;li>开启 SSH 登录&lt;/li>
&lt;/ul>
&lt;p>登录管理界面，在主机 - 操作 -服务中启用 SSH；启用成功后使用用户名密码登录到该机器&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-esxi-mount-disk-to-vm.png" alt="homelab-esxi-mount-disk-to-vm.png">&lt;/p>
&lt;ul>
&lt;li>查看磁盘名称&lt;/li>
&lt;/ul>
&lt;p>通常磁盘名称以 &lt;code>t10.&lt;/code>开头，如这里需要的机械硬盘名称为 &lt;code>ATA_____Hitachi_HTS545050A7E380_______________________TE85113RHUAM6R&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ls -alh /vmfs/devices/disks/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#d19a66">1976983165&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#d19a66">2&lt;/span> root root &lt;span style="color:#d19a66">512&lt;/span> Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#d19a66">16&lt;/span> root root &lt;span style="color:#d19a66">512&lt;/span> Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- &lt;span style="color:#d19a66">1&lt;/span> root root 465.8G Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 t10.ATA_____Hitachi_HTS545050A7E380_______________________TE85113RHUAM6R
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- &lt;span style="color:#d19a66">1&lt;/span> root root 476.9G Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 t10.NVMe____J.ZAO_5_SERIES_512GB_SSD________________091A000005275A3A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- &lt;span style="color:#d19a66">1&lt;/span> root root 100.0M Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建挂载目录&lt;/li>
&lt;/ul>
&lt;p>将需要挂载的磁盘挂载到特定的路径下，如 &lt;code>datastore1/hdd&lt;/code> 目录，首先需要创建 &lt;code>hdd&lt;/code>这个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /vmfs/volumes/datastore1/hdd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>挂载为虚拟磁盘&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>vmkfstools&lt;/code>命令，将物理磁盘作为虚拟磁盘挂载到指定路径&lt;/p></description></item><item><title>Ubuntu Server 22 虚拟机空间扩容</title><link>https://blog.hellowood.dev/posts/ubuntu-server-22-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</link><pubDate>Fri, 09 Sep 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-server-22-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</guid><description>&lt;blockquote>
&lt;p>使用 Esxi 安装 Ubuntu Server 后，发现分配的 20G 磁盘空间不够，通过 Esxi 控制台将磁盘扩容到 40G，重启后还需要手动调整&lt;/p>
&lt;/blockquote>
&lt;h3 id="检查未分区空间">检查未分区空间&lt;/h3>
&lt;p>修改了磁盘大小后，新增的空间状态是未分区，首先检查是否新增成功&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>fdisk&lt;/code> 查看&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>fdisk&lt;/code> 命令查看 &lt;code>/dev/sda&lt;/code>设备情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>fdisk /dev/sda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入 &lt;code>F&lt;/code> 显示未分区的空间大小&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Command &lt;span style="color:#c7bf54">(&lt;/span>m &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#ef8383">help&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>: F
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Unpartitioned space /dev/sda: &lt;span style="color:#d19a66">20971520&lt;/span> B, &lt;span style="color:#d19a66">167772160&lt;/span> bytes, &lt;span style="color:#d19a66">0&lt;/span> sectors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Units: sectors of &lt;span style="color:#d19a66">1&lt;/span> * &lt;span style="color:#dcaeea">512&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sector size &lt;span style="color:#c7bf54">(&lt;/span>logical/physical&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">512&lt;/span> bytes / &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="将未分区空间添加到已有分区">将未分区空间添加到已有分区&lt;/h3>
&lt;p>需要先将这部分空间添加到系统挂载的对应分区&lt;/p>
&lt;ol>
&lt;li>查找根目录挂载的设备&lt;/li>
&lt;/ol>
&lt;p>通过 &lt;code>df&lt;/code> 命令查看空间，发现挂载到根&lt;code>/&lt;/code>目录的设备是 &lt;code>/dev/mapper/ubuntu--vg-ubuntu--lv&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>df -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 796M 1.5M 794M 1% /run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mapper/ubuntu--vg-ubuntu--lv 19G 16G 1.6G 92% /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 3.9G &lt;span style="color:#d19a66">0&lt;/span> 3.9G 0% /dev/shm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 5.0M &lt;span style="color:#d19a66">0&lt;/span> 5.0M 0% /run/lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/sda2 2.0G 127M 1.7G 7% /boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/sda1 1.1G 5.3M 1.1G 1% /boot/efi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 796M 4.0K 796M 1% /run/user/0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>lsblk&lt;/code> 查看分区信息，发现 &lt;code>ubuntu--vg-ubuntu--lv&lt;/code>是在&lt;code>/dev/sda3&lt;/code>下的逻辑分区，所以需要将未分区的空间添加到 &lt;code>/sda/sda3&lt;/code>分区下&lt;/p></description></item><item><title>使用 Pi-hole 作为 DNS 和 DHCP 服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-pi-hole-%E4%BD%9C%E4%B8%BA-dns-%E5%92%8C-dhcp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 05 Sep 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-pi-hole-%E4%BD%9C%E4%B8%BA-dns-%E5%92%8C-dhcp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>在使用 OpenWrt 的过程中，因为会经常修改 OpenWrt 的配置，导致 OpenWrt 出问题重新安装后没有来得及备份的配置丢失；其中以 IP 地址静态分配最多&lt;/p>
&lt;p>另外，因为需要通过 DNS 做广告拦截，所以需要使用 Pi-hole 作为 DNS 服务器，但是 Pi-hole 提供的 DNS 服务都是国外的，所以为了快速解析国内的 DNS，需要使用 Smartdns 作为 Pi-hole DNS 的上游；DNS 的解析在 Smartdns 中提供&lt;/p>
&lt;h2 id="配置-docker-macvlan-网络">配置 Docker macvlan 网络&lt;/h2>
&lt;p>因为在同一个服务器上提供了多个服务，因此存在端口冲突问题，Pi-hole 和 Smartdns 都需要 53 端口用于提供 DNS，而且 53 端口默认被 Ubuntu Server 使用；而且局域网中的设备需要访问 DHCP 服务，因此为了避免冲突，需要使用 &lt;code>macvlan&lt;/code> 作为 Docker 网络的驱动&lt;/p>
&lt;p>&lt;code>macvlan&lt;/code> 是一种网卡虚拟化技术，允许在同一个物理网卡上配置多个 MAC 地址，即多个 interface，每个 interface 可以配置自己的 IP&lt;/p>
&lt;p>通过 &lt;code>macvlan&lt;/code>，可以为每个 Docker 容器提供特定的 IP 地址，用于局域网内的设置直接通过容器的 IP 地址访问&lt;/p>
&lt;ul>
&lt;li>开启网卡混杂模式&lt;/li>
&lt;/ul>
&lt;p>默认情况下网卡只会将发送给本机的包传递到上层服务，其他的包一律丢弃；开启混杂模式后机器的网卡能够接收所有流经过它的数据流，而无论其目的地址是否是它，因此，为了能让 Docker 容器能正常收到其他设备的请求，需要开启网卡混杂模式；需要注意 &lt;code>eth0&lt;/code> 要和实际的网卡名称一致&lt;/p></description></item><item><title>Ubuntu 22 设置静态 IP</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip/</link><pubDate>Mon, 05 Sep 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip/</guid><description>&lt;p>在虚拟机中启动了 Ubuntu Server 作为日常使用的服务器，同时将 DHCP 和 DNS 相关的服务也运行在这个 Ubuntu Server上；&lt;/p>
&lt;p>因为在 DHCP 服务中使用IP 和 Mac 绑定的方式分配 IP，因此 Ubuntu Server 是以 DHCP 方式获取 IP地址；但是在一次意外重启后，无法访问 Ubuntu Server，查看网络发现是因为网卡没有分配到 IP，这是 Ubuntu Server 依赖 DHCP 服务分配 IP，但是 DHCP 服务因为宿主机没有网络所以无法访问，造成死循环；因此通过为 Ubuntu Server 设置静态 IP 的方式，避免重启后再次出现这样的问题&lt;/p>
&lt;h2 id="配置静态-ip">配置静态 IP&lt;/h2>
&lt;h3 id="1-查找网卡">1 查找网卡&lt;/h3>
&lt;p>通常情况下，有线网卡名称通常为 &lt;code>eth0&lt;/code>，无线网卡名称通常为 &lt;code>wlan0&lt;/code>；&lt;/p>
&lt;p>通过 &lt;code>ifconfig&lt;/code> 命令查看网卡信息，返回的 &lt;code>ens160&lt;/code> 就是有线网卡&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ifconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker0: &lt;span style="color:#dcaeea">flags&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt; mtu &lt;span style="color:#d19a66">1500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ether 02:42:e2:0c:77:47 txqueuelen &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>Ethernet&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX packets &lt;span style="color:#d19a66">0&lt;/span> bytes &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>0.0 B&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> frame &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX packets &lt;span style="color:#d19a66">0&lt;/span> bytes &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>0.0 B&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> carrier &lt;span style="color:#d19a66">0&lt;/span> collisions &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ens160: &lt;span style="color:#dcaeea">flags&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu &lt;span style="color:#d19a66">1500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ether 00:0c:29:df:81:93 txqueuelen &lt;span style="color:#d19a66">1000&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>Ethernet&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX packets &lt;span style="color:#d19a66">73618&lt;/span> bytes &lt;span style="color:#d19a66">24761397&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>24.7 MB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> frame &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX packets &lt;span style="color:#d19a66">27757&lt;/span> bytes &lt;span style="color:#d19a66">7800899&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>7.8 MB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> carrier &lt;span style="color:#d19a66">0&lt;/span> collisions &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lo: &lt;span style="color:#dcaeea">flags&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu &lt;span style="color:#d19a66">65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inet 127.0.0.1 netmask 255.0.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inet6 ::1 prefixlen &lt;span style="color:#d19a66">128&lt;/span> scopeid 0x10&amp;lt;host&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loop txqueuelen &lt;span style="color:#d19a66">1000&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>Local Loopback&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RX packets &lt;span style="color:#d19a66">298&lt;/span> bytes &lt;span style="color:#d19a66">48692&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>48.6 KB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> frame &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TX packets &lt;span style="color:#d19a66">298&lt;/span> bytes &lt;span style="color:#d19a66">48692&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>48.6 KB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> carrier &lt;span style="color:#d19a66">0&lt;/span> collisions &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-修改网络配置">2 修改网络配置&lt;/h3>
&lt;p>Ubuntu 22 的配置文件位置是 &lt;code>/etc/netplan/***.yaml&lt;/code>，通常是 &lt;code>/etc/netplan/00-installer-config.yaml&lt;/code>，也可能是 &lt;code>50-cloud-init.yaml&lt;/code>；&lt;/p></description></item><item><title>Openwrt-DDNS 配置</title><link>https://blog.hellowood.dev/posts/openwrt-ddns-%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 26 Aug 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-ddns-%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>DDNS(Dynamic DNS) 一般用于从外部访问家庭网络内的设备，因为家庭宽带没有固定的 IP 地址，所以通过域名访问时需要动态的更新域名的记录为当前的 IP 地址；实现的原理也比较简单，就是通过定时脚本，调用域名解析商的接口，修改域名的记录&lt;/p>
&lt;p>和大部分路由器一样，OpenWrt 也支持 DDNS，通过 DDNS 的脚本执行动态更新&lt;/p>
&lt;h2 id="申请公网-ip">申请公网 IP&lt;/h2>
&lt;p>DDNS 需要能从外部访问，因此需要有一个公网IP；通常打电话给宽带运营商即可搞定，理由可以是需要访问 NAS、安装监控之类的；通常运营商会提供，获取到之后 PPPOE 重新拨号或者重启光猫路由器即可；通过访问 &lt;a href="https://tool.lu/ip/">https://tool.lu/ip/&lt;/a> 等工具，即可获取到自己的公网 IP&lt;/p>
&lt;p>需要注意的是，22/80/443/8080 等常用端口被运营商限制，无法访问，因此，配置 DDNS 后只能通过域名+端口的方式访问； 如果域名是 &lt;code>.dev&lt;/code> 这类强制要求 HTTPS 访问的域名是无法在浏览器访问的&lt;/p>
&lt;h2 id="配置-ddns">配置 DDNS&lt;/h2>
&lt;h3 id="安装-luci-app-ddns">安装 luci-app-ddns&lt;/h3>
&lt;p>需要安装 luci-app-ddns，用于从 OpenWrt 控制界面修改配置；通过 &lt;code>opkg&lt;/code>命令或者 OpenWrt 控制界面的软件都可以安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-app-ddns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-i18n-ddns-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-ddns-scripts-xxx">安装 ddns-scripts-xxx&lt;/h3>
&lt;p>DDNS 的更新由脚本执行，因此需要安装对应域名服务商的更新脚本；如 godaddy 的脚本是 ddns-scripts-godaddy；官方提供的域名服务商脚本可以从 &lt;a href="https://openwrt.org/packages/index/network---ip-addresses-and-names">Packagesindexnetwork&amp;mdash;ip-addresses-and-names&lt;/a> 查看&lt;/p>
&lt;p>其他域名服务商可以在 GitHub 或恩山无线论坛中查找对应的软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ddns-scripts-godaddy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置-ddns-1">配置 DDNS&lt;/h3>
&lt;ul>
&lt;li>添加 DDNS 配置&lt;/li>
&lt;/ul>
&lt;p>添加 DDNS 配置，输入 DDNS 配置名称，选择 IPV4 版本，DDNS 服务提供商选择 Godaddy&lt;/p></description></item><item><title>OpenWrt 安装使用 OpenClash</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-openclash/</link><pubDate>Thu, 25 Aug 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-openclash/</guid><description>&lt;h2 id="clash-使用方式对比">Clash 使用方式对比&lt;/h2>
&lt;p>OpenClash 是 Clash 的 OpenWrt 客户端；Clash 有多种使用方式，如直接使用客户端，或者以容器或进程的方式运行在服务器上，客户端以代理的方式使用，或者运行在 OpenWrt 中等；因为各种因素影响，不同的使用方式有不同的适用场景：&lt;/p>
&lt;ul>
&lt;li>运行客户端&lt;/li>
&lt;/ul>
&lt;p>客户端直接使用的方式最灵活，调整代理方式或策略比较方便，可以选择性的开启或关闭，会代理设备上支持代理的所有流量；适用于手机，电脑等有客户端支持等设备&lt;/p>
&lt;ul>
&lt;li>代理方式使用&lt;/li>
&lt;/ul>
&lt;p>代理方式适用于没有客户端软件的场景，如命令行，为特定的软件配置代理等；这种方式不够灵活，可按需为特定应用或设备配置&lt;/p>
&lt;ul>
&lt;li>运行在OpenWrt&lt;/li>
&lt;/ul>
&lt;p>运行在 OpenWrt 等主路由或旁路由中，可以透明代理整个局域网内的流量，对于一些无法直接操作的 IoT 设备非常方便；也不需要修改客户端任何配置；缺点是如果不稳定会影响局域网内的所有设备&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>需要使用 Clash 配置网络，用于访问特定的资源；&lt;a href="https://github.com/vernesong/OpenClash">OpenClash&lt;/a> 是 Openwrt 的 Clash 客户端；&lt;/p>
&lt;ol>
&lt;li>OpenClash 依赖的是 &lt;code>dnsmasq-full&lt;/code>，所以需要移除默认的&lt;code>dnsmasq&lt;/code>，否则会导致 OpenClash 安装失败&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg remove dnsmasq &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> opkg install dnsmasq-full
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>下载并安装 OpenClash&lt;/li>
&lt;/ol>
&lt;p>可以在 &lt;a href="https://github.com/vernesong/OpenClash">OpenClash&lt;/a> 仓库的 &lt;a href="https://github.com/vernesong/OpenClash/releases">Release&lt;/a> 页面选择对应的版本进行下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/vernesong/OpenClash/releases/download/v0.45.35-beta/luci-app-openclash_0.45.35-beta_all.ipk -O openclash.ipk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install openclash.ipk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>添加 &lt;code>luci-compact&lt;/code> 并重启，否则会提示进入 luci 页面错误&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg install luci luci-base luci-compat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>待重启完成后重新登录控制台，可以在服务菜单中看到 &lt;code>OpenClash&lt;/code>&lt;/p></description></item><item><title>Openwrt-初始化配置</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 08 Aug 2022 11:44:37 +0000</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="语言配置">语言配置&lt;/h2>
&lt;p>Openwrt 默认语言为英文，如果需要安装中文，可以直接通过 &lt;code>opkg&lt;/code> 安装；随后登录控制台即可看到语言已经变为中文；如果没有改变，可以在System-System-Language 中选择简体中文&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-i18n-base-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-language.png" alt="homelab-openwrt-init-config-language.png">&lt;/p>
&lt;h2 id="时间设置">时间设置&lt;/h2>
&lt;p>在系统-系统-常规设置中，将时区设置为 &lt;code>Asia/Honkong&lt;/code> ，选择保存并应用即可生效&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-time.png" alt="homelab-openwrt-init-config-time.png">&lt;/p>
&lt;h2 id="主题配置">主题配置&lt;/h2>
&lt;p>Openwrt 默认的主题为 Bootstrap，菜单在上边栏，使用不习惯，可以安装 &lt;a href="https://github.com/jerrykuku/luci-theme-argon">Argon&lt;/a> 主题&lt;/p>
&lt;p>可以在 GitHub &lt;a href="https://github.com/jerrykuku/luci-theme-argon">Argon&lt;/a> 仓库的 &lt;a href="https://github.com/jerrykuku/luci-theme-argon/releases">Release&lt;/a> 页面选择对应的版本进行下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/jerrykuku/luci-theme-argon/releases/download/v2.2.9.4/luci-theme-argon-master_2.2.9.4_all.ipk -O argon.ipk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install argon.ipk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-theme.png" alt="homelab-openwrt-init-config-theme.png">&lt;/p>
&lt;h2 id="设置密码">设置密码&lt;/h2>
&lt;p>登录控制台，在系统-管理权页面，选择路由器密码；设置密码之后就可以通过账户 &lt;code>root&lt;/code>和设置的密码进行登录&lt;/p>
&lt;p>同时也可以将本地的公钥添加到 SSH 密钥中，方便登录控制台&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-password.png" alt="homelab-openwrt-init-config-password.png">&lt;/p></description></item><item><title>Traefik 使用 Let’s Encrypt 申请 HTTPS 证书</title><link>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</link><pubDate>Sun, 07 Aug 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</guid><description>&lt;p>在 Traefik 中，支持通过 Let&amp;rsquo;s Encrypt 从 ACME &lt;a href="https://doc.traefik.io/traefik/https/acme/">自动申请 HTTPS 证书&lt;/a>&lt;/p>
&lt;h2 id="从-acme-申请证书">从 ACME 申请证书&lt;/h2>
&lt;p>Traefik 申请证书基于 &lt;a href="https://github.com/go-acme/lego">Lego&lt;/a> ，所以同样支持基于 TLS、HTTP、DNS 三种申请方式&lt;/p>
&lt;p>因为要申请的域名没有部署服务，所以基于 DNS 的方式验证；在申请证书时会向域名解析中添加 &lt;code>_acme-challenge&lt;/code>前缀的 TXT 记录用于验证&lt;/p>
&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;ul>
&lt;li>traefik.yaml&lt;/li>
&lt;/ul>
&lt;p>需要向 Traefik 的配置文件中添加 &lt;code>certificatesResolvers&lt;/code> 的配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">certificatesResolvers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">acme&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">email&lt;/span>: &lt;span style="color:#98c379">yourname@mail.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">storage&lt;/span>: &lt;span style="color:#98c379">/etc/traefik/certificates/acme.json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dnsChallenge&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">provider&lt;/span>: &lt;span style="color:#98c379">alidns&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>email&lt;/code>为注册 ACME 的邮箱，&lt;code>storage&lt;/code> 是存储生成的证书内容的文件；&lt;code>dnsChallenge&lt;/code> 指定了以 DNS 的方式验证；&lt;code>provider&lt;/code> 指定域名解析平台，常见的平台参考 &lt;a href="https://doc.traefik.io/traefik/https/acme/#providers">providers&lt;/a>&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>因为使用的是 DNS Provider 是阿里云，所以需要将阿里云的鉴权方式通过环境变量的方式添加到容器中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reverse-proxy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">reverse-proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">traefik:2.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;--configFile=/etc/traefik/traefik.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;80:80&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;443:443&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8080:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/var/run/docker.sock:/var/run/docker.sock:ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/root/workspaces/homelab/traefik/traefik.yml:/etc/traefik/traefik.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">ALICLOUD_ACCESS_KEY=${ALICLOUD_ACCESS_KEY}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">ALICLOUD_SECRET_KEY=${ALICLOUD_SECRET_KEY}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>为服务指定域名&lt;/li>
&lt;/ul>
&lt;p>在服务路由规则中指定域名，这样 Traefik 就会为这个域名自动申请证书；需要开启 TLS 并且指定 &lt;code>certresolver&lt;/code>，名称即为配置文件 &lt;code>certificatesResolvers&lt;/code>中定义的名称，即 &lt;code>defualt&lt;/code>&lt;/p></description></item><item><title>使用 Let’s Encrypt 申请 HTTPS 证书</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</link><pubDate>Wed, 03 Aug 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</guid><description>&lt;p>在搭建私有服务器的过程中，需要通过外网访问，因为 .dev 域名要求使用 https，但是域名服务商只提供根域名的证书，为了使子域名也可以使用，所以通过 Let’s Encrypt 申请免费证书&lt;/p>
&lt;p>Let’s Encrypt 是一家免费、开放、自动化的证书颁发机构（CA），旨在尽可能对用户友好的方式免费提供为网站启用 HTTPS（SSL/TLS）所需的数字证书&lt;/p>
&lt;p>因为将域名解析迁移到腾讯云的 DNSPod 下面，所以以 DNSPod 为例，以 DNS 验证的方式，在本地机器上使用命令行申请证书&lt;/p>
&lt;h2 id="安装-lego">安装 Lego&lt;/h2>
&lt;p>Let’s Encrypt 有多种命令行客户端，可以使用官方提到的 &lt;a href="https://certbot.eff.org/">Certbot&lt;/a>；也可以使用 &lt;a href="https://go-acme.github.io/lego/">Lego&lt;/a>，相比 Certbot 支持的域名解析平台更多&lt;/p>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;p>直接使用 Go 命令进行安装，因为本地的 Go 版本是 1.19，所以需要指定版本号使用&lt;code>install&lt;/code>命令安装；如果是低版本的 Go，可以使用 &lt;code>get&lt;/code>的方式安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install github.com/go-acme/lego/v4/cmd/lego@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#低版本 Go 使用 get 方式安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go get -u github.com/go-acme/lego/v4/cmd/lego
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="申请证书">申请证书&lt;/h2>
&lt;h3 id="1-创建-dnspod-token">1. 创建 DNSPod Token&lt;/h3>
&lt;p>通过 DNS 的方式申请，Let’s Encrypt 需要向域名添加 DNS 解析以证明拥有该域名；所以需要域名解析平台的授权，通常是以 Token 或者 AK/SK 的方式进行验证&lt;/p>
&lt;p>在 DNSPod 需要先申请 DNSPod Token，登录控制台后在右上角，我的账号中选择 API 密钥，然后选择 DNSPod Token 进行创建密钥&lt;/p></description></item><item><title>Openwrt-空间扩容</title><link>https://blog.hellowood.dev/posts/openwrt-%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</link><pubDate>Sat, 23 Jul 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</guid><description>&lt;p>Openwrt 默认的空间只有 100M，安装一些软件后空间就被用完了，因此需要对 Openwrt 的硬盘进行扩容&lt;/p>
&lt;p>有多种扩容方式，如新增一块硬盘，以USB挂载的方式扩容；或者修改虚拟机硬盘文件大小的方式扩容；此次通过修改虚拟机硬盘文件大小的方式扩容，这种方式适合新创建的虚拟机&lt;/p>
&lt;h2 id="修改硬盘文件大小">修改硬盘文件大小&lt;/h2>
&lt;p>通过 Esxi 控制台，直接修改挂载的硬盘大小&lt;/p>
&lt;ul>
&lt;li>在 Esxi 修改硬盘大小&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-disk-size.png" alt="homelab-openwrt-esxi-disk-size.png">&lt;/p>
&lt;h2 id="创建新的分区">创建新的分区&lt;/h2>
&lt;ol>
&lt;li>安装 &lt;code>cfdisk&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>需要使用 &lt;code>cfdisk&lt;/code> 创建新的分区，所以需要安装 &lt;code>cfdisk&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install cfdisk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>使用 &lt;code>cfdisk&lt;/code>创建分区&lt;/li>
&lt;/ol>
&lt;p>命令行输入 &lt;code>cfdisk&lt;/code> ，会进入到管理分区页面；可以看到，&lt;code>Free Space&lt;/code>是新添加的硬盘大小&lt;/p>
&lt;ul>
&lt;li>选择 &lt;code>Free Space&lt;/code> 后选择 &lt;code>New&lt;/code>，创建新的分区&lt;/li>
&lt;li>输入 &lt;code>Partition Size&lt;/code>为想要的大小&lt;/li>
&lt;li>如&lt;code>3.9G&lt;/code>，然后回车，此时可以看到挂载了新的分区 &lt;code>/dev/sda3&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-disk-new-partition-a-1.png" alt="homelab-openwrt-esxi-disk-new-partition-a-1.png">&lt;/p>
&lt;p>选择 &lt;code>/dev/sda3&lt;/code>，使用 Tab 选择 &lt;code>Write&lt;/code>并输入 &lt;code>yes&lt;/code>确认
&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-disk-new-partition-a-2.png" alt="homelab-openwrt-esxi-disk-new-partition-a-2.png">&lt;/p>
&lt;ol start="3">
&lt;li>格式化分区&lt;/li>
&lt;/ol>
&lt;p>格式化新增的 &lt;code>/dev/sda3&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkfs.ext4 /dev/sda3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="挂载扩容的空间">挂载扩容的空间&lt;/h2>
&lt;ul>
&lt;li>安装 &lt;code>block-mount&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>挂载新建的分区，需要使用 &lt;code>block-mount&lt;/code>挂载点软件，安装完成后重启 Openwrt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install block-mount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启完成后访问 Web 页面的 &lt;code>系统&lt;/code>-&lt;code>挂载点&lt;/code>&lt;/p></description></item><item><title>Openwrt 在 Esxi 中以虚拟机方式安装</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-esxi-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 22 Jul 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-esxi-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="下载镜像">下载镜像&lt;/h2>
&lt;p>在 &lt;a href="https://downloads.openwrt.org/">https://downloads.openwrt.org/&lt;/a> 选择需要下载的版本，因为 Esxi 使用的是 x86_64 平台，所以需要下载同样版本的镜像；如下载 &lt;a href="https://downloads.openwrt.org/releases/21.02.3/targets/x86/64/">21.02.3&lt;/a> 版本，路径为 &lt;code>(root)/releases/21.02.3/targets/x86/64/&lt;/code>&lt;/p>
&lt;p>选择下载 &lt;code>generic-ext4-combined-efi.img.gz&lt;/code> 这个压缩文件，可以直接通过 EFI 引导&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-ima-download.png" alt="homelab-openwrt-esxi-ima-download.png">&lt;/p>
&lt;h2 id="镜像格式转换">镜像格式转换&lt;/h2>
&lt;p>将下载的镜像解压后得到 &lt;code>img&lt;/code>格式的文件，这个格式无法直接被 Esxi 使用，所以需要通过 &lt;code>QEMU&lt;/code> 软件将格式从 &lt;code>img&lt;/code> 转为 &lt;code>vmdk&lt;/code>&lt;/p>
&lt;ul>
&lt;li>使用 homebrew 安装 QEMU&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install qemu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 &lt;code>img&lt;/code>格式转为&lt;code>vmdk&lt;/code>格式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-img convert -f raw -O vmdk openwrt-21.02.3-x86-64-generic-ext4-combined-efi.img openwrt-21.02.3-x86-64-generic-ext4-combined-efi.vmdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="虚拟机配置">虚拟机配置&lt;/h2>
&lt;ol>
&lt;li>创建虚拟机，选择 Linux 64 位&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-create-vm.png" alt="homelab-openwrt-esxi-create-vm.png">&lt;/p>
&lt;ol start="2">
&lt;li>修改配置&lt;/li>
&lt;/ol>
&lt;p>需要删除硬盘，因为需要使用转换的 &lt;code>vmdk&lt;/code> 格式的文件作为硬盘；内存和 CPU 可以根据机器自行配置&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-create-vm-config.png" alt="homelab-openwrt-esxi-create-vm-config.png">&lt;/p>
&lt;ol start="3">
&lt;li>添加硬盘&lt;/li>
&lt;/ol>
&lt;p>在虚拟机的编辑界面，选择添加硬盘-现有硬盘，将转换后的 &lt;code>vmdk&lt;/code>格式文件上传到相应目录；&lt;/p>
&lt;p>需要注意，Openwrt 默认的硬盘容量只有 100M，安装软件可能空间不够；所以需要扩容，因此先不要选择该文件作为硬盘，需要扩容后才可以添加，否则容量无法修改&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-create-vm-disk.png" alt="homelab-openwrt-esxi-create-vm-disk.png">&lt;/p>
&lt;ol start="4">
&lt;li>修改硬盘大小&lt;/li>
&lt;/ol>
&lt;p>需要登录到 Esxi 的机器上，或者通过控制台 shell，使用命令行修改&lt;/p>
&lt;ul>
&lt;li>进入到上传文件所在的目录 &lt;code>/vmfs/volumes/datastore1/OpenWrt/&lt;/code>&lt;/li>
&lt;li>然后通过 &lt;code>vmkfstools&lt;/code> 复制一个新的文件，不复制无法扩容&lt;/li>
&lt;li>通过 &lt;code>vmkfstools&lt;/code> 将容量修改 1G&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> /vmfs/volumes/datastore1/OpenWrt/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vmkfstools -i openwrt-21.02.3-x86-64-generic-ext4-combined-efi.vmdk openwrt.vmdk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vmkfstools -X 1G openwrt.vmdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>再次添加硬盘
选择添加现有硬盘，将扩容后的 &lt;code>openwrt.vmdk&lt;/code>作为硬盘文件，保存修改即可&lt;/li>
&lt;/ol>
&lt;p>至此，完成 Openwrt 虚拟机的创建，接下来启动虚拟机即可&lt;/p></description></item><item><title>树莓派 4B 容器方式安装 OpenWrt 作为软路由</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-openwrt-%E4%BD%9C%E4%B8%BA%E8%BD%AF%E8%B7%AF%E7%94%B1/</link><pubDate>Wed, 20 Jul 2022 11:32:08 +0000</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-openwrt-%E4%BD%9C%E4%B8%BA%E8%BD%AF%E8%B7%AF%E7%94%B1/</guid><description>&lt;blockquote>
&lt;p>在树莓派 4B，基于 Ubuntu 22.04，使用 Docker 容器的方式运行 Openwrt 作为软路由，基于 &lt;a href="https://github.com/SuLingGG/OpenWrt-Docker">SuLingGG/OpenWrt-Docker&lt;/a> 的方案&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>什么是软路由&lt;/li>
&lt;/ul>
&lt;p>硬路由以特有的硬设备，包括处理器、电源供应、嵌入式软件，提供设定的路由器功能，如常用的路由器；软路由则是指利用台式机或服务器配合软件形成路由解决方案，主要靠软件的设置，达成路由器的功能；&lt;/p>
&lt;p>普通路由器因为硬件性能限制，无法支持长时间处理大量流量，当家中有 NAS 等设备时，通常无法跑满带宽；通过软路由，可以让路由器只处理流量的转发，其他的功能由软路由实现&lt;/p>
&lt;p>通常我们使用软路由用于多线负载、宽带叠加、为局域网内的其他设备过滤广告、自定义 DNS 等扩展功能&lt;/p>
&lt;h2 id="安装依赖">安装依赖&lt;/h2>
&lt;ul>
&lt;li>安装 &lt;a href="https://ubuntu.pkgs.org/21.10/ubuntu-main-arm64/linux-modules-extra-raspi_5.13.0.1008.14_arm64.deb.html">linux-modules-extra-raspi&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>需要保证安装了&lt;code>linux-modules-extra-raspi&lt;/code>，否则会导致在运行容器后出现&lt;code>Error response from daemon: failed to create the macvlan port: operation not supported&lt;/code>错误&lt;/p>
&lt;p>&lt;code>linux-modules-extra-raspi&lt;/code> 是树莓派 Ubuntu Arm 的不常用扩展，Ubuntu 最新的包管理中默认不包含扩展；因此需要单独安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install linux-modules-extra-raspi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装之后需要重启树莓派&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置网络">配置网络&lt;/h2>
&lt;ul>
&lt;li>开启网卡混杂模式&lt;/li>
&lt;/ul>
&lt;p>默认情况下网卡只会将发送给本机的包传递到上层服务，其他的包一律丢弃；开启混杂模式后机器的网卡能够接收所有流经过它的数据流，而无论其目的地址是否是它，一般用于网络分析和路由节点；&lt;/p>
&lt;p>树莓派只有一个有线接口，地址为 &lt;code>eth0&lt;/code>，所以在 &lt;code>eth0&lt;/code> 接口开启混杂模式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo ip link &lt;span style="color:#ef8383">set&lt;/span> eth0 promisc on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行以下命令检查结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ifconfig eth0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>网卡 flag 信息有 &lt;code>PROMISC&lt;/code> 表示开启成功&lt;/p>
&lt;pre tabindex="0">&lt;code>eth0: flags=4419&amp;lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&amp;gt; mtu 1500
inet 192.168.31.2 netmask 255.255.255.0 broadcast 192.168.31.255
inet6 2408:8207:24ac:6fc0::50c prefixlen 128 scopeid 0x0&amp;lt;global&amp;gt;
 inet6 fe80::dea6:32ff:fe5f:b43e prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;
 inet6 2408:8207:24ac:6fc0:dea6:32ff:fe5f:b43e prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;
 ether dc:a6:32:5f:b4:3e txqueuelen 1000 (Ethernet)
 RX packets 2705601 bytes 1502740361 (1.5 GB)
 RX errors 0 dropped 55 overruns 0 frame 0
 TX packets 2314782 bytes 826118897 (826.1 MB)
 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
 ```


## 配置 OpenWrt 容器

1. 创建 `macvlan`

`macvlan` 是一种网卡虚拟化技术，允许在同一个物理网卡上配置多个 MAC 地址，即多个 `interface`，每个 `interface` 可以配置自己的 IP；`macvlan`直接通过以太网的 `interface` 连接到物理网络，因此性能极好

因此，软路由需要使用 `macvlan` 配合混杂模式在容器中实现路由功能

Docker 创建 `macvlan` 时要确定所在的网段，可以在路由器后台进行确认；如小米路由器常用的是 `192.168.31.0/24`网段；在创建网络时需要保证子网网段`subnet`和网关地址`gateway`参数与当前网络一致

```bash
docker network create -d macvlan --subnet=192.168.31.0/24 --gateway=192.168.31.1 -o parent=eth0 macnet
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>创建容器&lt;/li>
&lt;/ol>
&lt;p>创建容器时需要指定网络为刚才创建的 &lt;code>macnet&lt;/code>&lt;/p></description></item><item><title>MacOS Monterey 制作 Windows 启动盘</title><link>https://blog.hellowood.dev/posts/macos-monterey-%E5%88%B6%E4%BD%9C-windows-%E5%90%AF%E5%8A%A8%E7%9B%98/</link><pubDate>Thu, 30 Jun 2022 11:37:22 +0000</pubDate><guid>https://blog.hellowood.dev/posts/macos-monterey-%E5%88%B6%E4%BD%9C-windows-%E5%90%AF%E5%8A%A8%E7%9B%98/</guid><description>&lt;blockquote>
&lt;p>需要在新的电脑安装 Windows 系统，但是手里只有 Mac，所以需要通过 Mac 制作 Windows 启动盘&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>搜到的一些方法，如启动转换助理，或者 &lt;a href="https://www.balena.io/etcher/">balenaEtcher&lt;/a> 等；但是启动转换助理在 Monterey 上不支持写入到外部硬盘；balenaEtcher 提示无法制作 Windows 镜像；又不想只为了制作启动盘单独下一个软件，所以最终通过命令行制作&lt;/p>
&lt;/blockquote>
&lt;h2 id="下载并挂载-windows-iso-镜像">下载并挂载 Windows ISO 镜像&lt;/h2>
&lt;ol>
&lt;li>在微软官方网站下载 &lt;a href="https://www.microsoft.com/software-download/windows11">Windows 镜像&lt;/a>&lt;/li>
&lt;li>挂载 Windows 镜像到 Mac&lt;/li>
&lt;/ol>
&lt;p>使用 &lt;code>hdiutil&lt;/code> 挂载 iso 镜像文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hdiutil mount ~/Downloads/Win10_21H2_Chinese&lt;span style="color:#d26464;font-weight:bold">\(&lt;/span>Simplified&lt;span style="color:#d26464;font-weight:bold">\)&lt;/span>_x64.iso
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回以下结果， 挂载的路径&lt;code>/Volumes/CCCOMA_X64FRE_ZH-CN_DV9&lt;/code>在复制文件时还需要用到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/dev/disk3 /Volumes/CCCOMA_X64FRE_ZH-CN_DV9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="格式化-u-盘">格式化 U 盘&lt;/h3>
&lt;ol>
&lt;li>查找 U 盘路径
使用 &lt;code>diskutil&lt;/code>查看所有挂载的硬盘，可以通过名称及容量查找；如果已经执行上面的命令挂载了 ISO 镜像，且没有其他硬盘，那么路径一般为 &lt;code>/dev/disk3&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>diskutil list | grep external
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回的 &lt;code>dev/disk3&lt;/code> 即为挂载的路径：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/dev/disk3 &lt;span style="color:#c7bf54">(&lt;/span>external, physical&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>格式化 U 盘&lt;/li>
&lt;/ol>
&lt;p>通过 &lt;code>diskutil&lt;/code> 命令，将挂载到 &lt;code>/dev/disk3&lt;/code> 路径的 U 盘格式化，格式为 MBR，并命名为 &lt;code>WINDOWS&lt;/code>&lt;/p></description></item></channel></rss>