<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AngularJs on HelloWood</title><link>https://blog.hellowood.dev/tags/angularjs/</link><description>Recent content in AngularJs on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 01 Jan 2018 12:05:17 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/tags/angularjs/index.xml" rel="self" type="application/rss+xml"/><item><title>AngularJS配置Router(路由)提示Controller NaNunction/undefined错误</title><link>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AErouter-%E8%B7%AF%E7%94%B1-%E6%8F%90%E7%A4%BAcontroller-nanunction-undefined%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 01 Jan 2018 12:05:17 +0000</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AErouter-%E8%B7%AF%E7%94%B1-%E6%8F%90%E7%A4%BAcontroller-nanunction-undefined%E9%94%99%E8%AF%AF/</guid><description>&lt;blockquote>
&lt;p>在配置Angular 路由的时候，和以往一样使用如下配置：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>router.js&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>var adminApp = angular.module(&amp;#39;adminApp&amp;#39;, [&amp;#39;oc.lazyLoad&amp;#39;, &amp;#39;ui.router&amp;#39;]);
angular.element(document).ready(function () {
 angular.bootstrap(document, [&amp;#39;adminApp&amp;#39;]);
});

adminApp.run(function ($rootScope, $state, $stateParams) {
 $rootScope.$state = $state;
 $rootScope.$stateParams = $stateParams;
});
adminApp.config(function ($stateProvider, $urlRouterProvider) {
 $urlRouterProvider.when(&amp;#34;&amp;#34;, &amp;#34;dashboard/accountManagement&amp;#34;);
 $urlRouterProvider.otherwise(&amp;#34;dashboard/accountManagement&amp;#34;);
 $stateProvider
 .state(&amp;#39;dashboard&amp;#39;, {
 url: &amp;#39;/dashboard&amp;#39;,
 templateUrl: &amp;#39;dashboard/dashboard.html&amp;#39;,
 controller: &amp;#39;dashboardController&amp;#39;,
 resolve: {
 deps: [&amp;#39;$ocLazyLoad&amp;#39;, function ($ocLazyLoad) {
 return $ocLazyLoad.load([&amp;#39;dashboard/dashboard.js&amp;#39;]);
 }]
 }
 });
});
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>dashboardController.js&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>angular.module(&amp;#34;adminApp&amp;#34;).controller(&amp;#39;dashboardController&amp;#39;, function ($scope) {
 console.log(&amp;#34;dashboardController&amp;#34;);
});
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>但是提示错误：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>angular.min.js:118 Error: [ng:areq] http://errors.angularjs.org/1.5.8/ng/areq?p0=dashboardController&amp;amp;p1=not%20aNaNunction%2C%20got%20undefined
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:6:412
 at sb (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:23:18)
 at Pa (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:23:105)
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:89:310
 at Object.&amp;lt;anonymous&amp;gt; (http://localhost:63342/static/plugin/angular-1.5.8/angular-ui-router.js:3971:42)
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:16:71
 at la (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:81:90)
 at p (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:66:341)
 at g (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:58:481)
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:58:119
&lt;/code>&lt;/pre>&lt;hr>
&lt;blockquote>
&lt;p>原因是因为直接写controller无法识别，所有需要使用register来注册该controller&lt;/p></description></item><item><title>AngularJS 配置路由</title><link>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1/</link><pubDate>Mon, 01 Jan 2018 12:04:04 +0000</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1/</guid><description>&lt;blockquote>
&lt;p>在使用AngularJS的时候需要用到路由来控制页面的跳转，从而达到使用一个面板进行控制的目的，面板页面如图所示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://img.blog.csdn.net/20170523210031963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="控制面板">&lt;/p>
&lt;blockquote>
&lt;p>该面板分为菜单栏和控制页面两部分，左侧和上方为不变的部分，中间区域随菜单选择变动&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>##&lt;a href="http://download.csdn.net/detail/u013360850/9850266">项目下载&lt;/a> | &lt;a href="https://github.com/helloworlde/AngularRouter">GitHub下载&lt;/a> | &lt;a href="http://119.29.99.89/AngularRouter/pages/admin/index.html">演示地址&lt;/a> | &lt;a href="https://helloworlde.github.io/AngularRouter">GitHub演示地址&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="1引入所需的css和js文件">1.引入所需的CSS和JS文件&lt;/h2>
&lt;ul>
&lt;li>将所需要的CSS文件和JS文件引入到项目中index.html&lt;/li>
&lt;li>angular.min.js&lt;/li>
&lt;li>ocLazyLoad.js&lt;/li>
&lt;li>angular-ui-router.js&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34; class=&amp;#34;body&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, height=device-height, initial-scale=1, maximum-scale=1&amp;#34;/&amp;gt;
 &amp;lt;link href=&amp;#34;../../plugin/bootstrap-3.3.7/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
 &amp;lt;link href=&amp;#34;dashboard/dashboard.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body &amp;gt;
&amp;lt;div data-ui-view=&amp;#34;&amp;#34; style=&amp;#34;height: 100%;overflow: hidden;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;#34;../../plugin/angular-1.5.8/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;../../plugin/angular-1.5.8/angular-ui-router.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;../../plugin/oclazyload/ocLazyLoad.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;app.route.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="2-配置dashboard页面">2. 配置dashboard页面&lt;/h2>
&lt;pre tabindex="0">&lt;code>&amp;lt;div class=&amp;#34;app app-header-fixed&amp;#34; id=&amp;#34;app&amp;#34;&amp;gt;
 &amp;lt;!-- navbar --&amp;gt;
 &amp;lt;div class=&amp;#34;app-header navbar&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;collapse pos-rlt navbar-collapse box-shadow bg-white-only&amp;#34;&amp;gt;
 &amp;lt;ul class=&amp;#34;nav navbar-nav navbar-right&amp;#34;&amp;gt;
 &amp;lt;li class=&amp;#34;dropdown&amp;#34;&amp;gt;
 &amp;lt;a href=&amp;#34;#&amp;#34; data-toggle=&amp;#34;dropdown&amp;#34; class=&amp;#34;dropdown-toggle clear&amp;#34;&amp;gt;
 &amp;lt;span class=&amp;#34;thumb-sm avatar pull-right m-t-n-sm m-b-n-sm m-l-sm&amp;#34;&amp;gt;
 &amp;lt;img src=&amp;#34;/static/images/head.jpg&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;on md b-white bottom&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;/span&amp;gt;
 &amp;lt;span class=&amp;#34;hidden-sm hidden-md&amp;#34;&amp;gt;Administrator&amp;lt;/span&amp;gt; &amp;lt;b class=&amp;#34;caret&amp;#34;&amp;gt;&amp;lt;/b&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;!-- dropdown --&amp;gt;
 &amp;lt;ul class=&amp;#34;dropdown-menu animated fadeInRight w hidden-folded&amp;#34; role=&amp;#34;menu&amp;#34;&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&amp;#34;#&amp;#34; role=&amp;#34;menuitem&amp;#34;&amp;gt;退出&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;!-- menu --&amp;gt;
 &amp;lt;div class=&amp;#34;app-aside hidden-xs bg-dark&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;aside-wrap&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navi-wrap&amp;#34;&amp;gt;
 &amp;lt;!-- nav --&amp;gt;
 &amp;lt;nav ui-nav class=&amp;#34;navi&amp;#34;&amp;gt;
 &amp;lt;ul class=&amp;#34;nav&amp;#34;&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a ui-sref=&amp;#34;.accountManagement&amp;#34; class=&amp;#34;auto&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;glyphicon glyphicon-user&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;span class=&amp;#34;font-bold&amp;#34;&amp;gt;账户管理&amp;lt;/span&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a ui-sref=&amp;#34;.academicYear&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;glyphicon glyphicon-calendar&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;span class=&amp;#34;font-bold&amp;#34;&amp;gt;学年学期管理&amp;lt;/span&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a ui-sref=&amp;#34;.feedbackManagement&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;glyphicon glyphicon-send&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;span class=&amp;#34;font-bold&amp;#34;&amp;gt;用户反馈管理&amp;lt;/span&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;!-- nav --&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- / menu --&amp;gt;
 &amp;lt;!-- content 中间可替换的部分--&amp;gt;
 &amp;lt;div class=&amp;#34;app-content&amp;#34;&amp;gt;
 &amp;lt;div data-ui-view=&amp;#34;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- /content --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>##3. 配置路由&lt;/p></description></item><item><title>AngularJS中使用ngModal模态框</title><link>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngmodal%E6%A8%A1%E6%80%81%E6%A1%86/</link><pubDate>Mon, 01 Jan 2018 11:57:50 +0000</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngmodal%E6%A8%A1%E6%80%81%E6%A1%86/</guid><description>&lt;ul>
&lt;li>在AngularJS中使用模态框需要引用的文件：
&lt;ul>
&lt;li>angular.js 1.5.5&lt;/li>
&lt;li>ui.bootstrap-tpls.js 0.11.2&lt;/li>
&lt;li>bootstrap.css 3.3.7&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>需要注意版本要一致，高版本的不支持这种方法，会出错&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>将需要弹出的模态框的内容写在 script 标签中，指明属性，放在页面中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;modal.html&amp;#34;&amp;gt; 
&amp;lt;div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-header&amp;#34;&amp;gt;
 &amp;lt;h3 class=&amp;#34;modal-title&amp;#34; align=&amp;#34;center&amp;#34;&amp;gt;
 标题信息
 &amp;lt;/h3&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-body&amp;#34;&amp;gt;
 &amp;lt;div align=&amp;#34;center&amp;#34;&amp;gt;
 模态框内容
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-footer&amp;#34;&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; ng-click=&amp;#34;ok()&amp;#34;&amp;gt;
 确认
 &amp;lt;/button&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-warning&amp;#34; ng-click=&amp;#34;cancel()&amp;#34;&amp;gt;
 退出
 &amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在App和Controller中注入模态框&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>var app = angular.module(&amp;#39;app&amp;#39;, [&amp;#39;ui.bootstrap&amp;#39;]);
app.controller(&amp;#39;modalController&amp;#39;, function($scope, $rootScope,$modal) {
 $scope.openModel = function() {
 var modalInstance = $modal.open({
 templateUrl : &amp;#39;modal.html&amp;#39;,//script标签中定义的id
 controller : &amp;#39;modalCtrl&amp;#39;,//modal对应的Controller
 resolve : {
 data : function() {//data作为modal的controller传入的参数
 return data;//用于传递数据
 }
 }
 })
 }
}

//模态框对应的Controller
app.controller(&amp;#39;modalCtrl&amp;#39;, function($scope, $modalInstance, data) {
 $scope.data= data;

 //在这里处理要进行的操作 
 $scope.ok = function() {
 $modalInstance.close();
 };
 $scope.cancel = function() {
 $modalInstance.dismiss(&amp;#39;cancel&amp;#39;);
 }
});
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加事件触发显示模态框&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;button ng-click=&amp;#34;openModal()&amp;#34;&amp;gt;打开模态框&amp;lt;/button&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html ng-app=&amp;#34;app&amp;#34; ng-controller=&amp;#34;modalController&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;ng-model模态框&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;link href=&amp;#34;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;button ng-click=&amp;#34;openModal()&amp;#34;&amp;gt;打开模态框&amp;lt;/button&amp;gt;

&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;modal.html&amp;#34;&amp;gt; 
 &amp;lt;div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-header&amp;#34;&amp;gt;
 &amp;lt;h3 class=&amp;#34;modal-title&amp;#34; align=&amp;#34;center&amp;#34;&amp;gt;
 标题信息
 &amp;lt;/h3&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-body&amp;#34;&amp;gt;
 &amp;lt;div align=&amp;#34;center&amp;#34;&amp;gt;
 模态框内容 &amp;lt;br&amp;gt;
 {{data}}
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-footer&amp;#34;&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; ng-click=&amp;#34;ok()&amp;#34;&amp;gt;
 确认
 &amp;lt;/button&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-warning&amp;#34; ng-click=&amp;#34;cancel()&amp;#34;&amp;gt;
 退出
 &amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;

&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/angular.js/1.5.5/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/angular-ui-bootstrap/0.11.2/ui-bootstrap-tpls.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;
 var app = angular.module(&amp;#39;app&amp;#39;, [&amp;#39;ui.bootstrap&amp;#39;]);
 app.controller(&amp;#39;modalController&amp;#39;, function($scope, $rootScope, $modal) {
 var data = &amp;#34;通过modal传递的数据&amp;#34;;
 $scope.openModal = function() {
 var modalInstance = $modal.open({
 templateUrl : &amp;#39;modal.html&amp;#39;,//script标签中定义的id
 controller : &amp;#39;modalCtrl&amp;#39;,//modal对应的Controller
 resolve : {
 data : function() {//data作为modal的controller传入的参数
 return data;//用于传递数据
 }
 }
 })
 }
 })
 //模态框对应的Controller
 app.controller(&amp;#39;modalCtrl&amp;#39;, function($scope, $modalInstance, data) {
 $scope.data= data;

 //在这里处理要进行的操作
 $scope.ok = function() {
 $modalInstance.close();
 };
 $scope.cancel = function() {
 $modalInstance.dismiss(&amp;#39;cancel&amp;#39;);
 }
 });
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>AngularJS 中ngTable自定义/重写过滤器</title><link>https://blog.hellowood.dev/posts/angularjs%E4%B8%ADngtable%E8%87%AA%E5%AE%9A%E4%B9%89-%E9%87%8D%E5%86%99%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 11:56:49 +0000</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E4%B8%ADngtable%E8%87%AA%E5%AE%9A%E4%B9%89-%E9%87%8D%E5%86%99%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>&lt;blockquote>
&lt;ul>
&lt;li>在使用ngTable 时用到了需要进行按时间过滤，但是ngTable并没有该功能，所以需要自定义过滤器，但是如果自定义了过滤器，则会覆盖原来的，所以就需要重写过滤器&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>###ngTable过滤器的原理是按照过滤的条件遍历所有的列表项内容，如果满足过滤条件则返回true，显示该记录，如果不满足条件则返回false，不显示该条记录，过滤条件有任何变化都会触发过滤&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>text:根据字符匹配，如果被过滤的值有该字符，则显示该记录&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>number:根据数值进行匹配，如果数值相等，则显示该记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>select:根据下拉列表选择的值进行匹配，如果值相等，则显示该记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加自定义的过滤器控件&lt;/p>
&lt;ul>
&lt;li>在HTML中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;/filter/js/startDateFilter.html&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加自定义的过滤器控件
&lt;ul>
&lt;li>在js中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.customFilter = {
 start:{
 id:&amp;#39;/filter/js/startDateFilter.html&amp;#39;,
 placeholder:&amp;#39;Start&amp;#39;
 }
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>需要在ngTable的配置中指定过滤器&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.userTable = new NgTableParams({},
 {
 // initial sort order
 filterDelay: 0,
 filterOptions: {filterFn: $scope.customFilterFn},
 dataset: data
 });
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>为指定列设置控件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;td data-title=&amp;#34;&amp;#39;日期&amp;#39;&amp;#34; filter=&amp;#34;customFilter&amp;#34;&amp;gt;
 {{user.date|type: post
date:&amp;#39;yyyy-MM-dd&amp;#39;}}
 &amp;lt;/td&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>重写过滤器方法，实现过滤器功能&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.customFilterFn = function (date, filterValues) {
 return data.filter(function (item) {
 var result = true;
 if (typeof(filterValues.name) != undefined &amp;amp;&amp;amp; filterValues.name != null) {
 result = result &amp;amp;&amp;amp; (item.name.indenOf(filterValues.name) &amp;gt; -1);
 }

 if (typeof(filterValues.sex) != undefined &amp;amp;&amp;amp; filterValues.sex != null) {
 result = result &amp;amp;&amp;amp; (item.sex == filterValues.sex);
 }

 if (typeof(filterValues.startDate) != undefined &amp;amp;&amp;amp; filterValues.startDate != null) {
 result = result &amp;amp;&amp;amp; (item.startDate &amp;gt;= filterValues.startDate);
 }
 return result;
 })
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>页面代码&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34; ng-app=&amp;#34;myApp&amp;#34; ng-controller=&amp;#34;myCtrl&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;自定义过滤器&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;link href=&amp;#34;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;link href=&amp;#34;https://cdn.bootcss.com/ng-table/1.0.0/ng-table.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
 &amp;lt;!--自定义filter控件--&amp;gt;
 &amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;dateFilter.html&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;date&amp;#34;&amp;gt;
 &amp;lt;/script&amp;gt;
 &amp;lt;div class=&amp;#34;col-md-12 table-responsive&amp;#34;&amp;gt;
 &amp;lt;table ng-table=&amp;#34;userTable&amp;#34; class=&amp;#34;table table-condensed table-bordered table-striped table-hover &amp;#34;
 show-filter=&amp;#34;true&amp;#34;&amp;gt;
 &amp;lt;tr ng-repeat=&amp;#34;user in $data&amp;#34;&amp;gt;
 &amp;lt;td data-title=&amp;#34;&amp;#39;用户名&amp;#39;&amp;#34; filter=&amp;#34;{username: &amp;#39;text&amp;#39;}&amp;#34; sortable=&amp;#34;&amp;#39;username&amp;#39;&amp;#34;&amp;gt;{{user.username}}&amp;lt;/td&amp;gt;
 &amp;lt;td data-title=&amp;#34;&amp;#39;性别&amp;#39;&amp;#34; filter=&amp;#34;{sex: &amp;#39;select&amp;#39;}&amp;#34; filter-data=&amp;#34;sexs&amp;#34; sortable=&amp;#34;&amp;#39;sex&amp;#39;&amp;#34;&amp;gt;{{user.sex}}&amp;lt;/td&amp;gt;
 &amp;lt;td data-title=&amp;#34;&amp;#39;性别&amp;#39;&amp;#34; filter=&amp;#34;customFilter&amp;#34; sortable=&amp;#34;&amp;#39;date&amp;#39;&amp;#34;&amp;gt;
 {{user.date|type: post
date:&amp;#39;yyyy-MM-dd&amp;#39;}}
 &amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;/table&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;/filter/js/startDateFilter.html&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/angular.js/1.5.8/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/ng-table/1.0.0/ng-table.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;
 var app = angular.module(&amp;#39;myApp&amp;#39;, [&amp;#39;ngTable&amp;#39;]);
 app.controller(&amp;#39;myCtrl&amp;#39;, function ($scope, NgTableParams) {

 $scope.sexs = [{
 &amp;#34;id&amp;#34;: &amp;#34;男&amp;#34;,
 &amp;#34;title&amp;#34;: &amp;#34;男&amp;#34;
 }, {
 &amp;#34;id&amp;#34;: &amp;#34;女&amp;#34;,
 &amp;#34;title&amp;#34;: &amp;#34;女&amp;#34;
 }]

 var data = [{
 &amp;#34;username&amp;#34;: &amp;#34;农夫山泉&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;男&amp;#34;,
 &amp;#34;date&amp;#34;: 1004570428580
 }, {
 &amp;#34;username&amp;#34;: &amp;#34;哇哈哈&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;女&amp;#34;,
 &amp;#34;date&amp;#34;: 1784570428580
 },
 {
 &amp;#34;username&amp;#34;: &amp;#34;Alice&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;男&amp;#34;,
 &amp;#34;date&amp;#34;: 1466570428580
 },
 {
 &amp;#34;username&amp;#34;: &amp;#34;CCC&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;女&amp;#34;,
 &amp;#34;date&amp;#34;: 1584570428580
 }];


 $scope.userTable = new NgTableParams({
 sorting: {id: &amp;#34;asc&amp;#34;}
 },
 {
 // initial sort order
 filterDelay: 0,
 filterOptions: {filterFn: $scope.customFilterFn},
 dataset: data
 });

 $scope.customFilter = {
 start:{
 id:&amp;#39;/filter/js/startDateFilter.html&amp;#39;,
 placeholder:&amp;#39;Start&amp;#39;
 }
 }

 $scope.customFilterFn = function (date, filterValues) {
 return data.filter(function (item) {
 var result = true;

 console.log(filterValues);

 if (typeof(filterValues.name) != undefined &amp;amp;&amp;amp; filterValues.name != null) {
 result = result &amp;amp;&amp;amp; (item.name.indenOf(filterValues.name) &amp;gt; -1);
 }

 if (typeof(filterValues.sex) != undefined &amp;amp;&amp;amp; filterValues.sex != null) {
 result = result &amp;amp;&amp;amp; (item.sex == filterValues.sex);
 }

 if (typeof(filterValues.startDate) != undefined &amp;amp;&amp;amp; filterValues.startDate != null) {
 result = result &amp;amp;&amp;amp; (item.startDate &amp;gt;= filterValues.startDate);
 }
 return result;
 })

 }
 })
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>AngularJS中使用ngTable</title><link>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngtable/</link><pubDate>Mon, 01 Jan 2018 11:42:21 +0000</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngtable/</guid><description>&lt;blockquote>
&lt;p>在HTML中使用&lt;a href="http://ng-table.com/">ngTable&lt;/a> 可以方便的进行排序，筛选，分页，添加，编辑删除等操作，不用再从数据库里面进行分页等操作&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>需要引用的文件
&lt;ul>
&lt;li>angular.js&lt;/li>
&lt;li>ng-table.js&lt;/li>
&lt;li>ng-table.css&lt;/li>
&lt;li>bootrasp.css&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>注入依赖&lt;/li>
&lt;li>为ng-table 设置属性和数据&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>var app = angular.module(&amp;#39;app&amp;#39;, [ &amp;#39;ngTable&amp;#39;]);
app.controller(&amp;#39;controller&amp;#39;, function($scope,NgTableParams) {
 $http.get(&amp;#34;/query&amp;#34;)
 .success(function(data) {
 $scope.userTable = new NgTableParams({
 page : 1,
 count : 5
 }, {
 total : data.length,
 getData : data
 }
 }); 
 })
 });
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>为 table 添加 ng-table 属性&lt;/li>
&lt;li>显示数据&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;table ng-table=&amp;#34;userTable&amp;#34; class=&amp;#34;table table-hover&amp;#34;&amp;gt;
 &amp;lt;tbody&amp;gt;
 &amp;lt;tr&amp;gt;
 &amp;lt;th&amp;gt;编号&amp;lt;/th&amp;gt;
 &amp;lt;th&amp;gt;用户名&amp;lt;/th&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;tr ng-repeat=&amp;#34;user in $data&amp;#34;&amp;gt;
 &amp;lt;td&amp;gt;{{user.id}}&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;{{user.name}}&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;/tbody&amp;gt;
 &amp;lt;/table&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>AngularJS发送异步Get/Post请求</title><link>https://blog.hellowood.dev/posts/angularjs%E5%8F%91%E9%80%81%E5%BC%82%E6%AD%A5get-post%E8%AF%B7%E6%B1%82/</link><pubDate>Mon, 01 Jan 2018 11:40:58 +0000</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E5%8F%91%E9%80%81%E5%BC%82%E6%AD%A5get-post%E8%AF%B7%E6%B1%82/</guid><description>&lt;p>1 . 在页面中加入AngularJS并为页面绑定ng-app 和 ng-controller&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;body ng-app=&amp;#34;MyApp&amp;#34; ng-controller=&amp;#34;MyCtrl&amp;#34; &amp;gt;
...
&amp;lt;script src=&amp;#34;js/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;js/sbt.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>2 . 添加必要的控件并绑定相应的事件&lt;/p>
&lt;pre tabindex="0">&lt;code> get:&amp;lt;input type=&amp;#34;text&amp;#34; ng-model=&amp;#34;param&amp;#34;&amp;gt;{{param}} &amp;lt;br&amp;gt;
 post: &amp;lt;input type=&amp;#34;text&amp;#34; ng-model=&amp;#34;user.name&amp;#34;&amp;gt;&amp;lt;input type=&amp;#34;text&amp;#34; ng-model=&amp;#34;user.password&amp;#34;&amp;gt;&amp;lt;br&amp;gt;
 &amp;lt;button ng-click=&amp;#34;get()&amp;#34;&amp;gt;Get&amp;lt;/button&amp;gt;
 &amp;lt;button ng-click=&amp;#34;post()&amp;#34;&amp;gt;Post&amp;lt;/button&amp;gt;
&lt;/code>&lt;/pre>&lt;p>3 . 在JS脚本中发送进行Get/Post请求&lt;/p>
&lt;ul>
&lt;li>get&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.get = function () {
 $http.get(&amp;#34;/get&amp;#34;, {params: {param: $scope.param}})
 .success(function (data, header, config, status) {
 console.log(data);
 })
 .error(function (data, header, config, status) {
 console.log(data);
 })
 ;
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>get 将参数放在URL中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.get = function () {
 $http.get(&amp;#34;/get?param=&amp;#34;+$scope.param)
 .success(function (data, header, config, status) {
 console.log(data);
 })
 .error(function (data, header, config, status) {
 console.log(data);
 })
 ;
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>post&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.post = function () {
 $http.post(&amp;#34;/post&amp;#34;, $scope.user)
 .success(function (data, header, config, status) {
 console.log(data);
 })
 .error(function (data, header, config, status) {
 console.log(data);
 })
 ;
 }
&lt;/code>&lt;/pre>&lt;p>4 . 由Controller处理请求并返回结果&lt;/p></description></item></channel></rss>