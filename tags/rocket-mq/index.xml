<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rocket MQ on HelloWood</title><link>https://blog.hellowood.dev/tags/rocket-mq/</link><description>Recent content in Rocket MQ on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 16 Sep 2024 03:53:10 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/tags/rocket-mq/index.xml" rel="self" type="application/rss+xml"/><item><title>Rocket MQ 相关知识</title><link>https://blog.hellowood.dev/posts/rocket-mq-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 2018 12:54:02 +0000</pubDate><guid>https://blog.hellowood.dev/posts/rocket-mq-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid><description>&lt;p>@(消息队列)[RocketMQ, 消息]&lt;/p>
&lt;blockquote>
&lt;p>Rocket MQ消息队列（Message Queue，简称 MQ）是阿里巴巴集团中间件技术部自主研发的专业消息中间件。产品基于高可用分布式集群技术，提供消息发布订阅、消息轨迹查询、定时（延时）消息、资源统计、监控报警等一系列消息云服务，是企业级互联网架构的核心产品。&lt;/p>
&lt;/blockquote>
&lt;h2 id="rocket-mq相关名词">Rocket MQ相关名词&lt;/h2>
&lt;ul>
&lt;li>Producer 消息生产者，负责生产消息&lt;/li>
&lt;li>Consumer 消息消费者，负责消费消息&lt;/li>
&lt;li>NameServer 无状态节点，用来保存活跃的broker列表和topic列表&lt;/li>
&lt;li>Broker 消息中转角色，负责存储消息，转发消息&lt;/li>
&lt;li>Topic 消息的逻辑管理单位&lt;/li>
&lt;li>Message 消息
&lt;ul>
&lt;li>body 消息体，用于携带消息具体内容&lt;/li>
&lt;li>key 消息的key，用于区别不同的消息&lt;/li>
&lt;li>tags 消息的Tag，用于不同的订阅者过滤消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="消息发送方式">消息发送方式&lt;/h2>
&lt;ul>
&lt;li>同步方式
&lt;blockquote>
&lt;p>发送消息，接收到结果之后再发送下一条消息，速度最慢，耗时最长&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>异步方式
&lt;blockquote>
&lt;p>发送消息，不论是否收到结果，直接发送下一条消息，发送速度介于同步和单向方式之间&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>单向方式
&lt;blockquote>
&lt;p>发送消息，直接发送消息，不返回发送结果，发送速度最快&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="消息类型">消息类型&lt;/h2>
&lt;ul>
&lt;li>定时消息
&lt;blockquote>
&lt;p>在指定的发送时间发送消息&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>延时消息
&lt;blockquote>
&lt;p>从当前时间开始，经过延时时间后再发送消息&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>顺序消息
&lt;blockquote>
&lt;p>立即发送消息&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>事务消息
&lt;blockquote>
&lt;p>MQ 提供类似 X/Open XA 的分布事务功能，通过 MQ 事务消息能达到分布式事务的最终一致&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h1 id="实例代码">实例代码&lt;/h1>
&lt;h2 id="producer">Producer&lt;/h2>
&lt;pre tabindex="0">&lt;code>public class ProducerDelayTest {
 public static void main(String[] args) {
 Properties properties = new Properties();
 //您在 MQ 控制台创建的Producer ID
 properties.put(PropertyKeyConst.ProducerId, &amp;#34;XXX&amp;#34;);
 // 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.AccessKey, &amp;#34;XXX&amp;#34;);
 // 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.SecretKey, &amp;#34;XXX&amp;#34;);
 // 设置 TCP 接入域名（此处以公共云生产环境为例）
 properties.put(PropertyKeyConst.ONSAddr,
 &amp;#34;http://onsaddr-internal.aliyun.com:8080/rocketmq/nsaddr4client-internal&amp;#34;);
 Producer producer = ONSFactory.createProducer(properties);
 // 在发送消息前，必须调用start方法来启动Producer，只需调用一次即可。
 producer.start();

 /**
 * 消息类型代码，参考下面消息类型代码
 */
 /**
 * 消息发送方式代码，参考下面发送方式代码
 */
 System.out.println(&amp;#34;Message Id:&amp;#34; + sendResult.getMessageId());
 // 在应用退出前，销毁 Producer 对象
 // 注意：如果不销毁也没有问题，如果发送消息较多不应该销毁
 producer.shutdown();
 }
}
&lt;/code>&lt;/pre>&lt;h3 id="消息类型代码">消息类型代码&lt;/h3>
&lt;ul>
&lt;li>定时消息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Message msg = new Message();
 msg.setTag(&amp;#34;TAG&amp;#34;);
 msg.setKey(&amp;#34;KEY&amp;#34;);
 msg.setTopic(&amp;#34;TOPIC&amp;#34;);
 msg.setBody(&amp;#34;BODY&amp;#34;.getBytes());
 long timeStamp =new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;).parse(&amp;#34;2017-09-03 16:21:00&amp;#34;).getTime();
 msg.setStartDeliverTime(timeStamp);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>延时消息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Message msg = new Message();
 msg.setTag(&amp;#34;TAG&amp;#34;);
 msg.setKey(&amp;#34;KEY&amp;#34;);
 msg.setTopic(&amp;#34;TOPIC&amp;#34;);
 msg.setBody(&amp;#34;BODY&amp;#34;.getBytes());
 long delayTime = 3000;//30秒后再发送
 msg.setStartDeliverTime(System.currentTimes() + delayTime);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>顺序消息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Message msg = new Message();
 msg.setTag(&amp;#34;TAG&amp;#34;);
 msg.setKey(&amp;#34;KEY&amp;#34;);
 msg.setTopic(&amp;#34;TOPIC&amp;#34;.getBytes());
 msg.setBody(&amp;#34;BODY&amp;#34;);
&lt;/code>&lt;/pre>&lt;h3 id="消息发送方式代码">消息发送方式代码&lt;/h3>
&lt;ul>
&lt;li>同步方式发送&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> SendResult sendResult = producer.send(msg);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>异步方式发送&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> producer.sendAsync(message, new SendCallback() {
 @Override
 public void onSuccess(final SendResult sendResult) {
 logger.info(&amp;#34;MQ send ASYNCHRONOUS message successed，response is &amp;#34; + JSON.toJSONString(sendResult));
 }

 @Override
 public void onException(OnExceptionContext onExceptionContext) {
 logger.info(&amp;#34;MQ send ASYNCHRONOUS message failed, error is &amp;#34; + onExceptionContext.getException().getMessage());
 }
 });
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>单向方式发送&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> producer.sendOneway(message);
&lt;/code>&lt;/pre>&lt;h2 id="consumer">Consumer&lt;/h2>
&lt;pre tabindex="0">&lt;code>public class ConsumerTest {
 public static void main(String[] args) {
 Properties properties = new Properties();
 // 您在控制台创建的 Consumer ID
 properties.put(PropertyKeyConst.ConsumerId, &amp;#34;XXX&amp;#34;);
 // AccessKey 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.AccessKey, &amp;#34;XXX&amp;#34;);
 // SecretKey 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.SecretKey, &amp;#34;XXX&amp;#34;);
 // 设置 TCP 接入域名（此处以公共云生产环境为例）
 properties.put(PropertyKeyConst.ONSAddr,
 &amp;#34;http://onsaddr-internal.aliyun.com:8080/rocketmq/nsaddr4client-internal&amp;#34;);
 // 集群订阅方式 (默认)
 // properties.put(PropertyKeyConst.MessageModel, PropertyValueConst.CLUSTERING);
 // 广播订阅方式
 // properties.put(PropertyKeyConst.MessageModel, PropertyValueConst.BROADCASTING);
 Consumer consumer = ONSFactory.createConsumer(properties);
 consumer.subscribe(&amp;#34;TopicTestMQ&amp;#34;, &amp;#34;TagA||TagB&amp;#34;, new MessageListener() { //订阅多个Tag
 public Action consume(Message message, ConsumeContext context) {
 System.out.println(&amp;#34;Receive: &amp;#34; + message);
 return Action.CommitMessage;
 }
 });
 //订阅另外一个Topic
 consumer.subscribe(&amp;#34;TopicTestMQ-Other&amp;#34;, &amp;#34;*&amp;#34;, new MessageListener() { //订阅全部Tag
 public Action consume(Message message, ConsumeContext context) {
 System.out.println(&amp;#34;Receive: &amp;#34; + message);
 return Action.CommitMessage;
 }
 });
 consumer.start();
 System.out.println(&amp;#34;Consumer Started&amp;#34;);
 }
}
&lt;/code>&lt;/pre></description></item><item><title>Rocket MQ 发送消息</title><link>https://blog.hellowood.dev/posts/rocket-mq-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</link><pubDate>Mon, 01 Jan 2018 12:52:39 +0000</pubDate><guid>https://blog.hellowood.dev/posts/rocket-mq-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</guid><description>&lt;h2 id="rocket-mq-发送消息">Rocket MQ 发送消息&lt;/h2>
&lt;p>@(消息队列)[RocketMQ, 消息]&lt;/p>
&lt;blockquote>
&lt;p>使用阿里巴巴的Rocket MQ发送消息的SpringBoo项目&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>使用之前请现在&lt;a href="https://ons.console.aliyun.com/?spm=5176.2020520001.1002.d10ons.61d991b3GbNJPR#/home/topic">阿里云&lt;/a>申请消息队列并创建消息TOPIC、Producer和Consumer&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;ul>
&lt;li>下载： &lt;code>https://github.com/helloworlde/SpringBoot-RocketMQ.git&lt;/code>&lt;/li>
&lt;li>修改配置文件：修改&lt;code>application.properties&lt;/code> ，填入相应的信息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.rocketmq.ONSAddresses=消息队列地址
spring.rocketmq.accessKey=AccessKey
spring.rocketmq.secretKey=SercetKey
spring.rocketmq.topic=TOPIC
spring.rocketmq.producerId生产者
spring.rocketmq.consumerId=订阅者
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>编译：&lt;code>gradle build&lt;/code>&lt;/li>
&lt;li>启动：&lt;code>gradle bootrun&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="api">API&lt;/h2>
&lt;p>&lt;strong>请求URL：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>http://localhost:8080/sendMessage&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>请求方式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>POST &lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>参数：&lt;/strong>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">参数名&lt;/th>
 &lt;th style="text-align: left">必选&lt;/th>
 &lt;th style="text-align: left">类型&lt;/th>
 &lt;th style="text-align: left">说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">body&lt;/td>
 &lt;td style="text-align: left">是&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td style="text-align: left">消息所携带的数据，可以是对象的JSON串&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">key&lt;/td>
 &lt;td style="text-align: left">是&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td style="text-align: left">32位key&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">tags&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td style="text-align: left">Message Tag，用于过滤订阅者过滤消息&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">method&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td style="text-align: left">消息发送方式，共有三种：同步发送：&lt;code>SYNCHRONOUS&lt;/code>，异步发送：&lt;code>ASYNCHRONOUS&lt;/code>, 单向发送：&lt;code>ONE_WAY&lt;/code> ,默认使用同步发送方式发送消息&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">type&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td style="text-align: left">消息类型，共有三种：顺序消息：&lt;code>ORDER&lt;/code>，延时消息：&lt;code>DELAY&lt;/code>，定时消息：&lt;code>TIMING&lt;/code>，默认发送顺序消息&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">delayTime&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">long&lt;/td>
 &lt;td style="text-align: left">消息发送延时时间，单位是毫秒&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">startDeliveryTime&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td style="text-align: left">定时消息发送时间，必须是&lt;code>yyyy-MM-dd HH:mm:ss&lt;/code>格式&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>顺序消息 Body&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;body&amp;#34;:&amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;MQ\&amp;#34;,\&amp;#34;type\&amp;#34;:\&amp;#34;Rocket\&amp;#34;}&amp;#34;,
 &amp;#34;delayTime&amp;#34;:30000,
 &amp;#34;key&amp;#34;:&amp;#34;key&amp;#34;,
 &amp;#34;method&amp;#34;:&amp;#34;SYNCHRONOUS&amp;#34;,
 &amp;#34;tags&amp;#34;:&amp;#34;TAG1,TAG2&amp;#34;,
 &amp;#34;topic&amp;#34;:&amp;#34;TOPIC&amp;#34;,
 &amp;#34;type&amp;#34;:&amp;#34;ORDER&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>延时消息 Body&lt;/strong>&lt;/p></description></item></channel></rss>