<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Https on HelloWood</title><link>https://blog.hellowood.dev/tags/https/</link><description>Recent content in Https on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 16 Sep 2024 03:53:10 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/tags/https/index.xml" rel="self" type="application/rss+xml"/><item><title>Tomcat9 配置HTTPS连接</title><link>https://blog.hellowood.dev/posts/tomcat9-%E9%85%8D%E7%BD%AEhttps%E8%BF%9E%E6%8E%A5/</link><pubDate>Mon, 01 Jan 2018 12:01:18 +0000</pubDate><guid>https://blog.hellowood.dev/posts/tomcat9-%E9%85%8D%E7%BD%AEhttps%E8%BF%9E%E6%8E%A5/</guid><description>&lt;blockquote>
&lt;p>Tomcat中配置HTTPS连接可以分为两步：1. 生成证书&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code> 2. 配置Tomcat
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>准备工作&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JDK&lt;/li>
&lt;li>Tomcat&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="1-生成证书">1. 生成证书&lt;/h1>
&lt;blockquote>
&lt;p>证书可以使用Java来生成&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>直接使用命令生成证书&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>keytool -genkeypair -alias &amp;#34;tomcat&amp;#34; -keyalg &amp;#34;RSA&amp;#34; -keystore &amp;#34;d:\DevConfig\tomcat.keystore&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="http://img.blog.csdn.net/20170424210011905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="生成Keystore">&lt;/p>
&lt;blockquote>
&lt;p>这样就会在&lt;code>F:\&lt;/code>下生成一个&lt;code>tomcat.keystore&lt;/code> 文件
密码在配置tomcat的时候会用到&lt;/p>
&lt;/blockquote>
&lt;h1 id="2-配置tomcat">2. 配置Tomcat&lt;/h1>
&lt;ul>
&lt;li>修改&lt;code>TOMCAT_HOME\conf\server.xml&lt;/code>文件，将以下内容粘贴到Tomcat配置文件中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;Connector
 protocol=&amp;#34;org.apache.coyote.http11.Http11NioProtocol&amp;#34;
 port=&amp;#34;8443&amp;#34; maxThreads=&amp;#34;200&amp;#34;
 scheme=&amp;#34;https&amp;#34; secure=&amp;#34;true&amp;#34; SSLEnabled=&amp;#34;true&amp;#34;
 keystoreFile=&amp;#34;F:\tomcat.keystore&amp;#34; keystorePass=&amp;#34;tomcat&amp;#34;
 clientAuth=&amp;#34;false&amp;#34; sslProtocol=&amp;#34;TLS&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>保存后启动Tomcat，访问&lt;code>https://localhost:8433&lt;/code>即可&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.blog.csdn.net/20170424211734554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Tomcat Https">&lt;/p>
&lt;ul>
&lt;li>因为CA证书是自己生成的，不被浏览器认可，所以会被当做不安全网站，但不影响使用&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>需要注意在配置文件有三种不同的实现方式&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> - JSSE （作为Java运行部分）
 - JSSE （使用OpenSSL）
 - APR （使用OpenSSL）
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这三种方式对应的配置文件并不一样，需要特别注意&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>另外&lt;code>protocol&lt;/code>如果写成&lt;code>HTTP/1.1&lt;/code>也会报错，应当使用以下三个中的一个，当使用APR的时候需要从&lt;a href="http://tomcat.apache.org/tomcat-7.0-doc/apr.html">下载&lt;code>tcnative-1.dll&lt;/code>&lt;/a>放到Tomcat的bin目录下，否则会报错&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>org.apache.coyote.http11.Http11NioProtocol
org.apache.coyote.http11.Http11Nio2Protocol
org.apache.coyote.http11.Http11AprProtocol
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这里的配置是第一种方式，也是最简单的方式&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>详细配置请看官方文档 &lt;a href="http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html">http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html&lt;/a>&lt;/p></description></item></channel></rss>