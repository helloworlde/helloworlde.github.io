<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HelloWood</title><link>https://blog.hellowood.dev/</link><description>Recent content on HelloWood</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.hellowood.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Cloudflare Tunnel 作为反向代理访问内网服务</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-tunnel-%E4%BD%9C%E4%B8%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1/</link><pubDate>Wed, 04 Dec 2024 15:48:56 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-tunnel-%E4%BD%9C%E4%B8%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1/</guid><description>&lt;p>Cloudflare Tunnel 是一款隧道软件，可以理解为反向代理；可以快速安全地加密应用程序到任何类型基础设施的流量，如 TCP/HTTP/SSH 等，同时能够隐藏 web 服务器 IP 地址，阻止直接攻击，适用于没有公网 IP，但是又需要从公网访问内网部署的服务；详细可以参考官方文档：&lt;a href="https://www.cloudflare.com/zh-cn/products/tunnel/">Cloudflare Tunnel&lt;/a>&lt;/p>
&lt;p>在 Linux 服务器上安装为例，对外提供 whoami 的 web 程序&lt;/p>
&lt;h2 id="创建-tunnel">创建 Tunnel&lt;/h2>
&lt;p>Tunnel 支持在线和本地两种配置方式；在线维护方式添加、修改比较方便，推荐使用在线的方式进行配置；&lt;/p>
&lt;p>在 Zero Trust =&amp;gt; Network =&amp;gt; Tunnels 中选择创建 Tunnel&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-tunnel-init-create-tunnel.png" alt="homelab-cloudflare-tunnel-init-create-tunnel.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-tunnel-init-name-tunnel.png" alt="homelab-cloudflare-tunnel-init-name-tunnel.png">&lt;/p>
&lt;h2 id="安装配置-cloudflare-tunnel">安装配置 Cloudflare Tunnel&lt;/h2>
&lt;p>Tunnel 支持二进制包或者 Docker 容器的方式进行安装；选择相应的平台，会生成安装命令，在命令后执行该命令即可&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-tunnel-init-install.png" alt="homelab-cloudflare-tunnel-init-install.png">&lt;/p>
&lt;p>如果没有对应的平台，可以在 &lt;a href="https://github.com/cloudflare/cloudflared/releases">GitHub 仓库&lt;/a>下载对应的版本，然后进行安装；以 Ubuntu 22 为例：&lt;/p>
&lt;ul>
&lt;li>下载最新的 Cloudflared&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dpkg -i cloudflared-linux-amd64.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建 Cloudflared 服务&lt;/li>
&lt;/ul>
&lt;p>这样会创建并自动启动 Cloudflared 服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cloudflared service install &lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">TOKEN&lt;/span>&lt;span style="color:#98c379">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置路由规则">配置路由规则&lt;/h2>
&lt;p>路由规则支持在本地或者 Cloudflare 平台配置两种方式，建议在 Cloudflare 平台配置，更加灵活&lt;/p></description></item><item><title>Proxmox VE 8 挂载 PCIe 接口版本的 Goolge Coral TPU 用于 LXC 容器中部署的 Frigate 进行人物识别</title><link>https://blog.hellowood.dev/posts/proxmox-ve-8-%E6%8C%82%E8%BD%BD-pcie-%E6%8E%A5%E5%8F%A3%E7%89%88%E6%9C%AC%E7%9A%84-goolge-coral-tpu-%E7%94%A8%E4%BA%8E-lxc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2%E7%9A%84-frigate-%E8%BF%9B%E8%A1%8C%E4%BA%BA%E7%89%A9%E8%AF%86%E5%88%AB/</link><pubDate>Sun, 01 Dec 2024 20:26:09 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-8-%E6%8C%82%E8%BD%BD-pcie-%E6%8E%A5%E5%8F%A3%E7%89%88%E6%9C%AC%E7%9A%84-goolge-coral-tpu-%E7%94%A8%E4%BA%8E-lxc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E9%83%A8%E7%BD%B2%E7%9A%84-frigate-%E8%BF%9B%E8%A1%8C%E4%BA%BA%E7%89%A9%E8%AF%86%E5%88%AB/</guid><description>&lt;p>在 PVE 的 LXC 容器中运行的 Frigate Docker 容器中使用 PCIe 接口版本的 Google Coral TPU 进行人物识别&lt;/p>
&lt;p>之前使用的是 USB Accelerator 版本，将设备挂载到容器中就可以工作了；但是新入手的 &lt;a href="https://coral.ai/products/m2-accelerator-dual-edgetpu">M.2 Accelerator with Dual Edge TPU&lt;/a> 是通过 PCIe 挂载的，配置有所区别；&lt;/p>
&lt;p>其他的版本，如 Mini PCIe Accelerator，M.2 Accelerator A+E key，M.2 Accelerator B+M key 的配置与 M.2 Accelerator with Dual Edge TPU 类似&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/-R0H37d9aKorHo_VYWf8hCfukvbZolBaW2SHW1uDDn1G411r3MqemjxPZa9f44q8OwlfYIkGxSoj-GQbZGd2j7lxtyzSklIQVUWvo9r88mn8CzB-rcw=w2000-rw" alt="Coral TPU">&lt;/p>
&lt;h2 id="一pve-配置">一、PVE 配置&lt;/h2>
&lt;h3 id="1-修改订阅源">1. 修改订阅源&lt;/h3>
&lt;p>如果使用的是 PVE 的默认软件源，需要修改为以下订阅源：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/apt/sources.list.d/ceph.list&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>将 &lt;code>/etc/apt/sources.list.d/ceph.list&lt;/code> 中的配置替换为以下内容：&lt;/p>
&lt;pre tabindex="0">&lt;code>deb http://download.proxmox.com/debian/ceph-reef bookworm no-subscription
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>/etc/apt/sources.list&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>将 &lt;code>/etc/apt/sources.list&lt;/code> 中的配置替换为以下内容：&lt;/p>
&lt;pre tabindex="0">&lt;code># debian 软件
deb http://ftp.debian.org/debian bookworm main contrib
deb http://ftp.debian.org/debian bookworm-updates main contrib

# PVE 官方非订阅源 pve-no-subscription
deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription

# 安全相关
deb http://security.debian.org/debian-security bookworm-security main contrib
&lt;/code>&lt;/pre>&lt;p>接着更新订阅源&lt;/p></description></item><item><title>使用 Tailscale Funnel 为 Traefik 提供证书并作为网关入口</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-tailscale-funnel-%E4%B8%BA-traefik-%E6%8F%90%E4%BE%9B%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%9C%E4%B8%BA%E7%BD%91%E5%85%B3%E5%85%A5%E5%8F%A3/</link><pubDate>Mon, 23 Sep 2024 08:34:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-tailscale-funnel-%E4%B8%BA-traefik-%E6%8F%90%E4%BE%9B%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BD%9C%E4%B8%BA%E7%BD%91%E5%85%B3%E5%85%A5%E5%8F%A3/</guid><description>&lt;p>&lt;a href="https://tailscale.com/kb/1223/funnel">Tailscale Funnel&lt;/a> 是 Tailscale 提供的网关工具，和 Cloudflare Tunnel 类似，支持将流量从公网路由到 Tailscale 节点设备的服务上，如 Web 服务、静态文件、SSH 等&lt;/p>
&lt;p>&lt;img src="https://tailscale.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffunnel-diagram.2f3f0e10.png&amp;amp;w=3840&amp;amp;q=75" alt="">&lt;/p>
&lt;p>不过 Tailscale Funnel 当前的功能并不完善，只支持路由到一个目标地址，也不支持自定义路由；如果想路由到其他服务，需要在 Funnel 后面部署一个网关服务；在 Traefik 3.1 的版本中已经支持使用 Tailscale 作为 TLS 证书的提供方，用于将 Tailscale 域名作为 Traefik 的入口&lt;/p>
&lt;h2 id="配置-traefik">配置 Traefik&lt;/h2>
&lt;p>在 Tailscale 的节点上使用 docker-compose 部署 traefik&lt;/p>
&lt;ul>
&lt;li>创建网络&lt;/li>
&lt;/ul>
&lt;p>为了方便能通过 Docker 自动发现服务路由，创建一个容器共用的网络，用于 Traefik 路由到对应服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker network create traefik
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>需要在 docker-compose 指定网络，并挂载 &lt;code>/var/run/docker.sock&lt;/code>，用于自动获取路由规则&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">traefik&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">external&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">traefik&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">traefik&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">traefik&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">traefik&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">test&lt;/span>: [&lt;span style="color:#63c381">&amp;#34;CMD&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;wget&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-q&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;--spider&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;http://localhost:8080/ping&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">interval&lt;/span>: &lt;span style="color:#98c379">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timeout&lt;/span>: &lt;span style="color:#98c379">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">retries&lt;/span>: &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">start_period&lt;/span>: &lt;span style="color:#98c379">30s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;--configFile=/etc/traefik/traefik.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;81:80&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8443:443&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8080:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/var/run/docker.sock:/var/run/docker.sock:ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;./traefik.yml:/etc/traefik/traefik.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">traefik&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">TZ=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>traefik.yml&lt;/li>
&lt;/ul>
&lt;p>配置中定义了一个 certificatesResolvers，名称是 &lt;code>default&lt;/code>，由 tailscale 提供；同时指定了 tls 的 certResolver 名称是 &lt;code>default&lt;/code>，这样就会由 tailscale 提供 TLS 证书；完整的配置如下：&lt;/p></description></item><item><title>Tailscale 使用 Derp Probe 检测自建的 Derper 服务器状态</title><link>https://blog.hellowood.dev/posts/tailscale-%E4%BD%BF%E7%94%A8-derp-probe-%E6%A3%80%E6%B5%8B%E8%87%AA%E5%BB%BA%E7%9A%84-derper-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8A%B6%E6%80%81/</link><pubDate>Sun, 22 Sep 2024 21:20:35 +0800</pubDate><guid>https://blog.hellowood.dev/posts/tailscale-%E4%BD%BF%E7%94%A8-derp-probe-%E6%A3%80%E6%B5%8B%E8%87%AA%E5%BB%BA%E7%9A%84-derper-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8A%B6%E6%80%81/</guid><description>&lt;p>在使用服务器部署自建的 HomeLab Derp 服务器之后，偶尔会出现 Derp 服务器无法访问，因此想要监控 Derp 服务器的状态，进行延迟检测等；Tailscale 官方提供了 &lt;a href="https://github.com/tailscale/tailscale/blob/main/cmd/derpprobe/derpprobe.go">derpprobe&lt;/a> 这个工具，可以对 Derp 服务器的 UDP/UDP6/TLS/MESH 等协议以及带宽进行检测&lt;/p>
&lt;p>自行部署 Derp Server 参考 &lt;a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%AE%B6%E5%BA%AD%E5%AE%BD%E5%B8%A6%E5%85%AC%E7%BD%91-ipv6-%E8%87%AA%E5%BB%BA-tailscale-%E7%9A%84-derp-%E8%8A%82%E7%82%B9/">使用家庭宽带公网 IPV6 自建 Tailscale 的 DERP 节点&lt;/a>&lt;/p>
&lt;h2 id="构建-docker-镜像">构建 Docker 镜像&lt;/h2>
&lt;p>derpprobe 没有提供 docker 镜像，可以直接使用我构建的镜像 &lt;code>ghcr.io/helloworlde/tailscale-derpprober:main&lt;/code>，跳过这一步；或者自行构建&lt;/p>
&lt;ul>
&lt;li>下载项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/tailscale/tailscale.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建 Dockerfile&lt;/li>
&lt;/ul>
&lt;p>进入项目下，并在根目录创建 Dockerfile.derpprobe 文件，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> golang:1.23-alpine AS build-env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">WORKDIR&lt;/span>&lt;span style="color:#98c379"> /go/src/tailscale&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">COPY&lt;/span> tailscale/go.mod tailscale/go.sum ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> go mod download
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">COPY&lt;/span> tailscale .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ARG&lt;/span> TARGETARCH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> &lt;span style="color:#dcaeea">GOARCH&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#dcaeea">$TARGETARCH&lt;/span> go build -o derpprobe cmd/derpprobe/derpprobe.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> alpine:3.18&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> apk add --no-cache ca-certificates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">DERP_MAP&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>https://login.tailscale.com/derpmap/default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">LISTEN&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>:8030
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">ONCE&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">SPREAD&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">INTERVAL&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>15s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">MESH_INTERVAL&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>15s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">STUN_INTERVAL&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>15s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">TLS_INTERVAL&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>15s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">BW_INTERVAL&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">BW_PROBE_SIZE_BYTES&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>1_000_000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">COPY&lt;/span> --from&lt;span style="color:#c7bf54">=&lt;/span>build-env /go/src/tailscale/derpprobe /usr/local/bin/derpprobe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENTRYPOINT&lt;/span> &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#63c381">&amp;#34;sh&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-c&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;/usr/local/bin/derpprobe \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -derp-map=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">DERP_MAP&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -listen=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">LISTEN&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -once=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">ONCE&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -spread=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">SPREAD&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -interval=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">INTERVAL&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -mesh-interval=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">MESH_INTERVAL&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -stun-interval=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">STUN_INTERVAL&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -tls-interval=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">TLS_INTERVAL&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -bw-interval=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">BW_INTERVAL&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"> -bw-probe-size-bytes=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">BW_PROBE_SIZE_BYTES&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>构建镜像&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker build -t derpprobe -f Dockerfile.derpprobe .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署">部署&lt;/h2>
&lt;p>通过 docker compose 部署&lt;/p></description></item><item><title>Ubuntu 22 安装 AMD 显卡驱动</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-amd-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link><pubDate>Thu, 19 Sep 2024 09:14:35 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-amd-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid><description>&lt;p>在 Ubuntu 22 安装 AMD 的显卡驱动，用于视频解码、ffmpeg 等场景&lt;/p>
&lt;ol>
&lt;li>下载 amdgpu-install&lt;/li>
&lt;/ol>
&lt;p>访问 &lt;a href="https://www.amd.com/en/support/download/linux-drivers.html#linux-for-radeon-pro">Linux® Drivers for AMD Radeon™ and Radeon PRO™ Graphics&lt;/a>，找到 Ubuntu 对应的驱动安装软件；右击 Download 按钮复制下载地址，即可得到下载链接；然后使用 curl 或者 wget 在 Ubuntu 下载，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://repo.radeon.com/amdgpu-install/6.1.3/ubuntu/focal/amdgpu-install_6.1.60103-1_all.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-ubuntu-22-install-amd-graphics-driver.png" alt="homelab-ubuntu-22-install-amd-graphics-driver.png">&lt;/p>
&lt;ol start="2">
&lt;li>安装下载软件&lt;/li>
&lt;/ol>
&lt;p>使用 apt 安装刚才下载的软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt install ./amdgpu-install_6.1.60103-1_all.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>安装显卡驱动&lt;/li>
&lt;/ol>
&lt;p>使用 amdgpu-install 安装显卡驱动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>amdgpu-install -y --usecase&lt;span style="color:#c7bf54">=&lt;/span>graphics
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://amdgpu-install.readthedocs.io/en/latest/index.html">Radeon™ Software for Linux® Installation&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Proxmox-VE 开启 CT/LXC 容器 Wireguard/Tailscale 访问 TUN 权限</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E5%BC%80%E5%90%AF-ct-lxc-%E5%AE%B9%E5%99%A8-wireguard-tailscale-%E8%AE%BF%E9%97%AE-tun-%E6%9D%83%E9%99%90/</link><pubDate>Tue, 17 Sep 2024 10:57:59 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E5%BC%80%E5%90%AF-ct-lxc-%E5%AE%B9%E5%99%A8-wireguard-tailscale-%E8%AE%BF%E9%97%AE-tun-%E6%9D%83%E9%99%90/</guid><description>&lt;p>PVE 的 LXC/CT 的容器如果想要使用 Wireguard 或者 Tailscale，需要访问 tun 设备，但是非特权容器并不提供，需要手动挂载&lt;/p>
&lt;h2 id="修改容器配置">修改容器配置&lt;/h2>
&lt;p>需要登录到 PVE 宿主机，修改 LXC/CT 容器对应的配置文件；路径是 &lt;code>/etc/pve/lxc/xxx.conf&lt;/code>，xxx 是容器的编号，以 113 这个容器为例：&lt;/p>
&lt;p>使用 nano 编辑 113.conf 配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nano /etc/pve/lxc/113.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>113.conf&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">lxc.cgroup2.devices.allow: c 10:200 rwm
lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file
&lt;/code>&lt;/pre>&lt;p>修改后的完整配置如下：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">arch: amd64
cores: 2
features: nesting=1
hostname: Debian
memory: 4096
net0: name=eth0,bridge=vmbr0,firewall=1,gw=192.168.2.1,hwaddr=AA:BB:CC:E2:42:EE,ip=192.168.2.8/24,ip6=auto,type=veth
ostype: debian
rootfs: local-lvm:vm-113-disk-0,size=60G
swap: 4096
unprivileged: 1
lxc.cgroup2.devices.allow: c 10:200 rwm
lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file
&lt;/code>&lt;/pre>&lt;p>修改后在 PVE 控制台重启容器即可&lt;/p></description></item><item><title>将重新训练的 Yolov8 模型编译为 Hailo 8 和 Hailo 8L 支持的模型</title><link>https://blog.hellowood.dev/posts/%E5%B0%86%E9%87%8D%E6%96%B0%E8%AE%AD%E7%BB%83%E7%9A%84-yolov8-%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%AF%91%E4%B8%BA-hailo-8-%E5%92%8C-hailo-8l-%E6%94%AF%E6%8C%81%E7%9A%84%E6%A8%A1%E5%9E%8B/</link><pubDate>Sun, 08 Sep 2024 21:32:21 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%B0%86%E9%87%8D%E6%96%B0%E8%AE%AD%E7%BB%83%E7%9A%84-yolov8-%E6%A8%A1%E5%9E%8B%E7%BC%96%E8%AF%91%E4%B8%BA-hailo-8-%E5%92%8C-hailo-8l-%E6%94%AF%E6%8C%81%E7%9A%84%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>在 Ubuntu 22 将自行训练的 Yolov8n 模型编译为 Hailo8/Hailo8L 支持的 hef 格式的模型，在 Hailo8 上使用自行训练的模型进行对象检测&lt;/p>
&lt;h2 id="1-环境准备">1. 环境准备&lt;/h2>
&lt;ul>
&lt;li>anaconda&lt;/li>
&lt;/ul>
&lt;p>参考 &lt;a href="https://docs.anaconda.com/anaconda/install/linux/">Installing on Linux&lt;/a> 安装&lt;/p>
&lt;h2 id="2-训练-yolo-模型">2. 训练 yolo 模型&lt;/h2>
&lt;h3 id="21-安装依赖">2.1 安装依赖&lt;/h3>
&lt;ul>
&lt;li>创建环境&lt;/li>
&lt;/ul>
&lt;p>单独创建 ultralytics 的环境，用于训练和导出 yolo 模型为其他格式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create -n ultralytics &lt;span style="color:#dcaeea">python&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>3.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>激活环境&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda activate ultralytics
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装 ultralytics&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install ultralytics
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待安装完成后就可以使用 &lt;code>yolo&lt;/code> 命令训练和导出模型了&lt;/p>
&lt;h3 id="22-训练模型">2.2 训练模型&lt;/h3>
&lt;p>训练模型可以参考 roboflow 的博客 &lt;a href="https://blog.roboflow.com/how-to-train-yolov8-on-a-custom-dataset/">How to Train YOLOv8 Object Detection on a Custom Dataset&lt;/a>；为了测试验证流程，先使用官方提供的 yolov8n 当作训练的模型，可以从 &lt;a href="https://github.com/ultralytics/assets/releases">https://github.com/ultralytics/assets/releases/&lt;/a> 下载，以 yolov8n 为例，下载地址为 &lt;a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt">https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="23-将模型导出为-onnx-格式">2.3 将模型导出为 onnx 格式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yolo &lt;span style="color:#ef8383">export&lt;/span> &lt;span style="color:#dcaeea">model&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>./yolov8n.pt &lt;span style="color:#dcaeea">imgsz&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">640&lt;/span> &lt;span style="color:#dcaeea">format&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>onnx &lt;span style="color:#dcaeea">opset&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>imgsz=640 指定输入图片的尺寸（图像大小），即 640x640。这个尺寸是模型在推理时处理图像的分辨率&lt;/p></description></item><item><title>Frigate 使用 Hailo 8 或 Hailo 8L 进行对象识别</title><link>https://blog.hellowood.dev/posts/frigate-%E4%BD%BF%E7%94%A8-hailo-8-%E6%88%96-hailo-8l-%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E8%AF%86%E5%88%AB/</link><pubDate>Sun, 01 Sep 2024 11:25:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/frigate-%E4%BD%BF%E7%94%A8-hailo-8-%E6%88%96-hailo-8l-%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E8%AF%86%E5%88%AB/</guid><description>&lt;p>Hailo8/Hailo-8L 是一家以色列的边缘人工智能公司发布的边缘加速器，定位和 &lt;a href="https://coral.ai/products/">Google Coral TPU&lt;/a> 完全一致；Hailo-8 算力为 26 TOPS，Hailo-8L 算力为 13 TOPS&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>特性&lt;/th>
 &lt;th>Google Coral TPU&lt;/th>
 &lt;th>Hailo8&lt;/th>
 &lt;th>Hailo8L&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;strong>支持框架&lt;/strong>&lt;/td>
 &lt;td>TensorFlow, TensorFlow Lite&lt;/td>
 &lt;td>TensorFlow, TensorFlow Lite, Keras, PyTorch, ONNX&lt;/td>
 &lt;td>TensorFlow, TensorFlow Lite, Keras, PyTorch, ONNX&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>支持模型&lt;/strong>&lt;/td>
 &lt;td>MobileNet, Inception, EfficientNet 等&lt;/td>
 &lt;td>ResNet-50, MobileNet_v2, SSD, YOLOv3, YOLOv5 等&lt;/td>
 &lt;td>ResNet-50, MobileNet_v2, SSD, YOLOv3, YOLOv5 等&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>模型功能&lt;/strong>&lt;/td>
 &lt;td>对象识别、对象分类，语义分割，姿态识别，音频分类&lt;/td>
 &lt;td>对象识别、对象分类，语义分割，姿态识别，深度估计，人脸检测，人脸识别等&lt;/td>
 &lt;td>对象识别、对象分类，语义分割，姿态识别，深度估计，人脸检测，人脸识别等&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>硬件性能&lt;/strong>&lt;/td>
 &lt;td>4 TOPS&lt;/td>
 &lt;td>26 TOPS&lt;/td>
 &lt;td>13 TOPS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>发布时间&lt;/strong>&lt;/td>
 &lt;td>2019年&lt;/td>
 &lt;td>2021年&lt;/td>
 &lt;td>2023年&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>功耗&lt;/strong>&lt;/td>
 &lt;td>0.5-2 W&lt;/td>
 &lt;td>2.5-4.6 W&lt;/td>
 &lt;td>1.8-3.2 W&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>每W性能&lt;/strong>&lt;/td>
 &lt;td>8 TOPS/W&lt;/td>
 &lt;td>10.4 TOPS/W&lt;/td>
 &lt;td>7.2 TOPS/W&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>当前价格&lt;/strong>&lt;/td>
 &lt;td>约300~1000¥&lt;/td>
 &lt;td>约 1300¥&lt;/td>
 &lt;td>约550¥&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>支持的操作系统&lt;/strong>&lt;/td>
 &lt;td>Linux, Windows, MacOS&lt;/td>
 &lt;td>Linux, Windows&lt;/td>
 &lt;td>Linux, Windows&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>可扩展性&lt;/strong>&lt;/td>
 &lt;td>不支持多芯片&lt;/td>
 &lt;td>支持多芯片并行处理&lt;/td>
 &lt;td>支持多芯片并行处理&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>应用领域&lt;/strong>&lt;/td>
 &lt;td>物联网设备、嵌入式系统&lt;/td>
 &lt;td>工业自动化、智能监控、自动驾驶&lt;/td>
 &lt;td>工业自动化、智能监控、智能零售&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Frigate 的最新的代码已经合并了 Hailo8L 的 PR，预计将会在 0.15 版本中正式发布，PR 参考 &lt;a href="https://github.com/blakeblackshear/frigate/pull/12431">Initial support for Hailo-8L&lt;/a> 和 &lt;a href="https://github.com/blakeblackshear/frigate/pull/12820">Hailo amd64 support&lt;/a>；虽然 PR 中支持的设备是 Hailo-8L，但是经过测试验证，只需要替换对应的模型，Hailo-8 也是可以正常运行的（Hailo-8 和 Hailo-8L 的模型不能互相使用）&lt;/p></description></item><item><title>Ubuntu22 安装初始化 Hailo 8系列 TPU 加速器</title><link>https://blog.hellowood.dev/posts/ubuntu22-%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96-hailo-8%E7%B3%BB%E5%88%97-tpu-%E5%8A%A0%E9%80%9F%E5%99%A8/</link><pubDate>Sun, 01 Sep 2024 11:22:23 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu22-%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96-hailo-8%E7%B3%BB%E5%88%97-tpu-%E5%8A%A0%E9%80%9F%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>Hailo 是一家位于以色列的边缘人工智能处理器的先驱芯片制造商，该公司成立于2017年；专注于为边缘设备开发高效的深度学习处理器。Hailo 的核心产品是其自研的 Hailo-8 人工智能处理器，这款芯片特别设计用于在资源受限的边缘设备上运行复杂的深度学习模型&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Hailo-8 能够在嵌入式系统中支持实时处理应用，如计算机视觉、自动驾驶、智能城市监控、医疗设备和工业物联网等&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Hailo 在 2024年6月4日宣布被 Raspberry Pi 选中，为 Raspberry Pi AI Kit 提供 AI 加速器；支持使用 Hailo-8 和 Hailo-8L 进行加速，参考 &lt;a href="https://hailo.ai/zh-hans/company-overview/newsroom/news-zh-hans/raspberry-pi-selects-hailo-to-enable-advanced-ai-capabilities-for-raspberry-pi-5/">Raspberry Pi Selects Hailo to Enable Advanced AI Capabilities for Raspberry Pi 5&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Hailo8 发布于 2021年，算力为 26 TOPS，Hailo8L 发布于 2023 年，算力为 13 TOPS；两款产品除了算力外，其他特性差别不大，均支持 TensorFlow，TensorFlow Lite，Keras，PyTorch &amp;amp; ONNX 框架，主机架构支持 X86 和 ARM，操作系统支持 Linux 和 Windows；更多信息参考官网介绍：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hailo.ai/zh-hans/products/ai-accelerators/hailo-8-ai-accelerator/#hailo-8-features">Hailo-8 AI处理器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hailo.ai/zh-hans/products/ai-accelerators/hailo-8l-m-2-ai-acceleration-module-for-ai-light-applications/#hailo8lm2-features">Hailo-8L M.2 Entry-Level Acceleration Module&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hailo.ai/files/hailo-8-product-brief-en/">hailo-8-product-brief&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hailo.ai/files/hailo-8l-m-2-et-product-brief-en/">hailo-8l-m-2-et-product-brief&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://hailo.ai/wp-content/uploads/2023/09/Hailo-8L%E2%84%A2_Entry-Level_M.2_AI_Acceleration_Module_Overview.webp" alt="Hailo8L">&lt;/p>
&lt;p>Hailo 相关软件功能如图：&lt;/p>
&lt;p>&lt;img src="https://hailo.ai/wp-content/uploads/2023/09/HailoRT-Diagram.png" alt="">&lt;/p></description></item><item><title>基于 Frigate 使用 Double Take 和 DeepStack 对视频监控进行人脸识别</title><link>https://blog.hellowood.dev/posts/%E5%9F%BA%E4%BA%8E-frigate-%E4%BD%BF%E7%94%A8-double-take-%E5%92%8C-deepstack-%E5%AF%B9%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link><pubDate>Fri, 16 Aug 2024 09:29:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9F%BA%E4%BA%8E-frigate-%E4%BD%BF%E7%94%A8-double-take-%E5%92%8C-deepstack-%E5%AF%B9%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid><description>&lt;p>Double Take 是一个训练和识别人脸的工具，支持对 Frigate 中检测到的人物对象进行人脸识别，可以用于统计监控中出现的人物信息。不过经过测试，只适用于门禁、闸机等有清晰人脸的场景，日常的监控因安装位置、角度等原因无法提供清晰的人脸，因此识别的准确度和有效性并不高&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-frigate-double-take-face-double-take-detect.png" alt="homelab-frigate-double-take-face-double-take-detect.png">&lt;/p>
&lt;p>Double Take 的原理是通过监听 Frigate 识别到对象后发出的 MQTT 消息，根据消息获取对应事件的快照，并将其发送给识别的服务，如 Deepstack/CodeProject.AI 等，然后根据识别结果显示该事件中出现的人脸信息&lt;/p>
&lt;p>Double Take 作者似乎已经放弃维护了，上次更新还是在两年前(2022-10-28)，尽管作者在今年的一月份(2024-1-7)声明计划&lt;a href="https://github.com/jakowenko/double-take/issues/343">开发 2.0 版本&lt;/a>，但是截止到8月份也没有任何进展，看起来作者在21年成为 24G.com 这家公司的 DevOps 总监后便没有精力投入到开源项目中了；不过，另外一位作者 skrashevich 在其 fork 的仓库 &lt;a href="https://github.com/skrashevich/double-take">skrashevich/double-take&lt;/a>中提交了不少 2.0 版本的计划的功能&lt;/p>
&lt;h2 id="部署依赖服务">部署依赖服务&lt;/h2>
&lt;p>Double Take 依赖 Frigate、MQTT 和人脸识别服务，部署在使用 Intel CPU 的 NUC 上，系统是 Ubuntu 22，地址是 192.168.31.254&lt;/p>
&lt;h3 id="部署-mqtt">部署 MQTT&lt;/h3>
&lt;p>MQTT 使用 emqx 提供的镜像进行部署，方便本地使用，参考&lt;a href="https://docs.emqx.com/zh/emqx/latest/deploy/install-docker-ce.html">通过 Docker 运行 EMQX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mqtt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">emqx/emqx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">mqtt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;1883:1883&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8083:8083&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8084:8084&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8883:8883&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;18083:18083&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动后访问 18083端口，&lt;a href="http://192.168.31.254:18083/">http://192.168.31.254:18083/&lt;/a>，默认的用户名密码是 &lt;code>admin&lt;/code>，密码是 &lt;code>public&lt;/code>&lt;/p></description></item><item><title>Ubuntu 22 在 Docker 容器中使用 NVIDIA 显卡</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E5%9C%A8-docker-%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1/</link><pubDate>Tue, 06 Aug 2024 09:15:33 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E5%9C%A8-docker-%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1/</guid><description>&lt;p>在容器中运行需要使用 NVIDIA 显卡进行加速的服务，如图像识别、LLM 等，需要将显卡挂载到容器中&lt;/p>
&lt;h2 id="安装-nvidia-容器工具包">安装 NVIDIA 容器工具包&lt;/h2>
&lt;ul>
&lt;li>添加软件源&lt;/li>
&lt;/ul>
&lt;p>需要添加 NVIDIA 容器工具包的软件源和 gpg 签名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> sed &lt;span style="color:#98c379">&amp;#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&amp;#39;&lt;/span> | &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>更新软件并安装 NVIDIA 容器工具包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> sudo apt-get install -y nvidia-container-toolkit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-docker">配置 Docker&lt;/h2>
&lt;ul>
&lt;li>使用 nvidia-ctk 修改 Docker 配置&lt;/li>
&lt;/ul>
&lt;p>修改 Docker 配置，允许将显卡挂载到容器中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nvidia-ctk runtime configure --runtime&lt;span style="color:#c7bf54">=&lt;/span>docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>WARN&lt;span style="color:#c7bf54">[&lt;/span>0000&lt;span style="color:#c7bf54">]&lt;/span> Ignoring runtime-config-override flag &lt;span style="color:#c678dd">for&lt;/span> docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO&lt;span style="color:#c7bf54">[&lt;/span>0000&lt;span style="color:#c7bf54">]&lt;/span> Loading config from /etc/docker/daemon.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO&lt;span style="color:#c7bf54">[&lt;/span>0000&lt;span style="color:#c7bf54">]&lt;/span> Wrote updated config to /etc/docker/daemon.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO&lt;span style="color:#c7bf54">[&lt;/span>0000&lt;span style="color:#c7bf54">]&lt;/span> It is recommended that docker daemon be restarted.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样会自动修改 &lt;code>/etc/docker/daemon.json&lt;/code> 文件，添加显卡 &lt;code>runtimes&lt;/code> 相关的内容：&lt;/p></description></item><item><title>Ubuntu 22 运行 Google Coral TPU 示例</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E8%BF%90%E8%A1%8C-google-coral-tpu-%E7%A4%BA%E4%BE%8B/</link><pubDate>Tue, 09 Jul 2024 09:30:21 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E8%BF%90%E8%A1%8C-google-coral-tpu-%E7%A4%BA%E4%BE%8B/</guid><description>&lt;p>在 Ubuntu 22 上运行 Google Coral TPU 的示例项目&lt;/p>
&lt;h2 id="配置运行环境">配置运行环境&lt;/h2>
&lt;p>Coral 只支持 Python 3.6～3.9 的环境，而 Ubuntu 22 的 Python 版本为 3.10；因此需要使用 Anaconda 创建独立的运行环境&lt;/p>
&lt;h3 id="安装-anaconda">安装 Anaconda&lt;/h3>
&lt;p>参考 &lt;a href="https://docs.anaconda.com/anaconda/install/linux/">Installing on Linux&lt;/a> 安装&lt;/p>
&lt;h3 id="初始化环境">初始化环境&lt;/h3>
&lt;p>使用 Python 3.8 版本创建运行环境&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda create -n coral &lt;span style="color:#dcaeea">python&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>3.8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>待创建完成后激活该环境&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>conda activate coral
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行-demo">运行 Demo&lt;/h2>
&lt;h3 id="下载项目">下载项目&lt;/h3>
&lt;ul>
&lt;li>创建 Coral 的工作目录，并克隆项目到本地&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir coral &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ef8383">cd&lt;/span> coral
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/google-coral/pycoral.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="下载依赖">下载依赖&lt;/h3>
&lt;h4 id="下载模型图片依赖">下载模型、图片依赖&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> pycoral
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash examples/install_requirements.sh classify_image.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="安装项目依赖">安装项目依赖&lt;/h4>
&lt;p>需要安装 pycoral 和 tflite-runtime，但是在 Ubuntu 22 上无法通过 &lt;code>sudo apt-get install python3-pycoral&lt;/code> 直接安装 &lt;code>python3-pycoral&lt;/code>，因此需要指定依赖地址安装；相关版本可以从 &lt;a href="https://github.com/google-coral/pycoral/releases/">https://github.com/google-coral/pycoral/releases/&lt;/a> 查找&lt;/p></description></item><item><title>Ubuntu 22 安装 Google Coral TPU NVME 驱动</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-google-coral-tpu-nvme-%E9%A9%B1%E5%8A%A8/</link><pubDate>Mon, 08 Jul 2024 09:07:20 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-google-coral-tpu-nvme-%E9%A9%B1%E5%8A%A8/</guid><description>&lt;p>最近折腾图像识别和视频对象检测，因为需要长期低功耗运行，所以购入了 Google Coral TPU&lt;/p>
&lt;p>Google Coral TPU 是一款专为边缘应用设计的机器学习加速器，由 Google 设计和开发，它基于 TensorFlow Lite 模型，能够在低功耗的情况下提供快速的神经网络性能，适用于边缘设备，用于目标检测和图像分类(如开源 NVR Frigate)；可以使用 Yolo、MobikeNet 等模型&lt;/p>
&lt;p>单个 Coral TPU 芯片有 4T OPS 的算力，每秒可以识别大概 100 帧的视频内容，非常适合低功耗、本地场景，可以有效保护隐私；虽然 Coral 从 2021年开始不再更新，但是在边缘场景下依然是非常合适的选择&lt;/p>
&lt;p>Coral TPU 有多种型号，如开发板、USB 配件、M2、Mini PCIE等，这里使用的是 M.2 Accelerator B+M key 的版本。关于 Coral 不同类型的设备更多信息参考 &lt;a href="https://coral.ai/products/">Products&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/-R0H37d9aKorHo_VYWf8hCfukvbZolBaW2SHW1uDDn1G411r3MqemjxPZa9f44q8OwlfYIkGxSoj-GQbZGd2j7lxtyzSklIQVUWvo9r88mn8CzB-rcw=w2000-rw" alt="">&lt;/p>
&lt;h2 id="要求">要求&lt;/h2>
&lt;ul>
&lt;li>系统：Linux、Windows&lt;/li>
&lt;li>环境：python3.6-3.9&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h3 id="安装-coral-tpu">安装 Coral TPU&lt;/h3>
&lt;ul>
&lt;li>安装 Coral TPU&lt;/li>
&lt;/ul>
&lt;p>将 Coral TPU 安装到 M.2 插槽&lt;/p>
&lt;ul>
&lt;li>检查连接&lt;/li>
&lt;/ul>
&lt;p>等待启动后，检查 NVME 连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lspci -nn | grep 089a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>已经正确识别到了 Coral TPU&lt;/p></description></item><item><title>Ubuntu 22 安装 NVIDIA 显卡驱动和 CUDA</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-nvidia-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%92%8C-cuda/</link><pubDate>Mon, 08 Jul 2024 08:58:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-nvidia-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%92%8C-cuda/</guid><description>&lt;p>在 Ubuntu 22 上使用 NVIDIA 的显卡运行图像识别的训练，需要安装驱动和 CUDA&lt;/p>
&lt;h2 id="安装驱动">安装驱动&lt;/h2>
&lt;h3 id="获取支持的驱动">获取支持的驱动&lt;/h3>
&lt;ul>
&lt;li>更新 Ubuntu 依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装 ubuntu-drivers-common&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ubuntu-drivers-common&lt;/code> 是 Ubuntu 用于管理和安装第三方硬件驱动程序的工具，能够管理和安装硬件驱动程序&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install ubuntu-drivers-common
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>获取支持的驱动列表&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ubuntu-drivers&lt;/code> 获取适用于系统的 NVIDIA 驱动程序列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo ubuntu-drivers devices
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在输出信息中，可以看到设备是 &lt;code>GeForce RTX 3070 Ti&lt;/code>, 推荐使用的驱动是 &lt;code>nvidia-driver-555&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">==&lt;/span> /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 &lt;span style="color:#c7bf54">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modalias : pci:v000010DEd00002482sv000010DEsd0000146Abc03sc00i00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vendor : NVIDIA Corporation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>model : GA104 &lt;span style="color:#c7bf54">[&lt;/span>GeForce RTX &lt;span style="color:#d19a66">3070&lt;/span> Ti&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-550 - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-520 - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-525 - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-555 - third-party non-free recommended
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-545-open - distro non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-470-server - distro non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-470 - distro non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-535-open - distro non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-515 - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-535-server - distro non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-550-open - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-535 - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-545 - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-535-server-open - distro non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : nvidia-driver-555-open - third-party non-free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>driver : xserver-xorg-video-nouveau - distro free &lt;span style="color:#ef8383">builtin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-nvidia-驱动">安装 NVIDIA 驱动&lt;/h3>
&lt;ul>
&lt;li>安装驱动&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt install nvidia-driver-555
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>重启系统&lt;/li>
&lt;/ul>
&lt;p>等待安装完成后重启系统&lt;/p></description></item><item><title>Ubuntu 22 安装 Intel N100 显卡驱动</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-intel-n100-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link><pubDate>Mon, 08 Jul 2024 08:41:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E5%AE%89%E8%A3%85-intel-n100-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid><description>&lt;p>最近 N5105 的 HomeLab Server 负载过高，CPU 长期接近100%，因此新购入一台 N100，将视频和图像相关的服务迁移到 N100，但是发现 Ubuntu 22 默认没有显卡驱动，需要手动安装&lt;/p>
&lt;h2 id="检查驱动状态">检查驱动状态&lt;/h2>
&lt;p>使用 intel_gpu_top 检查显卡状态，发现提示没有设备，这是因为没有安装驱动导致的&lt;/p>
&lt;ul>
&lt;li>安装 intel-gpu-tools&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install intel-gpu-tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>检查状态&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>intel_gpu_top
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>No device filter specified and no discrete/integrated i915 devices found
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装驱动">安装驱动&lt;/h2>
&lt;h3 id="配置软件源">配置软件源&lt;/h3>
&lt;ul>
&lt;li>安装依赖工具&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install -y gpg-agent wget
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加 Intel 软件源&lt;/li>
&lt;/ul>
&lt;p>运行以下命令，将 Intel 软件源添加到 apt 的配置中并更新&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>. /etc/os-release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c7bf54">[[&lt;/span> ! &lt;span style="color:#63c381">&amp;#34; jammy &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span>~ &lt;span style="color:#63c381">&amp;#34; &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">VERSION_CODENAME&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">]]&lt;/span>; &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">echo&lt;/span> &lt;span style="color:#63c381">&amp;#34;Ubuntu version &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">VERSION_CODENAME&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381"> not supported&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wget -qO - https://repositories.intel.com/gpu/intel-graphics.key | &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> sudo gpg --yes --dearmor --output /usr/share/keyrings/intel-graphics.gpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">echo&lt;/span> &lt;span style="color:#63c381">&amp;#34;deb [arch=amd64 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">VERSION_CODENAME&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">/lts/2350 unified&amp;#34;&lt;/span> | &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> sudo tee /etc/apt/sources.list.d/intel-gpu-&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">VERSION_CODENAME&lt;/span>&lt;span style="color:#98c379">}&lt;/span>.list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装驱动-1">安装驱动&lt;/h3>
&lt;p>安装依赖的软件和显卡驱动&lt;/p></description></item><item><title>使用家庭宽带公网 IPV6 自建 Tailscale 的 DERP 节点</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%AE%B6%E5%BA%AD%E5%AE%BD%E5%B8%A6%E5%85%AC%E7%BD%91-ipv6-%E8%87%AA%E5%BB%BA-tailscale-%E7%9A%84-derp-%E8%8A%82%E7%82%B9/</link><pubDate>Tue, 11 Jun 2024 21:33:44 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%AE%B6%E5%BA%AD%E5%AE%BD%E5%B8%A6%E5%85%AC%E7%BD%91-ipv6-%E8%87%AA%E5%BB%BA-tailscale-%E7%9A%84-derp-%E8%8A%82%E7%82%B9/</guid><description>&lt;p>日常使用 Tailscale 连接异地的设备，但是因为经常出现无法直接连接，需要通过香港或东京的 DERP 服务器进行转发，导致延迟很高，影响网络质量；因此计划使用自建的 DERP 解决无法直连的问题；如果部署在国内的服务器上绑定域名需要备案，但是活动购买的服务器限制性能限制带宽限制流量还要单独购买公网 IP，并不合适；国外的延迟高可能还不如 Tailscale 官方的 DERP；&lt;/p>
&lt;p>另外自建的 DERP 服务器要求节点能够直接通过公网访问，不能在 NAT 或者负载均衡后面，因此基于家庭宽带的公网 IPV6 自建 DERP 服务器最合适&lt;/p>
&lt;h2 id="现状">现状&lt;/h2>
&lt;p>检测 tailscale 的网络节点，延迟最低的是东京的节点，延迟在 70 ms 左右&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tailscale netcheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Report:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* UDP: &lt;span style="color:#ef8383">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* IPv4: yes, xxx.xxx.xxx.xxx:39325
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* IPv6: yes, &lt;span style="color:#c7bf54">[&lt;/span>2409:xxxx:xxxx:xxxx::xxxx&lt;span style="color:#c7bf54">]&lt;/span>:34341
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* MappingVariesByDestIP: &lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* HairPinning: &lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* PortMapping:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* CaptivePortal: &lt;span style="color:#ef8383">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* Nearest DERP: Tokyo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	* DERP latency:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		- tok: 71.6ms &lt;span style="color:#c7bf54">(&lt;/span>Tokyo&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		- hkg: 93.1ms &lt;span style="color:#c7bf54">(&lt;/span>Hong Kong&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		- sin: 100.5ms &lt;span style="color:#c7bf54">(&lt;/span>Singapore&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自建-derp-节点">自建 DERP 节点&lt;/h2>
&lt;h3 id="1-要求">1. 要求&lt;/h3>
&lt;ul>
&lt;li>可访问的公网 IPV4 或 IPV6 地址&lt;/li>
&lt;li>域名，DERP 不修改源码必须要使用域名访问&lt;/li>
&lt;li>开放 DERP和 STUN端口&lt;/li>
&lt;/ul>
&lt;p>tailscale 的 &lt;a href="https://tailscale.com/kb/1118/custom-derp-servers#prerequisites">Prerequisites&lt;/a>文档中要求开放HTTP/HTTPS/STUN 三个端口，默认是 80/443/3478 端口，实际上有 HTTPS/STUN 就够了&lt;/p></description></item><item><title>Linux Docker容器开启IPv6</title><link>https://blog.hellowood.dev/posts/linux-docker%E5%AE%B9%E5%99%A8%E5%BC%80%E5%90%AFipv6/</link><pubDate>Sun, 21 Apr 2024 21:25:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/linux-docker%E5%AE%B9%E5%99%A8%E5%BC%80%E5%90%AFipv6/</guid><description>&lt;p>局域网开启了 IPv6 后，发现 Docker 因为没有开启 IPv6 无法访问了，因此需要为 Docker 开启 IPv6，根据官方文档提示，IPv6 仅在运行于 Linux 主机上的 Docker 守护进程上受支持&lt;/p>
&lt;p>Docker 支持只给特定的网络开启 IPv6，也支持给 bridge 网络开启 IPv6&lt;/p>
&lt;h2 id="只给特定的网络开启-ipv6">只给特定的网络开启 IPv6&lt;/h2>
&lt;p>这种方式不会修改默认的网络配置，指定特定的网络生效&lt;/p>
&lt;ul>
&lt;li>修改配置
修改 &lt;code>/etc/docker/daemon.json&lt;/code> 文件，开启 IPv6 网络&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;experimental&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;ip6tables&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>重启 docker&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo systemctl restart docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建 IPv6 网络&lt;/li>
&lt;/ul>
&lt;p>创建名为 &lt;code>homelab-v6&lt;/code> 的 IPv6 网络，并指定子网范围&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker network create --ipv6 --subnet 2001:0DB8::/112 homelab-v6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>测试验证&lt;/li>
&lt;/ul>
&lt;p>启动一个 busybox 容器，ping 阿里巴巴的 IPv6 DNS 地址 &lt;code>2400:3200::1&lt;/code>，发现可以正常访问，说明已经成功开启 IPv6&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --network&lt;span style="color:#c7bf54">=&lt;/span>homelab-v6 --rm -it busybox ping -6 -c1 2400:3200::1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PING 2400:3200::1 &lt;span style="color:#c7bf54">(&lt;/span>2400:3200::1&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">56&lt;/span> data bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">64&lt;/span> bytes from 2400:3200::1: &lt;span style="color:#dcaeea">seq&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#dcaeea">ttl&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">117&lt;/span> &lt;span style="color:#dcaeea">time&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>2040.345 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- 2400:3200::1 ping statistics ---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> packets transmitted, &lt;span style="color:#d19a66">1&lt;/span> packets received, 0% packet loss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>round-trip min/avg/max &lt;span style="color:#c7bf54">=&lt;/span> 2040.345/2040.345/2040.345 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="给-bridge-开启-ipv6">给 bridge 开启 IPv6&lt;/h2>
&lt;p>给 bridge 开启 IPv6 相当于默认给所有没有指定网络的容器都开启了 IPv6；此时需要在配置文件中指定 IPv6 子网范围&lt;/p></description></item><item><title>使用 Ubuntu 搭建 NFS 服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-ubuntu-%E6%90%AD%E5%BB%BA-nfs-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 27 Jan 2024 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-ubuntu-%E6%90%AD%E5%BB%BA-nfs-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>NFS(Network File System) 是由 Sun 公司提出的分布式文件系统协议，可以通过网络共享远程目录；默认没有加密，不提供身份验证，而是通过客户端 IP 或主机名限制客户端的访问&lt;/p>
&lt;h2 id="搭建-server-端">搭建 Server 端&lt;/h2>
&lt;h3 id="安装-nfs-kernel-server">安装 nfs-kernel-server&lt;/h3>
&lt;p>NFS 的 Server 端由 &lt;code>nfs-kernel-server&lt;/code> 提供，使用 apt 进行安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install -y nfs-kernel-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后，使用 &lt;code>systemctl&lt;/code> 查看状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl status nfs-mountd.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>● nfs-mountd.service - NFS Mount Daemon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Loaded: loaded &lt;span style="color:#c7bf54">(&lt;/span>/lib/systemd/system/nfs-mountd.service; static&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Active: active &lt;span style="color:#c7bf54">(&lt;/span>running&lt;span style="color:#c7bf54">)&lt;/span> since Thu 2022-09-22 18:43:43 CST; 1h 5min ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Main PID: &lt;span style="color:#d19a66">128914&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>rpc.mountd&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tasks: &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>limit: 4415&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Memory: 556.0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU: 59ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CGroup: /system.slice/nfs-mountd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─128914 /usr/sbin/rpc.mountd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp systemd&lt;span style="color:#c7bf54">[&lt;/span>1&lt;span style="color:#c7bf54">]&lt;/span>: Starting NFS Mount Daemon...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp rpc.mountd&lt;span style="color:#c7bf54">[&lt;/span>128914&lt;span style="color:#c7bf54">]&lt;/span>: Version 2.6.1 starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sep &lt;span style="color:#d19a66">22&lt;/span> 18:43:43 rasp systemd&lt;span style="color:#c7bf54">[&lt;/span>1&lt;span style="color:#c7bf54">]&lt;/span>: Started NFS Mount Daemon.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改-nfs-配置">修改 NFS 配置&lt;/h3>
&lt;ul>
&lt;li>创建挂载目录并修改权限&lt;/li>
&lt;/ul>
&lt;p>首先，创建需要分享的目录，如 &lt;code>/data/nfs&lt;/code>&lt;/p></description></item><item><title>Ubuntu 22 环境初始化</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sun, 07 Jan 2024 18:03:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;p>在搭建 HomeLab 测试使用过程中，可能会经常创建新的 Ubuntu 虚拟机，或初始化树莓派，记录一些常用的初始化配置&lt;/p>
&lt;h2 id="修改主机名">修改主机名&lt;/h2>
&lt;p>将主机名改为 &lt;code>homelab&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hostnamectl hostname homelab
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="引入-ssh-公钥">引入 SSH 公钥&lt;/h2>
&lt;ul>
&lt;li>从本地导入&lt;/li>
&lt;/ul>
&lt;p>在本地执行，将公钥复制到要登录的机器上&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh-copy-id -i ~/.ssh/id_rsa.pub ubuntu@192.168.2.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-apt-源">修改 APT 源&lt;/h2>
&lt;p>将默认的 APT 源替换为&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华&lt;/a>的源&lt;/p>
&lt;ul>
&lt;li>修改镜像源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv /etc/apt/sources.list /etc/apt/sources.list.backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo bash -c &lt;span style="color:#63c381">&amp;#34;cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/apt/sources.list &amp;amp;&amp;amp; apt update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#63c381">EOF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 update 验证&lt;/p></description></item><item><title>Proxmox VE 创建自定义的 LXC 容器 CT 模板</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-lxc-%E5%AE%B9%E5%99%A8-ct-%E6%A8%A1%E6%9D%BF/</link><pubDate>Sun, 07 Jan 2024 12:00:10 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-lxc-%E5%AE%B9%E5%99%A8-ct-%E6%A8%A1%E6%9D%BF/</guid><description>&lt;p>LXC 是一种操作系统级别的虚拟化容器技术，可以理解为比 VM 更轻量的容器虚拟机；Docker 适用于为服务提供隔离环境，LXC 容器适用于作为虚拟机进行隔离；在 PVE 上 LXC 称为 CT&lt;/p>
&lt;p>在使用 PVE 的过程中会创建多个容器，容器的基础配置基本相同，通过模板的方式创建更方便；虽然 LXC 容器提供了类似 Dockerfile 的配置文件可以创建镜像，但是使用起来比较复杂，学习成本较高；因此可以基于 LXC 容器进行初始化，然后将修改后的 LXC 容器作为基础创建模板&lt;/p>
&lt;h2 id="创建-lxc-容器">创建 LXC 容器&lt;/h2>
&lt;p>以 Ubuntu 容器为例进行模板的创建，在 PVE 控制页面创建一个 LXC 容器并启动&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-ct-template-create-ct-by-origin-template.png" alt="homelab-pve-ct-template-create-ct-by-origin-template.png">&lt;/p>
&lt;h2 id="初始化-lxc-容器配置">初始化 LXC 容器配置&lt;/h2>
&lt;p>登录到创建的 LXC 容器中，根据需求安装需要用到的软件和配置进行初始化，可以参考 &lt;a href="https://blog.hellowood.dev/posts/ubuntu-22-%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96">ubuntu-22-环境初始化&lt;/a>&lt;/p>
&lt;h2 id="创建-ct-模板">创建 CT 模板&lt;/h2>
&lt;h3 id="清理容器">清理容器&lt;/h3>
&lt;p>清理容器的目的是删除可能变化配置和不需要的文件及配置&lt;/p>
&lt;ul>
&lt;li>清除无效软件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt autoremove
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>清除 DNS 和主机名配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm /etc/resolv.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm /etc/hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>清除操作命令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">history&lt;/span> -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="备份-lxc-容器">备份 LXC 容器&lt;/h3>
&lt;p>清理完成后，回到 PVE 的控制页面，选择刚才创建的 CT 容器进行备份&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-ct-template-backup-ct-as-template.png" alt="homelab-pve-ct-template-backup-ct-as-template.png">&lt;/p>
&lt;h3 id="将备份作为-ct-模板">将备份作为 CT 模板&lt;/h3>
&lt;p>登录到 PVE 机器，将刚才的备份从 &lt;code>/var/lib/vz/dump/&lt;/code> 目录移动到存放 CT 模板的 &lt;code>/var/lib/vz/template/cache/&lt;/code> 目录&lt;/p></description></item><item><title>在黑群晖使用 Docker 部署 Proxmox Backup Server</title><link>https://blog.hellowood.dev/posts/%E5%9C%A8%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-proxmox-backup-server/</link><pubDate>Sat, 23 Dec 2023 21:52:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9C%A8%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-proxmox-backup-server/</guid><description>&lt;p>Proxmox Backup Server 是 PVE 容器、虚拟机的备份解决方案，支持增量、重复数据消除备份，可以节省存储空间，同时支持加密和完整性校验&lt;/p>
&lt;p>Proxmox Backup Server 官方提供了 iso 格式的镜像，同时社区也有开源的 Docker 镜像的部署方式，为了在黑群晖上部署方便，使用 Docker 的方式进行部署，项目地址：&lt;a href="https://github.com/ayufan/pve-backup-server-dockerfiles">https://github.com/ayufan/pve-backup-server-dockerfiles&lt;/a>&lt;/p>
&lt;h2 id="部署-proxmox-backup-server">部署 Proxmox Backup Server&lt;/h2>
&lt;p>使用 Docker 或者 Docker Compose 方式部署都可以&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>需要注意，要使用 tmpfs 方式挂载 /run 目录，用于容器内部创建临时文件和目录；&lt;/p>
&lt;p>&lt;code>/etc/proxmox-backup&lt;/code>: 用于存储 PVE Backup Server 的配置信息
&lt;code>/var/log/proxmox-backup&lt;/code>: 用于存储日志信息
&lt;code>/var/lib/proxmox-backup&lt;/code>：用于存储数据
&lt;code>/backups&lt;/code>：存储容器、虚拟机的备份数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;2.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pve-backup-server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">ayufan/proxmox-backup-server:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8007:8007&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/docker/PVEBackup/etc:/etc/proxmox-backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/docker/PVEBackup/log:/var/log/proxmox-backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/docker/PVEBackup/lib:/var/lib/proxmox-backup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/BackupServer:/backups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tmpfs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/run&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置完成后启动容器，访问 &lt;code>https://&amp;lt;ip&amp;gt;:8007/&lt;/code> 端口即可进行登录，默认的用户名是 &lt;code>admin&lt;/code>，密码是 &lt;code>pbspbs&lt;/code>，选择 &lt;code>Proxmox Backup authentication server&lt;/code> 领域进行登录&lt;/p></description></item><item><title>使用 Cloudflare Worker 和 R2 代理 OSS 图床</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-worker-%E5%92%8C-r2-%E4%BB%A3%E7%90%86-oss-%E5%9B%BE%E5%BA%8A/</link><pubDate>Sat, 23 Dec 2023 19:14:05 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-worker-%E5%92%8C-r2-%E4%BB%A3%E7%90%86-oss-%E5%9B%BE%E5%BA%8A/</guid><description>&lt;p>因为笔记可能会在多个平台发布，因此之前使用阿里云的 OSS 作为图片存储，直接将 OSS 的地址暴露到公网进行访问；但是随着流量逐渐增加，每月产生的流量费用也水高船涨，更重要的是 OSS 只支持 Refer 限制，并不能保证安全，在看到有人分享被刷 CDN 产生巨额费用后觉得必须要重视安全问题。&lt;/p>
&lt;p>赛博菩萨 Cloudflare 提供了 R2 作为存储，提供了 5GB 免费的容量，对于个人完全够用了；同时 Worker 支持 CDN 缓存及就近访问，因此使用 Worker 代理 R2 访问完全能满足我的需求&lt;/p>
&lt;p>考虑到有多个平台都是用了 OSS 作为链接，需要逐步迁移；因此，使用 Workers 优先从 R2 读取，如果 R2 没有则从 OSS 获取，并存储到 R2 中&lt;/p>
&lt;h2 id="安装-wrangler">安装 wrangler&lt;/h2>
&lt;p>在本地使用 wrangler 开发 Worker&lt;/p>
&lt;ul>
&lt;li>安装 wrangler&lt;/li>
&lt;/ul>
&lt;p>参考 &lt;a href="https://developers.cloudflare.com/workers/wrangler/install-and-update/">Install/Update Wrangler&lt;/a> 进行安装&lt;/p>
&lt;h2 id="创建-r2">创建 R2&lt;/h2>
&lt;p>在 Cloudflare 管理平台创建 R2，或者通过 wrangler 进行创建，参考 &lt;a href="https://developers.cloudflare.com/r2/buckets/create-buckets/">Create buckets&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wrangler r2 bucket create picture
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建-worker">创建 Worker&lt;/h2>
&lt;ul>
&lt;li>创建项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm create cloudflare@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 R2 绑定到 Worker&lt;/li>
&lt;/ul>
&lt;p>修改 wrangler.toml 配置文件，将 R2 绑定到当前 worker&lt;/p></description></item><item><title>使用阿尔卡特猫棒替换北京移动 GPON 光猫</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E9%98%BF%E5%B0%94%E5%8D%A1%E7%89%B9%E7%8C%AB%E6%A3%92%E6%9B%BF%E6%8D%A2%E5%8C%97%E4%BA%AC%E7%A7%BB%E5%8A%A8-gpon-%E5%85%89%E7%8C%AB/</link><pubDate>Mon, 27 Nov 2023 18:08:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E9%98%BF%E5%B0%94%E5%8D%A1%E7%89%B9%E7%8C%AB%E6%A3%92%E6%9B%BF%E6%8D%A2%E5%8C%97%E4%BA%AC%E7%A7%BB%E5%8A%A8-gpon-%E5%85%89%E7%8C%AB/</guid><description>&lt;p>最近移动送了条免费宽带，刚好联通宽带到期了，可以无缝衔接上；之前使用的是 ODI 猫棒+兮克的 SKS3200M-8GPY1XF 交换机，因此想继续使用 ODI 猫棒，但是一番尝试后始终无法成功拨号，于是改成了使用阿尔卡特猫棒&lt;/p>
&lt;p>阿尔卡特猫棒型号为 G-010S-P，版本为 6BA1896SPE2C05&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-network-gpon-pon-stick-setup-status.png" alt="homelab-network-gpon-pon-stick-setup-status.png">&lt;/p>
&lt;h2 id="宽带配置">宽带配置&lt;/h2>
&lt;ul>
&lt;li>改为桥接模式&lt;/li>
&lt;/ul>
&lt;p>首先要将宽带改为桥接模式，在安装时直接让运维小哥改了；如果没有修改可以联系宽带帮忙修改&lt;/p>
&lt;ul>
&lt;li>获取光猫的超级管理员密码&lt;/li>
&lt;/ul>
&lt;p>北京移动的超级管理员用户名是 &lt;code>CMCCAdmin&lt;/code>，密码是 &lt;code>aDm8H%MdA&lt;/code>；但是我尝试登陆时提示失败，然后联系运维小哥，使用光猫的 SN 和宽带账号授权之后可以正常登录了&lt;/p>
&lt;p>光猫信息如下：&lt;/p>
&lt;ul>
&lt;li>产品名称：吉比特无源光纤接入用户端设备（GPON ONU）&lt;/li>
&lt;li>产品类型：中国移动智能家庭网关 类型11&lt;/li>
&lt;li>产品型号：SK-D747&lt;/li>
&lt;li>电源：12V&amp;mdash;1.5A&lt;/li>
&lt;li>CMIIT ID: 2022XXXXXX&lt;/li>
&lt;li>设备标识：XXXXXX-光猫 SN&lt;/li>
&lt;li>MAC: XXXXXXXXXXX&lt;/li>
&lt;li>SN: 光猫 SN&lt;/li>
&lt;/ul>
&lt;h2 id="获取认证信息">获取认证信息&lt;/h2>
&lt;p>北京移动的认证使用的是光猫的 SN + PLOAM 密码&lt;/p>
&lt;ul>
&lt;li>SN&lt;/li>
&lt;/ul>
&lt;p>光猫 SN 在光猫背面即可看到，也可以登录后在设备信息中查看&lt;/p>
&lt;ul>
&lt;li>PLOAM 密码&lt;/li>
&lt;/ul>
&lt;p>PLOAM 密码的路径为网络-远程管理-认证，&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-network-gpon-model-info-ploam-password.png" alt="homelab-network-gpon-model-info-ploam-password.png">&lt;/p>
&lt;ul>
&lt;li>VLAN ID&lt;/li>
&lt;/ul>
&lt;p>北京移动的 VLAN ID 为 10&lt;/p>
&lt;h2 id="配置猫棒">配置猫棒&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;p>猫棒启动后，进入管理后台，这款猫棒默认的地址是 &lt;a href="http://192.168.1.10">http://192.168.1.10&lt;/a>，默认用户名 &lt;code>root&lt;/code>，密码 &lt;code>password&lt;/code>&lt;/p>
&lt;p>登录后，选择 GPON-互操作兼容配置，配置上面获取到的认证信息&lt;/p>
&lt;ul>
&lt;li>GPON SN: 光猫的 SN&lt;/li>
&lt;li>Ploam password: 光猫获取到的认证密码&lt;/li>
&lt;li>默认PVID: VLAN ID &lt;code>10&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>配置后，点击应用配置&lt;/p></description></item><item><title>Grafana 使用 ClickHouse 作为数据源配置图表</title><link>https://blog.hellowood.dev/posts/grafana%E4%BD%BF%E7%94%A8clickhouse%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E5%9B%BE%E8%A1%A8/</link><pubDate>Mon, 27 Nov 2023 15:20:30 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grafana%E4%BD%BF%E7%94%A8clickhouse%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%E5%9B%BE%E8%A1%A8/</guid><description>&lt;p>ClickHouse 是一种开源的列式数据库管理系统，专注于处理大规模数据分析工作负载。它在处理海量数据时具有高性能、可扩展、灵活的数据模型、支持 SQL 等特性；适用于需要及时分析最新数据的应用场景，如日志分析、事件跟踪等&lt;/p>
&lt;p>在应用过程中，使用 ClickHouse 作为数据源，保存服务上报的秒级指标信息，用于 Grafana 查询秒级监控指标&lt;/p>
&lt;blockquote>
&lt;p>这里使用的 Grafana 版本 v10.1.1, ClickHouse 版本为 23.9.3.12&lt;/p>
&lt;/blockquote>
&lt;h2 id="启动服务并添加数据">启动服务并添加数据&lt;/h2>
&lt;h3 id="启动-clickhouse-和-grafana">启动 ClickHouse 和 Grafana&lt;/h3>
&lt;p>使用 Docker Compose 启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3.7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">grafana&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">grafana/grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;3000:3000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/grafana:/var/lib/grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/plugins/:/var/lib/grafana/plugins&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/provisioning:/etc/grafana/provisioning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clickhouse&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#63c381">&amp;#34;clickhouse/clickhouse-server&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#63c381">&amp;#34;grafana-clickhouse-server&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8123:8123&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;9000:9000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/data:/var/lib/clickhouse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/temp:/temp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/log:/var/log/clickhouse-server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CLICKHOUSE_SERVER_USER&lt;/span>: &lt;span style="color:#98c379">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CLICKHOUSE_SERVER_PASSWORD&lt;/span>: &lt;span style="color:#d19a66">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">grafana&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">grafana&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加数据">添加数据&lt;/h3>
&lt;ul>
&lt;li>登陆数据库&lt;/li>
&lt;/ul>
&lt;p>进入到 docker 容器中，然后使用 &lt;code>clickhouse-client&lt;/code> 访问数据库&lt;/p></description></item><item><title>使用 GoLinks 短链接服务简化网址访问</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8golinks%E7%9F%AD%E9%93%BE%E6%8E%A5%E6%9C%8D%E5%8A%A1%E7%AE%80%E5%8C%96%E7%BD%91%E5%9D%80%E8%AE%BF%E9%97%AE/</link><pubDate>Mon, 27 Nov 2023 11:40:53 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8golinks%E7%9F%AD%E9%93%BE%E6%8E%A5%E6%9C%8D%E5%8A%A1%E7%AE%80%E5%8C%96%E7%BD%91%E5%9D%80%E8%AE%BF%E9%97%AE/</guid><description>&lt;p>最近在内网查找文档时看到一个类似 &lt;code>go/文档名&lt;/code> 的链接，在浏览器的 URL 输入后可以跳转到对应的文档，对比其他的短链接服务要方便不少；&lt;/p>
&lt;p>一番探索后发现原来是一个叫 GoLinks 的短链接服务，通过域名配合 DNS 搜索域，实现了可以直接访问 &lt;code>go&lt;/code> 域名；然后根据路径，重定向到对应的 URL。&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/go-links-homepage.png" alt="go-links-homepage.png">&lt;/p>
&lt;h2 id="什么是-golinks">什么是 GoLinks&lt;/h2>
&lt;p>根据 Tailscale 的文档，GoLinks 服务第一次出现应该是2006年，在谷歌作为内部短链接工具，后来被各个公司复制&lt;/p>
&lt;p>GoLinks 通过 DNS 配置，简化了短链接服务本身的访问地址，因此，可以通过形如 &lt;code>go/google&lt;/code>, &lt;code>go/search/golinks&lt;/code> 这样的方式直接访问&lt;/p>
&lt;p>在 GitHub上搜索发现 Tailscale 也提供了这样的工具，项目地址为 &lt;a href="https://github.com/tailscale/golink">https://github.com/tailscale/golink&lt;/a>，在开启 Tailscale 后可以通过 MagicDNS 直接使用。同时可以配置为开发模式，通过内网的 DNS 和搜索域的配合也可以实现相同的功能。相关文档参考 &lt;a href="https://tailscale.com/blog/golink/">Private go links for your tailnet&lt;/a>&lt;/p>
&lt;h2 id="内网使用-golinks-服务">内网使用 GoLinks 服务&lt;/h2>
&lt;p>使用 GoLinks 服务有两个条件：&lt;/p>
&lt;ol>
&lt;li>需要能够将 &lt;code>go&lt;/code> 解析为对应的服务地址，可以通过配置 DNS 或者 host 的方式实现&lt;/li>
&lt;li>需要 GoLinks 服务监听 80 端口因为访问时为了简单不想再输入 https 或者端口号，因此需要使用 80 端口作为 GoLinks 服务的端口&lt;/li>
&lt;/ol>
&lt;p>有三种方式可以解析 &lt;code>go&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>配置 DNS，将 &lt;code>go&lt;/code> 直接解析为 GoLinks 服务的地址&lt;/li>
&lt;li>DNS 服务器配置 &lt;code>go.xxx&lt;/code>解析规则，然后通过路由器下发 DNS 搜索域；这样在访问&lt;code>go&lt;/code>时就会自动搜索&lt;code>go.xxx&lt;/code>域名，适用于内网访问&lt;/li>
&lt;li>修改 host 配置，将 &lt;code>go&lt;/code> 指向 GoLinks 服务的地址，适用于不方便配置 DNS 的场景使用&lt;/li>
&lt;/ol>
&lt;h2 id="启动-golinks-服务">启动 GoLinks 服务&lt;/h2>
&lt;p>可以通过 Docker 容器启动 GoLinks 服务，用于快速使用，为了方便测试，将端口指定为 80&lt;/p></description></item><item><title>使用 Cloudflare Tunnels 通过 Web SSH 访问服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8cloudflare-tunnels%E9%80%9A%E8%BF%87web-ssh%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 06 Oct 2023 15:25:13 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8cloudflare-tunnels%E9%80%9A%E8%BF%87web-ssh%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>Cloudflre 的 Zero Trust 支持通过 Tunnels 访问 SSH 类型的应用，可以通过 Web SSH 的方式访问服务器；支持多种登陆认证方式，安全性远高于直接暴露公网端口&lt;/p>
&lt;h2 id="创建-ssh-应用">创建 SSH 应用&lt;/h2>
&lt;ul>
&lt;li>创建应用&lt;/li>
&lt;/ul>
&lt;p>在 Cloudflare 控制台 &amp;gt; Zero Trust &amp;gt; Access &amp;gt; Applications 选择 Add an application 创建新的应用；应用类型为 Self-hosted&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-application-create.png" alt="homelab-cloudflare-ssh-application-create.png">&lt;/p>
&lt;ul>
&lt;li>配置应用信息&lt;/li>
&lt;/ul>
&lt;p>指定应用名称，并为应用配置域名；session 的过期时间可以按需配置&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-application.png" alt="homelab-cloudflare-ssh-configuration-application.png">&lt;/p>
&lt;ul>
&lt;li>指定访问策略&lt;/li>
&lt;/ul>
&lt;p>需要配置访问策略，只允许特定的邮箱登陆；如果需要使用其他的认证方式，如 GitHub/Google SSO 等，可以在 Cloudflare 控制台 &amp;gt; Zero Trust &amp;gt; Settings &amp;gt; Authentication &amp;gt; Login Methods 中添加&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-configuration-policy.png" alt="homelab-cloudflare-ssh-configuration-policy.png">&lt;/p>
&lt;ul>
&lt;li>修改应用类型&lt;/li>
&lt;/ul>
&lt;p>在 Additional settings 中，将 Browser rendering 的类型改为 SSH；然后选择保存，这样就配置好 SSH 应用了&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-cloudflare-ssh-set-application-type.png" alt="homelab-cloudflare-ssh-set-application-type.png">&lt;/p>
&lt;h2 id="配置-tunnels">配置 Tunnels&lt;/h2>
&lt;p>关于 Tunnels 配置安装请参考 &lt;a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-cloudflare-tunnel-%E4%BD%9C%E4%B8%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1/">使用Cloudflare-Tunnels提供服务公网访问&lt;/a>&lt;/p></description></item><item><title>Linux 环境下配置不间断电源 UPS</title><link>https://blog.hellowood.dev/posts/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%B8%8D%E9%97%B4%E6%96%AD%E7%94%B5%E6%BA%90ups/</link><pubDate>Wed, 04 Oct 2023 15:22:56 +0800</pubDate><guid>https://blog.hellowood.dev/posts/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%B8%8D%E9%97%B4%E6%96%AD%E7%94%B5%E6%BA%90ups/</guid><description>&lt;p>UPS (Uninterruptible Power Supply)，是一种含有储能装置的不间断电源。主要用于给部分对电源稳定性要求较高的设备，提供不间断的电源&lt;/p>
&lt;p>一般的 UPS 都支持通过 USB 连接到电脑或者 NAS 等设备上，Linux/Mac/Windows 均支持使用 UPS；&lt;/p>
&lt;p>因为电路不稳定，存在偶尔断电的情况，因此希望通过 UPS 保护树莓派、路由器、光猫、硬盘录像机等设备；将 UPS 通过 USB 接口连接到树莓派，由树莓派控制其他设备在断电时关机&lt;/p>
&lt;h2 id="安装-nut">安装 NUT&lt;/h2>
&lt;p>&lt;a href="https://networkupstools.org/">NUT&lt;/a>(Network UPS Tools) 是一种开源软件工具，其主要功能特点是实时监控与管理不间断电源（UPS）设备，支持多种通信协议，自动执行操作以应对电力故障，适用于多平台，并允许集中管理多个UPS设备，以确保与这些设备连接的计算机和设备在电力问题发生时能够继续正常运行或安全关闭&lt;/p>
&lt;p>NUT中的主要软件组件和功能：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Driver（驱动程序）：NUT包括各种不同制造商的UPS设备的驱动程序，使NUT能够与多种型号的UPS设备通信。这些驱动程序负责与UPS设备建立连接，并获取有关电源状态、电池状态和其他参数的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upsd（UPS守护进程）：upsd是NUT的核心守护进程，负责与UPS设备通信，并将UPS状态信息提供给其他NUT组件和客户端。它可以通过网络协议（如SNMP、HTTP、XML-RPC等）向其他计算机提供UPS状态信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upsmon（UPS监控守护进程）：upsmon监控守护进程用于监视UPS状态，并在检测到电力问题时执行操作。它可以配置为执行自定义脚本、关闭计算机或发送警报通知，以确保系统的连续性和数据完整性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upslog（UPS事件记录器）：upslog用于记录UPS事件和状态信息，以便后续分析和故障排除。它可以生成日志文件，其中包含UPS的运行历史和电力事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nutclient（NUT客户端工具）：NUT提供了一些用于监控和管理UPS的命令行工具，例如upsc用于查询UPS状态，upscmd用于发送命令到UPS，以及upsrw用于修改UPS配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> apt install -y nut
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通过-usb-连接-ups">通过 USB 连接 UPS&lt;/h2>
&lt;p>在将 UPS 通过 USB 连接到树莓派后，可以通过查看 USB 设备进行检查&lt;/p>
&lt;ul>
&lt;li>检查 USB 连接&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo lsusb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中的 Device 003 就是 UPS，说明 USB 连接正常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">003&lt;/span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">002&lt;/span> Device 002: ID 174c:55aa ASMedia Technology Inc. ASM1051E SATA 6Gb/s bridge, ASM1053E SATA 6Gb/s bridge, ASM1153 SATA 3Gb/s bridge, ASM1153E SATA 6Gb/s bridge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">002&lt;/span> Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">001&lt;/span> Device 003: ID 0463:ffff MGE UPS Systems UPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">001&lt;/span> Device 002: ID 2109:3431 VIA Labs, Inc. Hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bus &lt;span style="color:#d19a66">001&lt;/span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过 &lt;code>nut-scanner&lt;/code> 检查 UPS 设备&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nut-scanner -q
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正确识别到连接的 UPS 设备，驱动为 &lt;code>usbhid-ups&lt;/code>，产品为 &lt;code>SANTAK TG-BOX&lt;/code>&lt;/p></description></item><item><title>WireGuard对端动态IP时主动更新地址</title><link>https://blog.hellowood.dev/posts/wireguard%E5%AF%B9%E7%AB%AF%E5%8A%A8%E6%80%81ip%E6%97%B6%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%9C%B0%E5%9D%80/</link><pubDate>Sun, 24 Sep 2023 18:37:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/wireguard%E5%AF%B9%E7%AB%AF%E5%8A%A8%E6%80%81ip%E6%97%B6%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%9C%B0%E5%9D%80/</guid><description>&lt;p>如果 WireGuard 对端的 &lt;code>Endpoint&lt;/code> 是一个域名，这个域名只会在启动的时候解析一次，后续不会更新；当这个域名发生变化时，WireGuard 连接就会断开&lt;/p>
&lt;p>wireguard-tools 的仓库中提供了检测 IP 变化并更新 &lt;code>Endpoint&lt;/code> 的脚本 &lt;a href="https://git.zx2c4.com/wireguard-tools/tree/contrib/reresolve-dns/reresolve-dns.sh">https://git.zx2c4.com/wireguard-tools/tree/contrib/reresolve-dns/reresolve-dns.sh&lt;/a>，因此可以使用该脚本，通过定时任务的方式可以实现域名 IP 变化后更新 WireGuard&lt;/p>
&lt;ul>
&lt;li>下载仓库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://git.zx2c4.com/wireguard-tools /usr/share/wireguard-tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置更新服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cat &lt;span style="color:#98c379">&amp;lt;&amp;lt;EOL &amp;gt; /etc/systemd/system/wireguard-update-dns.service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Description=Update DNS of all WireGuard endpoints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Wants=network.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">After=network.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Type=oneshot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">ExecStart=/bin/sh -c &amp;#39;for i in /etc/wireguard/*.conf; do /usr/share/wireguard-tools/contrib/reresolve-dns/reresolve-dns.sh &amp;#34;\$i&amp;#34;; done&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">EOL&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置定时任务服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cat &lt;span style="color:#98c379">&amp;lt;&amp;lt;EOL &amp;gt; /etc/systemd/system/wireguard-update-dns.timer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">Description=Update DNS of all WireGuard endpoints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Timer]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">OnCalendar=*:*:0/30
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">[Install]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">WantedBy=timers.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">EOL&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl &lt;span style="color:#ef8383">enable&lt;/span> wireguard-update-dns.service wireguard-update-dns.timer --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，就会每隔 30s 检测并更新一次 Endpoint 的地址了&lt;/p></description></item><item><title>使用WireGuard连接异地局域网</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%9C%B0%E5%B1%80%E5%9F%9F%E7%BD%91/</link><pubDate>Sun, 24 Sep 2023 17:56:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%9C%B0%E5%B1%80%E5%9F%9F%E7%BD%91/</guid><description>&lt;p>最近使用 Frigate 做家庭监控，因为 Frigate 部署在自己的 HomeLab 服务器里，有几个监控在老家，需要跨地域访问；有以下几种方案：&lt;/p>
&lt;ol>
&lt;li>使用公网映射：将老家的监控映射到公网，但是在公网开放监控并不安全，另外还需要申请公网IP&lt;/li>
&lt;li>使用 TailScale 组网：测试过程中发现 TailScale 需要从香港中转，延迟很高，视频经常断开；自己部署 DERP 服务端同样需要在公网开放多个端口，不安全并且比较麻烦&lt;/li>
&lt;li>使用 Cloudflare Tunnel 转发：使用 Tunnel 延迟也很高，并不稳定&lt;/li>
&lt;li>使用 WireGuard 组网：对端直接连接，延迟低，仅需要开放一个 UDP 端口，较安全&lt;/li>
&lt;/ol>
&lt;p>最终选择使用 WireGuard 组网方案，在老家放了一台树莓派4B，用于运行 WireGuard 进行流量转发；HomeLab 服务器部署了一台 LXC 容器运行 WireGuard，用于连接树莓派；开启了局域网转发后，本地的局域网设备可以和老家的局域网设备互相通信&lt;/p>
&lt;blockquote>
&lt;p>注意：需要对端其中一方有可以直接访问的公网IP&lt;/p>
&lt;/blockquote>
&lt;p>关于 WireGuard 的介绍可以参考 &lt;a href="https://www.wireguard.com/">WireGuard&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-wireguard-vpn-for-sub-network.svg" alt="homelab-wireguard-vpn-for-sub-network.svg">&lt;/p>
&lt;h2 id="安装配置-wireguard">安装配置 WireGuard&lt;/h2>
&lt;h3 id="安装-wireguard">安装 wireguard&lt;/h3>
&lt;p>因为 LXC 容器和树莓派都使用的是 Ubuntu 22.04 的系统，因此直接使用 apt 安装即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> apt install -y wireguard-tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成密钥对">生成密钥对&lt;/h3>
&lt;p>详细操作参考 &lt;a href="https://www.wireguard.com/quickstart/#key-generation">Key Generation&lt;/a>&lt;/p>
&lt;ul>
&lt;li>创建文件夹并修改权限&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir wireguard &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ef8383">cd&lt;/span> wireguard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">umask&lt;/span> &lt;span style="color:#d19a66">077&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>umask 077&lt;/code> 的作用是设置系统默认文件和文件夹的权限为只有创建用户拥有全部权限（读、写和执行）&lt;/p>
&lt;ul>
&lt;li>创建 OpenWrt 密钥对&lt;/li>
&lt;/ul>
&lt;p>先创建私钥，然后使用私钥创建公钥&lt;/p></description></item><item><title>使用 Docker 部署 Clash Premium</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2clash-premium/</link><pubDate>Sat, 09 Sep 2023 21:32:33 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2clash-premium/</guid><description>&lt;p>Clash Premium 是 Clash 的闭源内核版本，相比 Clash 开源版本，最大的特点是支持规则集和代理服务订阅能力&lt;/p>
&lt;h2 id="订阅格式转换">订阅格式转换&lt;/h2>
&lt;p>大部分订阅是 base64 编码的节点，无法被 Clash 直接使用，因此需要进行订阅格式转换，具体请参考 &lt;a href="https://blog.hellowood.dev/posts/clash-%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2/">Clash 使用 Docker 部署&lt;/a> 或使用在线工具直接转换：&lt;a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/&lt;/a>&lt;/p>
&lt;h2 id="修改配置">修改配置&lt;/h2>
&lt;h3 id="基础配置">基础配置&lt;/h3>
&lt;p>基础配置部分用于指定 Clash 的端口、代理模式等；使用 TUN 后可以代理 UDP 流量，开启 tracing 可以对 Clash 进行性能监控&lt;/p>
&lt;ul>
&lt;li>config.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">7890&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">socks-port&lt;/span>: &lt;span style="color:#d19a66">7891&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">redir-port&lt;/span>: &lt;span style="color:#d19a66">7892&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">allow-lan&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">mode&lt;/span>: &lt;span style="color:#98c379">rule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">log-level&lt;/span>: &lt;span style="color:#98c379">info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 控制端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">external-controller&lt;/span>: :&lt;span style="color:#d19a66">9090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 访问密码，建议设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">secret&lt;/span>: &lt;span style="color:#63c381">&amp;#34;123456&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># TUN 模式，用于代理 TCP、UDP、ICMP 流量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">tun&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enable&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stack&lt;/span>: &lt;span style="color:#98c379">system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">auto-route&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">auto-redir&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">auto-detect-interface&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 用于性能分析&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">profile&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tracing&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置策略组">配置策略组&lt;/h3>
&lt;p>代理提供方 &lt;code>proxy-providers&lt;/code> 用于为策略组 &lt;code>proxy-groups&lt;/code> 提供代理节点；这部分用于取代 Clash 中的 &lt;code>proxies&lt;/code>&lt;/p></description></item><item><title>在PVE的LXC容器中直通核心显卡</title><link>https://blog.hellowood.dev/posts/%E5%9C%A8pve%E7%9A%84lxc%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9B%B4%E9%80%9A%E6%A0%B8%E5%BF%83%E6%98%BE%E5%8D%A1/</link><pubDate>Sat, 09 Sep 2023 17:53:36 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9C%A8pve%E7%9A%84lxc%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9B%B4%E9%80%9A%E6%A0%B8%E5%BF%83%E6%98%BE%E5%8D%A1/</guid><description>&lt;p>在 ProxmoxVE 平台中使用 LXC 容器使用 Docker 部署 &lt;a href="https://frigate.video/">frigate&lt;/a> 时(或其他需要GPU的容器如Jellyfin等)，需要使用 GPU 对 ffmpeg 进行加速，因此需要将宿主机 N5105 的核心显卡挂载到 LXC 容器到 Docker 容器中&lt;/p>
&lt;h2 id="安装核显驱动">安装核显驱动&lt;/h2>
&lt;ul>
&lt;li>查看设备&lt;/li>
&lt;/ul>
&lt;p>如果能够看到 PCI 设备中包含核心显卡，说明设备识别正常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lspci | grep VGA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>00:02.0 VGA compatible controller: Intel Corporation JasperLake &lt;span style="color:#c7bf54">[&lt;/span>UHD Graphics&lt;span style="color:#c7bf54">]&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>rev 01&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查看驱动&lt;/li>
&lt;/ul>
&lt;p>可以看到 card0 和 renderD128 都存在，说明驱动正常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ls /dev/dri/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>by-path card0	renderD128
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通常不需要安装驱动，如果设备没有正确识别，可以参考 &lt;a href="https://dgpu-docs.intel.com/driver/installation.html#ubuntu-install-steps">https://dgpu-docs.intel.com/driver/installation.html#ubuntu-install-steps&lt;/a> 进行安装&lt;/p>
&lt;h2 id="创建-lxc-容器">创建 LXC 容器&lt;/h2>
&lt;p>如图，在 PVE的控制界面，选择创建 CT 容器；配置中取消 &amp;ldquo;无特权容器&amp;rdquo; 的勾选，模板选择 CentOS 或 Ubuntu 等均可&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-lxc-intel-graphics-mount-1.png" alt="homelab-pve-lxc-intel-graphics-mount-1.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-lxc-intel-graphics-mount-2.png" alt="homelab-pve-lxc-intel-graphics-mount-2.png">&lt;/p>
&lt;p>创建完成后，即可看到容器的 ID，即VMID，这里是 104&lt;/p>
&lt;h2 id="修改核心显卡直通">修改核心显卡直通&lt;/h2>
&lt;p>修改核心显卡直通，需要使用 PVE 宿主机的命令行修改 LXC 容器的配置文件&lt;/p></description></item><item><title>小米路由器 4A 千兆版刷入 OpenWrt</title><link>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-4a-%E5%8D%83%E5%85%86%E7%89%88%E5%88%B7%E5%85%A5-openwrt/</link><pubDate>Fri, 25 Aug 2023 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8-4a-%E5%8D%83%E5%85%86%E7%89%88%E5%88%B7%E5%85%A5-openwrt/</guid><description>&lt;p>因为买了新的路由器，之前的小米 4A 千兆版被淘汰下来了，因此想刷个 OpenWrt 测试一下&lt;/p>
&lt;h2 id="依赖">依赖&lt;/h2>
&lt;ul>
&lt;li>电脑 Win/Mac/Linux，需要支持网线连接，如果是 Mac，需要一个网线转接器&lt;/li>
&lt;li>小米路由器 4A 千兆版&lt;/li>
&lt;li>Python3 环境&lt;/li>
&lt;li>网线&lt;/li>
&lt;/ul>
&lt;h2 id="开启路由器-ssh">开启路由器 SSH&lt;/h2>
&lt;p>需要先开启路由器的 SSH，小米的固件只有开发版支持 SSH，但是现在所有的版本基本都不会放出开发版；所以只能通过破解的方式开启(开启后不支持保修)；&lt;/p>
&lt;p>因为小米路由器系统存在 &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-18370">CVE-2019-18370&lt;/a> 漏洞，所以可以通过该漏洞开启 SSH；需要使用项目 &lt;a href="https://github.com/acecilia/OpenWRTInvasion">acecilia/OpenWRTInvasion&lt;/a> 提供的脚本&lt;/p>
&lt;ul>
&lt;li>下载 &lt;a href="https://github.com/acecilia/OpenWRTInvasion">acecilia/OpenWRTInvasion&lt;/a> ，并安装依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/acecilia/OpenWRTInvasion.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> OpenWRTInvasion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip3 install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>执行脚本&lt;/li>
&lt;/ul>
&lt;p>通过 WiFi 或有线的方式连接到路由器，然后进入命令行，执行以下命令，运行 &lt;code>remote_command_execution_vulnerability.py&lt;/code> 脚本；执行脚本时需要输入路由器的地址和后台访问密码；地址如果没有改动默认就是 &lt;code>192.168.31.1&lt;/code>，或者访问 &lt;code>miwifi.com&lt;/code>也可以直接访问到；如果选择了离线模式，会在本地启动一个 ftp server&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python3 remote_command_execution_vulnerability.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在执行结束后，会输出提示信息，用于通过 SSH 访问路由器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>here two options to provide the files needed &lt;span style="color:#c678dd">for&lt;/span> invasion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1. Use a &lt;span style="color:#ef8383">local&lt;/span> TCP file server runing on random port to provide files in &lt;span style="color:#ef8383">local&lt;/span> directory &lt;span style="color:#98c379">`&lt;/span>script_tools&lt;span style="color:#98c379">`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. Download needed files from remote github repository. &lt;span style="color:#c7bf54">(&lt;/span>choose this option only &lt;span style="color:#c678dd">if&lt;/span> github is accessable inside router device.&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Which option &lt;span style="color:#c678dd">do&lt;/span> you prefer? &lt;span style="color:#c7bf54">(&lt;/span>default: 1&lt;span style="color:#c7bf54">)&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>****************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>router_ip_address: miwifi.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stok: f19c778f7bc6fbe92cc70a6c6bd2bd4f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file provider: &lt;span style="color:#ef8383">local&lt;/span> file server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>****************
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start uploading config file...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#ef8383">exec&lt;/span> command...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">local&lt;/span> file server is runing on 0.0.0.0:57165. &lt;span style="color:#dcaeea">root&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">&amp;#39;script_tools&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">local&lt;/span> file server is getting &lt;span style="color:#98c379">&amp;#39;busybox-mipsel&amp;#39;&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> 192.168.31.1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">local&lt;/span> file server is getting &lt;span style="color:#98c379">&amp;#39;dropbearStaticMipsel.tar.bz2&amp;#39;&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> 192.168.31.1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">done&lt;/span>! Now you can connect to the router using several options: &lt;span style="color:#c7bf54">(&lt;/span>user: root, password: root&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* telnet miwifi.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* ssh -oKexAlgorithms&lt;span style="color:#c7bf54">=&lt;/span>+diffie-hellman-group1-sha1 -c 3des-cbc -o &lt;span style="color:#dcaeea">UserKnownHostsFile&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>/dev/null root@miwifi.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* ftp: using a program like cyberduck
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>SSH 访问路由器&lt;/li>
&lt;/ul>
&lt;p>通过指定参数的方式，使用 SSH 访问路由器，用户名密码都是 &lt;code>root&lt;/code>&lt;/p></description></item><item><title>使用arpl在PVE上安装黑群晖</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8arpl%E5%9C%A8pve%E4%B8%8A%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</link><pubDate>Sat, 01 Jul 2023 16:12:02 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8arpl%E5%9C%A8pve%E4%B8%8A%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</guid><description>&lt;p>&lt;a href="https://github.com/fbelavenuto/arpl">arpl&lt;/a> 是 GitHub 上开源的自动装载程序，能够实现使用 arpl 在物理机或虚拟机中安装黑群晖&lt;/p>
&lt;h2 id="1-下载-arpl">1. 下载 arpl&lt;/h2>
&lt;p>在 GitHub 项目 &lt;a href="https://github.com/fbelavenuto/arpl">fbelavenuto/arpl&lt;/a> 的 &lt;a href="https://github.com/fbelavenuto/arpl/releases">Releases&lt;/a> 中选择下载最新版本，选择 &lt;code>img.zip&lt;/code> 后缀的文件进行下载&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-arpl-download.png" alt="homelab-nas-synology-arpl-download.png">&lt;/p>
&lt;p>解压后可以得到一个名为 &lt;code>arpl.img&lt;/code> 的文件，这个文件用于后续安装黑群晖&lt;/p>
&lt;h2 id="2-配置虚拟机">2. 配置虚拟机&lt;/h2>
&lt;h3 id="21-上传-arpl">2.1 上传 arpl&lt;/h3>
&lt;p>将 &lt;code>arpl.img&lt;/code> 文件上传到 PVE 的 ISO 镜像中，用于后续引导黑群晖&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-upload-arpl-img.png" alt="homelab-nas-synology-upload-arpl-img.png">&lt;/p>
&lt;h3 id="22-创建虚拟机">2.2 创建虚拟机&lt;/h3>
&lt;p>在 PVE 中创建一个新的虚拟机，操作系统选择 &amp;lsquo;不使用任何介质&amp;rsquo;，不使用磁盘，或者在创建后将磁盘删除&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-create-vm-instance.png" alt="homelab-nas-synology-create-vm-instance.png">&lt;/p>
&lt;h3 id="23-配置磁盘">2.3 配置磁盘&lt;/h3>
&lt;h4 id="231-将-arpl-作为磁盘导入虚拟机">2.3.1 将 arpl 作为磁盘导入虚拟机&lt;/h4>
&lt;p>使用 PVE 的命令行，使用以下命令将 arpl.img 作为虚拟机的磁盘导入，虚拟机 ID 为 101&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qm importdisk &lt;span style="color:#d19a66">101&lt;/span> /var/lib/vz/template/iso/arpl.img local-lvm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在控制台修改磁盘 &amp;lsquo;总线/设备&amp;rsquo; 为 SATA 并添加&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-arpl-import-as-disk-set-sata.png" alt="homelab-nas-synology-arpl-import-as-disk-set-sata.png">&lt;/p>
&lt;h4 id="232-配置系统硬盘">2.3.2 配置系统硬盘&lt;/h4>
&lt;p>在控制台再添加一个 SATA 硬盘，用于安装群晖系统及套件&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-nas-synology-arpl-system-disk.png" alt="homelab-nas-synology-arpl-system-disk.png">&lt;/p></description></item><item><title>使用兮克 2.5G 交换机将北京联通 EPON 改为 ODI 猫棒接入</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%85%AE%E5%85%8B-2.5g-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B0%86%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A-epon-%E6%94%B9%E4%B8%BA-odi-%E7%8C%AB%E6%A3%92%E6%8E%A5%E5%85%A5/</link><pubDate>Mon, 19 Jun 2023 08:54:44 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%85%AE%E5%85%8B-2.5g-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B0%86%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A-epon-%E6%94%B9%E4%B8%BA-odi-%E7%8C%AB%E6%A3%92%E6%8E%A5%E5%85%A5/</guid><description>&lt;p>最近入手了兮克2.5G交换机（兮克SKS1200-8GPY1XF），有 8 个 2.5G 电口和 1 个 10G SFP+ 光口；支持多种组网模式，其中一种是支持使用猫棒接入，由路由器拨号后再回接到交换机，这样就可以替换掉光猫了
(注意：兮克 SKS1200-8GPY1XF 不支持 VLAN 隔离，将网线接到路由器再回接会形成环路，导致网络频繁抖动；建议使用最新的支持 VLAN 隔离的版本)&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-switch-sfp-network.png" alt="homelab-switch-sfp-network.png">&lt;/p>
&lt;p>替换光猫有以下原因：&lt;/p>
&lt;ol>
&lt;li>千兆及以上宽带突破不到千兆限制：运营商的千兆光猫一般只能跑到 950M左右，而 EPON 支持 1.25G 下行，GPON 支持 2.5G 下行&lt;/li>
&lt;li>减少光猫空间占用：光猫体积较大，替换成猫棒可以减少空间占用，对于将网络设备放在弱电箱的用户比较合适&lt;/li>
&lt;li>瞎折腾：纯粹为了体验和折腾&lt;/li>
&lt;/ol>
&lt;h2 id="名词解释">名词解释&lt;/h2>
&lt;ul>
&lt;li>猫棒&lt;/li>
&lt;/ul>
&lt;p>猫棒(Pon Stick) 就是 SFP 封装的猫，分为 GPON、EPON 等，接口是 SFP，可插到有 SFP 口的交换机、路由器或者网卡上来代替光猫，具有光猫完整的功能；优点是体积小，网速比普通光猫高；缺点是性能羸弱，发热量大，不够稳定&lt;/p>
&lt;ul>
&lt;li>光模块&lt;/li>
&lt;/ul>
&lt;p>光模块工作在OSI模型的物理层，是光纤通信系统中的核心器件之一。它主要由光电子器件（光发射器、光接收器）、功能电路和光接口等部分组成，主要作用就是实现光纤通信中的光电转换和电光转换功能；光模块是一个光电转换器，而猫棒是有 CPU、内存、系统的光猫，两者都使用 SFP 接口&lt;/p>
&lt;ul>
&lt;li>SFP/SFP+&lt;/li>
&lt;/ul>
&lt;p>SFP（Small Form-Factor Pluggable）和SFP+（Enhanced Small Form-Factor Pluggable）是两种不同的光模块类型，主要区别是它们支持的传输速率不同；SFP 模块支持最高传输速率为1.25 Gbps，而 SFP+ 模块支持最高传输速率为10 Gbps。此外，SFP+ 可以向下兼容 SFP 插槽，因此可以将 SFP+ 插入 SFP 插槽中，但反之则不行&lt;/p>
&lt;ul>
&lt;li>UPC/APC/SC：&lt;/li>
&lt;/ul>
&lt;p>UPC（Ultra Physical Contact）、APC（Angled Physical Contact）和SC（Subscriber Connector）都是光纤接口的类型；通常 APC 是绿色的接头，用于机房等场景；SC 是蓝色的接头，一般家用光纤都是 SC 接口&lt;/p></description></item><item><title>使用WireGuard从外网访问OpenWrt</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E4%BB%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AEopenwrt/</link><pubDate>Mon, 12 Jun 2023 16:30:22 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8wireguard%E4%BB%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AEopenwrt/</guid><description>&lt;p>在使用过程中，如果通过DDNS 的方式将 OpenWrt 暴露在公网中，很容易遭受攻击或者入侵，因此可以使用 WireGuard 作为 VPN 进行访问，更加安全；因此，使用 OpenWrt 搭建 WireGuard VPN，实现从外网访问 OpenWrt&lt;/p>
&lt;p>&lt;a href="https://www.wireguard.com/">WireGuard&lt;/a> 是一种现代的 VPN 协议，可以快速、安全地建立虚拟私人网络连接。相比于传统的 VPN 协议，如 OpenVPN 和I PSec，WireGuard 具有更简单的设计、更快的速度、更高的安全性和更小的代码量&lt;/p>
&lt;h2 id="核心概念">核心概念&lt;/h2>
&lt;p>WireGuard中主要涉及以下几个概念：&lt;/p>
&lt;ul>
&lt;li>接口（Interface）：表示一个 WireGuard 端点（Peer）的虚拟网络接口，用于处理加密和解密流量、路由和其他传输信息。&lt;/li>
&lt;li>对等端（Peer）：表示使用 WireGuard 连接的每个设备或节点。每个 Peer 在连接时需要交换公钥和预共享密钥等信息。&lt;/li>
&lt;li>公钥（PublicKey）：每个 WireGuard 对等端拥有的公钥，用于加密通信流量和生成预共享密钥。&lt;/li>
&lt;li>私钥（PrivateKey）：与每个公钥相配对的私钥，只应该存储在拥有者的设备上。&lt;/li>
&lt;li>端点（Endpoint）：是在网络中可访问某个 Peer 的 IP 地址和端口号，用于建立连接。&lt;/li>
&lt;li>IP 分配（IP Address Assignment）：指定每个接口使用的 IPv4/IPv6 前缀范围。&lt;/li>
&lt;li>允许 IP（Allowed IP）：定义被 WireGuard 处理的哪些 IP 包，以及将这些包重新路由到哪个接口。&lt;/li>
&lt;li>预共享密钥（Pre-shared Key）：在 Peer 之间建立安全连接时使用的共享密钥，用于加密数据包。&lt;/li>
&lt;li>Listen Port（监听端口）：一个 Peer 监听的 UDP 端口号。其他 Peer 使用此端口发送数据包到该 Peer&lt;/li>
&lt;/ul>
&lt;h2 id="配置-openwrt">配置 OpenWrt&lt;/h2>
&lt;h3 id="安装-wireguard">安装 WireGuard&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> opkg install wireguard-tools luci-app-wireguard luci-i18n-wireguard-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此命令会自动安装 WireGuard 的依赖，也可以在管理界面进行安装；安装完成后打开 OpenWrt 管理界面-状态，就可以看到 WireGuard 的控制界面了；此时提示未配置 WireGuard 端口，需要在网络-接口中进行配置&lt;/p></description></item><item><title>Proxmox VE 添加监控</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E6%B7%BB%E5%8A%A0%E7%9B%91%E6%8E%A7/</link><pubDate>Sun, 09 Apr 2023 21:29:39 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E6%B7%BB%E5%8A%A0%E7%9B%91%E6%8E%A7/</guid><description>&lt;p>PVE 支持添加 &lt;a href="https://graphiteapp.org/">Graphite&lt;/a> 或者 &lt;a href="https://www.influxdata.com/">InfluxDB&lt;/a> 作为指标数据的存储；在添加配置后，PVE 会主动将配置信息发送到对应的存储中，用于记录和监控 PVE 的状态&lt;/p>
&lt;p>基于 Docker 容器，使用 InfluxDB 和 Grafana 对 PVE 进行监控，效果如图：&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-promoxve-monitor-metrics-dashboard.png" alt="homelab-promoxve-monitor-metrics-dashboard.png">&lt;/p>
&lt;h2 id="配置-influxdb">配置 InfluxDB&lt;/h2>
&lt;p>使用的是 InfluxDB 2 版本，使用 Flux 语法进行查询；因此需要启动 InfluxDB 2 的容器，使用 DockerCompose 方便配置&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">influxdb&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">influxdb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">influxdb:2.6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8086:8086&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/influx/data:/var/lib/influxdb2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">./data/influx/config:/etc/influxdb2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_MODE&lt;/span>: &lt;span style="color:#98c379">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_USERNAME&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_PASSWORD&lt;/span>: &lt;span style="color:#98c379">qwertyuiop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_ORG&lt;/span>: &lt;span style="color:#98c379">influx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_BUCKET&lt;/span>: &lt;span style="color:#98c379">influx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DOCKER_INFLUXDB_INIT_ADMIN_TOKEN&lt;/span>: &lt;span style="color:#d19a66">123456&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>DOCKER_INFLUXDB_INIT_MODE&lt;/code>它用于指定容器启动时运行的初始化模式。该变量有两个有效值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>setup&lt;/code>: 表示在容器首次启动时，将执行InfluxDB初始化脚本并创建管理员用户。&lt;/li>
&lt;li>&lt;code>skip&lt;/code>：表示跳过初始化脚本的执行，直接启动InfluxDB服务。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>DOCKER_INFLUXDB_INIT_PASSWORD&lt;/code> 不能设置的太简单，否则 InfluxDB 启动时会报错
&lt;code>DOCKER_INFLUXDB_INIT_ORG&lt;/code> 用于指定 InfluxDB 的组织
&lt;code>DOCKER_INFLUXDB_INIT_BUCKET&lt;/code> 用于指定初始化使用的 Bucket
&lt;code>DOCKER_INFLUXDB_INIT_ADMIN_TOKEN&lt;/code> 用于访问时进行鉴权&lt;/p>
&lt;h2 id="配置-pve">配置 PVE&lt;/h2>
&lt;p>在 PVE 的服务器视图下，选择数据中心 - 指标服务器，选择添加 InfluxDB，输入相关的配置；协议选择 HTTP，组织添加 &lt;code>DOCKER_INFLUXDB_INIT_ORG&lt;/code> 配置的值，插槽添加 &lt;code>DOCKER_INFLUXDB_INIT_BUCKET&lt;/code> 配置的 Bucket， 令牌填写 &lt;code>DOCKER_INFLUXDB_INIT_ADMIN_TOKEN&lt;/code> 配置的 token&lt;/p></description></item><item><title>N5105 Promox VE 虚拟机频繁死机问题处理</title><link>https://blog.hellowood.dev/posts/n5105-promox-ve-%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%A2%91%E7%B9%81%E6%AD%BB%E6%9C%BA%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</link><pubDate>Sat, 25 Mar 2023 21:31:50 +0800</pubDate><guid>https://blog.hellowood.dev/posts/n5105-promox-ve-%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%A2%91%E7%B9%81%E6%AD%BB%E6%9C%BA%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</guid><description>&lt;p>使用 N5105 作为 HomeLab 的服务器；之前安装的 ESXi，使用 Ubuntu 22 的时候经常会出现 Ubuntu CPU 占用达到100%，然后死机；但是其他的虚拟机都没有问题，因为对 Linux 并不熟，查看了 ESXi 和 Ubuntu 日志并没有异常；后面安装黑群晖一直失败，因此换到了 Proxmox VE&lt;/p>
&lt;p>换到 PVE 后依然存在同样的问题，以为是服务的问题，于是给 Docker 容器添加了资源限制，无效后迁移到了 CentOS 部署，发现还是同样的问题；并且越来越频繁，从一天一次变成了几小时一次，几乎无法使用&lt;/p>
&lt;p>猜测会不会是硬件问题，一番搜索发现在 N5105 上居然是个普遍的问题&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>这个问题于 2022-08-04 在 Proxmox 的问题反馈中提交：&lt;a href="https://bugzilla.proxmox.com/show_bug.cgi?id=4188">Bug 4188 - VMs freeze on Intel N5105 CPU&lt;/a>，描述中&amp;quot;到运行Intel N5105 CPU的一些用户注意到在Proxmox上运行的虚拟机会冻结，并记录了各种错误。虚拟机会冻结，控制台无法输入，CPU利用率达到最大值，直到强制重启虚拟机&amp;quot;，现象和我遇到的是一样的，说明该现象是通病；&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-vm-freeze-issue-bug-feedback.png" alt="homelab-pve-vm-freeze-issue-bug-feedback.png">&lt;/p>
&lt;p>2022-9-13 在帖子 &lt;a href="https://forum.proxmox.com/threads/opt-in-linux-5-19-kernel-for-proxmox-ve-7-x-available.115090/">Opt-in Linux 5.19 Kernel for Proxmox VE 7.x available&lt;/a> 中，PVE员工宣布将 PVE 的内核升级到 5.19版本，在 Bug 反馈到讨论中有不少人确认有效&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-vm-freeze-issue-519-kenel.png" alt="homelab-pve-vm-freeze-issue-519-kenel.png">&lt;/p>
&lt;p>这个问题在 2022-12-06 状态变更为 &amp;lsquo;FIX PACKAGED&amp;rsquo;；在 2022-12-14，PVE员工宣布支持将内核升级到 6.1&lt;/p></description></item><item><title>OpenWrt 桥接充当交换机</title><link>https://blog.hellowood.dev/posts/openwrt-%E6%A1%A5%E6%8E%A5%E5%85%85%E5%BD%93%E4%BA%A4%E6%8D%A2%E6%9C%BA/</link><pubDate>Tue, 21 Mar 2023 21:33:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E6%A1%A5%E6%8E%A5%E5%85%85%E5%BD%93%E4%BA%A4%E6%8D%A2%E6%9C%BA/</guid><description>&lt;h2 id="需求背景">需求背景&lt;/h2>
&lt;p>使用的路由器只有 3 个 LAN 口，在购入 NAS 后网口捉襟见肘，并且 NAS 不支持 Wi-Fi，因此需要更多的网口支持设备连接&lt;/p>
&lt;p>路由器是小米的 Redmi AX6000， 支持WiFi 6E，协商速度能达到2400Mbps，但却只有千兆的网口；因为家里的两台电脑和 NAS 都是 2.5G 的网口和 WiFi6E 的无线网卡，想要 NAS 高速读写就需要 2.5G 以上的交换机；但是 2.5G 的交换机价格都在 400+，性价比不高&lt;/p>
&lt;p>日常将四网口的 N5105 作为 HomeLab 的服务器使用，只有一个网口连接到路由器，其他三个网口空闲；因此想将 N5105 作为交换机，用于连接 NAS 和电脑；有三种方案：&lt;/p>
&lt;ol>
&lt;li>路由器和 N5105 做链路聚合，NAS连接到 N5105，电脑通过 WiFi 访问；速度能达到 2000Mbps，不过这样额外占用了两个网口，但是好处是所有的支持 WiFi6 的设备都能高速访问 NAS&lt;/li>
&lt;li>不做链路聚合，这样能够多三个 2.5G 的网口；NAS 和电脑都通过网线连接到 N5105，通过网线连接的设备均能以 2.5G 的速度访问 NAS&lt;/li>
&lt;li>为 N5105 添加 WiFi6E 无线网卡，并启用混杂模式，NAS 通过网线连接到 N5105，电脑通过 WiFi 访问 NAS；所有支持 WiFi6 的设备可以 2400Mbps 的速度访问 NAS；但是需要额外购买一张 WiFi6 的无线网卡，并且设备需要连接到 N5150 的 WiFi网络上&lt;/li>
&lt;/ol>
&lt;p>基于以上考虑，不做链路聚合成本最低且能扩展网口，添加 WiFi6 网卡效果最好；因为手头没有 WiFi6 的网卡，因此先通过不做链路聚合的方式实现&lt;/p></description></item><item><title>OpenWrt 在 PVE 中以虚拟机方式安装</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-pve-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 20 Mar 2023 21:35:17 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-pve-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="下载镜像">下载镜像&lt;/h2>
&lt;ul>
&lt;li>下载镜像&lt;/li>
&lt;/ul>
&lt;p>在 &lt;a href="https://openwrt.org/zh/downloads">https://openwrt.org/zh/downloads&lt;/a> 选择稳定发行版，然后选择需要下载的版本；这里使用当前最新的 22.03.3 版本，使用&lt;a href="https://mirrors.aliyun.com/openwrt/">阿里云 OpenWrt 镜像&lt;/a>进行下载&lt;/p>
&lt;p>选择下载 &lt;code>generic-ext4-combined-efi.img.gz&lt;/code> 这个压缩文件，用于 bios 引导&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-ima-download.png" alt="homelab-openwrt-esxi-ima-download.png">&lt;/p>
&lt;ul>
&lt;li>解压&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>gunzip&lt;/code> 命令解压 &lt;code>gz&lt;/code> 压缩文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gunzip openwrt-22.03.3-x86-64-generic-ext4-combined-efi.img.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将下载的镜像解压后得到 &lt;code>img&lt;/code>格式的文件&lt;/p>
&lt;h2 id="虚拟机配置">虚拟机配置&lt;/h2>
&lt;h3 id="创建虚拟机">创建虚拟机&lt;/h3>
&lt;ol>
&lt;li>创建虚拟机，输入名称&lt;/li>
&lt;li>操作系统这里选择 &amp;ldquo;不使用任何介质&amp;rdquo;&lt;/li>
&lt;li>磁盘这里，选择左侧删除按钮，将磁盘删除；因为会将 img 文件导入作为磁盘，因此这里不需要&lt;/li>
&lt;li>按需配置 CPU 和内存；通常 1核和 512M就已经足够了&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-configuration.png" alt="homelab-openwrt-pve-init-configuration.png">&lt;/p>
&lt;h3 id="添加硬盘">添加硬盘&lt;/h3>
&lt;ul>
&lt;li>上传 img 镜像&lt;/li>
&lt;/ul>
&lt;p>选择 local - ISO镜像，将解压后的 img 文件上传到 PVE&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-upload-img.png" alt="homelab-openwrt-pve-init-upload-img.png">&lt;/p>
&lt;p>等待上传完成，记录上传后的地址，即 target file 后面的路径，需要在导入时使用&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-upload-img-result.png" alt="homelab-openwrt-pve-init-upload-img-result.png">&lt;/p>
&lt;ul>
&lt;li>将 img 镜像导入为虚拟磁盘&lt;/li>
&lt;/ul>
&lt;p>打开 PVE 的 shell，执行导入命令，将 img 作为虚拟磁盘，导入到 106 虚拟机（即刚才创建的虚拟机的 vmid）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qm importdisk &lt;span style="color:#d19a66">106&lt;/span> /var/lib/vz/template/iso/openwrt-22.03.3-x86-64-generic-ext4-combined-efi.img local-lvm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-pve-init-convert-img-to-disk.png" alt="homelab-openwrt-pve-init-convert-img-to-disk.png">&lt;/p></description></item><item><title>树莓派 4b 使用 CSI 摄像头</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-csi-%E6%91%84%E5%83%8F%E5%A4%B4/</link><pubDate>Sat, 11 Mar 2023 21:38:25 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-csi-%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>&lt;p>树莓派 4b 支持通过 USB 或者摄像头 CSI 接口连接摄像头，因此可以使用树莓派 4b 作为监控&lt;/p>
&lt;p>基于安装了 Ubuntu Server 22.04 LTS 的树莓派 4b 进行测试&lt;/p>
&lt;p>带有红外补光灯的摄像头功率大概5-7w左右，因此使用树莓派 4b 连接时需要有 5V3A 的电源，否则当开启摄像头后树莓派会不断重启&lt;/p>
&lt;h2 id="接入摄像头">接入摄像头&lt;/h2>
&lt;h3 id="连接摄像头">连接摄像头&lt;/h3>
&lt;p>如图所示，通过排线连接摄像头和树莓派（图片来自 &lt;a href="https://projects.raspberrypi.org/en/projects/getting-started-with-picamera">Getting started with the Camera Module&lt;/a>）&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-connect.jpeg" alt="raspberrypi-4b-camara-setup-connect.jpeg">&lt;/p>
&lt;h3 id="开启摄像头">开启摄像头&lt;/h3>
&lt;p>开启摄像头需要先安装 &lt;code>raspi-config&lt;/code> 软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install -y raspi-config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行 &lt;code>raspi-config&lt;/code>，选择用户 &lt;code>pi&lt;/code> 进行配置；&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-enable-user-pi-0.png" alt="raspberrypi-4b-camara-setup-enable-user-pi-0.png">&lt;/p>
&lt;p>接着选择第三个接口配置&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-enable-interface-1.png" alt="raspberrypi-4b-camara-setup-enable-interface-1.png">&lt;/p>
&lt;p>然后选择第一个，配置摄像头，选择开启即可；开启完成后，需要关闭树莓派，连接摄像头并重新开机&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-4b-camara-setup-enable-camare-2.png" alt="raspberrypi-4b-camara-setup-enable-camare-2.png">&lt;/p>
&lt;h3 id="检查摄像头信息">检查摄像头信息&lt;/h3>
&lt;ul>
&lt;li>检查连接状态&lt;/li>
&lt;/ul>
&lt;p>重启后检查设备连接状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vcgencmd get_camera
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">supported&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#dcaeea">detected&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>1, libcamera &lt;span style="color:#dcaeea">interfaces&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回信息提示检查到了一个摄像头并且支持该摄像头&lt;/p>
&lt;ul>
&lt;li>查看摄像头信息&lt;/li>
&lt;/ul>
&lt;p>查看摄像头信息需要使用 &lt;code>v4l-utils&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install -y v4l-utils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>v4l-utils&lt;/code> 列出设备&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>v4l2-ctl --list-devices
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bcm2835-codec-decode &lt;span style="color:#c7bf54">(&lt;/span>platform:bcm2835-codec&lt;span style="color:#c7bf54">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video31
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/media1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bcm2835-isp &lt;span style="color:#c7bf54">(&lt;/span>platform:bcm2835-isp&lt;span style="color:#c7bf54">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video14
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video15
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video21
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video23
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/media0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/media2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mmal service 16.1 &lt;span style="color:#c7bf54">(&lt;/span>platform:bcm2835-v4l2-0&lt;span style="color:#c7bf54">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /dev/video0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中的 &lt;code>/dev/video0&lt;/code> 就是通过排线连接的摄像头&lt;/p></description></item><item><title>树莓派 4b 使用摄像头推送流到 RTMP 服务器</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8E%A8%E9%80%81%E6%B5%81%E5%88%B0-rtmp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 11 Mar 2023 21:36:47 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8E%A8%E9%80%81%E6%B5%81%E5%88%B0-rtmp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>使用树莓派 4b，基于 Ubuntu 22.04，将摄像头的监控内容推送到 RTMP 服务器，用于其他服务从 RTMP 获取视频，进行视频分析和事件告警ss
树莓派摄像头使用排线进行连接，通过 ffmpeg 将视频流推送到 &lt;a href="https://ossrs.io/lts/zh-cn/docs/v4/doc/introduction">SRS&lt;/a> 服务器（SRS是一个简单高效的实时视频服务器，支持RTMP/WebRTC/HLS/HTTP-FLV/SRT/GB28181）&lt;/p>
&lt;p>树莓派连接摄像头可以参考 &lt;a href="https://blog.hellowood.dev">树莓派 4b 使用摄像头&lt;/a>&lt;/p>
&lt;h2 id="安装-ffmpeg">安装 ffmpeg&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get update &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> apt-get install -y ffmpeg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-srs">安装 SRS&lt;/h2>
&lt;p>SRS 使用 Docker Compose 进行部署；用于处理 ffmpeg 推送的视频流&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">srs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#63c381">&amp;#34;registry.cn-hangzhou.aliyuncs.com/ossrs/srs:4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#63c381">&amp;#34;srs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">srs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;1935:1935&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;1985:1985&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8080:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;./data:/srs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-ffmpeg-推送流到-srs">使用 ffmpeg 推送流到 SRS&lt;/h2>
&lt;p>通过 ffmpeg 将视频内容推送到 SRS&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ffmpeg -f v4l2 -input_format mjpeg -video_size 1280x720 -framerate &lt;span style="color:#d19a66">30&lt;/span> -i /dev/video0 -c:v libx264 -preset veryfast -tune zerolatency -b:v 2M -minrate 2M -maxrate 2M -bufsize 1M -g &lt;span style="color:#d19a66">60&lt;/span> -an -f flv rtmp://192.168.2.5/live/livestream
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其各个参数含义如下：&lt;/p></description></item><item><title>Docker 开启外部 HTTP 访问</title><link>https://blog.hellowood.dev/posts/docker-%E5%BC%80%E5%90%AF%E5%A4%96%E9%83%A8-http-%E8%AE%BF%E9%97%AE/</link><pubDate>Sun, 05 Mar 2023 21:39:29 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E5%BC%80%E5%90%AF%E5%A4%96%E9%83%A8-http-%E8%AE%BF%E9%97%AE/</guid><description>&lt;p>在监控容器时，通常需要从 Docker 中获取容器的信息，如果监控服务和其他的服务在同一台宿主机上，通常可以直接通过挂载 socket 的方式进行获取；但是为了监控的准确性，通常会将监控服务和其他服务分开部署，因此需要从外部获取 Docker 容器信息；&lt;/p>
&lt;p>Docker 除了支持 socket 方式之外，还支持通过 HTTP 的方式获取容器的信息&lt;/p>
&lt;h2 id="开启-http-访问">开启 HTTP 访问&lt;/h2>
&lt;p>HTTP 访问是通过在启动 Docker 服务的时候添加参数的方式开启的；需要在 docker service 的启动命令中添加 &lt;code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock&lt;/code>，即允许通过 HTTP 方式和 socket 方式访问&lt;/p>
&lt;h3 id="配置启动参数">配置启动参数&lt;/h3>
&lt;p>该文件是 docker 服务的定义文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi /usr/lib/systemd/system/docker.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Service 的 &lt;code>ExecStart&lt;/code> 命令中添加 &lt;code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">[&lt;/span>Service&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">Type&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>notify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># the default is not to use systemd for cgroups because the delegate issues still&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># exists and systemd currently does not support the cgroup feature set required&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># for containers run by docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">ExecStart&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>/usr/bin/dockerd -H fd:// --containerd&lt;span style="color:#c7bf54">=&lt;/span>/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">ExecReload&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>/bin/kill -s HUP &lt;span style="color:#dcaeea">$MAINPID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">TimeoutStartSec&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">RestartSec&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">Restart&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>always
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重启-docker-服务">重启 Docker 服务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl daemon-reload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl restart docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="检查端口">检查端口&lt;/h3>
&lt;p>通过 telnet 命令检查 2375 端口，可以访问说明端口正常&lt;/p></description></item><item><title>Proxmox VE 安装初始化</title><link>https://blog.hellowood.dev/posts/proxmox-ve-%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Mon, 27 Feb 2023 21:41:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/proxmox-ve-%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;blockquote>
&lt;p>Proxmox VE，是一个开源的服务器虚拟化环境Linux发行版。Proxmox VE基于Debian，使用基于Ubuntu的定制内核，包含安装程序、网页控制台和命令行工具，并且向第三方工具提供了REST API - 维基百科&lt;/p>
&lt;/blockquote>
&lt;p>PVE 和 Vmware ESXi 类似，都支持虚拟化环境；PVE 基于 Linux，扩展性更强&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>下载 ISO 镜像&lt;/li>
&lt;/ul>
&lt;p>PVE的镜像可在 PVE 官网的&lt;a href="https://www.proxmox.com/en/downloads/category/iso-images-pve">下载页面&lt;/a>进行下载&lt;/p>
&lt;ul>
&lt;li>制作启动盘&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;a href="https://rufus.ie/zh/">Rufus&lt;/a> 或者 &lt;a href="https://www.balena.io/etcher">balenaEtcher&lt;/a> 将下载的 ISO 镜像写入到 U 盘或者移动硬盘中&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-write-iso.png" alt="homelab-pve-install-write-iso.png">&lt;/p>
&lt;ul>
&lt;li>插入主机并启动&lt;/li>
&lt;/ul>
&lt;p>启动后选择安装 Proxmox VE&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-start-install.png" alt="homelab-pve-install-start-install.png">&lt;/p>
&lt;ul>
&lt;li>设置 IP 地址&lt;/li>
&lt;/ul>
&lt;p>IP地址用于后续访问，可以通过DHCP获取，也可以设置为固定的 IP&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-set-ip.png" alt="homelab-pve-install-set-ip.png">&lt;/p>
&lt;ul>
&lt;li>安装完成&lt;/li>
&lt;/ul>
&lt;p>安装完成后，会提示重启&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-completed.png" alt="homelab-pve-install-completed.png">&lt;/p>
&lt;ul>
&lt;li>登录&lt;/li>
&lt;/ul>
&lt;p>重启完成后，在命令行会提示访问的地址，默认端口是 8006，&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-login-page.png" alt="homelab-pve-install-login-page.png">&lt;/p>
&lt;p>通过 HTTPS 协议访问；如 &lt;a href="https://192.168.17.129:8006">https://192.168.17.129:8006&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-pve-install-web-login-page.png" alt="homelab-pve-install-web-login-page.png">&lt;/p></description></item><item><title>Traefik 使用 Google GitHub OAuth 进行鉴权登陆</title><link>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-google-github-oauth-%E8%BF%9B%E8%A1%8C%E9%89%B4%E6%9D%83%E7%99%BB%E9%99%86/</link><pubDate>Wed, 15 Feb 2023 21:42:38 +0800</pubDate><guid>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-google-github-oauth-%E8%BF%9B%E8%A1%8C%E9%89%B4%E6%9D%83%E7%99%BB%E9%99%86/</guid><description>&lt;p>在使用 Traefik 作为 Homelab 的网关时，考虑到部分服务涉及隐私，因此需要限制用户登陆后才能使用；&lt;/p>
&lt;p>Traefik 支持使用 HTTP 中间件，可以将鉴权信息转发给其他服务进行鉴权，因此，使用 &lt;a href="https://github.com/thomseddon/traefik-forward-auth">https://github.com/thomseddon/traefik-forward-auth&lt;/a> 作为鉴权的服务，该服务默认使用 Google OAuth，因此，可以通过 Google 账号登陆访问内部服务；该服务也支持任何 OAuth 标准的认证服务，如 GitHub，微软等&lt;/p>
&lt;h2 id="申请-oauth-应用">申请 OAuth 应用&lt;/h2>
&lt;p>在 &lt;a href="https://console.cloud.google.com/apis/credentials">Google Cloud&lt;/a> 创建新的应用，选择 &amp;ldquo;APIs and Services&amp;rdquo; -&amp;gt; &amp;ldquo;Credentials&amp;rdquo;，选择 &amp;ldquo;CREATE CREDENTIALS&amp;rdquo; -&amp;gt; &amp;ldquo;OAuth Client ID&amp;rdquo;，应用类型选择 &amp;ldquo;Web Application&amp;rdquo;，填写名称，重定向 URL 为要访问的 URL + 认证路径，traefik-forward-auth 的认证路径为 &lt;code>/_oauth&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-traefik-sso-google-oauth-apply-oauth-app.png" alt="homelab-traefik-sso-google-oauth-apply-oauth-app.png">&lt;/p>
&lt;p>确认后会提示 Client ID 和 Client Secret，需要保存好，作为 traefik-forward-auth 配置&lt;/p>
&lt;h2 id="为特定的服务添加认证">为特定的服务添加认证&lt;/h2>
&lt;p>认证特定的服务，需要启动 traefik-forward-auth 服务，然后为要认证的服务添加中间件即可；如这里给 whoami 服务添加了名为 &lt;code>traefik-forward-auth&lt;/code> 的 HTTP 中间件&lt;/p>
&lt;p>这里通过将域名指向本地的方式进行测试，如在 &lt;code>/etc/hosts&lt;/code> 中添加 &lt;code>whoami.homelab.io&lt;/code>相关的域名作为 whoami 服务的域名：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/hosts&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>127.0.0.1 whoami.homelab.io
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>需要将 &lt;code>GOOGLE_CLIENT_ID&lt;/code> 和 &lt;code>GOOGLE_CLIENT_SECRET&lt;/code> 替换为自己申请的&lt;/p></description></item><item><title>使用培正 PZEM 004T 和 HomeAssistant 监测家庭用电情况</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%9F%B9%E6%AD%A3-pzem-004t-%E5%92%8C-homeassistant-%E7%9B%91%E6%B5%8B%E5%AE%B6%E5%BA%AD%E7%94%A8%E7%94%B5%E6%83%85%E5%86%B5/</link><pubDate>Sun, 12 Feb 2023 21:44:13 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E5%9F%B9%E6%AD%A3-pzem-004t-%E5%92%8C-homeassistant-%E7%9B%91%E6%B5%8B%E5%AE%B6%E5%BA%AD%E7%94%A8%E7%94%B5%E6%83%85%E5%86%B5/</guid><description>&lt;p>培正 PZEM-004T 是一个电能监控模块，能够监测家庭用电的电压，电流，频率，实时功率，耗电量等信息；支持通过 UART 协议进行读取；因此可以使用 ESP8266 或者 ESP32 等模块，将用电信息添加到 HomeAssistant 中&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-homeassistant-power-monitor-pannel.png" alt="homelab-homeassistant-power-monitor-pannel.png">&lt;/p>
&lt;h2 id="硬件">硬件&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>硬件&lt;/th>
 &lt;th>价格&lt;/th>
 &lt;th>数量&lt;/th>
 &lt;th>备注&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>peacefair PZEM-004T 100A 主机+开合式CT&lt;/td>
 &lt;td>42&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>电表，建议使用开合式CT，不需要改动电路&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>220V 转 5V1A 供电模块&lt;/td>
 &lt;td>8&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>用于为培正电表和 3v 模块供电&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>5V 转 3.3V 供电模块&lt;/td>
 &lt;td>3.5&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>用于为 ESP-01S 模块供电&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>40P杜邦线母对母&lt;/td>
 &lt;td>2.6&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>用于连接所有的模块&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>40P杜邦线母对公&lt;/td>
 &lt;td>2.6&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>用于连接所有的模块&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>##1. ESP-01S 刷入 esphome 固件&lt;/p>
&lt;h3 id="运行-esphome-容器">运行 esphome 容器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#63c381">&amp;#34;esphome&amp;#34;&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 6052:6052 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -e &lt;span style="color:#dcaeea">TZ&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>Asia/Shanghai &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --hostname&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#63c381">&amp;#34;esphome&amp;#34;&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v ~/esphome/config:/config &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --privileged &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> esphome/esphome
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="刷入固件">刷入固件&lt;/h3>
&lt;p>启动后访问 &lt;a href="http://localhost:6052/">http://localhost:6052/&lt;/a>，选择添加设备，完整配置文件如下：&lt;/p></description></item><item><title>使用 PowerCLI 的 Docker 容器自行构建 ESXi 镜像</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-powercli-%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E8%87%AA%E8%A1%8C%E6%9E%84%E5%BB%BA-esxi-%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 07 Feb 2023 21:45:26 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-powercli-%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E8%87%AA%E8%A1%8C%E6%9E%84%E5%BB%BA-esxi-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>参考 &lt;a href="https://helloworlde.github.io/2022/08/11/N5105-%E6%9E%84%E5%BB%BA-Esxi-%E9%95%9C%E5%83%8F/">N5105 构建 ESXi 镜像&lt;/a>，在使用 ESXi 7 时，基于 Windows 系统，使用 PowerCLI 为 ESXi 7 的镜像添加了 NVMe 和 Intel I225V 网卡的驱动；&lt;/p>
&lt;p>虽然当时已经可以在 Linux 或者 MacOS 上使用 PowerShell，但是因为 PowerCLI 不支持 Core 版本的 PowerShell，会提示 &lt;code>Exception: The VMware.ImageBuilder module is not currently supported on the Core edition of PowerShell&lt;/code>；导致只能使用 Windows 构建，对于没有 Windows 系统的用户非常不方便。&lt;/p>
&lt;p>PowerCLI 新版本已经支持了 Core 版本的 PowerShell，因此可以通过在 Linux/MacOS/Docker 等平台直接构建 ESXi 镜像；&lt;/p>
&lt;p>本次使用 PowerCLI 的 Docker 容器，为 ESXi 8 镜像添加 NVMe 和网卡驱动&lt;/p>
&lt;h2 id="1-下载所需的镜像和驱动">1. 下载所需的镜像和驱动&lt;/h2>
&lt;h3 id="11-申请-esxi-授权">1.1 申请 ESXi 授权&lt;/h3>
&lt;p>ESXi 需要先注册申请，等待人工审核通过后就可以下载免费版本；如果没有任何反馈，可以点击申请页下面的 &lt;a href="https://www.vmware.com/support/us_support.html">Contact us&lt;/a> 提工单给 VMWare；&lt;/p></description></item><item><title>技嘉 B660M AORUS PRO AX 安装黑苹果</title><link>https://blog.hellowood.dev/posts/%E6%8A%80%E5%98%89-b660m-aorus-pro-ax-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</link><pubDate>Fri, 30 Dec 2022 21:47:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%8A%80%E5%98%89-b660m-aorus-pro-ax-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</guid><description>&lt;h3 id="系统配置">系统配置&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>类型&lt;/th>
 &lt;th>明细&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>主板&lt;/td>
 &lt;td>技嘉 B660M AORUS PRO AX DDR4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CPU&lt;/td>
 &lt;td>12th Gen Intel(R) Core(TM) i9-12900K&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>内存&lt;/td>
 &lt;td>2 x Kingston 16GB 3200MHz DDR4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>显卡&lt;/td>
 &lt;td>憾讯 AMD RX 6600 8GB&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>硬盘&lt;/td>
 &lt;td>Lexar 512G Nvme SSD&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>声卡&lt;/td>
 &lt;td>Realtek ALC897&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>无线/蓝牙&lt;/td>
 &lt;td>Broadcom BCM943602CS, Intel Wi-Fi 6E AX210&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>有线网口&lt;/td>
 &lt;td>Intel Ethernet I-225V&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>BIOS 版本&lt;/td>
 &lt;td>F21&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-hackintosh-b660m-macos-ventura-info.png" alt="homelab-hackintosh-b660m-macos-ventura-info.png">&lt;/p>
&lt;h3 id="功能支持">功能支持&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">功能&lt;/th>
 &lt;th style="text-align: left">状态&lt;/th>
 &lt;th style="text-align: left">备注｜&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">CPU&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">CPU型号能够正常识别，架构未识别，使用 Intel Power Gadget 可以跑满功率&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">内存&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">运行频率正常，卡槽识别正常&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">核心显卡&lt;/td>
 &lt;td style="text-align: left">❗&lt;/td>
 &lt;td style="text-align: left">仅安装核心显卡时可以输出，但是非常卡顿&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">独立显卡&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">免驱动的显卡安装后即可正常使用&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">WiFi &amp;amp; 蓝牙&lt;/td>
 &lt;td style="text-align: left">⚠️&lt;/td>
 &lt;td style="text-align: left">BCM943602CS 下功能均正常，WiFi协商速度为867Mbps，但是实际不到400Mbps；AX210 WiFi可以连接，但是无法切换到其他 WiFi，可能和驱动支持不完善有关，不能同时使用&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">网口&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">协商速度 2.5G，实测接近&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">音频&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">音频接口可以正常使用&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">USB&lt;/td>
 &lt;td style="text-align: left">⚠️&lt;/td>
 &lt;td style="text-align: left">USB 2.0/3.2 接口正常识别，Type C接口速度正常，部分接口未识别&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">散热&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">正常识别风扇，散热正常&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">整机功率&lt;/td>
 &lt;td style="text-align: left">⚠️&lt;/td>
 &lt;td style="text-align: left">待机情况下功率较 Win 高50%&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">系统升级&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">可以正常升级&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">iCloud相关&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">可以正常使用&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">通用控制/AirDrop/屏幕镜像或扩展&lt;/td>
 &lt;td style="text-align: left">✅&lt;/td>
 &lt;td style="text-align: left">需要使用 BCM943602CS&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">睡眠/唤醒&lt;/td>
 &lt;td style="text-align: left">⚠️&lt;/td>
 &lt;td style="text-align: left">睡眠后无法重新点亮屏幕，硬件未休眠&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h1 id="安装">安装&lt;/h1>
&lt;h2 id="1-刻录-macos-镜像">1. 刻录 macOS 镜像&lt;/h2>
&lt;h3 id="11-从-app-store-下载-ventura">1.1 从 App Store 下载 Ventura&lt;/h3>
&lt;p>在 App Store 或&lt;a href="https://www.apple.com/us/search/macOS?src=serp">在线的 App Store&lt;/a> 搜索 Ventura 并安装&lt;/p></description></item><item><title>Intel NUC 9 安装黑苹果</title><link>https://blog.hellowood.dev/posts/intel-nuc-9-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</link><pubDate>Thu, 08 Dec 2022 21:51:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/intel-nuc-9-%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</guid><description>&lt;ul>
&lt;li>为什么要用黑苹果&lt;/li>
&lt;/ul>
&lt;p>手里有两台 MacBook Pro，分别是 18年的 i9 16G版本和20年的 i7 16G版本，升级到 Ventura 版本后响应变慢，同时公司的监控和通讯软件占用了大量内存，出现了严重的卡顿，切换应用等待三四秒之后才能操作；因为 MBP 无法升级内存，并且新款的 Mac 性价比并不高，因此，想通过黑苹果组建一台可以升级内存的电脑；&lt;/p>
&lt;p>黑苹果的中文教程有很多，但是不少都是引流到公众号或者QQ群，下载镜像或相关软件都需要收费；这些人利用信息差，将免费和开源的拿去收费，吃相实在难看&lt;/p>
&lt;ul>
&lt;li>NUC 9&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.intel.cn/content/www/cn/zh/products/sku/190107/intel-nuc-9-extreme-kit-nuc9i9qnx/specifications.html?erpm_id=12169418_ts1669688200770">NUC 9&lt;/a> 是 Intel 在 2020 年第一季度推出的 ITX 主机，代号 Ghost Canyon（幽灵峡谷），因为与同期的 MBP 配置类似，可以安装黑苹果&lt;/p>
&lt;p>恰巧 NUC 9 最近降价了，i5版本的价格在 2k 左右，i9版本4k左右；单独购买 i9 的计算卡大概2k，因此购买 i5版本，然后自己更换 i9版本的算力卡性价比更高；兼容的软硬件参考 &lt;a href="https://compatibleproducts.intel.com/ProductDetails?EPMID=190107&amp;amp;erpm_id=12169418_ts1669688262169">兼容硬件列表&lt;/a>&lt;/p>
&lt;p>黑苹果兼容的显卡并不多，主要以 AMD 为主，参考&lt;a href="https://www.zp0719.com/hackintoshgpu">黑苹果免驱显卡大全2022年9月最新版 更新至RX 6900 XT&lt;/a>；并且 NUC9 只支持长度不超过 20cm 的显卡，因此，能够选购的显卡非常有限（如憾讯的 6600/6600XT 竞技版，华擎的 6600/6600XT 单风扇版等）&lt;/p>
&lt;ul>
&lt;li>黑苹果安装流程&lt;/li>
&lt;/ul>
&lt;p>黑苹果的安装过程大致分为四步，首先刻录 macOS 移动磁盘，然后将机型适用的 EFI 写入到移动磁盘，修改 BIOS 设置，接着启动安装macOS，安装完成后将 EFI 写入到系统即可；这里基于 macOS 进行安装，NUC 9 是 i5版本，没有安装独立显卡&lt;/p></description></item><item><title>Windows 使用 Yuzu 模拟 Nintendo Switch</title><link>https://blog.hellowood.dev/posts/windows-%E4%BD%BF%E7%94%A8-yuzu-%E6%A8%A1%E6%8B%9F-nintendo-switch/</link><pubDate>Sun, 20 Nov 2022 21:51:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/windows-%E4%BD%BF%E7%94%A8-yuzu-%E6%A8%A1%E6%8B%9F-nintendo-switch/</guid><description>&lt;p>&lt;a href="https://yuzu-emu.org/">yuzu&lt;/a> 是一款开源的 Ninetendo Swithc 模拟器，支持在 Linux 或者 Windows 平台运行，能够模拟 Switch 平台的大部分游戏&lt;/p>
&lt;p>这里使用 Windows 平台进行安装，测试后发现 yuzu 能够较好的体验 Switch 的游戏，对于性能较好的机器，可以流畅运行游戏，并且没有 Switch 切换场景或者读取游戏时长时间的加载等待；对于没有 Switch 的可以作为尝鲜体验的工具，不过实际游戏效果体验不如 Switch 好&lt;/p>
&lt;h2 id="安装-yuzu-模拟器">安装 yuzu 模拟器&lt;/h2>
&lt;p>进入 yuzu 的&lt;a href="https://yuzu-emu.org/downloads/">下载&lt;/a>页面，发现要求先安装 &lt;a href="https://aka.ms/vs/17/release/vc_redist.x64.exe">Microsoft Visual C++&lt;/a>，没有下载选项；只有当安装完 Microsoft Visual C++ 后，才会出现下载按钮&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/nintendo-switch-yuzu-download-page-2.png" alt="nintendo-switch-yuzu-download-page-2.png">&lt;/p>
&lt;p>下载后安装&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/nintendo-switch-yuzu-install.png" alt="nintendo-switch-yuzu-install.png">&lt;/p>
&lt;h2 id="配置密钥">配置密钥&lt;/h2>
&lt;p>安装完成后进入，会发现提示密钥缺失；需要使用 Switch 设备的密钥，这些key 是用来解密 XCI 或者 NCA 格式的游戏文件的；&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/nintendo-switch-yuzu-miss-keys.png" alt="nintendo-switch-yuzu-miss-keys.png">&lt;/p>
&lt;p>如果有 Switch ，可以参考 &lt;a href="https://yuzu-emu.org/wiki/dumping-decryption-keys-from-a-switch-console/">Dumping Decryption Keys from a Switch Console&lt;/a> 进行导出；&lt;/p>
&lt;p>如果没有 Switch，可以使用 &lt;a href="https://raw.githubusercontent.com/MostlyWhat/prod.keys/main/prod.keys">https://github.com/MostlyWhat/prod.keys/blob/main/prod.keys&lt;/a>&lt;/p>
&lt;p>在 yuzu 模拟器菜单中，选择文件-打开 yuzu 文件夹，将下载到的文件保存到 keys 目录下，然后关闭并重新打开 yuzu 模拟器；再次打开后没有提示缺失密钥，说明密钥已经生效&lt;/p>
&lt;h2 id="导入游戏">导入游戏&lt;/h2>
&lt;ul>
&lt;li>下载游戏&lt;/li>
&lt;/ul>
&lt;p>yuzu 支持大部分的游戏，模拟器需要 XCI 或者 NCA 格式的游戏文件，可以从 &lt;a href="https://yuzu-emu.org/game/">Game Compatibility List
&lt;/a> 检测是否支持；如何从 Switch 中导出游戏文件参考 &lt;a href="https://yuzu-emu.org/help/quickstart/#dumping-cartridge-games">Dumping Cartridge Games&lt;/a>&lt;/p></description></item><item><title>使用 MacOS 制作 MacOS 的 ISO 镜像</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-macos-%E5%88%B6%E4%BD%9C-macos-%E7%9A%84-iso-%E9%95%9C%E5%83%8F/</link><pubDate>Sun, 20 Nov 2022 21:51:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-macos-%E5%88%B6%E4%BD%9C-macos-%E7%9A%84-iso-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>需要在虚拟机中使用 macOS，但是没有 ISO 镜像，可以使用 macOS 系统制作 ISO 镜像&lt;/p>
&lt;h2 id="在-app-store-下载安装器">在 APP Store 下载安装器&lt;/h2>
&lt;p>首先需要在 App Store 下载对应版本的系统安装器，在 App Store 只能搜索到当前或更新版本的安装器，如果想使用旧版本，可以通过 Google 或&lt;a href="https://www.apple.com/us/search/macOS?src=serp">在线的 App Store&lt;/a> 搜索对应版本并跳转到 App Store 进行下载；如 &lt;a href="https://apps.apple.com/us/app/macos-monterey/id1576738294?mt=12">macOS Monterey&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-macos-iso-search-in-app-store.png" alt="homelab-macos-iso-search-in-app-store.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-macos-iso-download-from-app-store.png" alt="homelab-macos-iso-download-from-app-store.png">&lt;/p>
&lt;p>随后会跳转到软件更新中自动下载，下载完成后在应用里可以看到 &amp;ldquo;安装 macOS Monterey&amp;rdquo;&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-macos-iso-downloading.png" alt="homelab-macos-iso-downloading.png">&lt;/p>
&lt;h2 id="制作-iso-镜像">制作 ISO 镜像&lt;/h2>
&lt;p>安装完成后，可以通过命令行制作 ISO 镜像&lt;/p>
&lt;h3 id="1-创建-dmg-镜像文件">1 创建 dmg 镜像文件&lt;/h3>
&lt;p>通过 &lt;code>hdiutil&lt;/code> 在 &lt;code>/tmp&lt;/code> 目录下创建一个临时的 Monterey dmg 文件，文件大小要大于等于安装器的大小，并指定挂载的数据卷名称为 &lt;code>Monterey&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hdiutil create -o /tmp/Monterey -size 14500m -volname Monterey -layout SPUD -fs HFS+J
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将会提示创建 dmg 文件成功 ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>created: /tmp/Monterey.dmg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-将-dmg-挂载为数据卷">2 将 dmg 挂载为数据卷&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hdiutil attach /tmp/Monterey.dmg -noverify -mountpoint /Volumes/Monterey
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>挂载到 disk2&lt;/p></description></item><item><title>HomeAssistant 基于容器搭建与使用</title><link>https://blog.hellowood.dev/posts/homeassistant-%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 13 Nov 2022 21:51:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/homeassistant-%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>&lt;a href="https://www.home-assistant.io/">HomeAssistant&lt;/a> 是免费开源的智能家庭自动化控制系统，支持接入多种平台，如 HomeKit，米家，ESPHome 等；国内大部分应用场景是将米家的设备通过 HomeAssistant 接入苹果生态，或者使用第三方组件，监控水电气等&lt;/p>
&lt;h2 id="基于容器搭建">基于容器搭建&lt;/h2>
&lt;p>HomeAssistant 支持多种运行方式，如以OS方式运行，或者使用二进制或容器等方式运行；容器等方式更方便管理&lt;/p>
&lt;h3 id="使用-docker-直接运行">使用 Docker 直接运行&lt;/h3>
&lt;p>在 Linux 服务器使用容器启动 HomeAssistant，HomeAssistant 的所有配置和数据都在 &lt;code>/config&lt;/code> 目录下，为了持久化数据，将当前路径挂载到 HomeAssistant 的 config 目录下；因为 HomeAssistant 需要访问局域网内的其他设备，因此，建议容器的网络模式使用 &lt;code>host&lt;/code>，或者通过 &lt;code>macvlan&lt;/code> 驱动为其单独创建网络&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#63c381">&amp;#34;home-assistant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v &lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">pwd&lt;/span>&lt;span style="color:#98c379">}&lt;/span>:/config &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /etc/localtime:/etc/localtime:ro &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --net&lt;span style="color:#c7bf54">=&lt;/span>host &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> homeassistant/home-assistant
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-docker-compose-启动">使用 Docker Compose 启动&lt;/h3>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>version: &lt;span style="color:#98c379">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> homeassistant:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container_name: homeassistant
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image: &lt;span style="color:#63c381">&amp;#34;homeassistant/home-assistant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> privileged: &lt;span style="color:#ef8383">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> network_mode: host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> restart: always
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> healthcheck:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test: &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#63c381">&amp;#34;CMD&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;wget&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-q&amp;#34;&lt;/span>,&lt;span style="color:#63c381">&amp;#34;--spider&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;http://localhost:8123&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> interval: 15s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeout: 10s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> retries: &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_period: 90s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;./config:/config&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动后，通过访问服务器的 8123 接口，使用用户名 &lt;code>admin&lt;/code> 和密码 &lt;code>admin&lt;/code> 访问即可进入 HomeAssistant&lt;/p></description></item><item><title>OpenWrt 使用 Lets Encrypt 证书开启 HTTPS 访问</title><link>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-lets-encrypt-%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AF-https-%E8%AE%BF%E9%97%AE/</link><pubDate>Fri, 11 Nov 2022 21:57:52 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-lets-encrypt-%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AF-https-%E8%AE%BF%E9%97%AE/</guid><description>&lt;p>OpenWrt 支持开启 HTTPS 访问，但是自签发的证书无法通过 Chrome 等浏览器的认证；因此需要使用 Let&amp;rsquo;s Encrypt 申请证书；通过 uHTTPd 应用配置证书，使用 DNS 验证的方式申请证书&lt;/p>
&lt;p>配置 HTTPS 访问需要使用到公网 IP 和域名，需要确认已经可以通过公网访问，并且可以修改域名的解析&lt;/p>
&lt;h2 id="安装-uhttpd">安装 uHTTPd&lt;/h2>
&lt;p>uHTTPd 用于 OpenWrt 配置 Web 服务，如端口，证书等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-app-uhttpd luci-i18n-uhttpd-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后即可在服务-uHTTPd 页面查看端口和证书配置&lt;/p>
&lt;h2 id="安装配置-acme">安装配置 ACME&lt;/h2>
&lt;p>&lt;a href="https://letsencrypt.org/zh-cn/docs/client-options/">ACME&lt;/a> 是 Let&amp;rsquo;s Encrypt 官方支持的客户端；OpenWrt 支持使用 ACME 申请证书，在 ACME 应用中添加证书相关配置即可&lt;/p>
&lt;h3 id="安装-acme">安装 ACME&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install acme luci-app-acme luci-i18n-acme-zh-cn acme-dnsapi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后可以在服务-ACME 证书中进行配置&lt;/p>
&lt;h3 id="配置-acme">配置 ACME&lt;/h3>
&lt;h4 id="配置账户信息">配置账户信息&lt;/h4>
&lt;p>首先需要为 ACME 配置邮箱，用于接受证书过期等信息；在 ACME 全局配置-电子邮件帐户添加即可&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-acme-email-config.png" alt="homelab-openwrt-acme-email-config.png">&lt;/p>
&lt;h4 id="配置证书">配置证书&lt;/h4>
&lt;ul>
&lt;li>常规设置&lt;/li>
&lt;/ul>
&lt;p>在证书配置中，添加一个新的配置；这里使用阿里云作为 DNS 解析；&lt;/p></description></item><item><title>Clash 使用 Docker 部署</title><link>https://blog.hellowood.dev/posts/clash-%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2/</link><pubDate>Wed, 26 Oct 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/clash-%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2/</guid><description>&lt;p>使用 Clash Premium 版本请参考 &lt;a href="https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2clash-premium/">使用 Docker 部署 Clash Premium&lt;/a>&lt;/p>
&lt;p>在一些场景下无法使用 Clash 客户端进行代理，也无法使用软路由，这时候可以由一台服务器运行 Clash，作为其他客户端的代理；同时 Clash 支持以 Docker 容器的方式运行，方便部署和运维&lt;/p>
&lt;h2 id="订阅格式转换">订阅格式转换&lt;/h2>
&lt;p>机场提供的订阅可能无法被 Clash 直接使用，或者分流配置不合理，需要转换格式；可以使用在线的订阅转换工具，如 &lt;a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/&lt;/a>等，也可以使用开源的服务自行搭建；&lt;/p>
&lt;p>为了安全和隐私，可以基于 &lt;a href="https://github.com/CareyWang/sub-web">https://github.com/CareyWang/sub-web&lt;/a> 和 &lt;a href="https://github.com/tindy2013/subconverter">https://github.com/tindy2013/subconverter&lt;/a> 服务搭建，分别是前端和后端服务&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">subweb&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">careywong/subweb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">subweb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">subweb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#d19a66">18080&lt;/span>:&lt;span style="color:#d19a66">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">TZ=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">subconverter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">tindy2013/subconverter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">subconverter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostname&lt;/span>: &lt;span style="color:#98c379">subconverter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restart&lt;/span>: &lt;span style="color:#98c379">unless-stopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#d19a66">25500&lt;/span>:&lt;span style="color:#d19a66">25500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">TZ=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后，选择进阶模式，填写后端地址为 subconverter 容器的地址；选择远程配置（推荐 Ytoo/NyanCAT，配置更全面），然后填入订阅链接生成即可得到新的订阅链接&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-clash-proxy-config-convert-to-clash.png" alt="homelab-clash-proxy-config-convert-to-clash.png">&lt;/p>
&lt;ul>
&lt;li>自定义配置&lt;/li>
&lt;/ul>
&lt;p>如果有自定义配置，可以指定远程配置，参考&lt;a href="https://github.com/tindy2013/subconverter/blob/master/README-cn.md#%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE">外部配置&lt;/a>，指定 &lt;code>clash_rule_base&lt;/code> 配置模板；不过该方式比较麻烦，自己使用可以直接通过更改 subconverter 默认配置的方式实现；&lt;/p>
&lt;p>subconverter 默认的配置是 &lt;code>/base/pref.toml&lt;/code>文件，其中指定了 clash 的配置文件模板为 &lt;code>clash_rule_base = &amp;quot;base/all_base.tpl&amp;quot;&lt;/code>，所以修改 &lt;code>base/all_base.tpl&lt;/code> 文件即可&lt;/p></description></item><item><title>小米 Redmi AX6S(AX3200) 刷入 OpenWrt 及使用体验</title><link>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3-redmi-ax6s-ax3200-%E5%88%B7%E5%85%A5-openwrt-%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Sun, 09 Oct 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%B0%8F%E7%B1%B3-redmi-ax6s-ax3200-%E5%88%B7%E5%85%A5-openwrt-%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>&lt;p>买了小米 Redmi AX3000 路由器后发现是 RA81 型号，这个型号目前无法刷入 OpenWrt；但是因为当前使用的 OpenWrt 作为旁路由的方式并不稳定，所以想更换一个可以刷入 OpenWrt 的路由器&lt;/p>
&lt;p>一番搜索之后发现 Redmi AX6S 相对更稳定，且已有 OpenWrt 的正式版本固件，因此又购入了一台新的 AX6S，准备刷入 OpenWrt 作为主路由使用&lt;/p>
&lt;p>AX6S有 RB01 和 RB03 两个版本，硬件完全相同；国内售卖的基本都是 RB03，可以通过刷入开发版固件的方式开启 telnet，RB01 只能拆机后通过 UART 接口写入的方式开启 telnet&lt;/p>
&lt;h2 id="刷入-openwrt">刷入 OpenWrt&lt;/h2>
&lt;h3 id="将固件升级为测试版">将固件升级为测试版&lt;/h3>
&lt;p>将固件升级为测试版是为了开启 telnet，方便输入 OpenWrt 的固件；可以通过 &lt;code>telnet 192.168.31.1&lt;/code> 测试，通常是没有开启的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>telnet 192.168.31.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Trying 192.168.31.1...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>telnet: connect to address 192.168.31.1: Connection refused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>telnet: Unable to connect to remote host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>下载测试版固件并升级&lt;/li>
&lt;/ol>
&lt;p>首先下载测试版本固件&lt;a href="https://github.com/YangWang92/AX6S-unlock/raw/master/miwifi_rb03_firmware_stable_1.2.7.bin">miwifi_rb03_firmware_stable_1.2.7 &lt;/a>；在初始化路由器配置后，进入到路由器控制台，选择升级；
&lt;img src="https://img.hellowood.dev/picture/homelab-miwifi-ax6s-openwrt-upgrade.png" alt="homelab-miwifi-ax6s-openwrt-upgrade.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-miwifi-ax6s-openwrt-upgrade-ongoing.png" alt="homelab-miwifi-ax6s-openwrt-upgrade-ongoing.png">&lt;/p>
&lt;p>升级完成后路由器会重启，页面有水印提示 &lt;code>Only For Test&lt;/code>；
&lt;img src="https://img.hellowood.dev/picture/homelab-miwifi-ax6s-openwrt-upgrade-complted.png" alt="homelab-miwifi-ax6s-openwrt-upgrade-complted.png">&lt;/p>
&lt;p>此时使用 telnet 测试会发现已经可以登陆了&lt;/p></description></item><item><title>OpenWrt 使用 SmartDNS</title><link>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-smartdns/</link><pubDate>Tue, 27 Sep 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E4%BD%BF%E7%94%A8-smartdns/</guid><description>&lt;p>&lt;a href="https://pymumu.github.io/smartdns/">SmartDNS&lt;/a> 是由国内用户开发的本地 DNS 服务器，从多个上游获取 DNS 结果，并将访问速度最快的地址返回给客户端；SmartDNS 可以运行在多个平台，如 Linux, OpenWrt 等&lt;/p>
&lt;p>在 OpenWrt 中运行 SmartDNS，将其作为 dnsmasq 的上游或作为唯一的 DNS 服务器，用于提升 DNS 解析速度&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>SmartDNS 的安装非常简单，使用 opkg 命令即可安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install smartdns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-app-smartdns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-i18n-smartdns-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-smartdns">配置 SmartDNS&lt;/h2>
&lt;p>安装完成后，在服务-SmartDNS 常规配置中，选择启用 SmartDNS，然后添加上游 DNS 服务器（也可以直接在命令行修改 &lt;code>/etc/config/smartdns&lt;/code> 配置文件）&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-dns-smartdns-upstream.png" alt="homelab-openwrt-dns-smartdns-upstream.png">&lt;/p>
&lt;p>这样，SmartDNS 会运行在路由器的 6053 端口上&lt;/p>
&lt;h2 id="配置-dnsmasq">配置 Dnsmasq&lt;/h2>
&lt;p>OpenWrt 默认的 DHCP 和 DNS 服务由 Dnsmasq 提供，所以需要配置 SmartDNS 作为 Dnsmasq 的上游 DNS 服务器&lt;/p>
&lt;p>在网络-DHCP/DNS -常规设置中，添加 DNS 转发，将 SmartDNS 作为 Dnsmasq 的上游
&lt;img src="https://img.hellowood.dev/picture/homelab-oepnwrt-smart-dns-as-dnsmasq-upstream.png" alt="homelab-oepnwrt-smart-dns-as-dnsmasq-upstream.png">&lt;/p></description></item><item><title>OpenWrt-监控</title><link>https://blog.hellowood.dev/posts/openwrt-%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 26 Sep 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E7%9B%91%E6%8E%A7/</guid><description>&lt;p>OpenWrt 默认提供了内存，连接等信息，但是这些信息不够完善，不能全面的反馈 OpenWrt 的状态；可以通过使用第三方的软件来实现监控，常用的有 &lt;a href="https://openwrt.org/packages/pkgdata/netdata">Netdata&lt;/a> 和 &lt;a href="https://openwrt.org/packages/pkgdata/prometheus">Prometheus&lt;/a>&lt;/p>
&lt;h2 id="通过-netdata-监控">通过 Netdata 监控&lt;/h2>
&lt;p>Netdata 提供了可以在 OpenWrt 直接查看的 UI，可以查看包括 CPU，负载，内存，网络，硬盘，防火墙等常用信息的实时监控&lt;/p>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install netdata
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成之后，即可在 OpenWrt 的 19999 端口查看监控数据&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-metrics-netdata.png" alt="homelab-openwrt-metrics-netdata.png">&lt;/p>
&lt;ul>
&lt;li>通过 Prometheus 抓取数据&lt;/li>
&lt;/ul>
&lt;p>Netdata 默认只能查看实时数据，如果想查询历史数据或者只关心特定指标，可以通过 Prometheus 抓取，使用 Grafana 查看；Netdata 支持 Prometheus 格式的数据抓取，路径是&lt;code>/api/v1/allmetrics?format=prometheus_all_hosts&lt;/code>；如 &lt;a href="http://192.168.2.2:19999/api/v1/allmetrics?format=prometheus_all_hosts">http://192.168.2.2:19999/api/v1/allmetrics?format=prometheus_all_hosts&lt;/a>&lt;/p>
&lt;p>Prometheus 任务配置：需要注意，要添加参数 &lt;code>format=prometheus_all_hosts&lt;/code> 才可以抓取到 Prometheus 格式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#e06c75">job_name&lt;/span>: &lt;span style="color:#98c379">openwrt-netdata&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">honor_timestamps&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scrape_interval&lt;/span>: &lt;span style="color:#98c379">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scrape_timeout&lt;/span>: &lt;span style="color:#98c379">5s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metrics_path&lt;/span>: &lt;span style="color:#98c379">/api/v1/allmetrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scheme&lt;/span>: &lt;span style="color:#98c379">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">format&lt;/span>: [&lt;span style="color:#63c381">&amp;#34;prometheus_all_hosts&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#e06c75">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#d19a66">192.168.2.2&lt;/span>:&lt;span style="color:#d19a66">19999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通过-grafana-监控">通过 Grafana 监控&lt;/h2>
&lt;p>OpenWrt 提供了 Prometheus 数据导出的软件，安装软件后便可以配置 Prometheus 抓取数据&lt;/p>
&lt;ul>
&lt;li>安装软件&lt;/li>
&lt;/ul>
&lt;p>安装需要的 Prometheus 数据导出软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install prometheus-node-exporter-lua &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>prometheus-node-exporter-lua-nat_traffic &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>prometheus-node-exporter-lua-netstat &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>prometheus-node-exporter-lua-openwrt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 OpenWrt 有无线网络，可以安装无线网络数据 的抓取&lt;/p></description></item><item><title>Docker 使用 NFS 作为数据卷存储</title><link>https://blog.hellowood.dev/posts/docker-%E4%BD%BF%E7%94%A8-nfs-%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AD%98%E5%82%A8/</link><pubDate>Thu, 22 Sep 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E4%BD%BF%E7%94%A8-nfs-%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AD%98%E5%82%A8/</guid><description>&lt;p>在搭建 HomeLab 的过程中，出现因虚拟机故障导致容器挂载在虚拟机上的数据丢失的问题，因此，将数据挂载在虚拟机上仍然存在风险；同时为了将计算和数据分离，HomeLab 所在的服务器只做计算，将数据存储转移到 NAS上；因此，使用 NFS 作为 Docker 的数据卷，将数据挂载到远程的 NAS 存储中&lt;/p>
&lt;p>Docker 支持 Samba/NFS 等协议的远程存储&lt;/p>
&lt;h2 id="创建-docker-nfs-数据卷">创建 Docker NFS 数据卷&lt;/h2>
&lt;p>通过 docker 命令创建 NFS 的数据卷，在创建时，指定驱动为 &lt;code>local&lt;/code>，类型是 &lt;code>nfs&lt;/code>，同时指定地址和协议版本，以及服务端的挂载路径，名称为 &lt;code>nginx-volume&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker volume create --driver &lt;span style="color:#ef8383">local&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>--opt &lt;span style="color:#dcaeea">type&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>nfs &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>--opt &lt;span style="color:#dcaeea">o&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#dcaeea">addr&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>192.168.2.10,nolock,vers&lt;span style="color:#c7bf54">=&lt;/span>4,soft,rw &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>--opt &lt;span style="color:#dcaeea">device&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>:/workspaces/data/docker/nginx &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>nginx-volume
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 &lt;code>nginx-volume&lt;/code> 信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker volume inspect nginx-volume
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;CreatedAt&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;2022-09-22T14:48:26+08:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Driver&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;local&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Labels&amp;#34;&lt;/span>: &lt;span style="color:#c7bf54">{}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Mountpoint&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;/var/lib/docker/volumes/nginx-volume/_data&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Name&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;nfs-volume&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Options&amp;#34;&lt;/span>: &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;device&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;:/workspaces/data/docker/nginx&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;o&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;addr=192.168.2.10,nolock,vers=4,soft,rw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;nfs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#63c381">&amp;#34;Scope&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="容器中使用-nfs-数据卷">容器中使用 NFS 数据卷&lt;/h2>
&lt;h3 id="在容器中挂载">在容器中挂载&lt;/h3>
&lt;p>以 Nginx 为例，挂载 &lt;code>nginx-volume&lt;/code> 到容器中；也可以使用 &lt;code>-v nginx-volume:/data&lt;/code>的方式挂载，这两个命令的区别在于如果挂载的数据卷不存在，&lt;code>-v&lt;/code> 会创建一个，而 &lt;code>--mount&lt;/code>会报错&lt;/p></description></item><item><title>Esxi 挂载物理磁盘到虚拟机</title><link>https://blog.hellowood.dev/posts/esxi-%E6%8C%82%E8%BD%BD%E7%89%A9%E7%90%86%E7%A3%81%E7%9B%98%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 12 Sep 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/esxi-%E6%8C%82%E8%BD%BD%E7%89%A9%E7%90%86%E7%A3%81%E7%9B%98%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>&lt;p>在使用 NAS 时，需要将硬盘直接挂载到 NAS 服务所在的虚拟机上；Esxi 支持将整块物理磁盘作为虚拟磁盘进行挂载&lt;/p>
&lt;h2 id="将物理磁盘添加为虚拟磁盘">将物理磁盘添加为虚拟磁盘&lt;/h2>
&lt;p>在将磁盘连接到设备上之后，需要使用 SSH 登录 Esxi 进行操作&lt;/p>
&lt;ul>
&lt;li>开启 SSH 登录&lt;/li>
&lt;/ul>
&lt;p>登录管理界面，在主机 - 操作 -服务中启用 SSH；启用成功后使用用户名密码登录到该机器&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-esxi-mount-disk-to-vm.png" alt="homelab-esxi-mount-disk-to-vm.png">&lt;/p>
&lt;ul>
&lt;li>查看磁盘名称&lt;/li>
&lt;/ul>
&lt;p>通常磁盘名称以 &lt;code>t10.&lt;/code>开头，如这里需要的机械硬盘名称为 &lt;code>ATA_____Hitachi_HTS545050A7E380_______________________TE85113RHUAM6R&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ls -alh /vmfs/devices/disks/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#d19a66">1976983165&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#d19a66">2&lt;/span> root root &lt;span style="color:#d19a66">512&lt;/span> Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#d19a66">16&lt;/span> root root &lt;span style="color:#d19a66">512&lt;/span> Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- &lt;span style="color:#d19a66">1&lt;/span> root root 465.8G Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 t10.ATA_____Hitachi_HTS545050A7E380_______________________TE85113RHUAM6R
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- &lt;span style="color:#d19a66">1&lt;/span> root root 476.9G Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39 t10.NVMe____J.ZAO_5_SERIES_512GB_SSD________________091A000005275A3A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- &lt;span style="color:#d19a66">1&lt;/span> root root 100.0M Sep &lt;span style="color:#d19a66">12&lt;/span> 16:39
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建挂载目录&lt;/li>
&lt;/ul>
&lt;p>将需要挂载的磁盘挂载到特定的路径下，如 &lt;code>datastore1/hdd&lt;/code> 目录，首先需要创建 &lt;code>hdd&lt;/code>这个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /vmfs/volumes/datastore1/hdd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>挂载为虚拟磁盘&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>vmkfstools&lt;/code>命令，将物理磁盘作为虚拟磁盘挂载到指定路径&lt;/p></description></item><item><title>Ubuntu Server 22 虚拟机空间扩容</title><link>https://blog.hellowood.dev/posts/ubuntu-server-22-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</link><pubDate>Fri, 09 Sep 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-server-22-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</guid><description>&lt;blockquote>
&lt;p>使用 Esxi 安装 Ubuntu Server 后，发现分配的 20G 磁盘空间不够，通过 Esxi 控制台将磁盘扩容到 40G，重启后还需要手动调整&lt;/p>
&lt;/blockquote>
&lt;h3 id="检查未分区空间">检查未分区空间&lt;/h3>
&lt;p>修改了磁盘大小后，新增的空间状态是未分区，首先检查是否新增成功&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>fdisk&lt;/code> 查看&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>fdisk&lt;/code> 命令查看 &lt;code>/dev/sda&lt;/code>设备情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>fdisk /dev/sda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入 &lt;code>F&lt;/code> 显示未分区的空间大小&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Command &lt;span style="color:#c7bf54">(&lt;/span>m &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#ef8383">help&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>: F
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Unpartitioned space /dev/sda: &lt;span style="color:#d19a66">20971520&lt;/span> B, &lt;span style="color:#d19a66">167772160&lt;/span> bytes, &lt;span style="color:#d19a66">0&lt;/span> sectors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Units: sectors of &lt;span style="color:#d19a66">1&lt;/span> * &lt;span style="color:#dcaeea">512&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sector size &lt;span style="color:#c7bf54">(&lt;/span>logical/physical&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">512&lt;/span> bytes / &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="将未分区空间添加到已有分区">将未分区空间添加到已有分区&lt;/h3>
&lt;p>需要先将这部分空间添加到系统挂载的对应分区&lt;/p>
&lt;ol>
&lt;li>查找根目录挂载的设备&lt;/li>
&lt;/ol>
&lt;p>通过 &lt;code>df&lt;/code> 命令查看空间，发现挂载到根&lt;code>/&lt;/code>目录的设备是 &lt;code>/dev/mapper/ubuntu--vg-ubuntu--lv&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>df -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 796M 1.5M 794M 1% /run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mapper/ubuntu--vg-ubuntu--lv 19G 16G 1.6G 92% /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 3.9G &lt;span style="color:#d19a66">0&lt;/span> 3.9G 0% /dev/shm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 5.0M &lt;span style="color:#d19a66">0&lt;/span> 5.0M 0% /run/lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/sda2 2.0G 127M 1.7G 7% /boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/sda1 1.1G 5.3M 1.1G 1% /boot/efi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 796M 4.0K 796M 1% /run/user/0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>lsblk&lt;/code> 查看分区信息，发现 &lt;code>ubuntu--vg-ubuntu--lv&lt;/code>是在&lt;code>/dev/sda3&lt;/code>下的逻辑分区，所以需要将未分区的空间添加到 &lt;code>/sda/sda3&lt;/code>分区下&lt;/p></description></item><item><title>使用 Pi-hole 作为 DNS 和 DHCP 服务器</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-pi-hole-%E4%BD%9C%E4%B8%BA-dns-%E5%92%8C-dhcp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 05 Sep 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-pi-hole-%E4%BD%9C%E4%B8%BA-dns-%E5%92%8C-dhcp-%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>在使用 OpenWrt 的过程中，因为会经常修改 OpenWrt 的配置，导致 OpenWrt 出问题重新安装后没有来得及备份的配置丢失；其中以 IP 地址静态分配最多&lt;/p>
&lt;p>另外，因为需要通过 DNS 做广告拦截，所以需要使用 Pi-hole 作为 DNS 服务器，但是 Pi-hole 提供的 DNS 服务都是国外的，所以为了快速解析国内的 DNS，需要使用 Smartdns 作为 Pi-hole DNS 的上游；DNS 的解析在 Smartdns 中提供&lt;/p>
&lt;h2 id="配置-docker-macvlan-网络">配置 Docker macvlan 网络&lt;/h2>
&lt;p>因为在同一个服务器上提供了多个服务，因此存在端口冲突问题，Pi-hole 和 Smartdns 都需要 53 端口用于提供 DNS，而且 53 端口默认被 Ubuntu Server 使用；而且局域网中的设备需要访问 DHCP 服务，因此为了避免冲突，需要使用 &lt;code>macvlan&lt;/code> 作为 Docker 网络的驱动&lt;/p>
&lt;p>&lt;code>macvlan&lt;/code> 是一种网卡虚拟化技术，允许在同一个物理网卡上配置多个 MAC 地址，即多个 interface，每个 interface 可以配置自己的 IP&lt;/p>
&lt;p>通过 &lt;code>macvlan&lt;/code>，可以为每个 Docker 容器提供特定的 IP 地址，用于局域网内的设置直接通过容器的 IP 地址访问&lt;/p>
&lt;ul>
&lt;li>开启网卡混杂模式&lt;/li>
&lt;/ul>
&lt;p>默认情况下网卡只会将发送给本机的包传递到上层服务，其他的包一律丢弃；开启混杂模式后机器的网卡能够接收所有流经过它的数据流，而无论其目的地址是否是它，因此，为了能让 Docker 容器能正常收到其他设备的请求，需要开启网卡混杂模式；需要注意 &lt;code>eth0&lt;/code> 要和实际的网卡名称一致&lt;/p></description></item><item><title>Ubuntu 22 设置静态 IP</title><link>https://blog.hellowood.dev/posts/ubuntu-22-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip/</link><pubDate>Mon, 05 Sep 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-22-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81-ip/</guid><description>&lt;p>在虚拟机中启动了 Ubuntu Server 作为日常使用的服务器，同时将 DHCP 和 DNS 相关的服务也运行在这个 Ubuntu Server上；&lt;/p>
&lt;p>因为在 DHCP 服务中使用IP 和 Mac 绑定的方式分配 IP，因此 Ubuntu Server 是以 DHCP 方式获取 IP地址；但是在一次意外重启后，无法访问 Ubuntu Server，查看网络发现是因为网卡没有分配到 IP，这是 Ubuntu Server 依赖 DHCP 服务分配 IP，但是 DHCP 服务因为宿主机没有网络所以无法访问，造成死循环；因此通过为 Ubuntu Server 设置静态 IP 的方式，避免重启后再次出现这样的问题&lt;/p>
&lt;h2 id="配置静态-ip">配置静态 IP&lt;/h2>
&lt;h3 id="1-查找网卡">1 查找网卡&lt;/h3>
&lt;p>通常情况下，有线网卡名称通常为 &lt;code>eth0&lt;/code>，无线网卡名称通常为 &lt;code>wlan0&lt;/code>；&lt;/p>
&lt;p>通过 &lt;code>ifconfig&lt;/code> 命令查看网卡信息，返回的 &lt;code>ens160&lt;/code> 就是有线网卡&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ifconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker0: &lt;span style="color:#dcaeea">flags&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt; mtu &lt;span style="color:#d19a66">1500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ether 02:42:e2:0c:77:47 txqueuelen &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>Ethernet&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX packets &lt;span style="color:#d19a66">0&lt;/span> bytes &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>0.0 B&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> frame &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX packets &lt;span style="color:#d19a66">0&lt;/span> bytes &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>0.0 B&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> carrier &lt;span style="color:#d19a66">0&lt;/span> collisions &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ens160: &lt;span style="color:#dcaeea">flags&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu &lt;span style="color:#d19a66">1500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ether 00:0c:29:df:81:93 txqueuelen &lt;span style="color:#d19a66">1000&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>Ethernet&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX packets &lt;span style="color:#d19a66">73618&lt;/span> bytes &lt;span style="color:#d19a66">24761397&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>24.7 MB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> frame &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX packets &lt;span style="color:#d19a66">27757&lt;/span> bytes &lt;span style="color:#d19a66">7800899&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>7.8 MB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> carrier &lt;span style="color:#d19a66">0&lt;/span> collisions &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lo: &lt;span style="color:#dcaeea">flags&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu &lt;span style="color:#d19a66">65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inet 127.0.0.1 netmask 255.0.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inet6 ::1 prefixlen &lt;span style="color:#d19a66">128&lt;/span> scopeid 0x10&amp;lt;host&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loop txqueuelen &lt;span style="color:#d19a66">1000&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>Local Loopback&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RX packets &lt;span style="color:#d19a66">298&lt;/span> bytes &lt;span style="color:#d19a66">48692&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>48.6 KB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> frame &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TX packets &lt;span style="color:#d19a66">298&lt;/span> bytes &lt;span style="color:#d19a66">48692&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>48.6 KB&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TX errors &lt;span style="color:#d19a66">0&lt;/span> dropped &lt;span style="color:#d19a66">0&lt;/span> overruns &lt;span style="color:#d19a66">0&lt;/span> carrier &lt;span style="color:#d19a66">0&lt;/span> collisions &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-修改网络配置">2 修改网络配置&lt;/h3>
&lt;p>Ubuntu 22 的配置文件位置是 &lt;code>/etc/netplan/***.yaml&lt;/code>，通常是 &lt;code>/etc/netplan/00-installer-config.yaml&lt;/code>，也可能是 &lt;code>50-cloud-init.yaml&lt;/code>；&lt;/p></description></item><item><title>Openwrt-DDNS 配置</title><link>https://blog.hellowood.dev/posts/openwrt-ddns-%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 26 Aug 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-ddns-%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>DDNS(Dynamic DNS) 一般用于从外部访问家庭网络内的设备，因为家庭宽带没有固定的 IP 地址，所以通过域名访问时需要动态的更新域名的记录为当前的 IP 地址；实现的原理也比较简单，就是通过定时脚本，调用域名解析商的接口，修改域名的记录&lt;/p>
&lt;p>和大部分路由器一样，OpenWrt 也支持 DDNS，通过 DDNS 的脚本执行动态更新&lt;/p>
&lt;h2 id="申请公网-ip">申请公网 IP&lt;/h2>
&lt;p>DDNS 需要能从外部访问，因此需要有一个公网IP；通常打电话给宽带运营商即可搞定，理由可以是需要访问 NAS、安装监控之类的；通常运营商会提供，获取到之后 PPPOE 重新拨号或者重启光猫路由器即可；通过访问 &lt;a href="https://tool.lu/ip/">https://tool.lu/ip/&lt;/a> 等工具，即可获取到自己的公网 IP&lt;/p>
&lt;p>需要注意的是，22/80/443/8080 等常用端口被运营商限制，无法访问，因此，配置 DDNS 后只能通过域名+端口的方式访问； 如果域名是 &lt;code>.dev&lt;/code> 这类强制要求 HTTPS 访问的域名是无法在浏览器访问的&lt;/p>
&lt;h2 id="配置-ddns">配置 DDNS&lt;/h2>
&lt;h3 id="安装-luci-app-ddns">安装 luci-app-ddns&lt;/h3>
&lt;p>需要安装 luci-app-ddns，用于从 OpenWrt 控制界面修改配置；通过 &lt;code>opkg&lt;/code>命令或者 OpenWrt 控制界面的软件都可以安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-app-ddns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-i18n-ddns-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-ddns-scripts-xxx">安装 ddns-scripts-xxx&lt;/h3>
&lt;p>DDNS 的更新由脚本执行，因此需要安装对应域名服务商的更新脚本；如 godaddy 的脚本是 ddns-scripts-godaddy；官方提供的域名服务商脚本可以从 &lt;a href="https://openwrt.org/packages/index/network---ip-addresses-and-names">Packagesindexnetwork&amp;mdash;ip-addresses-and-names&lt;/a> 查看&lt;/p>
&lt;p>其他域名服务商可以在 GitHub 或恩山无线论坛中查找对应的软件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ddns-scripts-godaddy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置-ddns-1">配置 DDNS&lt;/h3>
&lt;ul>
&lt;li>添加 DDNS 配置&lt;/li>
&lt;/ul>
&lt;p>添加 DDNS 配置，输入 DDNS 配置名称，选择 IPV4 版本，DDNS 服务提供商选择 Godaddy&lt;/p></description></item><item><title>OpenWrt 安装使用 OpenClash</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-openclash/</link><pubDate>Thu, 25 Aug 2022 11:20:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-openclash/</guid><description>&lt;h2 id="clash-使用方式对比">Clash 使用方式对比&lt;/h2>
&lt;p>OpenClash 是 Clash 的 OpenWrt 客户端；Clash 有多种使用方式，如直接使用客户端，或者以容器或进程的方式运行在服务器上，客户端以代理的方式使用，或者运行在 OpenWrt 中等；因为各种因素影响，不同的使用方式有不同的适用场景：&lt;/p>
&lt;ul>
&lt;li>运行客户端&lt;/li>
&lt;/ul>
&lt;p>客户端直接使用的方式最灵活，调整代理方式或策略比较方便，可以选择性的开启或关闭，会代理设备上支持代理的所有流量；适用于手机，电脑等有客户端支持等设备&lt;/p>
&lt;ul>
&lt;li>代理方式使用&lt;/li>
&lt;/ul>
&lt;p>代理方式适用于没有客户端软件的场景，如命令行，为特定的软件配置代理等；这种方式不够灵活，可按需为特定应用或设备配置&lt;/p>
&lt;ul>
&lt;li>运行在OpenWrt&lt;/li>
&lt;/ul>
&lt;p>运行在 OpenWrt 等主路由或旁路由中，可以透明代理整个局域网内的流量，对于一些无法直接操作的 IoT 设备非常方便；也不需要修改客户端任何配置；缺点是如果不稳定会影响局域网内的所有设备&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>需要使用 Clash 配置网络，用于访问特定的资源；&lt;a href="https://github.com/vernesong/OpenClash">OpenClash&lt;/a> 是 Openwrt 的 Clash 客户端；&lt;/p>
&lt;ol>
&lt;li>OpenClash 依赖的是 &lt;code>dnsmasq-full&lt;/code>，所以需要移除默认的&lt;code>dnsmasq&lt;/code>，否则会导致 OpenClash 安装失败&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg remove dnsmasq &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> opkg install dnsmasq-full
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>下载并安装 OpenClash&lt;/li>
&lt;/ol>
&lt;p>可以在 &lt;a href="https://github.com/vernesong/OpenClash">OpenClash&lt;/a> 仓库的 &lt;a href="https://github.com/vernesong/OpenClash/releases">Release&lt;/a> 页面选择对应的版本进行下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/vernesong/OpenClash/releases/download/v0.45.35-beta/luci-app-openclash_0.45.35-beta_all.ipk -O openclash.ipk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install openclash.ipk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>添加 &lt;code>luci-compact&lt;/code> 并重启，否则会提示进入 luci 页面错误&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg install luci luci-base luci-compat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>待重启完成后重新登录控制台，可以在服务菜单中看到 &lt;code>OpenClash&lt;/code>&lt;/p></description></item><item><title>N5105 构建 Esxi 镜像</title><link>https://blog.hellowood.dev/posts/n5105-%E6%9E%84%E5%BB%BA-esxi-%E9%95%9C%E5%83%8F/</link><pubDate>Thu, 11 Aug 2022 10:53:05 +0800</pubDate><guid>https://blog.hellowood.dev/posts/n5105-%E6%9E%84%E5%BB%BA-esxi-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>N5105 使用的是 Intel i225V 网卡，但是VMWare 官方的 Esxi 镜像里并没有该网卡的驱动，安装时会因为没有网卡导致安装失败；另外，因为买了一个国产的光威 NVME 硬盘(千万别买！)，也没有相应的驱动，安装时提示没有硬盘&lt;/p>
&lt;p>经过一番搜索，发现 &lt;a href="https://sysin.org/blog/vmware-esxi-7-u3e-nuc-usb-nvme/#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-313">VMware ESXi 7.0 U3e SLIC 2.6 &amp;amp; Unlocker 集成 Intel NUC 网卡、USB 网卡和 NVMe 驱动 (2022.07 更新)&lt;/a> 里面有一个添加了驱动的镜像文件，但是分享链接是百度网盘，下载完的时候我已经单独构建好了，测试可以使用&lt;/p>
&lt;p>考虑到安全问题，想通过官方的镜像添加驱动的方式自行构建镜像；需要用到 Windows 电脑和 PowerShell；手里没有 Windows 电脑的可以用虚拟机或者申请按时付费的云服务器&lt;/p>
&lt;h2 id="1-下载所需的镜像和驱动">1. 下载所需的镜像和驱动&lt;/h2>
&lt;h3 id="11-申请-esxi-授权">1.1 申请 Esxi 授权&lt;/h3>
&lt;p>Esxi 的软件下载脑洞比较清奇，需要先注册申请，填写个人隐私信息如手机号，住址，公司等，等待三五天人工审核通过后就可以下载免费版本；如果没有任何反馈，可以点击申请页下面的 &lt;a href="https://www.vmware.com/support/us_support.html">Contact us&lt;/a> 提工单给 VMWare；&lt;/p>
&lt;p>可以在 &lt;a href="https://customerconnect.vmware.com/en/downloads/details?downloadGroup=ESXI70U3D&amp;amp;productId=974&amp;amp;rPId=89003">VMware vSphere Hypervisor 7.0 Download Center&lt;/a> 页面申请 7.0 版本的下载；选择 Offline Bundle 的压缩文件&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-esxi-build-image-esxi-download.png" alt="homelab-esxi-build-image-esxi-download.png">&lt;/p>
&lt;h3 id="12-下载-nvme-社区驱动">1.2 下载 NVME 社区驱动&lt;/h3>
&lt;p>从 &lt;a href="https://flings.vmware.com/community-nvme-driver-for-esxi">Community NVMe Driver for ESXi&lt;/a> 下载 NVME 驱动
&lt;img src="https://img.hellowood.dev/picture/homelab-esxi-build-image-nvme-driver.png" alt="homelab-esxi-build-image-nvme-driver.png">&lt;/p></description></item><item><title>Openwrt-初始化配置</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 08 Aug 2022 11:44:37 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="语言配置">语言配置&lt;/h2>
&lt;p>Openwrt 默认语言为英文，如果需要安装中文，可以直接通过 &lt;code>opkg&lt;/code> 安装；随后登录控制台即可看到语言已经变为中文；如果没有改变，可以在System-System-Language 中选择简体中文&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install luci-i18n-base-zh-cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-language.png" alt="homelab-openwrt-init-config-language.png">&lt;/p>
&lt;h2 id="时间设置">时间设置&lt;/h2>
&lt;p>在系统-系统-常规设置中，将时区设置为 &lt;code>Asia/Honkong&lt;/code> ，选择保存并应用即可生效&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-time.png" alt="homelab-openwrt-init-config-time.png">&lt;/p>
&lt;h2 id="主题配置">主题配置&lt;/h2>
&lt;p>Openwrt 默认的主题为 Bootstrap，菜单在上边栏，使用不习惯，可以安装 &lt;a href="https://github.com/jerrykuku/luci-theme-argon">Argon&lt;/a> 主题&lt;/p>
&lt;p>可以在 GitHub &lt;a href="https://github.com/jerrykuku/luci-theme-argon">Argon&lt;/a> 仓库的 &lt;a href="https://github.com/jerrykuku/luci-theme-argon/releases">Release&lt;/a> 页面选择对应的版本进行下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/jerrykuku/luci-theme-argon/releases/download/v2.2.9.4/luci-theme-argon-master_2.2.9.4_all.ipk -O argon.ipk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install argon.ipk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-theme.png" alt="homelab-openwrt-init-config-theme.png">&lt;/p>
&lt;h2 id="设置密码">设置密码&lt;/h2>
&lt;p>登录控制台，在系统-管理权页面，选择路由器密码；设置密码之后就可以通过账户 &lt;code>root&lt;/code>和设置的密码进行登录&lt;/p>
&lt;p>同时也可以将本地的公钥添加到 SSH 密钥中，方便登录控制台&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-init-config-password.png" alt="homelab-openwrt-init-config-password.png">&lt;/p></description></item><item><title>Traefik 使用 Let’s Encrypt 申请 HTTPS 证书</title><link>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</link><pubDate>Sun, 07 Aug 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/traefik-%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</guid><description>&lt;p>在 Traefik 中，支持通过 Let&amp;rsquo;s Encrypt 从 ACME &lt;a href="https://doc.traefik.io/traefik/https/acme/">自动申请 HTTPS 证书&lt;/a>&lt;/p>
&lt;h2 id="从-acme-申请证书">从 ACME 申请证书&lt;/h2>
&lt;p>Traefik 申请证书基于 &lt;a href="https://github.com/go-acme/lego">Lego&lt;/a> ，所以同样支持基于 TLS、HTTP、DNS 三种申请方式&lt;/p>
&lt;p>因为要申请的域名没有部署服务，所以基于 DNS 的方式验证；在申请证书时会向域名解析中添加 &lt;code>_acme-challenge&lt;/code>前缀的 TXT 记录用于验证&lt;/p>
&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;ul>
&lt;li>traefik.yaml&lt;/li>
&lt;/ul>
&lt;p>需要向 Traefik 的配置文件中添加 &lt;code>certificatesResolvers&lt;/code> 的配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">certificatesResolvers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">acme&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">email&lt;/span>: &lt;span style="color:#98c379">yourname@mail.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">storage&lt;/span>: &lt;span style="color:#98c379">/etc/traefik/certificates/acme.json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dnsChallenge&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">provider&lt;/span>: &lt;span style="color:#98c379">alidns&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>email&lt;/code>为注册 ACME 的邮箱，&lt;code>storage&lt;/code> 是存储生成的证书内容的文件；&lt;code>dnsChallenge&lt;/code> 指定了以 DNS 的方式验证；&lt;code>provider&lt;/code> 指定域名解析平台，常见的平台参考 &lt;a href="https://doc.traefik.io/traefik/https/acme/#providers">providers&lt;/a>&lt;/p>
&lt;ul>
&lt;li>docker-compose.yaml&lt;/li>
&lt;/ul>
&lt;p>因为使用的是 DNS Provider 是阿里云，所以需要将阿里云的鉴权方式通过环境变量的方式添加到容器中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reverse-proxy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">container_name&lt;/span>: &lt;span style="color:#98c379">reverse-proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">traefik:2.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;--configFile=/etc/traefik/traefik.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;80:80&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;443:443&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8080:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/var/run/docker.sock:/var/run/docker.sock:ro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;/root/workspaces/homelab/traefik/traefik.yml:/etc/traefik/traefik.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">ALICLOUD_ACCESS_KEY=${ALICLOUD_ACCESS_KEY}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">ALICLOUD_SECRET_KEY=${ALICLOUD_SECRET_KEY}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>为服务指定域名&lt;/li>
&lt;/ul>
&lt;p>在服务路由规则中指定域名，这样 Traefik 就会为这个域名自动申请证书；需要开启 TLS 并且指定 &lt;code>certresolver&lt;/code>，名称即为配置文件 &lt;code>certificatesResolvers&lt;/code>中定义的名称，即 &lt;code>defualt&lt;/code>&lt;/p></description></item><item><title>使用 Let’s Encrypt 申请 HTTPS 证书</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</link><pubDate>Wed, 03 Aug 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-lets-encrypt-%E7%94%B3%E8%AF%B7-https-%E8%AF%81%E4%B9%A6/</guid><description>&lt;p>在搭建私有服务器的过程中，需要通过外网访问，因为 .dev 域名要求使用 https，但是域名服务商只提供根域名的证书，为了使子域名也可以使用，所以通过 Let’s Encrypt 申请免费证书&lt;/p>
&lt;p>Let’s Encrypt 是一家免费、开放、自动化的证书颁发机构（CA），旨在尽可能对用户友好的方式免费提供为网站启用 HTTPS（SSL/TLS）所需的数字证书&lt;/p>
&lt;p>因为将域名解析迁移到腾讯云的 DNSPod 下面，所以以 DNSPod 为例，以 DNS 验证的方式，在本地机器上使用命令行申请证书&lt;/p>
&lt;h2 id="安装-lego">安装 Lego&lt;/h2>
&lt;p>Let’s Encrypt 有多种命令行客户端，可以使用官方提到的 &lt;a href="https://certbot.eff.org/">Certbot&lt;/a>；也可以使用 &lt;a href="https://go-acme.github.io/lego/">Lego&lt;/a>，相比 Certbot 支持的域名解析平台更多&lt;/p>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;p>直接使用 Go 命令进行安装，因为本地的 Go 版本是 1.19，所以需要指定版本号使用&lt;code>install&lt;/code>命令安装；如果是低版本的 Go，可以使用 &lt;code>get&lt;/code>的方式安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install github.com/go-acme/lego/v4/cmd/lego@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#低版本 Go 使用 get 方式安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go get -u github.com/go-acme/lego/v4/cmd/lego
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="申请证书">申请证书&lt;/h2>
&lt;h3 id="1-创建-dnspod-token">1. 创建 DNSPod Token&lt;/h3>
&lt;p>通过 DNS 的方式申请，Let’s Encrypt 需要向域名添加 DNS 解析以证明拥有该域名；所以需要域名解析平台的授权，通常是以 Token 或者 AK/SK 的方式进行验证&lt;/p>
&lt;p>在 DNSPod 需要先申请 DNSPod Token，登录控制台后在右上角，我的账号中选择 API 密钥，然后选择 DNSPod Token 进行创建密钥&lt;/p></description></item><item><title>Openwrt-空间扩容</title><link>https://blog.hellowood.dev/posts/openwrt-%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</link><pubDate>Sat, 23 Jul 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</guid><description>&lt;p>Openwrt 默认的空间只有 100M，安装一些软件后空间就被用完了，因此需要对 Openwrt 的硬盘进行扩容&lt;/p>
&lt;p>有多种扩容方式，如新增一块硬盘，以USB挂载的方式扩容；或者修改虚拟机硬盘文件大小的方式扩容；此次通过修改虚拟机硬盘文件大小的方式扩容，这种方式适合新创建的虚拟机&lt;/p>
&lt;h2 id="修改硬盘文件大小">修改硬盘文件大小&lt;/h2>
&lt;p>通过 Esxi 控制台，直接修改挂载的硬盘大小&lt;/p>
&lt;ul>
&lt;li>在 Esxi 修改硬盘大小&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-disk-size.png" alt="homelab-openwrt-esxi-disk-size.png">&lt;/p>
&lt;h2 id="创建新的分区">创建新的分区&lt;/h2>
&lt;ol>
&lt;li>安装 &lt;code>cfdisk&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>需要使用 &lt;code>cfdisk&lt;/code> 创建新的分区，所以需要安装 &lt;code>cfdisk&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install cfdisk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>使用 &lt;code>cfdisk&lt;/code>创建分区&lt;/li>
&lt;/ol>
&lt;p>命令行输入 &lt;code>cfdisk&lt;/code> ，会进入到管理分区页面；可以看到，&lt;code>Free Space&lt;/code>是新添加的硬盘大小&lt;/p>
&lt;ul>
&lt;li>选择 &lt;code>Free Space&lt;/code> 后选择 &lt;code>New&lt;/code>，创建新的分区&lt;/li>
&lt;li>输入 &lt;code>Partition Size&lt;/code>为想要的大小&lt;/li>
&lt;li>如&lt;code>3.9G&lt;/code>，然后回车，此时可以看到挂载了新的分区 &lt;code>/dev/sda3&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-disk-new-partition-a-1.png" alt="homelab-openwrt-esxi-disk-new-partition-a-1.png">&lt;/p>
&lt;p>选择 &lt;code>/dev/sda3&lt;/code>，使用 Tab 选择 &lt;code>Write&lt;/code>并输入 &lt;code>yes&lt;/code>确认
&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-disk-new-partition-a-2.png" alt="homelab-openwrt-esxi-disk-new-partition-a-2.png">&lt;/p>
&lt;ol start="3">
&lt;li>格式化分区&lt;/li>
&lt;/ol>
&lt;p>格式化新增的 &lt;code>/dev/sda3&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkfs.ext4 /dev/sda3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="挂载扩容的空间">挂载扩容的空间&lt;/h2>
&lt;ul>
&lt;li>安装 &lt;code>block-mount&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>挂载新建的分区，需要使用 &lt;code>block-mount&lt;/code>挂载点软件，安装完成后重启 Openwrt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>opkg update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>opkg install block-mount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启完成后访问 Web 页面的 &lt;code>系统&lt;/code>-&lt;code>挂载点&lt;/code>&lt;/p></description></item><item><title>Openwrt 在 Esxi 中以虚拟机方式安装</title><link>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-esxi-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 22 Jul 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/openwrt-%E5%9C%A8-esxi-%E4%B8%AD%E4%BB%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="下载镜像">下载镜像&lt;/h2>
&lt;p>在 &lt;a href="https://downloads.openwrt.org/">https://downloads.openwrt.org/&lt;/a> 选择需要下载的版本，因为 Esxi 使用的是 x86_64 平台，所以需要下载同样版本的镜像；如下载 &lt;a href="https://downloads.openwrt.org/releases/21.02.3/targets/x86/64/">21.02.3&lt;/a> 版本，路径为 &lt;code>(root)/releases/21.02.3/targets/x86/64/&lt;/code>&lt;/p>
&lt;p>选择下载 &lt;code>generic-ext4-combined-efi.img.gz&lt;/code> 这个压缩文件，可以直接通过 EFI 引导&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-ima-download.png" alt="homelab-openwrt-esxi-ima-download.png">&lt;/p>
&lt;h2 id="镜像格式转换">镜像格式转换&lt;/h2>
&lt;p>将下载的镜像解压后得到 &lt;code>img&lt;/code>格式的文件，这个格式无法直接被 Esxi 使用，所以需要通过 &lt;code>QEMU&lt;/code> 软件将格式从 &lt;code>img&lt;/code> 转为 &lt;code>vmdk&lt;/code>&lt;/p>
&lt;ul>
&lt;li>使用 homebrew 安装 QEMU&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install qemu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 &lt;code>img&lt;/code>格式转为&lt;code>vmdk&lt;/code>格式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-img convert -f raw -O vmdk openwrt-21.02.3-x86-64-generic-ext4-combined-efi.img openwrt-21.02.3-x86-64-generic-ext4-combined-efi.vmdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="虚拟机配置">虚拟机配置&lt;/h2>
&lt;ol>
&lt;li>创建虚拟机，选择 Linux 64 位&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-create-vm.png" alt="homelab-openwrt-esxi-create-vm.png">&lt;/p>
&lt;ol start="2">
&lt;li>修改配置&lt;/li>
&lt;/ol>
&lt;p>需要删除硬盘，因为需要使用转换的 &lt;code>vmdk&lt;/code> 格式的文件作为硬盘；内存和 CPU 可以根据机器自行配置&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-create-vm-config.png" alt="homelab-openwrt-esxi-create-vm-config.png">&lt;/p>
&lt;ol start="3">
&lt;li>添加硬盘&lt;/li>
&lt;/ol>
&lt;p>在虚拟机的编辑界面，选择添加硬盘-现有硬盘，将转换后的 &lt;code>vmdk&lt;/code>格式文件上传到相应目录；&lt;/p>
&lt;p>需要注意，Openwrt 默认的硬盘容量只有 100M，安装软件可能空间不够；所以需要扩容，因此先不要选择该文件作为硬盘，需要扩容后才可以添加，否则容量无法修改&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/homelab-openwrt-esxi-create-vm-disk.png" alt="homelab-openwrt-esxi-create-vm-disk.png">&lt;/p>
&lt;ol start="4">
&lt;li>修改硬盘大小&lt;/li>
&lt;/ol>
&lt;p>需要登录到 Esxi 的机器上，或者通过控制台 shell，使用命令行修改&lt;/p>
&lt;ul>
&lt;li>进入到上传文件所在的目录 &lt;code>/vmfs/volumes/datastore1/OpenWrt/&lt;/code>&lt;/li>
&lt;li>然后通过 &lt;code>vmkfstools&lt;/code> 复制一个新的文件，不复制无法扩容&lt;/li>
&lt;li>通过 &lt;code>vmkfstools&lt;/code> 将容量修改 1G&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> /vmfs/volumes/datastore1/OpenWrt/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vmkfstools -i openwrt-21.02.3-x86-64-generic-ext4-combined-efi.vmdk openwrt.vmdk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vmkfstools -X 1G openwrt.vmdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>再次添加硬盘
选择添加现有硬盘，将扩容后的 &lt;code>openwrt.vmdk&lt;/code>作为硬盘文件，保存修改即可&lt;/li>
&lt;/ol>
&lt;p>至此，完成 Openwrt 虚拟机的创建，接下来启动虚拟机即可&lt;/p></description></item><item><title>树莓派 4B 容器方式安装 OpenWrt 作为软路由</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-openwrt-%E4%BD%9C%E4%B8%BA%E8%BD%AF%E8%B7%AF%E7%94%B1/</link><pubDate>Wed, 20 Jul 2022 11:32:08 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-openwrt-%E4%BD%9C%E4%B8%BA%E8%BD%AF%E8%B7%AF%E7%94%B1/</guid><description>&lt;blockquote>
&lt;p>在树莓派 4B，基于 Ubuntu 22.04，使用 Docker 容器的方式运行 Openwrt 作为软路由，基于 &lt;a href="https://github.com/SuLingGG/OpenWrt-Docker">SuLingGG/OpenWrt-Docker&lt;/a> 的方案&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>什么是软路由&lt;/li>
&lt;/ul>
&lt;p>硬路由以特有的硬设备，包括处理器、电源供应、嵌入式软件，提供设定的路由器功能，如常用的路由器；软路由则是指利用台式机或服务器配合软件形成路由解决方案，主要靠软件的设置，达成路由器的功能；&lt;/p>
&lt;p>普通路由器因为硬件性能限制，无法支持长时间处理大量流量，当家中有 NAS 等设备时，通常无法跑满带宽；通过软路由，可以让路由器只处理流量的转发，其他的功能由软路由实现&lt;/p>
&lt;p>通常我们使用软路由用于多线负载、宽带叠加、为局域网内的其他设备过滤广告、自定义 DNS 等扩展功能&lt;/p>
&lt;h2 id="安装依赖">安装依赖&lt;/h2>
&lt;ul>
&lt;li>安装 &lt;a href="https://ubuntu.pkgs.org/21.10/ubuntu-main-arm64/linux-modules-extra-raspi_5.13.0.1008.14_arm64.deb.html">linux-modules-extra-raspi&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>需要保证安装了&lt;code>linux-modules-extra-raspi&lt;/code>，否则会导致在运行容器后出现&lt;code>Error response from daemon: failed to create the macvlan port: operation not supported&lt;/code>错误&lt;/p>
&lt;p>&lt;code>linux-modules-extra-raspi&lt;/code> 是树莓派 Ubuntu Arm 的不常用扩展，Ubuntu 最新的包管理中默认不包含扩展；因此需要单独安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install linux-modules-extra-raspi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装之后需要重启树莓派&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置网络">配置网络&lt;/h2>
&lt;ul>
&lt;li>开启网卡混杂模式&lt;/li>
&lt;/ul>
&lt;p>默认情况下网卡只会将发送给本机的包传递到上层服务，其他的包一律丢弃；开启混杂模式后机器的网卡能够接收所有流经过它的数据流，而无论其目的地址是否是它，一般用于网络分析和路由节点；&lt;/p>
&lt;p>树莓派只有一个有线接口，地址为 &lt;code>eth0&lt;/code>，所以在 &lt;code>eth0&lt;/code> 接口开启混杂模式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo ip link &lt;span style="color:#ef8383">set&lt;/span> eth0 promisc on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行以下命令检查结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ifconfig eth0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>网卡 flag 信息有 &lt;code>PROMISC&lt;/code> 表示开启成功&lt;/p>
&lt;pre tabindex="0">&lt;code>eth0: flags=4419&amp;lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&amp;gt; mtu 1500
inet 192.168.31.2 netmask 255.255.255.0 broadcast 192.168.31.255
inet6 2408:8207:24ac:6fc0::50c prefixlen 128 scopeid 0x0&amp;lt;global&amp;gt;
 inet6 fe80::dea6:32ff:fe5f:b43e prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;
 inet6 2408:8207:24ac:6fc0:dea6:32ff:fe5f:b43e prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;
 ether dc:a6:32:5f:b4:3e txqueuelen 1000 (Ethernet)
 RX packets 2705601 bytes 1502740361 (1.5 GB)
 RX errors 0 dropped 55 overruns 0 frame 0
 TX packets 2314782 bytes 826118897 (826.1 MB)
 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
 ```


## 配置 OpenWrt 容器

1. 创建 `macvlan`

`macvlan` 是一种网卡虚拟化技术，允许在同一个物理网卡上配置多个 MAC 地址，即多个 `interface`，每个 `interface` 可以配置自己的 IP；`macvlan`直接通过以太网的 `interface` 连接到物理网络，因此性能极好

因此，软路由需要使用 `macvlan` 配合混杂模式在容器中实现路由功能

Docker 创建 `macvlan` 时要确定所在的网段，可以在路由器后台进行确认；如小米路由器常用的是 `192.168.31.0/24`网段；在创建网络时需要保证子网网段`subnet`和网关地址`gateway`参数与当前网络一致

```bash
docker network create -d macvlan --subnet=192.168.31.0/24 --gateway=192.168.31.1 -o parent=eth0 macnet
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>创建容器&lt;/li>
&lt;/ol>
&lt;p>创建容器时需要指定网络为刚才创建的 &lt;code>macnet&lt;/code>&lt;/p></description></item><item><title>MacOS Monterey 制作 Windows 启动盘</title><link>https://blog.hellowood.dev/posts/macos-monterey-%E5%88%B6%E4%BD%9C-windows-%E5%90%AF%E5%8A%A8%E7%9B%98/</link><pubDate>Thu, 30 Jun 2022 11:37:22 +0800</pubDate><guid>https://blog.hellowood.dev/posts/macos-monterey-%E5%88%B6%E4%BD%9C-windows-%E5%90%AF%E5%8A%A8%E7%9B%98/</guid><description>&lt;blockquote>
&lt;p>需要在新的电脑安装 Windows 系统，但是手里只有 Mac，所以需要通过 Mac 制作 Windows 启动盘&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>搜到的一些方法，如启动转换助理，或者 &lt;a href="https://www.balena.io/etcher/">balenaEtcher&lt;/a> 等；但是启动转换助理在 Monterey 上不支持写入到外部硬盘；balenaEtcher 提示无法制作 Windows 镜像；又不想只为了制作启动盘单独下一个软件，所以最终通过命令行制作&lt;/p>
&lt;/blockquote>
&lt;h2 id="下载并挂载-windows-iso-镜像">下载并挂载 Windows ISO 镜像&lt;/h2>
&lt;ol>
&lt;li>在微软官方网站下载 &lt;a href="https://www.microsoft.com/software-download/windows11">Windows 镜像&lt;/a>&lt;/li>
&lt;li>挂载 Windows 镜像到 Mac&lt;/li>
&lt;/ol>
&lt;p>使用 &lt;code>hdiutil&lt;/code> 挂载 iso 镜像文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hdiutil mount ~/Downloads/Win10_21H2_Chinese&lt;span style="color:#d26464;font-weight:bold">\(&lt;/span>Simplified&lt;span style="color:#d26464;font-weight:bold">\)&lt;/span>_x64.iso
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回以下结果， 挂载的路径&lt;code>/Volumes/CCCOMA_X64FRE_ZH-CN_DV9&lt;/code>在复制文件时还需要用到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/dev/disk3 /Volumes/CCCOMA_X64FRE_ZH-CN_DV9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="格式化-u-盘">格式化 U 盘&lt;/h3>
&lt;ol>
&lt;li>查找 U 盘路径
使用 &lt;code>diskutil&lt;/code>查看所有挂载的硬盘，可以通过名称及容量查找；如果已经执行上面的命令挂载了 ISO 镜像，且没有其他硬盘，那么路径一般为 &lt;code>/dev/disk3&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>diskutil list | grep external
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回的 &lt;code>dev/disk3&lt;/code> 即为挂载的路径：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/dev/disk3 &lt;span style="color:#c7bf54">(&lt;/span>external, physical&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>格式化 U 盘&lt;/li>
&lt;/ol>
&lt;p>通过 &lt;code>diskutil&lt;/code> 命令，将挂载到 &lt;code>/dev/disk3&lt;/code> 路径的 U 盘格式化，格式为 MBR，并命名为 &lt;code>WINDOWS&lt;/code>&lt;/p></description></item><item><title>树莓派 4b 安装 Kubernetes</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E5%AE%89%E8%A3%85-kubernetes/</link><pubDate>Sat, 24 Apr 2021 22:55:32 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E5%AE%89%E8%A3%85-kubernetes/</guid><description>&lt;p>K3S 是 Rancher 提供的用于边缘硬件的简化版本的 Kubernetes，基本能力和 Kubernetes 接近，适用于 IoT 硬件，支持 x86_64, ARMv7, ARM64 等&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>在 Ubuntu Server 21.04 上安装 K3S&lt;/p>
&lt;h3 id="1-安装-docker">1. 安装 Docker&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update &amp;amp; apt upgrade &amp;amp; apt install docker.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-安装-k3s">2. 安装 K3S&lt;/h3>
&lt;p>登录树莓派所在的机器，执行安装脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -sfL https://get.k3s.io | sh -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后，使用 kubectl 查看集群信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>k3s kubectl get node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 也可以直接使用 kubectl&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl get node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME STATUS ROLES AGE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ubuntu Ready control-plane,master 1h v1.20.6+k3s1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-本地访问集群">3. 本地访问集群&lt;/h3>
&lt;ul>
&lt;li>获取 Kube Config&lt;/li>
&lt;/ul>
&lt;p>默认的 Kubernetes Config 文件是 &lt;code>/etc/rancher/k3s/k3s.yaml&lt;/code>，将该文件内容添加到本地，修改 server 的地址为树莓派的 IP 地址即可&lt;/p></description></item><item><title>树莓派 4b 使用 WiFi 从 SSD Headless 启动</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-wifi-%E4%BB%8E-ssd-headless-%E5%90%AF%E5%8A%A8/</link><pubDate>Sat, 24 Apr 2021 21:21:27 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E4%BD%BF%E7%94%A8-wifi-%E4%BB%8E-ssd-headless-%E5%90%AF%E5%8A%A8/</guid><description>&lt;p>树莓派已经默认支持从 SSD 启动，可以根据官方提供的工具初始化树莓派系统并启动；尝试通过安装 Ubuntu Server，不使用网线、显示器、键盘等，从 SSD 直接启动&lt;/p>
&lt;h2 id="依赖">依赖&lt;/h2>
&lt;ul>
&lt;li>树莓派 4&lt;/li>
&lt;li>Mac&lt;/li>
&lt;li>SSD&lt;/li>
&lt;/ul>
&lt;h2 id="安装-ubuntu-server">安装 Ubuntu Server&lt;/h2>
&lt;h3 id="1-安装-raspberry-pi-imager">1. 安装 Raspberry Pi Imager&lt;/h3>
&lt;p>Raspberry Pi Imager 是官方提供的树莓派镜像写入工具，可以通过 UI 操作，选择树莓派支持的系统，并直接写入到 SSD 或者 SD 卡中&lt;/p>
&lt;p>直接从 &lt;a href="https://www.raspberrypi.org/software/">https://www.raspberrypi.org/software/&lt;/a> 下载 Raspberry Pi Imager，并在 Mac 上安装&lt;/p>
&lt;h3 id="2-写入镜像">2. 写入镜像&lt;/h3>
&lt;p>选择 Ubuntu Server 21.04 64 bit 的镜像，第一次可能需要一些时间下载镜像&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiImagerChooseImage.png" alt="RaspberryPiImagerChooseImage.png">&lt;/p>
&lt;p>插入硬盘后选择要写入的硬盘，并点击写入&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiImagerChooseDisk.png" alt="RaspberryPiImagerChooseDisk.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiImageWriting.png" alt="RaspberryPiImageWriting.png">&lt;/p>
&lt;h3 id="3-配置">3. 配置&lt;/h3>
&lt;p>硬盘镜像写入完成后，会挂载一个名为 &lt;code>system-boot&lt;/code>的目录，进入该目录，修改配置&lt;/p>
&lt;h4 id="挂载文件">挂载文件&lt;/h4>
&lt;p>如果可以直接在 Mac 上修改文件，可以跳过这一步；如果文件是只读的，无法修改，可以将磁盘弹出，然后手动挂载或挂载到其他的机器上修改&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 查找磁盘&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fdisk -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disk /dev/mmcblk0: 59.63 GiB, &lt;span style="color:#d19a66">64021856256&lt;/span> bytes, &lt;span style="color:#d19a66">125042688&lt;/span> sectors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Units: sectors of &lt;span style="color:#d19a66">1&lt;/span> * &lt;span style="color:#dcaeea">512&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sector size &lt;span style="color:#c7bf54">(&lt;/span>logical/physical&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">512&lt;/span> bytes / &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I/O size &lt;span style="color:#c7bf54">(&lt;/span>minimum/optimal&lt;span style="color:#c7bf54">)&lt;/span>: &lt;span style="color:#d19a66">512&lt;/span> bytes / &lt;span style="color:#d19a66">512&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disklabel type: dos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disk identifier: 0x4ec8ea53
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Device Boot Start End Sectors Size Id Type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mmcblk0p1 * &lt;span style="color:#d19a66">2048&lt;/span> &lt;span style="color:#d19a66">526335&lt;/span> &lt;span style="color:#d19a66">524288&lt;/span> 256M c W95 FAT32 &lt;span style="color:#c7bf54">(&lt;/span>LBA&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/mmcblk0p2 &lt;span style="color:#d19a66">526336&lt;/span> &lt;span style="color:#d19a66">6366175&lt;/span> &lt;span style="color:#d19a66">5839840&lt;/span> 2.8G &lt;span style="color:#d19a66">83&lt;/span> Linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要修改的配置就在 &lt;code>/dev/mmcblk0p1&lt;/code> 这个用于 Boot 的目录下&lt;/p></description></item><item><title>gRPC 对冲请求取消流程</title><link>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>当客户端接收到对冲请求集合中的一个完成时，会取消其他的请求，被取消的请求最终会提交一个 CancelClientStreamCommand，发送一个 RST_STEAM 请求；当服务端接受到这个流后，如果监听器还没有关闭，会执行取消上下文的操作，最终将这个请求取消&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-hedging-request-cancel.svg" alt="grpc-hedging-request-cancel.svg">&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;p>当客户端成功接收到响应会，会在 io.grpc.internal.RetriableStream.Sublistener#close 中将成功的流进行提交&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#commit$CommitTask#run&lt;/li>
&lt;/ul>
&lt;p>在提交时，会通过提交 CommitTask 将其他的流取消&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CommitTask&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">Runnable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 遍历保存的枯竭的流，如果不是最后提交的流，则都取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">Substream&lt;/span> &lt;span style="color:#c1abea">substream&lt;/span> : &lt;span style="color:#c1abea">savedDrainedSubstreams&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">substream&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#c1abea">winningSubstream&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">substream&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#c1abea">CANCELLED_BECAUSE_COMMITTED&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果有重试中的，则取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">retryFuture&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">retryFuture&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果有对冲中的，则取消&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">hedgingFuture&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">hedgingFuture&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将当前流从未提交的流中移除&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">postCommit&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.AbstractClientStream#cancel&lt;/li>
&lt;/ul>
&lt;p>使用指定的原因取消流&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">cancel&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">reason&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Preconditions&lt;/span>.&lt;span style="color:#b3d23c">checkArgument&lt;/span>(&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">reason&lt;/span>.&lt;span style="color:#b3d23c">isOk&lt;/span>(), &lt;span style="color:#98c379">&amp;#34;Should not cancel with OK status&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">cancelled&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">abstractClientStreamSink&lt;/span>().&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#c1abea">reason&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.netty.shaded.io.grpc.netty.NettyClientStream.Sink#cancel&lt;/li>
&lt;/ul>
&lt;p>提交取消流的指令&lt;/p></description></item><item><title>gRPC 服务间调用事件流程</title><link>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="调用流程图">调用流程图&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/gRPC%E8%AF%B7%E6%B1%82%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B.svg" alt="gRPC请求事件流程.svg">&lt;/p>
&lt;h2 id="可监听的事件">可监听的事件&lt;/h2>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;h4 id="clientcall">ClientCall&lt;/h4>
&lt;p>客户端调用，用于执行客户端的调用行为&lt;/p>
&lt;ul>
&lt;li>&lt;code>checkStart&lt;/code>：开始调用&lt;/li>
&lt;li>&lt;code>request&lt;/code>：指定发送消息的数量&lt;/li>
&lt;li>&lt;code>sendMessage&lt;/code>：发送消息到缓冲区&lt;/li>
&lt;li>&lt;code>halfClose&lt;/code>：半关闭，会将消息发送给 Server 端&lt;/li>
&lt;li>&lt;code>cancel&lt;/code>：调用失败时取消&lt;/li>
&lt;/ul>
&lt;h4 id="clientcalllistener">ClientCall.Listener&lt;/h4>
&lt;p>调用监听器，监听调用事件&lt;/p>
&lt;ul>
&lt;li>&lt;code>onReady&lt;/code>：流就绪事件，用于非 &lt;code>UNARY&lt;/code> 和 &lt;code>SERVER_STREAM&lt;/code> 的请求&lt;/li>
&lt;li>&lt;code>onHeaders&lt;/code>：当接收到 Server 端返回的 Header 时调用&lt;/li>
&lt;li>&lt;code>onMessage&lt;/code>：当接收到 Server 端返回的 Message 时调用&lt;/li>
&lt;li>&lt;code>onClose&lt;/code>：当流关闭时调用&lt;/li>
&lt;/ul>
&lt;h4 id="clientstreamtracer">ClientStreamTracer&lt;/h4>
&lt;p>流统计追踪，监听流的事件&lt;/p>
&lt;ul>
&lt;li>&lt;code>outboundHeaders&lt;/code>：发送 header 给 Server 端&lt;/li>
&lt;li>&lt;code>outboundMessage&lt;/code>：发送 message 给 Server 端&lt;/li>
&lt;li>&lt;code>inboundHeaders&lt;/code>：接收 Server 端返回的 headers&lt;/li>
&lt;li>&lt;code>inboundMessage&lt;/code>：接收 Server 端返回的 message&lt;/li>
&lt;li>&lt;code>inboundTrailers&lt;/code>：接收 Server 端返回的 trailers&lt;/li>
&lt;li>&lt;code>streamClosed&lt;/code>：流关闭时调用&lt;/li>
&lt;/ul>
&lt;h3 id="服务端">服务端&lt;/h3>
&lt;h4 id="servertransportfilter">ServerTransportFilter&lt;/h4>
&lt;p>Server 端 Transport 事件过滤器，支持监听事件，修改 Transport 的属性&lt;/p>
&lt;ul>
&lt;li>&lt;code>transportReady&lt;/code>：Transport 就绪事件&lt;/li>
&lt;li>&lt;code>transportTerminated&lt;/code>：Transport 关闭事件&lt;/li>
&lt;/ul>
&lt;h4 id="serverstreamtracer">ServerStreamTracer&lt;/h4>
&lt;p>Server 端流事件追踪，监听流的事件&lt;/p></description></item><item><title>Thrfit 客户端请求处理流程</title><link>https://blog.hellowood.dev/posts/thrfit-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>使用同步的非阻塞的服务端和客户端的请求处理流程&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端实现">客户端实现&lt;/h3>
&lt;p>使用 &lt;code>TSocket&lt;/code> 作为底层连接，协议使用 &lt;code>TBinaryProtocol&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TSocket&lt;/span>(&lt;span style="color:#98c379">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transport&lt;/span>.&lt;span style="color:#b3d23c">open&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TProtocol&lt;/span> &lt;span style="color:#c1abea">protocol&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TBinaryProtocol&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Client&lt;/span> &lt;span style="color:#c1abea">client&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Client&lt;/span>(&lt;span style="color:#c1abea">protocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">setMessage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Thrift&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">client&lt;/span>.&lt;span style="color:#b3d23c">sayHello&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;返回响应: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">TException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;h3 id="1-建立连接">1. 建立连接&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">transport&lt;/span>.&lt;span style="color:#b3d23c">open&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>org.apache.thrift.transport.TSocket#open&lt;/li>
&lt;/ul>
&lt;p>初始化 Socket，建立连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">open&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">socket_&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 初始化 Socket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">initSocket&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 建立连接&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">socket_&lt;/span>.&lt;span style="color:#b3d23c">connect&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#c1abea">host_&lt;/span>, &lt;span style="color:#c1abea">port_&lt;/span>), &lt;span style="color:#c1abea">connectTimeout_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 初始化流&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">inputStream_&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedInputStream&lt;/span>(&lt;span style="color:#c1abea">socket_&lt;/span>.&lt;span style="color:#b3d23c">getInputStream&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">outputStream_&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedOutputStream&lt;/span>(&lt;span style="color:#c1abea">socket_&lt;/span>.&lt;span style="color:#b3d23c">getOutputStream&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">iox&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">throw&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>(&lt;span style="color:#c1abea">TTransportException&lt;/span>.&lt;span style="color:#b3d23c">NOT_OPEN&lt;/span>, &lt;span style="color:#c1abea">iox&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-执行请求">2. 执行请求&lt;/h3>
&lt;p>使用 &lt;code>TProtocol&lt;/code> 构建 &lt;code>TServiceClient&lt;/code>，用于发送同步请求&lt;/p></description></item><item><title>Thrfit 服务端请求处理流程</title><link>https://blog.hellowood.dev/posts/thrfit-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>使用同步的非阻塞的服务端的请求处理流程&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端实现">服务端实现&lt;/h3>
&lt;p>使用 &lt;code>TThreadedSelectorServer&lt;/code> 作为服务端，支持接收连接，处理 IO 事件，执行请求由不同的线程实现；底层连接使用 &lt;code>ServerSocket&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">NonblockingServer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@SneakyThrows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span> &lt;span style="color:#c1abea">helloService&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Processor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Iface&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">helloServiceProcessor&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">Processor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">helloService&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TNonblockingServerTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TNonblockingServerSocket&lt;/span>(&lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 配置参数以及处理器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span> &lt;span style="color:#c1abea">serverArgs&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">selectorThreads&lt;/span>(&lt;span style="color:#c1abea">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">workerThreads&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">acceptQueueSizePerThread&lt;/span>(&lt;span style="color:#c1abea">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">processor&lt;/span>(&lt;span style="color:#c1abea">helloServiceProcessor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TServer&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>(&lt;span style="color:#c1abea">serverArgs&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;h3 id="1-启动-server">1. 启动 Server&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">TServer&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>(&lt;span style="color:#c1abea">serverArgs&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>org.apache.thrift.server.AbstractNonblockingServer#serve&lt;/li>
&lt;/ul>
&lt;p>启动 Server，启动用于连接的线程 &lt;code>AcceptThread&lt;/code> 和用于处理 IO 事件的多个线程 &lt;code>SelectorThread&lt;/code>；然后开始监听 IO 事件，由线程池处理请求&lt;/p></description></item><item><title>Thrift 客户端异步请求</title><link>https://blog.hellowood.dev/posts/thrift-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</link><pubDate>Sat, 20 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid><description>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="客户端">客户端&lt;/h3>
&lt;p>异步客户端调用使用 &lt;code>AsyncClient&lt;/code>，传输层使用 &lt;code>TNonblockingSocket&lt;/code>；需要实现 &lt;code>AsyncMethodCallback&lt;/code>作为回调，用于处理请求结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">AsyncClient&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">InterruptedException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建异步客户端&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TAsyncClientManager&lt;/span> &lt;span style="color:#c1abea">clientManager&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TAsyncClientManager&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TProtocolFactory&lt;/span> &lt;span style="color:#c1abea">protocolFactory&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TBinaryProtocol&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncClient&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span> &lt;span style="color:#c1abea">factory&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncClient&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span>(&lt;span style="color:#c1abea">clientManager&lt;/span>, &lt;span style="color:#c1abea">protocolFactory&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TNonblockingTransport&lt;/span> &lt;span style="color:#c1abea">nonblockingTransport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TNonblockingSocket&lt;/span>(&lt;span style="color:#98c379">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncClient&lt;/span> &lt;span style="color:#c1abea">asyncClient&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">factory&lt;/span>.&lt;span style="color:#b3d23c">getAsyncClient&lt;/span>(&lt;span style="color:#c1abea">nonblockingTransport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 异步回调&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">AsyncMethodCallback&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">callback&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">AsyncMethodCallback&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onComplete&lt;/span>(&lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;响应结果: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onError&lt;/span>(&lt;span style="color:#c1abea">Exception&lt;/span> &lt;span style="color:#c1abea">exception&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">error&lt;/span>(&lt;span style="color:#98c379">&amp;#34;请求失败: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">exception&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>(), &lt;span style="color:#c1abea">exception&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">setMessage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Async Thrift&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">asyncClient&lt;/span>.&lt;span style="color:#b3d23c">sayHello&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">callback&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">TException&lt;/span> &lt;span style="color:#c7bf54">|&lt;/span> &lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Thread&lt;/span>.&lt;span style="color:#b3d23c">sleep&lt;/span>(&lt;span style="color:#c1abea">3_000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;h3 id="构建-client-和回调">构建 Client 和回调&lt;/h3>
&lt;h4 id="1-构建-client">1. 构建 Client&lt;/h4>
&lt;p>异步的客户端由抽象类 &lt;code>TAsyncClient&lt;/code> 定义，实现类继承了 &lt;code>TAsyncClient&lt;/code>，同时实现了 &lt;code>AsyncIface&lt;/code>；
在构建其 Factory 时需要三个参数，分别是 &lt;code>TAsyncClientManager&lt;/code>，用于管理调用请求的所有流程；和 &lt;code>TProtocolFactory&lt;/code>，用于获取协议；还有 &lt;code>TNonblockingTransport&lt;/code>，用于底层的传输，必须是非阻塞的&lt;/p></description></item><item><title>Thrift 中的 Transport</title><link>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-transport/</link><pubDate>Mon, 01 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-transport/</guid><description>&lt;p>Thrift 中有 &lt;code>TTransport&lt;/code> 和 &lt;code>TServerTransport&lt;/code>，封装了底层传输层的数据读写；分别用于客户端和服务端&lt;/p>
&lt;h2 id="ttransport">TTransport&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-java-source-class-transport.png" alt="thrift-java-source-class-transport.png">&lt;/p>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>open&lt;/li>
&lt;/ul>
&lt;p>用于建立与 Server 端的连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">open&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>close&lt;/li>
&lt;/ul>
&lt;p>关闭连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">close&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>read&lt;/li>
&lt;/ul>
&lt;p>用于读取数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#00b1f7">read&lt;/span>(&lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">buf&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">off&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">len&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>write&lt;/li>
&lt;/ul>
&lt;p>用于写入数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">write&lt;/span>(&lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">buf&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">off&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">len&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>flush&lt;/li>
&lt;/ul>
&lt;p>清空缓冲区中的数据，发送给服务端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">flush&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TTransportException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现类">实现类&lt;/h3>
&lt;h4 id="非封装的-transport">非封装的 Transport&lt;/h4>
&lt;ul>
&lt;li>&lt;code>TNonblockingTransport&lt;/code>: 非阻塞的 Transport 的抽象类，底层使用 NIO&lt;/li>
&lt;li>&lt;code>TNonblockingSocket&lt;/code>: &lt;code>TNonblockingTransport&lt;/code> 的实现类，基于 SocketChannel 的 Transport，是非阻塞的&lt;/li>
&lt;li>&lt;code>TIOStreamTransport&lt;/code>: 基于 IO 流的 Transport&lt;/li>
&lt;li>&lt;code>TSocket&lt;/code>: &lt;code>TIOStreamTransport&lt;/code> 的子类，底层使用 &lt;code>Socket&lt;/code>&lt;/li>
&lt;li>&lt;code>TSimpleFileTransport&lt;/code>：基于文件的 Transport，会将流写入文件或者从文件读取流&lt;/li>
&lt;li>&lt;code>TFileTransport&lt;/code>: 基于文件的 Transport，会将流写入文件或者从文件读取流&lt;/li>
&lt;li>&lt;code>THttpClient&lt;/code>：基于 &lt;code>HttpClient&lt;/code> 或 &lt;code>HttpURLConnection&lt;/code>，会通过 HTTP 的方式发送请求，通常用于 &lt;code>TServlet&lt;/code> 的服务端&lt;/li>
&lt;li>&lt;code>ByteBuffer&lt;/code>: 基于 ByteBuffer 的 Transport&lt;/li>
&lt;li>&lt;code>TMemoryInputTransport&lt;/code>：基于内存数组的 Transport，会从底层的数组读取，用于测试场景&lt;/li>
&lt;li>&lt;code>TMemoryBuffer&lt;/code>：使用内存数组作为缓冲区的 Transport，用于测试场景&lt;/li>
&lt;/ul>
&lt;h4 id="封装的-transport">封装的 Transport&lt;/h4>
&lt;ul>
&lt;li>&lt;code>TZlibTransport&lt;/code>: 压缩的 Transport，会将流压缩后再发送&lt;/li>
&lt;li>&lt;code>AutoExpandingBufferReadTransport&lt;/code>: 可扩展读缓冲区的 Transport，使用可变数组作为缓冲区&lt;/li>
&lt;li>&lt;code>AutoExpandingBufferWriteTransport&lt;/code>: 可扩展写缓冲区的 Transport，使用可变数组作为缓冲区&lt;/li>
&lt;li>&lt;code>TSaslTransport&lt;/code>：支持 SASL(Simple Authentication and Security Layer) 认证的 Transport，有两个实现类，用于客户端的&lt;code>TSaslClientTransport&lt;/code> 和用于服务端的 &lt;code>TSaslServerTransport&lt;/code>&lt;/li>
&lt;li>&lt;code>TFramedTransport&lt;/code>：缓冲的 Transport，通过在前面带有4字节帧大小的消息来确保每次都完全读取消息&lt;/li>
&lt;li>&lt;code>TFastFramedTransport&lt;/code>： 复用并扩展了读写缓冲区的 Transport，避免每次都创建新的 byte 数组&lt;/li>
&lt;/ul>
&lt;h2 id="tservertransport">TServerTransport&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-java-source-class-server-transport.png" alt="thrift-java-source-class-server-transport.png">&lt;/p></description></item><item><title>Thrift 服务端异步请求</title><link>https://blog.hellowood.dev/posts/thrift-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</link><pubDate>Mon, 01 Feb 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</guid><description>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="idl">IDL&lt;/h3>
&lt;ul>
&lt;li>helloworld.thrift&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#76a9f9">java&lt;/span> &lt;span style="color:#c1abea">io.github.helloworlde.thrift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c678dd">required&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#76a9f9">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端">服务端&lt;/h3>
&lt;ul>
&lt;li>Server&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">AsyncServer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@SneakyThrows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloServiceAsyncImpl&lt;/span> &lt;span style="color:#c1abea">helloService&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceAsyncImpl&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncProcessor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncIface&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">helloServiceProcessor&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncProcessor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">helloService&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TNonblockingServerTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TNonblockingServerSocket&lt;/span>(&lt;span style="color:#c1abea">9090&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 配置参数以及处理器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span> &lt;span style="color:#c1abea">serverArgs&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>.&lt;span style="color:#b3d23c">Args&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">selectorThreads&lt;/span>(&lt;span style="color:#c1abea">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">workerThreads&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">acceptQueueSizePerThread&lt;/span>(&lt;span style="color:#c1abea">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">processor&lt;/span>(&lt;span style="color:#c1abea">helloServiceProcessor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TServer&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TThreadedSelectorServer&lt;/span>(&lt;span style="color:#c1abea">serverArgs&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现&lt;/li>
&lt;/ul>
&lt;p>实现类需要实现 &lt;code>AsyncIface&lt;/code> 接口，方法定义中会有一个 &lt;code>AsyncMethodCallback&lt;/code>，用于处理响应回调&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">HelloServiceAsyncImpl&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>.&lt;span style="color:#b3d23c">AsyncIface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">sayHello&lt;/span>(&lt;span style="color:#c1abea">HelloMessage&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">AsyncMethodCallback&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HelloResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">resultHandler&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;接收到请求: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HelloResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloResponse&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setMessage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resultHandler&lt;/span>.&lt;span style="color:#b3d23c">onComplete&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="请求处理流程">请求处理流程&lt;/h2>
&lt;p>Server 端同步与异步处理的流程区别在于使用的 &lt;code>TProcessor&lt;/code> 不同；同步使用 &lt;code>TProcessor&lt;/code>，异步使用 &lt;code>TAsyncProcessor&lt;/code>；除此之外，其他的流程与使用 NIO 的同步处理没有区别&lt;/p></description></item><item><title>Thrift 中的 Protocol</title><link>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-protocol/</link><pubDate>Sun, 31 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrift-%E4%B8%AD%E7%9A%84-protocol/</guid><description>&lt;p>&lt;code>TProtocol&lt;/code> 是 Thrift 中协议的抽象类，定义了数据序列化和反序列化的接口&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-java-source-class-protocol.png" alt="thrift-java-source-class-protocol.png">&lt;/p>
&lt;h2 id="属性">属性&lt;/h2>
&lt;p>&lt;code>TProtocol&lt;/code> 中有 &lt;code>TTransport&lt;/code>类型的属性&lt;code>trans_&lt;/code>，用于与底层的传输层进行数据交互&lt;/p>
&lt;h2 id="方法">方法&lt;/h2>
&lt;p>&lt;code>TProtocol&lt;/code> 中的方法可以分为两类，分别用于写入和读取各种类型
其中 &lt;code>Message&lt;/code>，&lt;code>Struct&lt;/code>, &lt;code>Field&lt;/code>,&lt;code>Map&lt;/code>,&lt;code>List&lt;/code>,&lt;code>Set&lt;/code> 等类型会有开始和结束标志，一些还会写入或读取名称、序号等信息；可以参考 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-protocol-spec.md">Thrift Protocol Structure&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * 写入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeStructBegin&lt;/span>(&lt;span style="color:#c1abea">TStruct&lt;/span> &lt;span style="color:#c1abea">struct&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeStructEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeFieldBegin&lt;/span>(&lt;span style="color:#c1abea">TField&lt;/span> &lt;span style="color:#c1abea">field&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeFieldEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeFieldStop&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMapBegin&lt;/span>(&lt;span style="color:#c1abea">TMap&lt;/span> &lt;span style="color:#c1abea">map&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMapEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeListBegin&lt;/span>(&lt;span style="color:#c1abea">TList&lt;/span> &lt;span style="color:#c1abea">list&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeListEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeSetBegin&lt;/span>(&lt;span style="color:#c1abea">TSet&lt;/span> &lt;span style="color:#c1abea">set&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeSetEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeBool&lt;/span>(&lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">b&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeByte&lt;/span>(&lt;span style="color:#ef8383">byte&lt;/span> &lt;span style="color:#c1abea">b&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeI16&lt;/span>(&lt;span style="color:#ef8383">short&lt;/span> &lt;span style="color:#c1abea">i16&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeI32&lt;/span>(&lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">i32&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeI64&lt;/span>(&lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">i64&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeDouble&lt;/span>(&lt;span style="color:#ef8383">double&lt;/span> &lt;span style="color:#c1abea">dub&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeString&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">str&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeBinary&lt;/span>(&lt;span style="color:#c1abea">ByteBuffer&lt;/span> &lt;span style="color:#c1abea">buf&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * 读取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#00b1f7">readMessageBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readMessageEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TStruct&lt;/span> &lt;span style="color:#00b1f7">readStructBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readStructEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TField&lt;/span> &lt;span style="color:#00b1f7">readFieldBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readFieldEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TMap&lt;/span> &lt;span style="color:#00b1f7">readMapBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readMapEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TList&lt;/span> &lt;span style="color:#00b1f7">readListBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readListEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">TSet&lt;/span> &lt;span style="color:#00b1f7">readSetBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">readSetEnd&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">readBool&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">byte&lt;/span> &lt;span style="color:#00b1f7">readByte&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">short&lt;/span> &lt;span style="color:#00b1f7">readI16&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#00b1f7">readI32&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#00b1f7">readI64&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">double&lt;/span> &lt;span style="color:#00b1f7">readDouble&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">readString&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">ByteBuffer&lt;/span> &lt;span style="color:#00b1f7">readBinary&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现类">实现类&lt;/h2>
&lt;ul>
&lt;li>&lt;code>TBinaryProtocol&lt;/code>: 二进制协议，根据 Thrift 的类型按 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-protocol-spec.md">Thrift Protocol Structure&lt;/a> 定义写入数据；参考 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-binary-protocol.md">Thrift Binary protocol encoding&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">strictWrite_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 写入版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">VERSION_1&lt;/span> &lt;span style="color:#c7bf54">|&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">version&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 被调用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 请求序号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByte&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TCompactProtocol&lt;/code>：压缩协议，会将请求内容进行压缩后写入，参考 &lt;a href="https://github.com/helloworlde/thrift/blob/master/doc/specs/thrift-compact-protocol.md">Thrift Compact protocol encoding
&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByteDirect&lt;/span>(&lt;span style="color:#c1abea">PROTOCOL_ID&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByteDirect&lt;/span>((&lt;span style="color:#c1abea">VERSION&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&lt;/span> &lt;span style="color:#c1abea">VERSION_MASK&lt;/span>) &lt;span style="color:#c7bf54">|&lt;/span> ((&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#c1abea">TYPE_SHIFT_AMOUNT&lt;/span>) &lt;span style="color:#c7bf54">&amp;amp;&lt;/span> &lt;span style="color:#c1abea">TYPE_MASK&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeVarint32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TTupleProtocol&lt;/code>：继承了 &lt;code>TCompactProtocol&lt;/code> 类，Scheme 使用 &lt;code>TupleScheme&lt;/code>，表示使用写消息体的方式序列化和反序列化，而不是 &lt;code>StandardScheme&lt;/code> 使用消息头和消息体的方式序列化和反序列化&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeBitSet&lt;/span>(&lt;span style="color:#c1abea">BitSet&lt;/span> &lt;span style="color:#c1abea">bs&lt;/span>, &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">vectorWidth&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">bytes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">toByteArray&lt;/span>(&lt;span style="color:#c1abea">bs&lt;/span>, &lt;span style="color:#c1abea">vectorWidth&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#ef8383">byte&lt;/span> &lt;span style="color:#c1abea">b&lt;/span> : &lt;span style="color:#c1abea">bytes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByte&lt;/span>(&lt;span style="color:#c1abea">b&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TJSONProtocol&lt;/code>：将消息序列化为 JSON，可以用于泛化调用的场景下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resetContext&lt;/span>(); &lt;span style="color:#8a93a5;font-style:italic">// THRIFT-3743&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONArrayStart&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONInteger&lt;/span>(&lt;span style="color:#c1abea">VERSION&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">byte&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">b&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>.&lt;span style="color:#b3d23c">getBytes&lt;/span>(&lt;span style="color:#c1abea">StandardCharsets&lt;/span>.&lt;span style="color:#b3d23c">UTF_8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONString&lt;/span>(&lt;span style="color:#c1abea">b&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONInteger&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeJSONInteger&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TSimpleJSONProtocol&lt;/code>: 将消息以 JSON 格式输出，没有实现读取，用于脚本语言&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resetWriteContext&lt;/span>(); &lt;span style="color:#8a93a5;font-style:italic">// THRIFT-3743&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">trans_&lt;/span>.&lt;span style="color:#b3d23c">write&lt;/span>(&lt;span style="color:#c1abea">LBRACKET&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">pushWriteContext&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ListContext&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeString&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeByte&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">writeI32&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TProtocolDecorator&lt;/code>：抽象实现，会将所有的操作都转发给被代理的类实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">concreteProtocol&lt;/span>.&lt;span style="color:#b3d23c">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">tMessage&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TMultiplexedProtocol&lt;/code>：&lt;code>TProtocolDecorator&lt;/code> 的实现类，在消息头部写入了服务的名称，会被 Server 端解析；用于有多个服务的 Server；其他的类型写入和读取由被代理的协议实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">TMessageType&lt;/span>.&lt;span style="color:#b3d23c">CALL&lt;/span> &lt;span style="color:#c7bf54">||&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">TMessageType&lt;/span>.&lt;span style="color:#b3d23c">ONEWAY&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">super&lt;/span>.&lt;span style="color:#b3d23c">writeMessageBegin&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TMessage&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SERVICE_NAME&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">SEPARATOR&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">type&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">tMessage&lt;/span>.&lt;span style="color:#b3d23c">seqid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">super&lt;/span>.&lt;span style="color:#b3d23c">writeMessageBegin&lt;/span>(&lt;span style="color:#c1abea">tMessage&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>StoredMessageProtocol&lt;/code>：&lt;code>TProtocolDecorator&lt;/code> 的实现类，代理其他协议，通常用于 Server 端，只获取请求头，具体的读取由被代理的协议实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">TMessage&lt;/span> &lt;span style="color:#00b1f7">readMessageBegin&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">TException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">messageBegin&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>gRPC 中泛化调用服务接口</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/</link><pubDate>Fri, 29 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>gRPC 没有直接支持泛化调用，protobuf 可以不依赖于生成的代码实现调用，所以可以通过反射接口间接实现泛化调用&lt;/p>
&lt;p>要求 Server 端提供 &lt;code>grpc.reflection.v1alpha.ServerReflection&lt;/code> 服务，用于获取服务的描述文件&lt;/p>
&lt;p>大致的流程是：&lt;/p>
&lt;ol>
&lt;li>根据方法名称，调用服务端反射服务的方法，获取方法所在 proto 文件的描述&lt;/li>
&lt;li>根据 proto 描述文件，获取文件描述、服务描述，用于重新构建要被调用方法的方法描述 &lt;code>MethodDescriptor&lt;/code>&lt;/li>
&lt;li>根据方法描述，将请求内容序列化为对应的类型&lt;/li>
&lt;li>使用重新构建的&lt;code>MethodDescriptor&lt;/code>和其他参数对 Server 端相应的方法发起调用&lt;/li>
&lt;li>解析响应并返回&lt;/li>
&lt;/ol>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>使用 JSON 格式请求被调用的服务方法，并返回 JSON 格式的响应&lt;/p>
&lt;h3 id="proto-定义">proto 定义&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">syntax&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">io&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">github.helloworlde.grpc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">go_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;api;grpc_gateway&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;io.github.helloworlde.grpc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_multiple_files&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_outer_classname&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;HelloWorldGrpc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">SayHello&lt;/span>(&lt;span style="color:#c1abea">HelloMessage&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">HelloResponse&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调用">调用&lt;/h3>
&lt;h4 id="1-构建反射服务-stub">1. 构建反射服务 Stub&lt;/h4>
&lt;p>需要调用反射服务的方法，该方法是双向流&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 构建 Channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#98c379">&amp;#34;127.0.0.1&amp;#34;&lt;/span>,&lt;span style="color:#c1abea">9090&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 使用 Channel 构建 BlockingStub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ServerReflectionGrpc&lt;/span>.&lt;span style="color:#b3d23c">ServerReflectionStub&lt;/span> &lt;span style="color:#c1abea">reflectionStub&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c1abea">ServerReflectionGrpc&lt;/span>.&lt;span style="color:#b3d23c">newStub&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 响应观察器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">streamObserver&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onNext&lt;/span>(&lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 处理响应&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onError&lt;/span>(&lt;span style="color:#c1abea">Throwable&lt;/span> &lt;span style="color:#c1abea">t&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">onCompleted&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Complete&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 请求观察器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ServerReflectionRequest&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">requestStreamObserver&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#c1abea">reflectionStub&lt;/span>.&lt;span style="color:#b3d23c">serverReflectionInfo&lt;/span>(&lt;span style="color:#c1abea">streamObserver&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-根据方法名称获取文件描述">2. 根据方法名称获取文件描述&lt;/h4>
&lt;p>这里的 &lt;code>methodSymbol&lt;/code> 即服务或方法的限定名，可以是 &lt;code>package.service&lt;/code> 或者 &lt;code>package.service.method&lt;/code>
，如 &lt;code>io.github.helloworlde.grpc.HelloService.SayHello&lt;/code>，需要注意方法前是 &lt;code>.&lt;/code>不是&lt;code>/&lt;/code>&lt;/p></description></item><item><title>Thrfit 中的 Server</title><link>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84-server/</link><pubDate>Mon, 18 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84-server/</guid><description>&lt;p>Thrift 中有多种 Server 的实现，支持单线程、多线程、异步等多种方式&lt;/p>
&lt;h2 id="server-定义">Server 定义&lt;/h2>
&lt;h3 id="属性">属性&lt;/h3>
&lt;ul>
&lt;li>&lt;code>processorFactory_&lt;/code> : 处理器工厂&lt;/li>
&lt;li>&lt;code>serverTransport_&lt;/code>: 服务端 Transport&lt;/li>
&lt;li>&lt;code>eventHandler_&lt;/code> : 事件监听器，可以监听 Server 所有启动、关闭、处理请求相关的事件&lt;/li>
&lt;li>&lt;code>inputTransportFactory_&lt;/code> : 输入流工厂&lt;/li>
&lt;li>&lt;code>outputTransportFactory_&lt;/code> : 输出流工厂&lt;/li>
&lt;li>&lt;code>inputProtocolFactory_&lt;/code> : 输入流协议工厂&lt;/li>
&lt;li>&lt;code>outputProtocolFactory_&lt;/code> : 输出流协议工厂&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>serve&lt;/li>
&lt;/ul>
&lt;p>启动 Server，监听端口，对外提供服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">serve&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>stop&lt;/li>
&lt;/ul>
&lt;p>关闭 Server，断开连接，释放并清除资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">stop&lt;/span>() {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现类">实现类&lt;/h2>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/thrift-source-server-subclass.png" alt="thrift-source-server-subclass.png">&lt;/p>
&lt;h3 id="阻塞">阻塞&lt;/h3>
&lt;ul>
&lt;li>TSimpleServer&lt;/li>
&lt;/ul>
&lt;p>Server 的简单实现，是单线程阻塞的 Server，连接实现取决于 &lt;code>TServerTransport&lt;/code>具体类型；用于测试场景&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">serve&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 监听 Socket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">serverTransport_&lt;/span>.&lt;span style="color:#b3d23c">listen&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果有事件处理器，则调用其 preSever 方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">preServe&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 设置运行状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">setServing&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 只要没有关闭，就获取连接&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">stopped_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 接受连接&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">client&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">serverTransport_&lt;/span>.&lt;span style="color:#b3d23c">accept&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connectionContext&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">createContext&lt;/span>(&lt;span style="color:#c1abea">inputProtocol&lt;/span>, &lt;span style="color:#c1abea">outputProtocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 处理上下文事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">processContext&lt;/span>(&lt;span style="color:#c1abea">connectionContext&lt;/span>, &lt;span style="color:#c1abea">inputTransport&lt;/span>, &lt;span style="color:#c1abea">outputTransport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 处理请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">processor&lt;/span>.&lt;span style="color:#b3d23c">process&lt;/span>(&lt;span style="color:#c1abea">inputProtocol&lt;/span>, &lt;span style="color:#c1abea">outputProtocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 上下文删除事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">eventHandler_&lt;/span>.&lt;span style="color:#b3d23c">deleteContext&lt;/span>(&lt;span style="color:#c1abea">connectionContext&lt;/span>, &lt;span style="color:#c1abea">inputProtocol&lt;/span>, &lt;span style="color:#c1abea">outputProtocol&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭 Transport&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">inputTransport&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">outputTransport&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 修改服务状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">setServing&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>TThreadPoolServer&lt;/li>
&lt;/ul>
&lt;p>在 &lt;code>TSimpleServer&lt;/code> 的基础上优化，使用了线程池处理请求；构建参数中可以指定创建线程池的参数，支持线程池饱和后超时；连接实现取决于 &lt;code>TServerTransport&lt;/code>具体类型&lt;/p></description></item><item><title>gRPC 反射服务</title><link>https://blog.hellowood.dev/posts/grpc-%E5%8F%8D%E5%B0%84%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 17 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%8F%8D%E5%B0%84%E6%9C%8D%E5%8A%A1/</guid><description>&lt;p>gRPC 提供了 &lt;code>grpc.reflection.v1alpha.ServerReflection&lt;/code> 服务，在 Server 端添加后可以通过该服务获取所有服务的信息，包括服务定义，方法，属性等；&lt;/p>
&lt;p>可以根据获取到的服务信息调用其他的方法，实现泛化调用；gRPC 调试工具 &lt;a href="">grpcurl&lt;/a> 和 &lt;a href="https://github.com/grpc-swagger/grpc-swagger">gRPC Swagger&lt;/a> 等工具都是通过这种方式实现的&lt;/p>
&lt;h2 id="定义">定义&lt;/h2>
&lt;p>参考 &lt;a href="https://github.com/grpc/grpc/blob/master/doc/server-reflection.md">GRPC Server Reflection Protocol&lt;/a> 和 &lt;a href="https://github.com/grpc/grpc/blob/master/src/proto/grpc/reflection/v1alpha/reflection.proto">reflection.proto&lt;/a>&lt;/p>
&lt;p>该服务只有一个双向流的方法 &lt;code>ServerReflectionInfo&lt;/code>，调用时根据请求参数不同，调用不同的方法进行处理，并返回响应；该方法的流控是非自动的，只有当一个请求完成之后才会获取下一个请求&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">ServerReflection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">ServerReflectionInfo&lt;/span>(&lt;span style="color:#c1abea">stream&lt;/span> &lt;span style="color:#c1abea">ServerReflectionRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">stream&lt;/span> &lt;span style="color:#c1abea">ServerReflectionResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">ServerReflectionRequest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">host&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">oneof&lt;/span> &lt;span style="color:#c1abea">message_request&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据服务名查询 proto 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">file_by_filename&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据名称获取 proto 文件，如 &amp;lt;package&amp;gt;.&amp;lt;service&amp;gt;[.&amp;lt;method&amp;gt;] 或 &amp;lt;package&amp;gt;.&amp;lt;type&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">file_containing_symbol&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 message 类型和序号获取 proto 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">ExtensionRequest&lt;/span> &lt;span style="color:#c1abea">file_containing_extension&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 查找给定消息类型的所有已知扩展使用的标记号，并将它们以未定义的顺序附加到ExtensionNumberResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">all_extension_numbers_of_type&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 查询所有的服务
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">list_services&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="server-端">Server 端&lt;/h2>
&lt;ul>
&lt;li>服务实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2cbff">@Slf4j
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2cbff">&lt;/span>public class ReflectionServer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @SneakyThrows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public static void main(String[] args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 构建 Server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Server server = NettyServerBuilder.forAddress(new InetSocketAddress(9090))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 添加服务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .addService(new HelloServiceImpl())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 添加反射服务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ .addService(ProtoReflectionService.newInstance())
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> .build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 启动 Server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.start();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.info(&amp;#34;服务端启动成功&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Runtime.getRuntime().addShutdownHook(new Thread(() -&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> try {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.awaitTermination(10, TimeUnit.SECONDS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } catch (InterruptedException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.printStackTrace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 保持运行
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.awaitTermination();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="client-端">Client 端&lt;/h2>
&lt;p>发起双向流请求&lt;/p></description></item><item><title>Thrfit 中的核心概念</title><link>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 17 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/thrfit-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid><description>&lt;h2 id="服务端">服务端&lt;/h2>
&lt;pre tabindex="0">&lt;code> +-------------------------------------------+
 | Server |
 | (single-threaded, event-driven etc) |
 +-------------------------------------------+
 | Processor |
 | (compiler generated) |
 +-------------------------------------------+
 | Protocol |
 | (JSON, compact etc) |
 +-------------------------------------------+
 | Transport |
 | (raw TCP, HTTP etc) |
 +-------------------------------------------+
&lt;/code>&lt;/pre>&lt;p>Thrift Server 设计大致可以分为四层，分别是：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Server：负责连接调度、服务的生命周期，定义接口是&lt;code>TServer&lt;/code> - &lt;code>TSimpleServer&lt;/code>：简单的阻塞服务端 - &lt;code>TThreadPoolServer&lt;/code>：使用线程池的处理请求的阻塞服务端 - &lt;code>THsHaServer&lt;/code>：使用线程池处理请求的基于 NIO 的非阻塞服务端 - &lt;code>TThreadedSelectorServer&lt;/code>：使用多种线程池的基于 NIO 的非阻塞服务端&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Processor：处理请求，具体的实现由生成的代码处理，定义接口是 &lt;code>TProcessor&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>TBaseProcessor&lt;/code>：同步处理的 Processor&lt;/li>
&lt;li>&lt;code>TBaseAsyncProcessor&lt;/code>：异步处理的 Processor&lt;/li>
&lt;li>&lt;code>TMultiplexedProcessor&lt;/code>：支持多个服务的同步 Processor&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Protocol：请求协议，数据的编解码实现，定义接口是 &lt;code>TProtocol&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>TBinaryProtocol&lt;/code>：二进制协议&lt;/li>
&lt;li>&lt;code>TCompactProtocol&lt;/code>：压缩协议&lt;/li>
&lt;li>&lt;code>TJSONProtocol&lt;/code>：JSON 格式协议&lt;/li>
&lt;li>&lt;code>TMultiplexedProtocol&lt;/code>：支持多个 Processor 的封装协议，依赖于其他协议&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Transport：底层的连接，提供了读写的抽象实现；服务端定义是 &lt;code>TServerTransport&lt;/code>&lt;/p></description></item><item><title>gRPC Gateway 使用</title><link>https://blog.hellowood.dev/posts/grpc-gateway-%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 06 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-gateway-%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>gRPC Gateway 可以代理 gRPC 服务，接收 HTTP 请求，并转为 gRPC 请求由服务进行处理，并将返回结果转换为 HTTP 响应发送给调用者 gRPC Gateway&lt;/p>
&lt;p>支持代理单个服务或者多个服务，当代理多个服务时，可以通过命名解析实现转发请求&lt;/p>
&lt;h2 id="快速使用">快速使用&lt;/h2>
&lt;ul>
&lt;li>启动项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/helloworlde/grpc-gateway.git &amp;amp; &lt;span style="color:#ef8383">cd&lt;/span> grpc-gateway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>访问&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl localhost:8090/hello&lt;span style="color:#d26464;font-weight:bold">\?&lt;/span>&lt;span style="color:#dcaeea">message&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">{&lt;/span>&lt;span style="color:#63c381">&amp;#34;result&amp;#34;&lt;/span>:&lt;span style="color:#63c381">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">}&lt;/span>%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现">实现&lt;/h2>
&lt;h3 id="安装依赖">安装依赖&lt;/h3>
&lt;ul>
&lt;li>安装 buf&lt;/li>
&lt;/ul>
&lt;p>buf 用于代替 protoc 进行生成代码，可以避免使用复杂的 protoc 命令，避免 protoc 各种失败问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew tap bufbuild/buf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install buf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装 grpc-gateway&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加 buf 配置文件 buf.gen.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>version: v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plugins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out: proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opt: paths=source_relative
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: go-grpc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out: proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opt: paths=source_relative,require_unimplemented_servers=false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加配置文件 buf.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#98c379">v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">roots&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">proto&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现服务端">实现服务端&lt;/h3>
&lt;ul>
&lt;li>定义 proto&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">syntax&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">io&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">github.helloworlde&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">go_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;github.com/helloworlde/grpc-gateway;grpc_gateway&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;io.github.helloworlde&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_multiple_files&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_outer_classname&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;HelloGrpc&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">Hello&lt;/span> (&lt;span style="color:#c1abea">HelloMessage&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">HelloResponse&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HelloResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>生成代码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>buf generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现接口&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">pb&lt;/span> &lt;span style="color:#98c379">&amp;#34;github.com/helloworlde/grpc-gateway/proto/api&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#c1abea">HelloService&lt;/span> &lt;span style="color:#c678dd">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> (&lt;span style="color:#c1abea">h&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">HelloService&lt;/span>) &lt;span style="color:#00b1f7">Hello&lt;/span>(&lt;span style="color:#c1abea">ctx&lt;/span> &lt;span style="color:#c1abea">context&lt;/span>.&lt;span style="color:#c1abea">Context&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#c1abea">HelloMessage&lt;/span>) (&lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#c1abea">HelloResponse&lt;/span>, &lt;span style="color:#ef8383">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">helloMessage&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#00b1f7">GetMessage&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#c1abea">HelloResponse&lt;/span>{&lt;span style="color:#c1abea">Result&lt;/span>: &lt;span style="color:#c1abea">helloMessage&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&lt;/span>&lt;span style="color:#c1abea">response&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动 Server&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">StartGrpcServer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">listener&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">net&lt;/span>.&lt;span style="color:#00b1f7">Listen&lt;/span>(&lt;span style="color:#98c379">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;:9090&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Fatalln&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Listen gRPC port failed: &amp;#34;&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">grpc&lt;/span>.&lt;span style="color:#00b1f7">NewServer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">pb&lt;/span>.&lt;span style="color:#00b1f7">RegisterHelloServiceServer&lt;/span>(&lt;span style="color:#c1abea">server&lt;/span>, &lt;span style="color:#c7bf54">&amp;amp;&lt;/span>&lt;span style="color:#c1abea">helloService&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Start gRPC Server on 0.0.0.0:9090&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">err&lt;/span> = &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#00b1f7">Serve&lt;/span>(&lt;span style="color:#c1abea">listener&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Fatalln&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Start gRPC Server failed: &amp;#34;&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#00b1f7">StartGrpcServer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 Server 后，会监听 8090 端口，对外提供服务&lt;/p></description></item><item><title>gRPC 服务使用 TLS 加密</title><link>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8-tls-%E5%8A%A0%E5%AF%86/</link><pubDate>Wed, 06 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8-tls-%E5%8A%A0%E5%AF%86/</guid><description>&lt;p>gRPC 支持使用 TLS 对请求进行加密&lt;/p>
&lt;blockquote>
&lt;p>SSL(Secure Socket Layer，安全套接字)，是面向连接的网络层和应用层协议之间的一种协议层；SSL 通过互相认证、使用数字签名确保完整性、使用加密确保隐私性，以实现客户端和服务端之间的安全通讯&lt;/p>
&lt;p>TLS(Transport Layer Security, 传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性&lt;/p>
&lt;p>SSL是基于 HTTP 之下 TCP 之上的一个协议层，在SSL更新到3.0时，IETF对SSL3.0进行了标准化，并添加了少数机制(但是几乎和SSL3.0无差异)，标准化后的IETF更名为TLS1.0(Transport Layer Security 安全传输层协议)，可以说TLS就是SSL的新版本3.1&lt;/p>
&lt;/blockquote>
&lt;p>相关项目参考 &lt;a href="https://github.com/helloworlde/grpc-java-sample">github.com/helloworlde/grpc-java-sample&lt;/a>&lt;/p>
&lt;h2 id="生成证书">生成证书&lt;/h2>
&lt;p>可以通过 openssl 生成一个自签名的证书，用于加密&lt;/p>
&lt;ol>
&lt;li>添加配置&lt;/li>
&lt;/ol>
&lt;p>指定证书的配置，其中 &lt;code>CN&lt;/code> 指定了访问的域名，如果实际域名与证书域名不一致，会导致连接失败&lt;/p>
&lt;ul>
&lt;li>certificate.conf&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>[req]
default_bits = 4096
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn
[dn]
C = CN
ST = BJ
O = helloworlde
CN = localhost
[req_ext]
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
IP.1 = ::1
IP.2 = 127.0.0.1
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>生成证书&lt;/li>
&lt;/ol>
&lt;p>生成自签名的证书，因为 Netty 的 &lt;code>SslContextBuilder&lt;/code> 和 &lt;code>SslContext&lt;/code> 仅支持 &lt;code>PKCS8&lt;/code> 格式的 key，所以需要将其他格式的 key 转换为 &lt;code>PKCS8&lt;/code> 格式&lt;/p></description></item><item><title>gRPC 中使用 Channelz</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E4%BD%BF%E7%94%A8-channelz/</link><pubDate>Mon, 04 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E4%BD%BF%E7%94%A8-channelz/</guid><description>&lt;p>gRPC 提供了 Channelz 用于对外提供服务的数据，用于调试、监控等；根据服务的角色不同，可以提供的数据有：&lt;/p>
&lt;ul>
&lt;li>服务端: Servers, Server, ServerSockets, Socket&lt;/li>
&lt;li>客户端: TopChannels, Channel, Subchannel&lt;/li>
&lt;/ul>
&lt;h2 id="channelz-服务定义">Channelz 服务定义&lt;/h2>
&lt;p>参考 Channelz 的设计 &lt;a href="https://github.com/grpc/proposal/blob/master/A14-channelz.md">gRPC Channelz&lt;/a> 以及服务定义 &lt;a href="https://github.com/grpc/grpc/blob/master/src/proto/grpc/channelz/channelz.proto">channelz.proto&lt;/a>，提供了以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">Channelz&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 返回所有的根 Channel(即应用直接创建的 Channel)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetTopChannels&lt;/span>(&lt;span style="color:#c1abea">GetTopChannelsRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetTopChannelsResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Channel ID 返回单个的 Channel 详情，包括 Subchannel，如果没有则返回 NOT_FOUND
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetChannel&lt;/span>(&lt;span style="color:#c1abea">GetChannelRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetChannelResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Subchannel ID 返回 Subchannel 详情
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetSubchannel&lt;/span>(&lt;span style="color:#c1abea">GetSubchannelRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetSubchannelResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 返回所有存在的 Server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetServers&lt;/span>(&lt;span style="color:#c1abea">GetServersRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetServersResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Server ID 返回 Server 详情
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetServer&lt;/span>(&lt;span style="color:#c1abea">GetServerRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetServerResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Server ID 返回 Server 所有的 Socket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetServerSockets&lt;/span>(&lt;span style="color:#c1abea">GetServerSocketsRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetServerSocketsResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 根据 Socket ID 返回 Socket 详情
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">GetSocket&lt;/span>(&lt;span style="color:#c1abea">GetSocketRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">GetSocketResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;p>相关项目参考 &lt;a href="https://github.com/helloworlde/grpc-java-sample">github.com/helloworlde/grpc-java-sample&lt;/a>&lt;/p></description></item><item><title>gRPC 中打印请求二进制日志</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%89%93%E5%8D%B0%E8%AF%B7%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 04 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E6%89%93%E5%8D%B0%E8%AF%B7%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97/</guid><description>&lt;p>gRPC 支持将请求调用的参数、Header 等信息以二进制的方式输出到文件中，方便在必要时排查问题&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h4 id="1-添加依赖">1. 添加依赖&lt;/h4>
&lt;p>binlog 的依赖在 &lt;code>grpc-services&lt;/code>中，所以需要有该依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span>(&lt;span style="color:#63c381">&amp;#34;io.grpc:grpc-services:&lt;/span>&lt;span style="color:#98c379">${grpcVersion}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-添加-binarylogsink-实现">2. 添加 BinaryLogSink 实现&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomBinaryLogSink&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">BinaryLogSink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">outPath&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">OutputStream&lt;/span> &lt;span style="color:#c1abea">out&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">closed&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CustomBinaryLogSink&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">path&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">IOException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">File&lt;/span> &lt;span style="color:#c1abea">outFile&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">File&lt;/span>(&lt;span style="color:#c1abea">path&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">outPath&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">outFile&lt;/span>.&lt;span style="color:#b3d23c">getAbsolutePath&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Writing binary logs to {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">outFile&lt;/span>.&lt;span style="color:#b3d23c">getAbsolutePath&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedOutputStream&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">FileOutputStream&lt;/span>(&lt;span style="color:#c1abea">outFile&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">getPath&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">outPath&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">synchronized&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">write&lt;/span>(&lt;span style="color:#c1abea">MessageLite&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">closed&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Attempt to write after TempFileSink is closed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">writeDelimitedTo&lt;/span>(&lt;span style="color:#c1abea">out&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Caught exception while writing&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">closeQuietly&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">synchronized&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">close&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">IOException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">closed&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">closed&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">synchronized&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">closeQuietly&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Caught exception while closing&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-创建-channel-时指定-binarylog">3. 创建 Channel 时指定 BinaryLog&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">BinaryLog&lt;/span> &lt;span style="color:#c1abea">binaryLog&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">BinaryLogs&lt;/span>.&lt;span style="color:#b3d23c">createBinaryLog&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomBinaryLogSink&lt;/span>(&lt;span style="color:#98c379">&amp;#34;CUSTOM_PATH&amp;#34;&lt;/span>), &lt;span style="color:#98c379">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#c1abea">host&lt;/span>, &lt;span style="color:#c1abea">port&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setBinaryLog&lt;/span>(&lt;span style="color:#c1abea">binaryLog&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-指定环境变量">4. 指定环境变量&lt;/h4>
&lt;p>需要指定环境变量，设置需要输出的方法才会生效，设置 &lt;code>GRPC_BINARY_LOG_CONFIG=*&lt;/code>，&lt;code>*&lt;/code>代表打印所有的方法，具体指定可以参考 &lt;a href="https://github.com/helloworlde/proposal/blob/master/A16-binary-logging.md#control-interface">Control Interface&lt;/a>&lt;/p></description></item><item><title>gRPC 拦截器和监听器</title><link>https://blog.hellowood.dev/posts/grpc-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</link><pubDate>Sun, 03 Jan 2021 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</guid><description>&lt;p>gRPC 拦截器用于在请求执行之前执行，以实现校验授权，记录调用行为，插入其他逻辑等；拦截器有 &lt;code>ClientInterceptor&lt;/code> 和 &lt;code>ServerInterceptor&lt;/code>，分别用于客户端和服务端&lt;/p>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="客户端">客户端&lt;/h2>
&lt;h3 id="拦截器接口定义">拦截器接口定义&lt;/h3>
&lt;ul>
&lt;li>ClientInterceptor&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@ThreadSafe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">ClientInterceptor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">interceptCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;h4 id="添加拦截器">添加拦截器&lt;/h4>
&lt;ul>
&lt;li>在构建 Channel 时添加拦截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#c1abea">host&lt;/span>, &lt;span style="color:#c1abea">port&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">intercept&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomClientInterceptor&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/li>
&lt;/ul>
&lt;p>然后会在 &lt;code>ManagedChannelImpl&lt;/code> 的构造方法中，使用拦截器将 Channel 实例封装，返回的 Channel 实例是 &lt;code>InterceptorChannel&lt;/code> 的实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">interceptorChannel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ClientInterceptors&lt;/span>.&lt;span style="color:#b3d23c">intercept&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#c1abea">interceptors&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.ClientInterceptors#intercept&lt;/li>
&lt;/ul>
&lt;p>当有多个拦截器时，会顺序的封装，最后添加的拦截器会最先执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#00b1f7">intercept&lt;/span>(&lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ClientInterceptor&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">interceptors&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Preconditions&lt;/span>.&lt;span style="color:#b3d23c">checkNotNull&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#98c379">&amp;#34;channel&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 遍历拦截器，创建 InterceptorChannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">ClientInterceptor&lt;/span> &lt;span style="color:#c1abea">interceptor&lt;/span> : &lt;span style="color:#c1abea">interceptors&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InterceptorChannel&lt;/span>(&lt;span style="color:#c1abea">channel&lt;/span>, &lt;span style="color:#c1abea">interceptor&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="处理请求">处理请求&lt;/h4>
&lt;ul>
&lt;li>io.grpc.ClientInterceptors.InterceptorChannel#newCall&lt;/li>
&lt;/ul>
&lt;p>&lt;code>InterceptorChannel&lt;/code> 继承了 &lt;code>Channel&lt;/code>，在执行请求时，会调用&lt;code>channel.newCall&lt;/code>，在这个方法里，会调用拦截器的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">newCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">interceptor&lt;/span>.&lt;span style="color:#b3d23c">interceptCall&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">channel&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后返回自定义的 &lt;code>CustomForwardingClientCall&lt;/code>，在这个类的&lt;code>checkedStart&lt;/code>方法中，还创建了 &lt;code>CustomCallListener&lt;/code>, 这样在调用时，就可以实现 &lt;code>ClientCall&lt;/code> 和 &lt;code>ClientCallListener&lt;/code> 的事件监听，从而实现自定义的逻辑&lt;/p></description></item><item><title>gRPC 中监听 Sream 和 Transport 的事件</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9B%91%E5%90%AC-sream-%E5%92%8C-transport-%E7%9A%84%E4%BA%8B%E4%BB%B6/</link><pubDate>Wed, 23 Dec 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9B%91%E5%90%AC-sream-%E5%92%8C-transport-%E7%9A%84%E4%BA%8B%E4%BB%B6/</guid><description>&lt;p>gRPC 提供了拦截器可以监听请求的事件，但是对于 Stream 或者 Transport 的具体事件，无法通过拦截器实现；gRPC 提供了 StreamTracer 和 TransportFilter 支持这样的能力&lt;/p>
&lt;h2 id="streamtracer">StreamTracer&lt;/h2>
&lt;p>&lt;code>StreamTracer&lt;/code> 用于监听流的所有事件，包括流关闭、出入站消息、出入站流大小等信息&lt;/p>
&lt;p>&lt;code>StreamTracer&lt;/code> 有用于客户端的 &lt;code>ClientStreamTracer&lt;/code> 和用于服务端的 &lt;code>ServerStreamTracer&lt;/code>&lt;/p>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;p>客户端的 &lt;code>StreamTracer&lt;/code> 在拦截器中注入，当有请求被执行时，可以向 &lt;code>callOptions&lt;/code> 添加自定义的 &lt;code>ClientStreamTracer.Factory&lt;/code>，这样就会创建相应的 &lt;code>StreamTracer&lt;/code>，实现监听&lt;/p>
&lt;ul>
&lt;li>CustomClientInterceptor.java&lt;/li>
&lt;/ul>
&lt;p>在拦截器中指定&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomClientInterceptor&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">ClientInterceptor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">interceptCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">callOptions&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>.&lt;span style="color:#b3d23c">withStreamTracerFactory&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomClientStreamTracerFactory&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">next&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>.&lt;span style="color:#b3d23c">newCall&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CustomClientStreamTracerFactory.java&lt;/li>
&lt;/ul>
&lt;p>在实现类中重写需要监听的事件方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomClientStreamTracerFactory&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ClientStreamTracer&lt;/span>.&lt;span style="color:#b3d23c">Factory&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomClientStreamTracerFactory&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">method&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">callOptions&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">next&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ClientStreamTracer&lt;/span> &lt;span style="color:#00b1f7">newClientStreamTracer&lt;/span>(&lt;span style="color:#c1abea">ClientStreamTracer&lt;/span>.&lt;span style="color:#b3d23c">StreamInfo&lt;/span> &lt;span style="color:#c1abea">info&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomClientStreamTracer&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">next&lt;/span>, &lt;span style="color:#c1abea">info&lt;/span>, &lt;span style="color:#c1abea">headers&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomClientStreamTracer&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ClientStreamTracer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomClientStreamTracer&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>, &lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>, &lt;span style="color:#c1abea">StreamInfo&lt;/span> &lt;span style="color:#c1abea">info&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Method:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>.&lt;span style="color:#b3d23c">getFullMethodName&lt;/span>() &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; Next:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">next&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span>() &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; Header: &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>.&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端">服务端&lt;/h3>
&lt;p>服务端的 &lt;code>StreamTracer&lt;/code> 在构建 Server 时指定，在执行请求时会监听相应的方法&lt;/p></description></item><item><title>gRPC Server 端请求处理流程</title><link>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 15 Dec 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>[TOC]&lt;/p>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;ol>
&lt;li>创建并启动 ServerTransport&lt;/li>
&lt;/ol>
&lt;p>在 Server 启动的时候，最终调用 &lt;code>NettyServer&lt;/code> 的 &lt;code>start()&lt;/code> 方法，为 &lt;code>ServerBootstrap&lt;/code> 添加了 &lt;code>ChannelInitializer&lt;/code>，最终，当有新的连接建立时，会由 &lt;code>NettyServerHandler&lt;/code> 调用该类的 &lt;code>initChannel&lt;/code> 方法，初始化一个 &lt;code>NettyServerTransport&lt;/code>&lt;/p>
&lt;ul>
&lt;li>io.grpc.netty.NettyServer#start&lt;/li>
&lt;/ul>
&lt;p>在初始化 Netty Channel 时，会先创建 &lt;code>NettyServerTransport&lt;/code>，然后调用监听器的 &lt;code>Transport&lt;/code> 创建事件，添加一个超时取消任务；
然后会调用 &lt;code>Transport&lt;/code> 的 &lt;code>start&lt;/code> 方法启动 &lt;code>Transport&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">b&lt;/span>.&lt;span style="color:#b3d23c">childHandler&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ChannelInitializer&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Channel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">initChannel&lt;/span>(&lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">ch&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建基于 Netty 的 ServerTransport&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">NettyServerTransport&lt;/span> &lt;span style="color:#c1abea">transport&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">NettyServerTransport&lt;/span>(&lt;span style="color:#8a93a5;font-style:italic">/*...*/&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServerTransportListener&lt;/span> &lt;span style="color:#c1abea">transportListener&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">synchronized&lt;/span> (&lt;span style="color:#c1abea">NettyServer&lt;/span>.&lt;span style="color:#b3d23c">this&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 调用监听器回调，Transport 创建事件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transportListener&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>.&lt;span style="color:#b3d23c">transportCreated&lt;/span>(&lt;span style="color:#c1abea">transport&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 启动监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transport&lt;/span>.&lt;span style="color:#b3d23c">start&lt;/span>(&lt;span style="color:#c1abea">transportListener&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ChannelFutureListener&lt;/span> &lt;span style="color:#c1abea">loopReleaser&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">LoopReleaser&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channelDone&lt;/span>.&lt;span style="color:#b3d23c">addListener&lt;/span>(&lt;span style="color:#c1abea">loopReleaser&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ch&lt;/span>.&lt;span style="color:#b3d23c">closeFuture&lt;/span>().&lt;span style="color:#b3d23c">addListener&lt;/span>(&lt;span style="color:#c1abea">loopReleaser&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.netty.NettyServerTransport#start&lt;/li>
&lt;/ul>
&lt;p>在启动 &lt;code>Transport&lt;/code> 时，会为当前的 &lt;code>Transport&lt;/code> 创建一个处理器，并绑定到 Netty 的 Channel 中&lt;/p></description></item><item><title>gRPC Server 端关闭流程</title><link>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%85%B3%E9%97%AD%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 05 Dec 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%85%B3%E9%97%AD%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="关闭-server">关闭 Server&lt;/h2>
&lt;p>关闭 Server 可以使用 &lt;code>shutdown&lt;/code> 或者 &lt;code>shutdownNow&lt;/code> 方法&lt;/p>
&lt;h4 id="shutdown">shutdown&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">shutdown&lt;/span>().&lt;span style="color:#b3d23c">awaitTermination&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>, &lt;span style="color:#c1abea">TimeUnit&lt;/span>.&lt;span style="color:#b3d23c">SECONDS&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.ServerImpl#shutdown&lt;/li>
&lt;/ul>
&lt;p>开始顺序的关闭 Server，已经存在的请求会继续执行，新的请求会被拒绝&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ServerImpl&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">shutdownTransportServers&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">synchronized&lt;/span> (&lt;span style="color:#c1abea">lock&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">shutdown&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shutdown&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shutdownTransportServers&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">started&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">shutdownTransportServers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">transportServersTerminated&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 检查是否终止&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">checkForTermination&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">shutdownTransportServers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 遍历所有的 Server 并关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">InternalServer&lt;/span> &lt;span style="color:#c1abea">ts&lt;/span> : &lt;span style="color:#c1abea">transportServers&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ts&lt;/span>.&lt;span style="color:#b3d23c">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关闭时，首先会检查 Server 是否已经关闭了，如果已经关闭了，则抛出异常；如果没有关闭，则会修改关闭状态，返huan连接池，通知其他的锁；
然后会遍历所有的 Server，调用其 &lt;code>shutdown&lt;/code> 方法进行关闭&lt;/p>
&lt;ul>
&lt;li>io.grpc.netty.NettyServer#shutdown&lt;/li>
&lt;/ul>
&lt;p>关闭 &lt;code>NettySerer&lt;/code>，添加关闭事件监听器，并等待关闭；在监听器中会释放资源，关闭协议协调器，关闭 Transport 等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果 channel 已经关闭了，则返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">channel&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">||&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">isOpen&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// Already closed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 添加监听器，用于在关闭时释放资源，关闭协议，关闭 Transport 等&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>().&lt;span style="color:#b3d23c">addListener&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ChannelFutureListener&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">operationComplete&lt;/span>(&lt;span style="color:#c1abea">ChannelFuture&lt;/span> &lt;span style="color:#c1abea">future&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">Exception&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">future&lt;/span>.&lt;span style="color:#b3d23c">isSuccess&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">log&lt;/span>(&lt;span style="color:#c1abea">Level&lt;/span>.&lt;span style="color:#b3d23c">WARNING&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Error shutting down server&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">future&lt;/span>.&lt;span style="color:#b3d23c">cause&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InternalInstrumented&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">SocketStats&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">stats&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">listenSocketStats&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">listenSocketStats&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">stats&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channelz&lt;/span>.&lt;span style="color:#b3d23c">removeListenSocket&lt;/span>(&lt;span style="color:#c1abea">stats&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sharedResourceReferenceCounter&lt;/span>.&lt;span style="color:#b3d23c">release&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">protocolNegotiator&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">synchronized&lt;/span> (&lt;span style="color:#c1abea">NettyServer&lt;/span>.&lt;span style="color:#b3d23c">this&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭 Transport&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">listener&lt;/span>.&lt;span style="color:#b3d23c">serverShutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭 channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">closeFuture&lt;/span>().&lt;span style="color:#b3d23c">await&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">InterruptedException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">log&lt;/span>(&lt;span style="color:#c1abea">Level&lt;/span>.&lt;span style="color:#b3d23c">FINE&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Interrupted while shutting down&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Thread&lt;/span>.&lt;span style="color:#b3d23c">currentThread&lt;/span>().&lt;span style="color:#b3d23c">interrupt&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.internal.ServerImpl.ServerListenerImpl#serverShutdown&lt;/li>
&lt;/ul>
&lt;p>监听 Server 关闭事件，根据关闭的状态，选择调用 &lt;code>Transport&lt;/code> 的 &lt;code>shutdown&lt;/code> 或者 &lt;code>shutdownNow&lt;/code> 关闭 &lt;code>ServerTransport&lt;/code>&lt;/p></description></item><item><title>gRPC Server 端启动流程</title><link>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 05 Dec 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-server-%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>gRPC Server 启动流程，底层实现以 Netty 为例；&lt;/p>
&lt;h2 id="核心类">核心类&lt;/h2>
&lt;ul>
&lt;li>&lt;code>io.grpc.Server&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Server 的定义接口，实现类是 &lt;code>io.grpc.internal.ServerImpl&lt;/code>，实现了服务、方法与方法处理器的绑定，端口监听，不同类型的 Server 实现的调用，Server 生命周期管理等&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.BindableService&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>由编译器生成的服务抽象类的基础接口，并将实现类绑定到服务器，提供将服务的实现的实例绑定到 Server 的方式&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.ServerInterceptor&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Server 端的拦截器，在方法调用之前会被调用&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.HandlerRegistry&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>方法处理器注册器，所有的方法注册器会注册在这里，通过服务名和方法名查找&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.ServerServiceDefinition&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>服务定义，包含服务描述信息，方法信息集合&lt;/p>
&lt;ul>
&lt;li>&lt;code>io.grpc.ServerMethodDefinition&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>方法定义，包含方法描述信息，方法处理器&lt;/p>
&lt;h2 id="启动流程">启动流程&lt;/h2>
&lt;h3 id="启动大致流程">启动大致流程&lt;/h3>
&lt;ol>
&lt;li>创建 &lt;code>ServerBuilder&lt;/code>&lt;/li>
&lt;li>指定端口&lt;/li>
&lt;li>为 &lt;code>ServerBuilder&lt;/code> 添加方法
&lt;ol>
&lt;li>构建服务定义
&lt;ol>
&lt;li>通过生成的代码构建方法定义，将方法与处理器绑定&lt;/li>
&lt;li>将方法处理器添加到方法定义中&lt;/li>
&lt;li>将服务定义添加到服务注册器中&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>添加拦截器等其他的配置&lt;/li>
&lt;li>构建 &lt;code>Server&lt;/code> 实例
&lt;ol>
&lt;li>构建 &lt;code>ServerTransport&lt;/code> 实例 2. 遍历所有监听的地址，创建相应的 &lt;code>NettyServer&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>启动 &lt;code>Server&lt;/code>
&lt;ol>
&lt;li>遍历所有的 &lt;code>NettyServer&lt;/code>，调用 &lt;code>start&lt;/code> 方法启动
&lt;ol>
&lt;li>创建相应的 &lt;code>ServerBootstrap&lt;/code>，绑定监听的地址，可以接受连接&lt;/li>
&lt;li>创建 &lt;code>NettyServerTransport&lt;/code>，调用 &lt;code>start&lt;/code> 方法启动 &lt;code>Transport&lt;/code>&lt;/li>
&lt;li>为 &lt;code>NettyServerTransport&lt;/code> 创建 &lt;code>NettyServerHandler&lt;/code>，用于处理请求&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>保持 &lt;code>Server&lt;/code> 启动状态，启动完成&lt;/li>
&lt;/ol>
&lt;h3 id="server-定义">Server 定义&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Server&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ServerBuilder&lt;/span>.&lt;span style="color:#b3d23c">forPort&lt;/span>(&lt;span style="color:#c1abea">1234&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">addService&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">intercept&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomServerInterceptor&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">server&lt;/span>.&lt;span style="color:#b3d23c">awaitTermination&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="绑定端口">绑定端口&lt;/h4>
&lt;p>指定了要监听的端口，会根据不同的 &lt;code>Server&lt;/code> 实现绑定端口&lt;/p></description></item><item><title>gRPC Channel</title><link>https://blog.hellowood.dev/posts/grpc-channel/</link><pubDate>Wed, 18 Nov 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-channel/</guid><description>&lt;p>&lt;code>Channel&lt;/code> 是用于执行 RPC 请求的概念上的端点连接，基于负载和配置，一个 &lt;code>Channel&lt;/code> 可以有 0 或多个真实连接&lt;/p>
&lt;p>&lt;code>Subchannel&lt;/code> 代表逻辑连接，最多维护一个物理连接发送 RPC，对应多个 Transport&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-channel-class-diagram.png" alt="grpc-source-code-channel-class-diagram.png">&lt;/p>
&lt;p>Channel 有多个子类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ManagedChannel&lt;/code>： 实现了生命周期管理能力的抽象子类
&lt;ul>
&lt;li>&lt;code>ManagedChannelImpl&lt;/code>： &lt;code>ManagedChannel&lt;/code> 的实现类，&lt;code>Channel&lt;/code> 的主要实现&lt;/li>
&lt;li>&lt;code>ManagedChannelOrphanWrapper&lt;/code>: &lt;code>ManagedChannel&lt;/code> 的包装类，用于引用 &lt;code>ManagedChannel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>RealChannel&lt;/code>：真正执行创建 &lt;code>ClientCallImpl&lt;/code> 实例&lt;/li>
&lt;li>&lt;code>SubchannelAsChannel&lt;/code>: 将 &lt;code>Subchannel&lt;/code> 转为 &lt;code>Channel&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Subchannel 的子类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SubchannelImpl&lt;/code>：Subchannel 的实现类&lt;/li>
&lt;/ul>
&lt;h2 id="方法">方法&lt;/h2>
&lt;h3 id="channel">Channel&lt;/h3>
&lt;ul>
&lt;li>发起调用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RequestT&lt;/span>, &lt;span style="color:#c1abea">ResponseT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RequestT&lt;/span>, &lt;span style="color:#c1abea">ResponseT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">newCall&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RequestT&lt;/span>, &lt;span style="color:#c1abea">ResponseT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">methodDescriptor&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>目标地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">authority&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="managedchannel">ManagedChannel&lt;/h3>
&lt;p>&lt;code>ManagedChannel&lt;/code> 是 &lt;code>Channel&lt;/code> 的子类，提供生命周期管理的 &lt;code>Channel&lt;/code>；由 &lt;code>ManagedChannelImpl&lt;/code> 实现功能&lt;/p>
&lt;h5 id="关闭">关闭&lt;/h5>
&lt;ul>
&lt;li>shutdown&lt;/li>
&lt;/ul>
&lt;p>初始化一个顺序关闭，既有的调用会继续执行，但是新的调用会被立即取消&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>shutdownNow&lt;/li>
&lt;/ul>
&lt;p>强制关闭 Channel，会取消所有的调用；即使是强制关闭也不会瞬间停止&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#00b1f7">shutdownNow&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>isShutdown&lt;/li>
&lt;/ul>
&lt;p>返回 &lt;code>Channel&lt;/code> 是否终止，终止的 &lt;code>Channel&lt;/code> 没有执行中的调用，相关的资源被释放&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">isShutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>awiatTermination&lt;/li>
&lt;/ul>
&lt;p>等待 &lt;code>Channel&lt;/code> 变为终止，如果超时则放弃等待&lt;/p></description></item><item><title>gRPC Client 启动流程</title><link>https://blog.hellowood.dev/posts/grpc-client-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 17 Nov 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-client-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>gRPC 启动初始化的流程，使用 Netty 作为底层的实现&lt;/p>
&lt;h2 id="初始化-channel">初始化 Channel&lt;/h2>
&lt;p>Channel 的初始化通过 &lt;code>ChannelBuilder&lt;/code> 构建
这里通过 &lt;code>forTarget&lt;/code> 设置了要解析的服务名称，会通过 &lt;code>NameResolver&lt;/code> 解析，转换为具体的地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forTarget&lt;/span>(&lt;span style="color:#98c379">&amp;#34;grpc-server&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>构建 ManagedChannel 实例&lt;/li>
&lt;/ul>
&lt;p>&lt;code>io.grpc.internal.AbstractManagedChannelImplBuilder#build&lt;/code>&lt;/p>
&lt;p>调用 build 时，会根据 builder 中的属性，创建 &lt;code>ManagedChannelImpl&lt;/code> 的实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ManagedChannel&lt;/span> &lt;span style="color:#00b1f7">build&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ManagedChannelOrphanWrapper&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ManagedChannelImpl&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 构建 Transport 工厂&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">buildTransportFactory&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ExponentialBackoffPolicy&lt;/span>.&lt;span style="color:#b3d23c">Provider&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 线程池&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SharedResourcePool&lt;/span>.&lt;span style="color:#b3d23c">forResource&lt;/span>(&lt;span style="color:#c1abea">GrpcUtil&lt;/span>.&lt;span style="color:#b3d23c">SHARED_CHANNEL_EXECUTOR&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 计时器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">GrpcUtil&lt;/span>.&lt;span style="color:#b3d23c">STOPWATCH_SUPPLIER&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 统计和追踪拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">getEffectiveInterceptors&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 时间提供器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TimeProvider&lt;/span>.&lt;span style="color:#b3d23c">SYSTEM_TIME_PROVIDER&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化-channel-属性">初始化 Channel 属性&lt;/h2>
&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/li>
&lt;/ul>
&lt;p>为 &lt;code>ManagedChannel&lt;/code> 设置属性，初始化服务发现，负载均衡，拦截器等并创建真正的 Channel&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannelImpl&lt;/span>(&lt;span style="color:#c1abea">AbstractManagedChannelImplBuilder&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">builder&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ClientTransportFactory&lt;/span> &lt;span style="color:#c1abea">clientTransportFactory&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">BackoffPolicy&lt;/span>.&lt;span style="color:#b3d23c">Provider&lt;/span> &lt;span style="color:#c1abea">backoffPolicyProvider&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ObjectPool&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">Executor&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">balancerRpcExecutorPool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Supplier&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Stopwatch&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">stopwatchSupplier&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ClientInterceptor&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">interceptors&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">TimeProvider&lt;/span> &lt;span style="color:#c1abea">timeProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="设置服务名称">设置服务名称&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">target&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">checkNotNull&lt;/span>(&lt;span style="color:#c1abea">builder&lt;/span>.&lt;span style="color:#b3d23c">target&lt;/span>, &lt;span style="color:#98c379">&amp;#34;target&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="设置-transportfactory">设置 TransportFactory&lt;/h5>
&lt;p>创建了支持鉴权的代理的 &lt;code>TransportFactory&lt;/code>，用于支持向服务端发起请求进行鉴权&lt;/p></description></item><item><title>gRPC Stream</title><link>https://blog.hellowood.dev/posts/grpc-stream/</link><pubDate>Sun, 08 Nov 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-stream/</guid><description>&lt;p>Stream 在 gRPC 中代表一个真正的请求，包含要发送的 消息；Stream 分为 &lt;code>ClientStream&lt;/code> 和 &lt;code>ServerStream&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-stream-diagram.png" alt="grpc-source-code-stream-diagram.png">&lt;/p>
&lt;h2 id="clientstream">ClientStream&lt;/h2>
&lt;p>&lt;code>ClientStream&lt;/code> 接口继承 Stream 接口，有多个实现类或抽象实现类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ForwardingClientStream&lt;/code>: 用于转发的 &lt;code>ClientStream&lt;/code>，支持代理真正的流，可以用于触发一些动作，如统计等&lt;/li>
&lt;li>&lt;code>NoopClientStream&lt;/code>: 不做任何操作的 &lt;code>ClientStream&lt;/code>，用于空实现
&lt;ul>
&lt;li>&lt;code>FailingClientStream&lt;/code>: 用于失败的 &lt;code>ClientStream&lt;/code>，处理请求失败的场景&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>InProcessClientStream&lt;/code>: 进程内的 &lt;code>ClientStream&lt;/code>，用于测试，不会发出实际请求&lt;/li>
&lt;li>&lt;code>AbstractClientStream&lt;/code>: &lt;code>ClientStream&lt;/code> 的抽象实现类，实现了部分基础操作，如发送header，写入消息，半关闭等
&lt;ul>
&lt;li>&lt;code>NettyClientStream&lt;/code>: 基于 Netty 实现的 &lt;code>ClientStream&lt;/code>，实现了基于 Netty 的帧操作等&lt;/li>
&lt;li>&lt;code>OkHttpClientStream&lt;/code>: 基于 OkHttp 实现的 &lt;code>ClientStream&lt;/code>，实现了基于 OkHttp 的帧操作等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>start&lt;/li>
&lt;/ul>
&lt;p>开始一个新的流，对于每一个流，只能调用一次&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">start&lt;/span>(&lt;span style="color:#c1abea">ClientStreamListener&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>halfClose&lt;/li>
&lt;/ul>
&lt;p>从客户端关闭流，当关闭后，不能发送更多的消息，但是可以接收消息，只能调用一次&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">halfClose&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>cancel&lt;/li>
&lt;/ul>
&lt;p>异常终止流，当调用后不会再发送和接收消息，只有在 start 之后才可以被调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">cancel&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">reason&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>setDeadline&lt;/li>
&lt;/ul>
&lt;p>设置请求有效截止时间，过了这个时间之后就会终止请求执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">setDeadline&lt;/span>(&lt;span style="color:#e5c07b">@Nonnull&lt;/span> &lt;span style="color:#c1abea">Deadline&lt;/span> &lt;span style="color:#c1abea">deadline&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>getAttributes&lt;/li>
&lt;/ul>
&lt;p>获取流的属性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Attributes&lt;/span> &lt;span style="color:#00b1f7">getAttributes&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="监听器">监听器&lt;/h3>
&lt;p>ClientStreamListener 用于监听客户端流的事件&lt;/p>
&lt;ul>
&lt;li>onReady&lt;/li>
&lt;/ul>
&lt;p>当接收得此事件说明 Transport 已经准备好发送附加消息了&lt;/p></description></item><item><title>gRPC Transport</title><link>https://blog.hellowood.dev/posts/grpc-transport/</link><pubDate>Thu, 22 Oct 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-transport/</guid><description>&lt;p>Transport 分为 &lt;code>ClientTransport&lt;/code> 和 &lt;code>ServerTransport&lt;/code>，分别用于客户端和服务端&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-transport-classes-diagram.png" alt="grpc-source-code-transport-classes-diagram.png">&lt;/p>
&lt;h2 id="clienttransport">ClientTransport&lt;/h2>
&lt;p>&lt;code>ClientTransport&lt;/code> 与真正的 IP 地址是一一对应的，用于建立连接，创建流&lt;/p>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>&lt;code>ClientTransport&lt;/code> 有多个继承接口和实现类:&lt;/p>
&lt;ul>
&lt;li>支持失败的实现类 &lt;code>FailingClientTransport&lt;/code>，客户端启动时创建的流会快速失败&lt;/li>
&lt;li>支持生命周期管理的接口 &lt;code>ManagedClientTransport&lt;/code>
&lt;ul>
&lt;li>支持延迟处理的实现类 &lt;code>DelayedClientTransport&lt;/code>&lt;/li>
&lt;li>基于连接的接口 &lt;code>ConnectionClientTransport&lt;/code>
&lt;ul>
&lt;li>基于 Netty 实现的 &lt;code>NettyClientTransport&lt;/code>&lt;/li>
&lt;li>基于 OkHttp 实现的 &lt;code>OkHttpClientTransport&lt;/code>&lt;/li>
&lt;li>用于进程内处理请求 &lt;code>InProcessTransport&lt;/code>&lt;/li>
&lt;li>支持代理的抽象实现类 &lt;code>ForwardingConnectionClientTransport&lt;/code>
&lt;ul>
&lt;li>支持授权检查的实现类 &lt;code>CallCredentialsApplyingTransportFactory&lt;/code>&lt;/li>
&lt;li>用于统计的 &lt;code>CallTracingTransport&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>ClientTransport#newStream&lt;/li>
&lt;/ul>
&lt;p>创建新的流，用于给远程服务端发送消息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ClientStream&lt;/span> &lt;span style="color:#00b1f7">newStream&lt;/span>(&lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span>, &lt;span style="color:#c7bf54">?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>, &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ClientTransport#ping&lt;/li>
&lt;/ul>
&lt;p>ping 远程的端点，当收到 ack 之后，会使用所给的 Executor 执行回调&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">ping&lt;/span>(&lt;span style="color:#c1abea">PingCallback&lt;/span> &lt;span style="color:#c1abea">callback&lt;/span>, &lt;span style="color:#c1abea">Executor&lt;/span> &lt;span style="color:#c1abea">executor&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ManagedClientTransport#start&lt;/li>
&lt;/ul>
&lt;p>启动 Transport，尝试建立连接，并启动监听器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Runnable&lt;/span> &lt;span style="color:#00b1f7">start&lt;/span>(&lt;span style="color:#c1abea">Listener&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="监听器">监听器&lt;/h3>
&lt;p>Transport 的 Listener 用于监听 Transport 事件，进行相应的处理&lt;/p>
&lt;ul>
&lt;li>监听就绪事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportReady&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监听使用中事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportInUse&lt;/span>(&lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">inUse&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监听关闭事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportShutdown&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">s&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监听终止事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">transportTerminated&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="clienttransport-流程">ClientTransport 流程&lt;/h3>
&lt;p>Transport 在 Channel 退出空闲模式时会被创建，然后通过 &lt;code>start&lt;/code> 方法启动，建立连接，当连接成功后触发 ready 回调，然后更新 LB 状态为 READY，然后可以执行发送请求到服务端&lt;/p></description></item><item><title>gRPC 使用自定义的 LoadBalancer</title><link>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-loadbalancer/</link><pubDate>Tue, 29 Sep 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-loadbalancer/</guid><description>&lt;p>gRPC 中提供了 &lt;code>round_robin&lt;/code>, &lt;code>pick_first&lt;/code>, &lt;code>grpclb&lt;/code>, &lt;code>HealthCheckingRoundRobin&lt;/code> 等负载均衡的实现，默认使用&lt;code>HealthCheckingRoundRobin&lt;/code>，该负载均衡支持检查 Subchannel 的健康状态&lt;/p>
&lt;p>LoadBalancer 主要类包括 &lt;code>LoadBalancerProvider&lt;/code>, &lt;code>LoadBalancer&lt;/code>, &lt;code>SubchannelPicker&lt;/code>, &lt;code>LoadBalancer.SubchannelStateListener &lt;/code>，所以实现自定义的 LoadBalancer 实现这几个类就可以&lt;/p>
&lt;h2 id="实现自定义的-loadbalancer">实现自定义的 LoadBalancer&lt;/h2>
&lt;p>自定义实现一个轮询策略的负载均衡器&lt;/p>
&lt;ul>
&lt;li>CustomLoadBalancerProvider.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomLoadBalancerProvider&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">LoadBalancerProvider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">isAvailable&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#00b1f7">getPriority&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">getPolicyName&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#34;custom_round_robin&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">LoadBalancer&lt;/span> &lt;span style="color:#00b1f7">newLoadBalancer&lt;/span>(&lt;span style="color:#c1abea">LoadBalancer&lt;/span>.&lt;span style="color:#b3d23c">Helper&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomLoadBalancer&lt;/span>(&lt;span style="color:#c1abea">helper&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CustomLoadBalancer.java&lt;/li>
&lt;/ul>
&lt;p>在 CustomLoadBalancer 中实现了地址的处理，根据地址创建 Subchannel，并启动 Subchannel 状态监听器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomLoadBalancer&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">LoadBalancer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Ref&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ConnectivityState&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#c1abea">STATE_INFO&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>.&lt;span style="color:#b3d23c">create&lt;/span>(&lt;span style="color:#98c379">&amp;#34;state-info&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Helper&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>, &lt;span style="color:#c1abea">Subchannel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">subchannelMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConcurrentHashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomLoadBalancer&lt;/span>(&lt;span style="color:#c1abea">Helper&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">helper&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">helper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">handleResolvedAddresses&lt;/span>(&lt;span style="color:#c1abea">ResolvedAddresses&lt;/span> &lt;span style="color:#c1abea">resolvedAddresses&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;处理地址:{}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">resolvedAddresses&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>().&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将解析的地址分割成单个 Address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">latestAddresses&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">resolvedAddresses&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">flatMap&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">splitAddressCollection&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">distinct&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 已经存在的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Set&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">originAddresses&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">keySet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 对新的 Address 创建 Subchannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>, &lt;span style="color:#c1abea">Subchannel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">newSubchannelMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">latestAddresses&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">filter&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">originAddresses&lt;/span>.&lt;span style="color:#b3d23c">contains&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">buildCreateSubchannelArgs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">helper&lt;/span>::&lt;span style="color:#c1abea">createSubchannel&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">processSubchannel&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toConcurrentMap&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span>::&lt;span style="color:#c1abea">getAddresses&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">s&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将已存在的 Subchannel 放到新的集合中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">originAddresses&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">filter&lt;/span>(&lt;span style="color:#c1abea">latestAddresses&lt;/span>::&lt;span style="color:#c1abea">contains&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">newSubchannelMap&lt;/span>.&lt;span style="color:#b3d23c">put&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>, &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">get&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 关闭需要移除的 Subchannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">originAddresses&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">filter&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">latestAddresses&lt;/span>.&lt;span style="color:#b3d23c">contains&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">get&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span>::&lt;span style="color:#c1abea">shutdown&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannelMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">newSubchannelMap&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">CreateSubchannelArgs&lt;/span> &lt;span style="color:#00b1f7">buildCreateSubchannelArgs&lt;/span>(&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">CreateSubchannelArgs&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAddresses&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAttributes&lt;/span>(&lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">set&lt;/span>(&lt;span style="color:#c1abea">STATE_INFO&lt;/span>, &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Ref&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">IDLE&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Stream&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">splitAddressCollection&lt;/span>(&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Attributes&lt;/span> &lt;span style="color:#c1abea">attributes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>.&lt;span style="color:#b3d23c">getAttributes&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>, &lt;span style="color:#c1abea">attributes&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Subchannel&lt;/span> &lt;span style="color:#00b1f7">processSubchannel&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span> &lt;span style="color:#c1abea">subchannel&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">containsValue&lt;/span>(&lt;span style="color:#c1abea">subchannel&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;{} {} 已经存在&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">subchannel&lt;/span>, &lt;span style="color:#c1abea">subchannel&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">subchannel&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannel&lt;/span>.&lt;span style="color:#b3d23c">start&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomSubchannelStateListener&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>, &lt;span style="color:#c1abea">subchannel&lt;/span>, &lt;span style="color:#c1abea">helper&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannel&lt;/span>.&lt;span style="color:#b3d23c">requestConnection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">subchannel&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">handleNameResolutionError&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span> &lt;span style="color:#c1abea">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;命名解析失败:{}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">error&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">helper&lt;/span>.&lt;span style="color:#b3d23c">updateBalancingState&lt;/span>(&lt;span style="color:#c1abea">ConnectivityState&lt;/span>.&lt;span style="color:#b3d23c">TRANSIENT_FAILURE&lt;/span>, &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CustomSubchannelPicker&lt;/span>(&lt;span style="color:#c1abea">PickResult&lt;/span>.&lt;span style="color:#b3d23c">withNoResult&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subchannelMap&lt;/span>.&lt;span style="color:#b3d23c">values&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">peek&lt;/span>(&lt;span style="color:#c1abea">s&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;关闭 {} {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span>.&lt;span style="color:#b3d23c">getAddresses&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">Subchannel&lt;/span>::&lt;span style="color:#c1abea">shutdown&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>, &lt;span style="color:#c1abea">Subchannel&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getSubchannelMap&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConcurrentHashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">subchannelMap&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CustomSubchannelStateListener.java&lt;/li>
&lt;/ul>
&lt;p>Subchannel 的状态监听器，当 Subchannel 状态发生变化时进行处理&lt;/p></description></item><item><title>gRPC 超时时间与重试时间间隔</title><link>https://blog.hellowood.dev/posts/grpc-%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E4%B8%8E%E9%87%8D%E8%AF%95%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/</link><pubDate>Sun, 20 Sep 2020 22:41:50 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E4%B8%8E%E9%87%8D%E8%AF%95%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94/</guid><description>&lt;blockquote>
&lt;p>gRPC 的超时时间生效机制以及重试超时时间间隔&lt;/p>
&lt;/blockquote>
&lt;h2 id="超时时间配置">超时时间配置&lt;/h2>
&lt;p>对指定的服务和方法单独设置超时时间，timeout 作用于所有的 RPC 请求（无论是否重试，都会在 timeout 的时间之后超时，进行中的重试请求会被取消）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;methodConfig&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;name&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;service&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;io.github.helloworlde.grpc.UserInfoService&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;retryPolicy&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;maxAttempts&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;initialBackoff&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;0.01s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;maxBackoff&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;0.1s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;backoffMultiplier&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;retryableStatusCodes&amp;#34;&lt;/span>: [&lt;span style="color:#63c381">&amp;#34;UNAVAILABLE&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;waitForReady&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;timeout&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="重试时间间隔">重试时间间隔&lt;/h2>
&lt;p>gRPC 的重试时间间隔是由 &lt;code>initialBackoff&lt;/code>, &lt;code>maxBackoff&lt;/code>, &lt;code>backoffMultiplier&lt;/code> 共同决定的，实现方法是 &lt;code>io.grpc.internal.RetriableStream.Sublistener#makeRetryDecision&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">maxAttempts&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">substream&lt;/span>.&lt;span style="color:#b3d23c">previousAttemptCount&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">1&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">isThrottled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">pushbackMillis&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">isRetryableStatusCode&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shouldRetry&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">backoffNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> (&lt;span style="color:#ef8383">long&lt;/span>) (&lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span> &lt;span style="color:#c1abea">random&lt;/span>.&lt;span style="color:#b3d23c">nextDouble&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Math&lt;/span>.&lt;span style="color:#b3d23c">min&lt;/span>((&lt;span style="color:#ef8383">long&lt;/span>) (&lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span> &lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">backoffMultiplier&lt;/span>), &lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">maxBackoffNanos&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">pushbackMillis&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;=&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">shouldRetry&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">backoffNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">TimeUnit&lt;/span>.&lt;span style="color:#b3d23c">MILLISECONDS&lt;/span>.&lt;span style="color:#b3d23c">toNanos&lt;/span>(&lt;span style="color:#c1abea">pushbackMillis&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">nextBackoffIntervalNanos&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">retryPolicy&lt;/span>.&lt;span style="color:#b3d23c">initialBackoffNanos&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果开启了重试，且没有达到节流的限制，如果服务端有回推延时时间，则使用服务端回推的时间作为延时时间，初始延迟时间作为下次延时的初始时间；&lt;/p></description></item><item><title>gRPC 中的核心概念</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 20 Sep 2020 22:40:59 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid><description>&lt;h2 id="stub">Stub&lt;/h2>
&lt;p>Stub 层暴露给开发者，提供类型安全的绑定到正在适应的数据模型/IDL/接口&lt;/p>
&lt;h2 id="channel">Channel&lt;/h2>
&lt;p>Channel 层是传输处理之上的抽象，适合拦截器、装饰器，并比 Stub 层暴露更多的行为给应用
一个 Channel 可能有多个 Subchannel&lt;/p>
&lt;h3 id="subchannel">Subchannel&lt;/h3>
&lt;p>Subchannel 代表负载均衡过的 Channel&lt;/p>
&lt;h3 id="channel-状态">Channel 状态&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>CONNECTING
Channel 正在尝试建立连接，并且正在等待名称解析，TCP连接建立或TLS握手所涉及的步骤之一，创建时可以将其用作通道的初始状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>READY
Channel 握手成功建立连接，并且所有的后续通信尝试均已成功(或未发生任何失败)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TRANSIENT_FAILURE
发生了一些瞬时故障（例如TCP 3握手超时或套接字错误），处于此状态的通道最终将切换到 CONNECTING 状态，并尝试再次建立连接。由于重试是通过指数退避完成的，因此无法连接的通道在此状态下将开始花费很少的时间，但是由于尝试反复失败，因此通道在此状态下将花费越来越多的时间。对于许多非致命故障（例如，由于服务器尚不可用，TCP连接尝试超时），通道可能会在此状态下花费越来越多的时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IDLE
由于缺少新的或待处理的RPC，Channel 甚至没有尝试创建连接的状态；可以在这种状态下创建新的RPC，任何在通道上启动RPC的尝试都将使该 Channel 退出此状态以进行连接。如果指定的 IDLE_TIMEOUT 的通道上没有 RPC 活动，即在此期间没有新的或挂起的（活动的）RPC，则 READY 或 CONNECTING 的通道将切换到 IDLE；此外，在没有活动或暂挂RPC的情况下接收 GOAWAY 的通道也应切换到 IDLE，以避免试图断开连接的服务器上的连接过载。我们将使用默认的IDLE_TIMEOUT 300秒（5分钟）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SHUTDOWN
此频道已开始关闭，任何新的RPC应该立即失败，待处理的RPC可能会继续运行，直到应用程序将其取消为止。通道可能进入此状态，原因是应用程序明确请求关闭，或者尝试进行连接通信期间发生了不可恢复的错误。（截至2015年6月12日，（连接或通讯时没有已知的错误被归类为不可恢复。）进入此状态的通道永远不会离开此状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="transport">Transport&lt;/h2>
&lt;p>Transport 层承担在线上放置和获取字节的工作，被建模为 Stream 工厂，是真正的连接&lt;/p>
&lt;p>gRPC 有三个 Transport 实现：&lt;/p>
&lt;ol>
&lt;li>基于 Netty的 Transport 是主要的 Transport 实现，基于 Netty，可同时用于客户端和服务端&lt;/li>
&lt;li>基于 OkHttp 的 Transport 是轻量级的 Transport，基于 OkHttp，主要用于 Android 端并只作为客户端&lt;/li>
&lt;li>InProcess Transport 是当服务器和客户端在同一个进程内时使用，用于测试&lt;/li>
&lt;/ol></description></item><item><title>gRPC 重试流程</title><link>https://blog.hellowood.dev/posts/grpc-%E9%87%8D%E8%AF%95%E6%B5%81%E7%A8%8B/</link><pubDate>Sun, 20 Sep 2020 22:40:07 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E9%87%8D%E8%AF%95%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>当第一次调用失败，流监听器关闭的时候，会根据请求的处理状态和方法的配置，判断是否需要重试&lt;/p>
&lt;p>请求的处理状态有三种，在&lt;code>io.grpc.internal.ClientStreamListener.RpcProgress&lt;/code>中定义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>PROCESSED&lt;/code>: 请求被正常处理，按照返回的状态码决定是否要重试&lt;/li>
&lt;li>&lt;code>REFUSED&lt;/code>: 没有被服务端的应用逻辑层处理，直接重试，不计入重试次数&lt;/li>
&lt;li>&lt;code>DROPPED&lt;/code>: 请求被负载均衡丢弃了，不重试，如果是对冲则取消其他的对冲请求，直接提交&lt;/li>
&lt;/ul>
&lt;h2 id="发起请求">发起请求&lt;/h2>
&lt;ul>
&lt;li>io.grpc.stub.ClientCalls#blockingUnaryCall&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-blockingUnaryCall-diagram.png" alt="grpc-java-blockingUnaryCall-diagram.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ClientCallImpl#startInternal&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-client-call-start.png" alt="grpc-java-client-call-start.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl.ChannelTransportProvider#newRetriableStream&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-transport-provider-new-retriable-stream.png" alt="grpc-java-transport-provider-new-retriable-stream.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#start&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-retriable-stream-start.png" alt="grpc-java-retriable-stream-start.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#createSubstream&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-retriable-stream-create-sub-stream.png" alt="grpc-java-retriable-stream-create-sub-stream.png">&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ManagedChannelImpl.ChannelTransportProvider#newRetriableStream#RetryStream#newSubstream&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-java-retriable-stream-new-sub-stream.png" alt="grpc-java-retriable-stream-new-sub-stream.png">&lt;/p>
&lt;ol>
&lt;li>通过生成的代码中的方法，调用 &lt;code>io.grpc.stub.ClientCalls#blockingUnaryCall&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>首先通过 channel 创建&lt;code>ClientCall&lt;/code>，然后通过 &lt;code>futureUnaryCall&lt;/code> 提交请求，返回 Future，根据返回的 Future 循环等待，通过&lt;code>executor.waitAndDrain()&lt;/code>执行请求，直到 Future 完成，返回结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">RespT&lt;/span> &lt;span style="color:#00b1f7">blockingUnaryCall&lt;/span>(&lt;span style="color:#c1abea">Channel&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">MethodDescriptor&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">method&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CallOptions&lt;/span> &lt;span style="color:#c1abea">callOptions&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ReqT&lt;/span> &lt;span style="color:#c1abea">req&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 创建新的调用的 ClientCall，指定了调用类型和执行器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ClientCall&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">call&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">channel&lt;/span>.&lt;span style="color:#b3d23c">newCall&lt;/span>(&lt;span style="color:#c1abea">method&lt;/span>, &lt;span style="color:#c1abea">callOptions&lt;/span>.&lt;span style="color:#b3d23c">withOption&lt;/span>(&lt;span style="color:#c1abea">ClientCalls&lt;/span>.&lt;span style="color:#b3d23c">STUB_TYPE_OPTION&lt;/span>, &lt;span style="color:#c1abea">StubType&lt;/span>.&lt;span style="color:#b3d23c">BLOCKING&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">withExecutor&lt;/span>(&lt;span style="color:#c1abea">executor&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 执行调用，发出请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ListenableFuture&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">responseFuture&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">futureUnaryCall&lt;/span>(&lt;span style="color:#c1abea">call&lt;/span>, &lt;span style="color:#c1abea">req&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">responseFuture&lt;/span>.&lt;span style="color:#b3d23c">isDone&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#8a93a5;font-style:italic">// 执行提交的 Runnable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">executor&lt;/span>.&lt;span style="color:#b3d23c">waitAndDrain&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">InterruptedException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">interrupt&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">call&lt;/span>.&lt;span style="color:#b3d23c">cancel&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Thread interrupted&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">getUnchecked&lt;/span>(&lt;span style="color:#c1abea">responseFuture&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>执行 unary 调用 &lt;code>futureUnaryCall&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这里创建了 Future，通过 &lt;code>asyncUnaryRequestCall&lt;/code> 继续调用&lt;/p></description></item><item><title>gRPC 对冲原理</title><link>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E5%8E%9F%E7%90%86/</link><pubDate>Sun, 20 Sep 2020 22:39:26 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%AF%B9%E5%86%B2%E5%8E%9F%E7%90%86/</guid><description>&lt;p>gRPC 对冲开启后，当请求在指定的时间间隔后没有返回时，会发起对冲请求，继续等待，如果依然没有返回，则重复发送直到接收到返回结果或者超时取消&lt;/p>
&lt;p>对冲适用于当下游服务部分节点故障无法及时响应或者响应不及时的场景，通过对冲可以减少请求的失败率，但是可能会导致延时增加&lt;/p>
&lt;p>对冲和重试的流程相似，在第一次发起请求的时候根据服务名和方法名决定使用哪种策略；如果是对冲策略，则在发起请求时提交一个延时任务，这个任务会发起一个新的请求，并在执行的时候再发起一个请求，并将这些请求添加到队列中；多个请求哪个先返回就使用哪个请求的结果，将其他的请求取消并提交流&lt;/p>
&lt;h2 id="执行流程">执行流程&lt;/h2>
&lt;ul>
&lt;li>io.grpc.internal.RetriableStream#start&lt;/li>
&lt;/ul>
&lt;p>开始第一个 RPC 调用&lt;/p>
&lt;pre tabindex="0">&lt;code> @Override
 public final void start(ClientStreamListener listener) {
 // 构造一个 BufferEntry
 class StartEntry implements BufferEntry {
 @Override
 public void runWith(Substream substream) {
 substream.stream.start(new Sublistener(substream));
 }
 }

 synchronized (lock) {
 // 新建 BufferEntry，添加到 buffer 中
 state.buffer.add(new StartEntry());
 }

 // 创建 Substream
 Substream substream = createSubstream(0);
 hedgingPolicy = hedgingPolicyProvider.get();
 // 如果有对冲策略
 if (!HedgingPolicy.DEFAULT.equals(hedgingPolicy)) {
 // 如果对冲策略有效，则将重试策略置为 null
 isHedging = true;
 retryPolicy = RetryPolicy.DEFAULT;

 FutureCanceller scheduledHedgingRef = null;

 synchronized (lock) {
 // 将这个流添加到对冲中
 state = state.addActiveHedge(substream);
 // 没有提交的流，且没有达到最大对冲次数，且没有终止，且没有节流或没有达到节流阈值
 // 则创建对冲 Future
 if (hasPotentialHedging(state) &amp;amp;&amp;amp; (throttle == null || throttle.isAboveThreshold())) {
 scheduledHedging = scheduledHedgingRef = new FutureCanceller(lock);
 }
 }

 // 如果对冲请求不为空，则提交延时任务
 if (scheduledHedgingRef != null) {
 scheduledHedgingRef.setFuture(
 scheduledExecutorService.schedule(
 new HedgingRunnable(scheduledHedgingRef),
 hedgingPolicy.hedgingDelayNanos,
 TimeUnit.NANOSECONDS)
 );
 }
 }
 // 消耗缓冲的请求
 drain(substream);
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>io.grpc.internal.RetriableStream.HedgingRunnable&lt;/li>
&lt;/ul>
&lt;p>对冲任务，在执行的时候发起请求，并根据当前的提交的请求数量、状态等判断是否需要取消，如果不取消则再次提交一个延时任务&lt;/p></description></item><item><title>gRPC 自定义健康检查</title><link>https://blog.hellowood.dev/posts/grpc-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link><pubDate>Sun, 20 Sep 2020 22:38:15 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid><description>&lt;p>在 gRPC 中自定义健康检查逻辑，用于检查特定的组件(如检查 Redis、MQ 等)，或者结合其他的服务组件一起使用(如使用 Spring Boot 的健康检查)&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>gRPC 的健康检查服务是通过 &lt;code>health.proto&lt;/code>定义的&lt;/p>
&lt;ul>
&lt;li>health.proto&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">syntax&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">grpc&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#c1abea">health.v1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">csharp_namespace&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Grpc.Health.V1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">go_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;google.golang.org/grpc/health/grpc_health_v1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_multiple_files&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_outer_classname&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;HealthProto&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">option&lt;/span> &lt;span style="color:#c1abea">java_package&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;io.grpc.health.v1&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HealthCheckRequest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">message&lt;/span> &lt;span style="color:#76a9f9">HealthCheckResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">enum&lt;/span> &lt;span style="color:#c1abea">ServingStatus&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">UNKNOWN&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SERVING&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">NOT_SERVING&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SERVICE_UNKNOWN&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServingStatus&lt;/span> &lt;span style="color:#c1abea">status&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">service&lt;/span> &lt;span style="color:#c1abea">Health&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 单次健康检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">Check&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 流式健康检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c678dd">rpc&lt;/span> &lt;span style="color:#c1abea">Watch&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span>) &lt;span style="color:#c678dd">returns&lt;/span> (&lt;span style="color:#c1abea">stream&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>里面定义了两个方法，一个是用于单次检查的 &lt;code>Check&lt;/code>方法，一个是用于流式请求的 &lt;code>Watch&lt;/code>方法&lt;/p>
&lt;h3 id="自定义检查组件">自定义检查组件&lt;/h3>
&lt;ul>
&lt;li>CustomHealthCheckImpl.java&lt;/li>
&lt;/ul>
&lt;p>自定义健康检查逻辑，通过不同的组件名称返回相应的状态信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomHealthCheckImpl&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">HealthGrpc&lt;/span>.&lt;span style="color:#b3d23c">HealthImplBase&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">check&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">responseObserver&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">out&lt;/span>.&lt;span style="color:#b3d23c">println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;健康检查:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getService&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getServingStatus&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setStatus&lt;/span>(&lt;span style="color:#c1abea">servingStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseObserver&lt;/span>.&lt;span style="color:#b3d23c">onNext&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseObserver&lt;/span>.&lt;span style="color:#b3d23c">onCompleted&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">watch&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">StreamObserver&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">responseObserver&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">out&lt;/span>.&lt;span style="color:#b3d23c">println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;健康检查 Stream:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getService&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getServingStatus&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setStatus&lt;/span>(&lt;span style="color:#c1abea">servingStatus&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseObserver&lt;/span>.&lt;span style="color:#b3d23c">onNext&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#00b1f7">getServingStatus&lt;/span>(&lt;span style="color:#c1abea">HealthCheckRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">service&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getService&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">switch&lt;/span> (&lt;span style="color:#c1abea">service&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span>.&lt;span style="color:#b3d23c">SERVING&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;mysql&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">checkMySQL&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#98c379">&amp;#34;redis&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">checkRedis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">servingStatus&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">HealthCheckResponse&lt;/span>.&lt;span style="color:#b3d23c">ServingStatus&lt;/span>.&lt;span style="color:#b3d23c">UNKNOWN&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">servingStatus&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;p>在 Server 端添加自定义的健康检查服务&lt;/p></description></item><item><title>gRPC 健康检查</title><link>https://blog.hellowood.dev/posts/grpc-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link><pubDate>Sun, 20 Sep 2020 22:37:34 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid><description>&lt;p>在 gRPC 中使用健康检查，在负载均衡前通过健康检查，只对健康的 Subchannel 发起请求，保证请求的成功率&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="server-端">Server 端&lt;/h3>
&lt;p>健康检查是一个独立的 Service，需要在 Server 端显式添加健康检查服务&lt;/p>
&lt;p>健康检查定义了两个方法，一个适用于单次请求的 &lt;code>check&lt;/code> 方法，另一个是适用于 Stream 流的 &lt;code>watch&lt;/code> 方法&lt;/p>
&lt;p>Server 端的健康检查由 &lt;code>io.grpc.services.HealthStatusManager&lt;/code>控制，抽象类是 &lt;code>io.grpc.health.v1.HealthGrpc.HealthImplBase&lt;/code>，具体实现是通过 &lt;code>io.grpc.services.HealthServiceImpl&lt;/code>&lt;/p>
&lt;ul>
&lt;li>在 Server 端添加健康检查服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">HealthStatusManager&lt;/span> &lt;span style="color:#c1abea">healthStatusManager&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HealthStatusManager&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Server&lt;/span> &lt;span style="color:#c1abea">server&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ServerBuilder&lt;/span>.&lt;span style="color:#b3d23c">forPort&lt;/span>(&lt;span style="color:#c1abea">1234&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">addService&lt;/span>(&lt;span style="color:#c1abea">healthStatusManager&lt;/span>.&lt;span style="color:#b3d23c">getHealthService&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">addService&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HelloServiceImpl&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，当 Server 端启动之后，就可以通过访问 &lt;code>grpc.health.v1.Health&lt;/code>服务获取当前的 Server 端的状态&lt;/p>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;ol>
&lt;li>添加配置&lt;/li>
&lt;/ol>
&lt;p>客户端开启健康检查有两个条件：&lt;/p>
&lt;ul>
&lt;li>配置了健康检查参数，配置的名称是 &lt;code>healthCheckConfig&lt;/code>，通过指定 &lt;code>serviceName&lt;/code> 的方式配置&lt;/li>
&lt;li>使用了支持健康检查的 LB (如 round_robin)&lt;/li>
&lt;/ul>
&lt;p>需要注意，这里的 &lt;code>serviceName&lt;/code>可以是组件名称，或者服务名称；服务端默认为 &lt;code>&amp;quot;&amp;quot;&lt;/code>， 如果想检查某个组件，需要自己实现健康检查的逻辑；配置中的 &lt;code>serviceName&lt;/code>只有在 NameReovler 解析到新的配置，且发生变化时才会更新，所以设置 &lt;code>serviceName&lt;/code> 意义不大&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Map&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">configMap&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">put&lt;/span>(&lt;span style="color:#98c379">&amp;#34;healthCheckConfig&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">put&lt;/span>(&lt;span style="color:#98c379">&amp;#34;serviceName&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">forTarget&lt;/span>(&lt;span style="color:#98c379">&amp;#34;server&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">defaultServiceConfig&lt;/span>(&lt;span style="color:#c1abea">configMap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">defaultLoadBalancingPolicy&lt;/span>(&lt;span style="color:#98c379">&amp;#34;round_robin&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>执行健康检查&lt;/li>
&lt;/ol>
&lt;p>在发起请求前，会先使用 Service 的名称请求服务端健康检查服务，检查服务是否处于 &lt;code>SERVING&lt;/code> 状态，如果状态正常，则发起请求，否则将会失败&lt;/p></description></item><item><title>gRPC 负载均衡</title><link>https://blog.hellowood.dev/posts/grpc-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Sun, 20 Sep 2020 22:36:58 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>&lt;p>gRPC 内定义了 LoadBalancer 接口，用于负载均衡&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-loadbalancer-methods.png" alt="grpc-source-code-loadbalancer-methods.png">&lt;/p>
&lt;p>LoadBalancer 中的主要方法&lt;/p>
&lt;ul>
&lt;li>&lt;code>handleResolvedAddress&lt;/code>：处理 &lt;code>NameResolver&lt;/code> 解析的地址，用于创建 &lt;code>Subchannel&lt;/code>&lt;/li>
&lt;li>&lt;code>handleNameResolutionError&lt;/code>: 处理命名解析失败，会销毁已经存在的 &lt;code>Suchannel&lt;/code>&lt;/li>
&lt;li>&lt;code>requestConnection&lt;/code>: 创建连接，会为 &lt;code>Subchannel&lt;/code> 初始化 &lt;code>Transport&lt;/code>，并建立连接&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-loadbalancer-sub-class.png" alt="grpc-source-code-loadbalancer-sub-class.png">&lt;/p>
&lt;p>LoadBalancer 接口有多个实现类，如用于代理的 &lt;code>ForwardingLoadBalancer&lt;/code>；基于策略的 &lt;code>RoundRobinLoadBalancer&lt;/code>,&lt;code>PickFirstLoadBalancer&lt;/code>, &lt;code>GrpclbLoadBalancer&lt;/code>等；支持扩展功能的&lt;code>HealthCheckingLoadBalancer&lt;/code>, &lt;code>GracefulSwitchLoadBalancer&lt;/code> 等&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-loadbalancer-class-diagram.png" alt="grpc-source-code-loadbalancer-class-diagram.png">&lt;/p>
&lt;p>LoadBalancer 有多个内部类，用于实现负载均衡&lt;/p>
&lt;ul>
&lt;li>&lt;code>Factory&lt;/code>: 用于创建 &lt;code>LoadBalancer&lt;/code>，通过 &lt;code>LoadBalancerProvider&lt;/code> 实现&lt;/li>
&lt;li>&lt;code>Subchannel&lt;/code>: 逻辑连接，一个 &lt;code>Subchannel&lt;/code> 内可能包含多个 &lt;code>IP:PORT&lt;/code>&lt;/li>
&lt;li>&lt;code>Helper&lt;/code>: 用于创建 &lt;code>LoadBalancer&lt;/code>、&lt;code>Subchannel&lt;/code> 等&lt;/li>
&lt;li>&lt;code>SubchannelPicker&lt;/code>: &lt;code>Subchannel&lt;/code> 选择器，根据不同的策略使用不同的选择方式&lt;/li>
&lt;li>&lt;code>SubchannelStateListener&lt;/code>: &lt;code>Subchannel&lt;/code> 状态监听器，当 &lt;code>Subchannel&lt;/code> 状态发生变化时及时更新&lt;/li>
&lt;/ul>
&lt;p>LoadBalancer 的工作流程是：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>LoadBalancerRegistry&lt;/code> 或者 SPI 的方式注册 &lt;code>LoadBalancerProvider&lt;/code>&lt;/li>
&lt;li>调用 Channel Builder 的 &lt;code>defaultLoadBalancingPolicy&lt;/code> 设置负载均衡策略&lt;/li>
&lt;li>在 &lt;code>ManagedChannelImpl&lt;/code> 的构造方法中，创建 &lt;code>Factory&lt;/code>&lt;/li>
&lt;li>在 &lt;code>ManagedChannelImpl#exitIdleMode&lt;/code> 中创建 &lt;code>LoadBalancer&lt;/code> 实例&lt;/li>
&lt;li>将创建的实例作为参数传递给 &lt;code>NameResolverListener&lt;/code>&lt;/li>
&lt;li>当 &lt;code>NameResolver&lt;/code> 解析服务名称后，最终调用 &lt;code>handleResolvedAddresses &lt;/code>方法，根据不同的策略进行处理&lt;/li>
&lt;li>&lt;code>LoadBalancer&lt;/code> 根据解析的地址创建 &lt;code>Subchannel&lt;/code>&lt;/li>
&lt;li>&lt;code>Subchannel&lt;/code>调用 &lt;code>requestConnection&lt;/code> 方法建立连接&lt;/li>
&lt;/ol>
&lt;h2 id="创建-loadbalancer">创建 LoadBalancer&lt;/h2>
&lt;ol>
&lt;li>创建 Channel 前注册 Provider&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">LoadBalancerRegistry&lt;/span>.&lt;span style="color:#b3d23c">getDefaultRegistry&lt;/span>().&lt;span style="color:#b3d23c">register&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HealthCheckingRoundRobinLoadBalancerProvider&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>创建 Channel 时设置负载均衡策略&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forTarget&lt;/span>(&lt;span style="color:#98c379">&amp;#34;server&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">defaultLoadBalancingPolicy&lt;/span>(&lt;span style="color:#98c379">&amp;#34;round_robin&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>在 &lt;code>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/code> 构造方法中初始化 Factory&lt;/li>
&lt;/ol>
&lt;p>Factory 的实现类是 &lt;code>AutoConfiguredLoadBalancerFactory&lt;/code>&lt;/p></description></item><item><title>HPA 使用自定义的指标自动扩缩容</title><link>https://blog.hellowood.dev/posts/hpa-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8C%87%E6%A0%87%E8%87%AA%E5%8A%A8%E6%89%A9%E7%BC%A9%E5%AE%B9/</link><pubDate>Sun, 20 Sep 2020 22:36:15 +0800</pubDate><guid>https://blog.hellowood.dev/posts/hpa-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8C%87%E6%A0%87%E8%87%AA%E5%8A%A8%E6%89%A9%E7%BC%A9%E5%AE%B9/</guid><description>&lt;p>Kubernetes 支持使用自定义的指标作为 HPA 的依据；&lt;/p>
&lt;p>KEDA 是基于事件驱动的自动扩缩容组件；主要有两部分：&lt;/p>
&lt;ol>
&lt;li>Agent: 用于触发和停用扩缩容，通过 keda-operator 实现&lt;/li>
&lt;li>Metrics: 用于收集指标，提供给 Agent，通过 keda-operator-metrics-apiserver 实现&lt;/li>
&lt;/ol>
&lt;p>KEDA 适配了多个组件，支持从 Prometheus、MySQL、MQ、Redis、自定义的组件等获取指标&lt;/p>
&lt;h2 id="前提">前提&lt;/h2>
&lt;p>环境中安装了 metrics-server&lt;/p>
&lt;h2 id="安装-keda-组件">安装 KEDA 组件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm repo add kedacore https://kedacore.github.io/charts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>helm repo update​
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create namespace keda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>helm install keda kedacore/keda --namespace keda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成后会看到相关的组件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get all -n keda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>​
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pod/keda-operator-6b7f8d7b46-tb69x 1/1 Running &lt;span style="color:#d19a66">0&lt;/span> 160m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pod/keda-operator-metrics-apiserver-58657d68db-bs94r 1/1 Running &lt;span style="color:#d19a66">0&lt;/span> 160m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>​
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span style="color:#c7bf54">(&lt;/span>S&lt;span style="color:#c7bf54">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service/keda-operator-metrics ClusterIP 192.168.68.139 &amp;lt;none&amp;gt; 8383/TCP,8686/TCP 159m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service/keda-operator-metrics-apiserver ClusterIP 192.168.106.114 &amp;lt;none&amp;gt; 443/TCP,80/TCP 160m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>​
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/keda-operator 1/1 &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> 160m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/keda-operator-metrics-apiserver 1/1 &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> 160m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>​
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replicaset.apps/keda-operator-6b7f8d7b46 &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> 160m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replicaset.apps/keda-operator-metrics-apiserver-58657d68db &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> 160m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;ol>
&lt;li>创建 HPA&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>kubectl apply -f demo-api-hpa.yaml
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>为 demo 配置 Service，用于访问请求&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">develop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">nodePort&lt;/span>: &lt;span style="color:#d19a66">30088&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">protocol&lt;/span>: &lt;span style="color:#98c379">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">targetPort&lt;/span>: &lt;span style="color:#d19a66">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: &lt;span style="color:#98c379">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>配置 KEDA 对象&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">keda.k8s.io/v1alpha1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ScaledObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">develop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scaleTargetRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">deploymentName&lt;/span>: &lt;span style="color:#98c379">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">develop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pollingInterval&lt;/span>: &lt;span style="color:#d19a66">15&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cooldownPeriod&lt;/span>: &lt;span style="color:#d19a66">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">minReplicaCount&lt;/span>: &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">maxReplicaCount&lt;/span>: &lt;span style="color:#d19a66">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">triggers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">type&lt;/span>: &lt;span style="color:#98c379">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">serverAddress&lt;/span>: &lt;span style="color:#98c379">http://prometheus.local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metricName&lt;/span>: &lt;span style="color:#98c379">http_requests_per_min&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">threshold&lt;/span>: &lt;span style="color:#63c381">&amp;#34;10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">query&lt;/span>: &lt;span style="color:#98c379">sum(rate(http_server_requests_seconds_count{application=&amp;#34;demo&amp;#34;}[1m]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>poolingInterval&lt;/code>: 从 triggers 拉取的周期
&lt;code>colldownPeriod&lt;/code>: 缩容的等待时间，从最后一次超过阈值的 tirgger
&lt;code>minReplicaCount&lt;/code>: 扩缩容最小的 Pod 数量
&lt;code>maxReplicaCount&lt;/code>: 扩缩容最大的 Pod 数量
&lt;code>triggers&lt;/code>: 触发器，定义指标
&lt;code>type&lt;/code>: 数据来源，支持 Prometheus、MySQL、MQ、Redis、自定义扩展等
&lt;code>metricName&lt;/code>: 定义当前指标的名称
&lt;code>threshold&lt;/code>: 扩缩容的阈值
&lt;code>query&lt;/code>: 从 Prometheus 查询指标的语句&lt;/p></description></item><item><title>gRPC 命名解析</title><link>https://blog.hellowood.dev/posts/grpc-%E5%91%BD%E5%90%8D%E8%A7%A3%E6%9E%90/</link><pubDate>Sun, 20 Sep 2020 22:35:22 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E5%91%BD%E5%90%8D%E8%A7%A3%E6%9E%90/</guid><description>&lt;p>命名解析根据服务的 URI，从注册中心获取并解析服务实例 IP，默认支持 schema 为 DNS，grpclb，xds 等&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-name-resolver-diagram.png" alt="grpc-source-code-name-resolver-diagram.png">&lt;/p>
&lt;p>gRPC 的命名解析的父类接口是 &lt;code>NameResolver&lt;/code>
&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-name-resolver-class.png" alt="grpc-source-code-name-resolver-class.png">&lt;/p>
&lt;p>&lt;code>NameResolver&lt;/code> 包含有多个子类，用于实现命名解析
每个 &lt;code>NameResolver&lt;/code> 都有一个 &lt;code>Provider&lt;/code>，用于创建 &lt;code>NameResolver&lt;/code> 实例；所有的 &lt;code>Provider&lt;/code> 都注册到 &lt;code>NameResolverRegistry&lt;/code> 中，&lt;code>NameResolverRegistry&lt;/code> 创建 &lt;code>Factory&lt;/code> 实例，最终通过 &lt;code>Provider&lt;/code> 创建 &lt;code>NameResolver&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/grpc-source-code-name-resolver-with-sub-class.png" alt="grpc-source-code-name-resolver-with-sub-class.png">&lt;/p>
&lt;p>命名解析的整个工作流程是：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>NameResolverRegistry&lt;/code> 或者 SPI 方式注册 Provider&lt;/li>
&lt;li>调用 Channel 的 &lt;code>build&lt;/code> 方法创建 &lt;code>NameResovler.Factory&lt;/code>&lt;/li>
&lt;li>根据 Factory 最终调用 Provider 创建 &lt;code>NameResolver&lt;/code>，&lt;/li>
&lt;li>创建 &lt;code>Listener&lt;/code> 的实例&lt;/li>
&lt;li>调用 &lt;code>NameResolver&lt;/code> 的 &lt;code>start&lt;/code> 方法，传入 &lt;code>Listener&lt;/code> 实例&lt;/li>
&lt;li>创建 &lt;code>Runnable&lt;/code> 任务，通过调用 &lt;code>Listener&lt;/code> 的 &lt;code>onResult&lt;/code> 方法进行更新&lt;/li>
&lt;/ol>
&lt;h2 id="创建-nameresolver">创建 NameResolver&lt;/h2>
&lt;p>在 Channel 调用 &lt;code>build&lt;/code> 方式时，会在 &lt;code>io.grpc.internal.ManagedChannelImpl#ManagedChannelImpl&lt;/code>的构造方法中获取 &lt;code>NameResolver.Factory&lt;/code>，这个属性的值是由调用 &lt;code>io.grpc.internal.AbstractManagedChannelImplBuilder#getNameResolverFactory&lt;/code> 方法获取的，这个方法里面的属性值来自于 &lt;code>io.grpc.NameResolverRegistry#asFactory&lt;/code>,&lt;code>NameResolverRegistry&lt;/code> 自己通过内部类 &lt;code>NameResolverFactory&lt;/code>创建了&lt;code>NameResovler.Factory&lt;/code> 的实例，在&lt;code>io.grpc.internal.ManagedChannelImpl#getNameResolver&lt;/code>中调用 Factory 的 &lt;code>newNameResolver&lt;/code>时，从 &lt;code>provider&lt;/code> 属性中获取根据优先级排序后的 Provider，通过 Provider 创建 &lt;code>NameResolver&lt;/code> 实例并返回第一个有效实例&lt;/p></description></item><item><title>gRPC 使用自定义的 NameResolver</title><link>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-nameresolver/</link><pubDate>Sun, 20 Sep 2020 22:34:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-nameresolver/</guid><description>&lt;p>在使用注册中心时，gRPC 并未提供注册中心的服务发现，需要自己实现 &lt;code>NameResolverProvider&lt;/code> 和 &lt;code>NameResolver&lt;/code>&lt;/p>
&lt;ul>
&lt;li>NameResolver&lt;/li>
&lt;/ul>
&lt;p>&lt;code>NameResolver&lt;/code> 里面重写了 &lt;code>start&lt;/code> 和 &lt;code>refresh&lt;/code> 方法，这两个方法都调用一个 &lt;code>resolve&lt;/code> 方法做服务发现；
&lt;code>resovle&lt;/code> 方法内部通过服务名从注册中心拉取服务实例列表，然后调用 &lt;code>Listener&lt;/code> 的 &lt;code>onResult&lt;/code>方法，将实例列表传递给 &lt;code>LoadBalancer&lt;/code>，完成服务解析
在服务运行期间，因为实例可能会发生变化，所以可以通过定时执行触发服务解析；如果注册中心支持，也可以通过回调触发&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomNameResolver&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">NameResolver&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">ScheduledExecutorService&lt;/span> &lt;span style="color:#c1abea">executorService&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ScheduledThreadPoolExecutor&lt;/span>(&lt;span style="color:#c1abea">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Listener2&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">CustomNameResolver&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">getServiceAuthority&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">shutdown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">executorService&lt;/span>.&lt;span style="color:#b3d23c">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">start&lt;/span>(&lt;span style="color:#c1abea">Listener2&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">listener&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">listener&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">resolve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">refresh&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">resolve&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">resolve&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">executorService&lt;/span>.&lt;span style="color:#b3d23c">scheduleAtFixedRate&lt;/span>(() &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 从注册中心获取地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">InetSocketAddress&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">addressList&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getAddressList&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">authority&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">addressList&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">||&lt;/span> &lt;span style="color:#c1abea">addressList&lt;/span>.&lt;span style="color:#b3d23c">size&lt;/span>() &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">SocketAddress&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">socketAddressList&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">addressList&lt;/span>.&lt;span style="color:#b3d23c">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>::&lt;span style="color:#c1abea">toSocketAddress&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span> &lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">EquivalentAddressGroup&lt;/span>(&lt;span style="color:#c1abea">socketAddressList&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">key&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">Key&lt;/span>.&lt;span style="color:#b3d23c">create&lt;/span>(&lt;span style="color:#98c379">&amp;#34;CustomKey&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;CustomValue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Attributes&lt;/span> &lt;span style="color:#c1abea">attributes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Attributes&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>().&lt;span style="color:#b3d23c">set&lt;/span>(&lt;span style="color:#c1abea">key&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span>).&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ConfigOrError&lt;/span> &lt;span style="color:#c1abea">configOrError&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ConfigOrError&lt;/span>.&lt;span style="color:#b3d23c">fromError&lt;/span>(&lt;span style="color:#c1abea">Status&lt;/span>.&lt;span style="color:#b3d23c">NOT_FOUND&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ResolutionResult&lt;/span> &lt;span style="color:#c1abea">resolutionResult&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ResolutionResult&lt;/span>.&lt;span style="color:#b3d23c">newBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAddresses&lt;/span>(&lt;span style="color:#c1abea">Arrays&lt;/span>.&lt;span style="color:#b3d23c">asList&lt;/span>(&lt;span style="color:#c1abea">equivalentAddressGroup&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setAttributes&lt;/span>(&lt;span style="color:#c1abea">attributes&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setServiceConfig&lt;/span>(&lt;span style="color:#c1abea">configOrError&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">listener&lt;/span>.&lt;span style="color:#b3d23c">onResult&lt;/span>(&lt;span style="color:#c1abea">resolutionResult&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#c1abea">0&lt;/span>, &lt;span style="color:#c1abea">5&lt;/span>, &lt;span style="color:#c1abea">TimeUnit&lt;/span>.&lt;span style="color:#b3d23c">SECONDS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">SocketAddress&lt;/span> &lt;span style="color:#00b1f7">toSocketAddress&lt;/span>(&lt;span style="color:#c1abea">InetSocketAddress&lt;/span> &lt;span style="color:#c1abea">address&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#c1abea">address&lt;/span>.&lt;span style="color:#b3d23c">getHostName&lt;/span>(), &lt;span style="color:#c1abea">address&lt;/span>.&lt;span style="color:#b3d23c">getPort&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">InetSocketAddress&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getAddressList&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">authority&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span> &lt;span style="color:#c1abea">inetSocketAddress&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#98c379">&amp;#34;localhost&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">1234&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span> &lt;span style="color:#c1abea">inetSocketAddress2&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InetSocketAddress&lt;/span>(&lt;span style="color:#98c379">&amp;#34;127.0.0.1&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">1234&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">Arrays&lt;/span>.&lt;span style="color:#b3d23c">asList&lt;/span>(&lt;span style="color:#c1abea">inetSocketAddress&lt;/span>, &lt;span style="color:#c1abea">inetSocketAddress2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>NameResolverProvider&lt;/li>
&lt;/ul>
&lt;p>&lt;code>NameResolverProvider&lt;/code> 主要用于注册 &lt;code>NameResolver&lt;/code>，可以设置默认的协议，是否可用，优先级等
优先级有效值是 0-10，gRPC 默认的 &lt;code>DnsNameResolver&lt;/code> 优先级是5，所以自定义的优先级要大于5&lt;/p></description></item><item><title>gRPC 中 Binlog 打印原理</title><link>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD-binlog-%E6%89%93%E5%8D%B0%E5%8E%9F%E7%90%86/</link><pubDate>Sun, 20 Sep 2020 22:33:59 +0800</pubDate><guid>https://blog.hellowood.dev/posts/grpc-%E4%B8%AD-binlog-%E6%89%93%E5%8D%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;p>gRPC 支持将请求调用的参数、Header 等信息以二进制的方式输出到文件中&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>binlog 的依赖在 &lt;code>grpc-services&lt;/code>中，所以需要有该依赖&lt;/p>
&lt;ul>
&lt;li>创建 Channel 时指定&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">BinaryLog&lt;/span> &lt;span style="color:#c1abea">binaryLog&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">BinaryLogs&lt;/span>.&lt;span style="color:#b3d23c">createBinaryLog&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TempFileSink&lt;/span>(), &lt;span style="color:#98c379">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">channel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">ManagedChannelBuilder&lt;/span>.&lt;span style="color:#b3d23c">forAddress&lt;/span>(&lt;span style="color:#c1abea">host&lt;/span>, &lt;span style="color:#c1abea">port&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">usePlaintext&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">setBinaryLog&lt;/span>(&lt;span style="color:#c1abea">binaryLog&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在创建时，需要指定打印的方法，&lt;code>*&lt;/code>代表打印所有的方法，具体指定可以参考 &lt;a href="https://github.com/helloworlde/proposal/blob/master/A16-binary-logging.md#control-interface">Control Interface&lt;/a>
也可以在创建时不指定参数，通过设置环境变量 &lt;code>GRPC_BINARY_LOG_CONFIG=*&lt;/code>来指定需要打印的方法
如果需要指定文件的生成位置，可以重写&lt;code>io.grpc.services.BinaryLogSink&lt;/code>，指定文件位置&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>在方法调用时，会判断有没有设置 binlog 对象，如果有则会封装方法，添加处理器和监听器；然后重新创建 &lt;code>ServerMethodDefinition&lt;/code>；通过二进制日志拦截器 &lt;code>io.grpc.services.BinlogHelper#getClientInterceptor&lt;/code> 拦截请求并写入日志&lt;/p>
&lt;ul>
&lt;li>io.grpc.internal.ServerImpl.ServerTransportListenerImpl#startCall&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">ServerStreamListener&lt;/span> &lt;span style="color:#00b1f7">startCall&lt;/span>(&lt;span style="color:#c1abea">ServerStream&lt;/span> &lt;span style="color:#c1abea">stream&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">fullMethodName&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServerMethodDefinition&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ReqT&lt;/span>, &lt;span style="color:#c1abea">RespT&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">methodDef&lt;/span>, &lt;span style="color:#c1abea">Metadata&lt;/span> &lt;span style="color:#c1abea">headers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Context&lt;/span>.&lt;span style="color:#b3d23c">CancellableContext&lt;/span> &lt;span style="color:#c1abea">context&lt;/span>, &lt;span style="color:#c1abea">StatsTraceContext&lt;/span> &lt;span style="color:#c1abea">statsTraceCtx&lt;/span>, &lt;span style="color:#c1abea">Tag&lt;/span> &lt;span style="color:#c1abea">tag&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 如果 binlog 不为空，即需要记录binlog，则添加请求监听器和方法处理器记录 binlog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServerMethodDefinition&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&lt;/span>, &lt;span style="color:#c7bf54">?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">wMethodDef&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">binlog&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">?&lt;/span> &lt;span style="color:#c1abea">interceptedDef&lt;/span> : &lt;span style="color:#c1abea">binlog&lt;/span>.&lt;span style="color:#b3d23c">wrapMethodDefinition&lt;/span>(&lt;span style="color:#c1abea">interceptedDef&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">startWrappedCall&lt;/span>(&lt;span style="color:#c1abea">fullMethodName&lt;/span>, &lt;span style="color:#c1abea">wMethodDef&lt;/span>, &lt;span style="color:#c1abea">stream&lt;/span>, &lt;span style="color:#c1abea">headers&lt;/span>, &lt;span style="color:#c1abea">context&lt;/span>, &lt;span style="color:#c1abea">tag&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>io.grpc.services.BinaryLogProvider#wrapMethodDefinition&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> public final &amp;lt;ReqT, RespT&amp;gt; ServerMethodDefinition&amp;lt;?, ?&amp;gt; wrapMethodDefinition(ServerMethodDefinition&amp;lt;ReqT, RespT&amp;gt; oMethodDef) {
 // 根据方法获取二进制日志拦截器，如果没有该方法则不拦截
 ServerInterceptor binlogInterceptor = getServerInterceptor(oMethodDef.getMethodDescriptor().getFullMethodName());
 if (binlogInterceptor == null) {
 return oMethodDef;
 }

 MethodDescriptor&amp;lt;byte[], byte[]&amp;gt; binMethod = BinaryLogProvider.toByteBufferMethod(oMethodDef.getMethodDescriptor());
 // 包装方法，添加了处理器和监听器
 ServerMethodDefinition&amp;lt;byte[], byte[]&amp;gt; binDef = InternalServerInterceptors.wrapMethod(oMethodDef, binMethod);
 // 创建处理器
 ServerCallHandler&amp;lt;byte[], byte[]&amp;gt; binlogHandler =
 InternalServerInterceptors.interceptCallHandlerCreate(binlogInterceptor, binDef.getServerCallHandler());
 // 创建服务方法定义
 return ServerMethodDefinition.create(binMethod, binlogHandler);
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>io.grpc.services.BinlogHelper#getClientInterceptor&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> public ClientInterceptor getClientInterceptor(final long callId) {
 return new ClientInterceptor() {
 boolean trailersOnlyResponse = true;

 @Override
 public &amp;lt;ReqT, RespT&amp;gt; ClientCall&amp;lt;ReqT, RespT&amp;gt; interceptCall(
 final MethodDescriptor&amp;lt;ReqT, RespT&amp;gt; method, CallOptions callOptions, Channel next) {
 final String methodName = method.getFullMethodName();
 final String authority = next.authority();
 final Deadline deadline = min(callOptions.getDeadline(), Context.current().getDeadline());

 return new SimpleForwardingClientCall&amp;lt;ReqT, RespT&amp;gt;(next.newCall(method, callOptions)) {
 @Override
 public void start(final ClientCall.Listener&amp;lt;RespT&amp;gt; responseListener, Metadata headers) {
 final Duration timeout = deadline == null ? null
 : Durations.fromNanos(deadline.timeRemaining(TimeUnit.NANOSECONDS));
 writer.logClientHeader(
 seq.getAndIncrement(),
 methodName,
 authority,
 timeout,
 headers,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId,
 /*peerAddress=*/ null);
 ClientCall.Listener&amp;lt;RespT&amp;gt; wListener =
 new SimpleForwardingClientCallListener&amp;lt;RespT&amp;gt;(responseListener) {
 @Override
 public void onMessage(RespT message) {
 writer.logRpcMessage(
 seq.getAndIncrement(),
 EventType.EVENT_TYPE_SERVER_MESSAGE,
 method.getResponseMarshaller(),
 message,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.onMessage(message);
 }

 @Override
 public void onHeaders(Metadata headers) {
 trailersOnlyResponse = false;
 writer.logServerHeader(
 seq.getAndIncrement(),
 headers,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId,
 getPeerSocket(getAttributes()));
 super.onHeaders(headers);
 }

 @Override
 public void onClose(Status status, Metadata trailers) {
 SocketAddress peer = trailersOnlyResponse
 ? getPeerSocket(getAttributes()) : null;
 writer.logTrailer(
 seq.getAndIncrement(),
 status,
 trailers,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId,
 peer);
 super.onClose(status, trailers);
 }
 };
 super.start(wListener, headers);
 }

 @Override
 public void sendMessage(ReqT message) {
 writer.logRpcMessage(
 seq.getAndIncrement(),
 EventType.EVENT_TYPE_CLIENT_MESSAGE,
 method.getRequestMarshaller(),
 message,
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.sendMessage(message);
 }

 @Override
 public void halfClose() {
 writer.logHalfClose(
 seq.getAndIncrement(),
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.halfClose();
 }

 @Override
 public void cancel(String message, Throwable cause) {
 writer.logCancel(
 seq.getAndIncrement(),
 GrpcLogEntry.Logger.LOGGER_CLIENT,
 callId);
 super.cancel(message, cause);
 }
 };
 }
 };
 }
&lt;/code>&lt;/pre></description></item><item><title>Spring Boot 2.3+ Liveness 和 Readness 接口使用</title><link>https://blog.hellowood.dev/posts/spring-boot-2-3-liveness-%E5%92%8C-readness-%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 20 Sep 2020 22:32:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-2-3-liveness-%E5%92%8C-readness-%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>在 Spring Boot 2.3+ 中，提供了单独的 liveness 和 readness，用于为 Kubernetes 提供相应检查接口&lt;/p>
&lt;ul>
&lt;li>liveness
用于检查应用是否存活，当应用组件因故障不健康时，可以通过这个接口的结果，配置相应策略，重启应用或重新调度 Pod&lt;/li>
&lt;li>readness
用于检查应用是否就绪，是否可以提供服务，如当流量太大超过应用的承载范围时，可以将这个接口的状态改为不健康，这样可以停止接收流量，当处理完后再次检查时变为健康，继续处理请求&lt;/li>
&lt;/ul>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>build.gradle 添加依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">plugins&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot&amp;#39;&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#98c379">&amp;#39;2.3.2.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;io.spring.dependency-management&amp;#39;&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#98c379">&amp;#39;1.0.9.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>application.properties 添加配置&lt;/li>
&lt;/ul>
&lt;p>从 2.3.2 开始，&lt;code>/actuator/health&lt;/code> 接口添加了分组的概念，默认分为 liveness 和 readness 两个组，需要显式指定后才可以使用，否则会返回 404；&lt;code>/actuator/health&lt;/code> 接口包含所有的指标&lt;/p>
&lt;p>当前应用支持的指标，可以设置 &lt;code>management.endpoint.health.show-details=always&lt;/code>后从 &lt;code>/actuator/health&lt;/code> 接口获取&lt;/p>
&lt;p>先指定 readness 指标，之后可以将剩余的所有指标设置为 liveness 的指标&lt;/p>
&lt;pre tabindex="0">&lt;code>management.endpoint.health.show-details=always
management.endpoint.health.group.readiness.include=ping
management.endpoint.health.group.liveness.include=*
management.endpoint.health.group.liveness.exclude=${management.endpoint.health.group.readiness.include}
&lt;/code>&lt;/pre>&lt;h2 id="测试">测试&lt;/h2>
&lt;ul>
&lt;li>启动应用&lt;/li>
&lt;/ul>
&lt;h3 id="请求相应的接口">请求相应的接口&lt;/h3>
&lt;ul>
&lt;li>health&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://localhost:8080/actuator/health
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;components&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;diskSpace&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;details&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;total&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">499963174912&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;free&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">380364800000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;threshold&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">10485760&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;exists&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;livenessStateProbeIndicator&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;ping&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;readinessStateProbeIndicator&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;groups&amp;#34;&lt;/span>: [&lt;span style="color:#63c381">&amp;#34;liveness&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;readiness&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>readiness&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://localhost:8080/actuator/health/readiness
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;components&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;ping&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>liveness&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://localhost:8080/actuator/health/liveness
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;components&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;custom&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;details&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;Status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;Health&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;diskSpace&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;details&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;exists&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;free&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">380286464000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;threshold&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">10485760&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;total&amp;#34;&lt;/span>: &lt;span style="color:#d19a66">499963174912&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;UP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自定义检查项">自定义检查项&lt;/h2>
&lt;p>和自定义健康检查项一样，添加一个新的 &lt;code>HealthIndicator&lt;/code>，添加到相应的分组即可&lt;/p></description></item><item><title>SpringBoot 框架自带插件构建 Docker 镜像</title><link>https://blog.hellowood.dev/posts/springboot-%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E6%8F%92%E4%BB%B6%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/</link><pubDate>Sun, 20 Sep 2020 22:31:43 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E6%A1%86%E6%9E%B6%E8%87%AA%E5%B8%A6%E6%8F%92%E4%BB%B6%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>Spring Boot 2.3.0 之后支持通过 buildpacks 插件构建 Docker 镜像，原理和执行过程与 Jib 类似，支持 Spring Boot 项目的分层构建，当代码改动后，只需更新代码部分，可以减少构建后 push 和 pull 镜像的时间，减少镜像存储的成本&lt;/p>
&lt;p>底层是通过 &lt;a href="https://buildpacks.io/">Buildpacks&lt;/a> 构建，Buildpacks是 Dockerfile 的一个替代方案。Buildpacks 能够自动探测运行 Docker 容器中的应用时所需要的软件，例如，它会探测应用中所使用的 Java 版本，基于该版本，buildpack 会选择所指定的 JRE 并构建 Docker 镜像&lt;/p>
&lt;h2 id="优点">优点&lt;/h2>
&lt;ul>
&lt;li>Spring Boot 编译插件集成，不需要额外的配置&lt;/li>
&lt;li>JVM 参数计算，支持通过线程数量，类数量等，动态的计算适合的 JVM 参数&lt;/li>
&lt;li>会在构建过程中加入 OOM Killer，当 OOM 时自动杀死应用&lt;/li>
&lt;/ul>
&lt;h2 id="弊端">弊端&lt;/h2>
&lt;ul>
&lt;li>在镜像中指定了内存参数，CPU数量等&lt;/li>
&lt;li>不能灵活添加自定义文件，只能添加应用中的文件为单独的层&lt;/li>
&lt;li>构建镜像、运行镜像与 Buildpacks 强绑定，需要 Buildpacks 的参数才可以成功构建，如果要自定义信息，同样需要在基础镜像中加入 Buildpacks 的配置&lt;/li>
&lt;li>不支持直接使用历史版本镜像的分层，当tag改变时会完全重新构建&lt;/li>
&lt;li>builder 和 runImage 中的内容是动态下载的，访问 GitHub 可能失败，也不安全&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;ol>
&lt;li>更新 SpringBoot 版本为 2.3.2.RELEASE&lt;/li>
&lt;li>启用分层&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">bootJar&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">layered&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>执行构建&lt;/li>
&lt;/ol>
&lt;p>会根据应用名称构建出一个镜像&lt;/p></description></item><item><title>Raspberry Pi 4 使用 Grafana 监控</title><link>https://blog.hellowood.dev/posts/raspberry-pi-4-%E4%BD%BF%E7%94%A8-grafana-%E7%9B%91%E6%8E%A7/</link><pubDate>Sun, 20 Sep 2020 22:30:45 +0800</pubDate><guid>https://blog.hellowood.dev/posts/raspberry-pi-4-%E4%BD%BF%E7%94%A8-grafana-%E7%9B%91%E6%8E%A7/</guid><description>&lt;h2 id="运行-influxdb">运行 Influxdb&lt;/h2>
&lt;p>Influxdb 和 Prometheus 一样都是时序数据库，不同的是它能够作为一个转发代理接受来自不同程序的消息，这里使用 Telegraf 采集数据，存放到 Influxdb 中&lt;/p>
&lt;ul>
&lt;li>启动&lt;/li>
&lt;/ul>
&lt;p>挂载的目的是为了将数据保存在宿主机上，方便查询历史数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name influxdb -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-p 8086:8086 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-v /root/workspace/docker/influxdb:/var/lib/influxdb &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	influxdb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行-telegraf">运行 Telegraf&lt;/h2>
&lt;p>Telegraf 是一个用 Golang 写的基于插件驱动的数据收集Agent，可以用来收集机器的数据&lt;/p>
&lt;ul>
&lt;li>telegraf.conf&lt;/li>
&lt;/ul>
&lt;p>在 telegraf 的配置文件末尾追加以下内容
telegraf 的配置可以先通过&lt;code>docker run telegraf&lt;/code>直接启动一个，然后进入容器，从 &lt;code>/etc/telegraf/&lt;/code>下修改&lt;/p>
&lt;pre tabindex="0">&lt;code>[[inputs.net]]

[[inputs.netstat]]

[[inputs.file]]
 files = [&amp;#34;/sys/class/thermal/thermal_zone0/temp&amp;#34;]
 name_override = &amp;#34;cpu_temperature&amp;#34;
 data_format = &amp;#34;value&amp;#34;
 data_type = &amp;#34;integer&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>启动&lt;/li>
&lt;/ul>
&lt;p>Telegraf 依赖于 Influxdb，所以使用同一个网络&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name telegraf -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	--net&lt;span style="color:#c7bf54">=&lt;/span>container:influxdb &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-v /var/run/docker.sock:/var/run/docker.sock &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-v /proc:/host/proc:ro &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-v /opt/:/opt/ &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-v /usr/lib/:/usr/lib/ &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-v /root/workspace/docker/telegraf/config/telegraf.conf:/etc/telegraf/telegraf.conf &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	-e &lt;span style="color:#dcaeea">HOST_PROC&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>/host/proc &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	telegraf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行-grafana">运行 Grafana&lt;/h2>
&lt;ul>
&lt;li>运行&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name&lt;span style="color:#c7bf54">=&lt;/span>grafana &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 3000:3000 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> grafana/grafana
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-influxdb-配置">修改 Influxdb 配置&lt;/h2>
&lt;p>在 Influxdb 中添加一个新的用户，并授予访问 telegraf 数据库的权限，用于 Grafana 拉取数据&lt;/p></description></item><item><title>Raspberry Pi 4 使用 USB 从 SSD 启动</title><link>https://blog.hellowood.dev/posts/raspberry-pi-4-%E4%BD%BF%E7%94%A8-usb-%E4%BB%8E-ssd-%E5%90%AF%E5%8A%A8/</link><pubDate>Sun, 20 Sep 2020 22:29:28 +0800</pubDate><guid>https://blog.hellowood.dev/posts/raspberry-pi-4-%E4%BD%BF%E7%94%A8-usb-%E4%BB%8E-ssd-%E5%90%AF%E5%8A%A8/</guid><description>&lt;p>树莓派 4 的最新固件已经支持从USB 启动，通过外接 U盘或者硬盘，能够摆脱 SD 卡的IO 速度限制，这里通过 USB 从 SSD 硬盘启动系统&lt;/p>
&lt;h2 id="安装-raspberry-pi-os">安装 Raspberry Pi OS&lt;/h2>
&lt;ul>
&lt;li>下载 Imager&lt;/li>
&lt;/ul>
&lt;p>从 &lt;a href="https://www.raspberrypi.org/downloads/">https://www.raspberrypi.org/downloads/&lt;/a> 下载相应 Imager&lt;/p>
&lt;ul>
&lt;li>安装 Raspberry Pi OS 到 SD 卡中&lt;/li>
&lt;/ul>
&lt;p>选择第一个镜像&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiOS-install-1.png" alt="RaspberryPiOS-install-1.png">&lt;/p>
&lt;p>然后选择 SD 卡后写入&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/RaspberryPiOS-install-2.png" alt="RaspberryPiOS-install-2.png">&lt;/p>
&lt;p>待写入完成后，将 SD 卡插入树莓派 4，正常启动&lt;/p>
&lt;h2 id="更新-eeprom">更新 EEPROM&lt;/h2>
&lt;ul>
&lt;li>查看配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vcgencmd bootloader_version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Apr &lt;span style="color:#d19a66">16&lt;/span> &lt;span style="color:#d19a66">2020&lt;/span> 18:11:26
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>version a5e1b95f320810c69441557c5f5f0a7f2460dfb8 &lt;span style="color:#c7bf54">(&lt;/span>release&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>timestamp &lt;span style="color:#d19a66">1587057086&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果日期是 &lt;code>May 15 2020&lt;/code> 之前的，则需要修改配置以启用新的固件&lt;/p>
&lt;ul>
&lt;li>更新&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt full-upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo reboot now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等更新完成后，会安装新的 &lt;code>rpi-eeprom&lt;/code>，更新重启后的版本是 &lt;code>Jun 15 2020&lt;/code>&lt;/p>
&lt;ul>
&lt;li>查看配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vcgencmd bootloader_config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">[&lt;/span>all&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">BOOT_UART&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">WAKE_ON_GPIO&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">POWER_OFF_ON_HALT&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">DHCP_TIMEOUT&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">45000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">DHCP_REQ_TIMEOUT&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">4000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">TFTP_FILE_TIMEOUT&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">30000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">ENABLE_SELF_UPDATE&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">DISABLE_HDMI&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">SD_BOOT_MAX_RETRIES&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">USB_MSD_BOOT_MAX_RETRIES&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">BOOT_ORDER&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>0xf41
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中的 &lt;code>BOOT_ORDER&lt;/code>的值是&lt;code>0xf41&lt;/code>，说明首先从&lt;code>USB mass storage boot&lt;/code>启动，如果失败，则从&lt;code>SD CARD&lt;/code>启动，具体的配置解释可以参考 &lt;a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2711_bootloader_config.md">Pi 4 Bootloader Configuration&lt;/a>&lt;/p></description></item><item><title>Spring Cloud 使用 Consul 作为配置中心</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-consul-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link><pubDate>Sun, 20 Sep 2020 22:28:50 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-consul-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid><description>&lt;h2 id="加载配置">加载配置&lt;/h2>
&lt;p>加载配置是通过 &lt;code>ConsulPropertySourceLocator&lt;/code> 来实现的，该类是 &lt;code>PropertySourceLocator&lt;/code>接口的实现类&lt;/p>
&lt;h3 id="bean-初始化">Bean 初始化&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ConsulPropertySourceLocator&lt;/span> &lt;span style="color:#00b1f7">consulPropertySourceLocator&lt;/span>(&lt;span style="color:#c1abea">ConsulConfigProperties&lt;/span> &lt;span style="color:#c1abea">consulConfigProperties&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConsulPropertySourceLocator&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">consul&lt;/span>, &lt;span style="color:#c1abea">consulConfigProperties&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取配置">获取配置&lt;/h3>
&lt;p>获取配置是通过 PropertySourceLocator#locate 方法实现的，最终将获取到属性添加到环境中&lt;/p>
&lt;ul>
&lt;li>ConsulPropertySourceLocator#locate&lt;/li>
&lt;/ul>
&lt;p>获取配置时，根据应用名称，路径，环境及配置类型拼接相应的路径，然后调用 Consul 获取 KV 值的接口，获取相应的配置，根据类型解析后放入环境中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Retryable&lt;/span>(&lt;span style="color:#c1abea">interceptor&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;consulRetryInterceptor&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PropertySource&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#c1abea">locate&lt;/span>(&lt;span style="color:#c1abea">Environment&lt;/span> &lt;span style="color:#c1abea">environment&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">environment&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span> &lt;span style="color:#c1abea">env&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> (&lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span>) &lt;span style="color:#c1abea">environment&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">appName&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">getName&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">appName&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">appName&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">env&lt;/span>.&lt;span style="color:#b3d23c">getProperty&lt;/span>(&lt;span style="color:#98c379">&amp;#34;spring.application.name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">profiles&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Arrays&lt;/span>.&lt;span style="color:#b3d23c">asList&lt;/span>(&lt;span style="color:#c1abea">env&lt;/span>.&lt;span style="color:#b3d23c">getActiveProfiles&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">prefix&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">getPrefix&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">suffixes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ArrayList&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// 不是文件类型的时候，后缀为 /，否则就是配置文件的后缀&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">getFormat&lt;/span>() &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#c1abea">FILES&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">suffixes&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			} &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">suffixes&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#98c379">&amp;#34;.yml&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">suffixes&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#98c379">&amp;#34;.yaml&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">suffixes&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#98c379">&amp;#34;.properties&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// 路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">defaultContext&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getContext&lt;/span>(&lt;span style="color:#c1abea">prefix&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">getDefaultContext&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">suffix&lt;/span> : &lt;span style="color:#c1abea">suffixes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contexts&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#c1abea">defaultContext&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">suffix&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// 追加环境及文件类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">suffix&lt;/span> : &lt;span style="color:#c1abea">suffixes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">addProfiles&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contexts&lt;/span>, &lt;span style="color:#c1abea">defaultContext&lt;/span>, &lt;span style="color:#c1abea">profiles&lt;/span>, &lt;span style="color:#c1abea">suffix&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">baseContext&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">getContext&lt;/span>(&lt;span style="color:#c1abea">prefix&lt;/span>, &lt;span style="color:#c1abea">appName&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// 应用名称前缀&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">suffix&lt;/span> : &lt;span style="color:#c1abea">suffixes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contexts&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#c1abea">baseContext&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">suffix&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">suffix&lt;/span> : &lt;span style="color:#c1abea">suffixes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">addProfiles&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contexts&lt;/span>, &lt;span style="color:#c1abea">baseContext&lt;/span>, &lt;span style="color:#c1abea">profiles&lt;/span>, &lt;span style="color:#c1abea">suffix&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">Collections&lt;/span>.&lt;span style="color:#b3d23c">reverse&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contexts&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">CompositePropertySource&lt;/span> &lt;span style="color:#c1abea">composite&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CompositePropertySource&lt;/span>(&lt;span style="color:#98c379">&amp;#34;consul&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">propertySourceContext&lt;/span> : &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contexts&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#c1abea">ConsulPropertySource&lt;/span> &lt;span style="color:#c1abea">propertySource&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">getFormat&lt;/span>() &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#c1abea">FILES&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#8a93a5;font-style:italic">// 获取值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">Response&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">GetValue&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">consul&lt;/span>.&lt;span style="color:#b3d23c">getKVValue&lt;/span>(&lt;span style="color:#c1abea">propertySourceContext&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">getAclToken&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#8a93a5;font-style:italic">// 添加当前索引&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">addIndex&lt;/span>(&lt;span style="color:#c1abea">propertySourceContext&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getConsulIndex&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#8a93a5;font-style:italic">// 如果值不为空，则更新值并初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getValue&lt;/span>() &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>							&lt;span style="color:#c1abea">ConsulFilesPropertySource&lt;/span> &lt;span style="color:#c1abea">filesPropertySource&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConsulFilesPropertySource&lt;/span>(&lt;span style="color:#c1abea">propertySourceContext&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">consul&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>							&lt;span style="color:#8a93a5;font-style:italic">// 解析配置内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>							&lt;span style="color:#c1abea">filesPropertySource&lt;/span>.&lt;span style="color:#b3d23c">init&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>							&lt;span style="color:#c1abea">propertySource&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">filesPropertySource&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					} &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">propertySource&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">create&lt;/span>(&lt;span style="color:#c1abea">propertySourceContext&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">contextIndex&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">propertySource&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">composite&lt;/span>.&lt;span style="color:#b3d23c">addPropertySource&lt;/span>(&lt;span style="color:#c1abea">propertySource&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				} &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">Exception&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">isFailFast&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">error&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Fail fast is set and there was an error reading configuration from consul.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">ReflectionUtils&lt;/span>.&lt;span style="color:#b3d23c">rethrowRuntimeException&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					} &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>						&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">warn&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Unable to load consul config from &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">propertySourceContext&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">composite&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="监听配置">监听配置&lt;/h2>
&lt;p>Consul 监听配置是通过定时任务实现的，&lt;/p></description></item><item><title>Spring Cloud 使用 Kubernetes 作为配置中心</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-1/</link><pubDate>Sun, 20 Sep 2020 22:28:15 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-1/</guid><description>&lt;p>Spring Cloud 支持使用 Kubernetes 作为配置中心，通过 ConfigMap 或 Secret，将配置添加到应用中&lt;/p>
&lt;h2 id="加载配置">加载配置&lt;/h2>
&lt;p>加载配置是通过 PropertySourceLocator 来实现的，ConfigMap 使用 &lt;code>ConfigMapPropertySourceLocator&lt;/code> 加载，Secret 使用 &lt;code>SecretsPropertySourceLocator&lt;/code>加载&lt;/p>
&lt;h3 id="bean-初始化">Bean 初始化&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e5c07b">@ConditionalOnProperty&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;spring.cloud.kubernetes.config.enabled&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">matchIfMissing&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ConfigMapPropertySourceLocator&lt;/span> &lt;span style="color:#00b1f7">configMapPropertySourceLocator&lt;/span>(&lt;span style="color:#c1abea">ConfigMapConfigProperties&lt;/span> &lt;span style="color:#c1abea">properties&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConfigMapPropertySourceLocator&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">client&lt;/span>, &lt;span style="color:#c1abea">properties&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e5c07b">@ConditionalOnProperty&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;spring.cloud.kubernetes.secrets.enabled&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">matchIfMissing&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">SecretsPropertySourceLocator&lt;/span> &lt;span style="color:#00b1f7">secretsPropertySourceLocator&lt;/span>(&lt;span style="color:#c1abea">SecretsConfigProperties&lt;/span> &lt;span style="color:#c1abea">properties&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SecretsPropertySourceLocator&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">client&lt;/span>, &lt;span style="color:#c1abea">properties&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取配置">获取配置&lt;/h3>
&lt;p>获取配置是通过 PropertySourceLocator#locate 方法实现的，最终将获取到属性添加到环境中&lt;/p>
&lt;h4 id="configmap">ConfigMap&lt;/h4>
&lt;ul>
&lt;li>ConfigMapPropertySourceLocator#locate&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PropertySource&lt;/span> &lt;span style="color:#00b1f7">locate&lt;/span>(&lt;span style="color:#c1abea">Environment&lt;/span> &lt;span style="color:#c1abea">environment&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">environment&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span> &lt;span style="color:#c1abea">env&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> (&lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span>) &lt;span style="color:#c1abea">environment&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ConfigMapConfigProperties&lt;/span>.&lt;span style="color:#b3d23c">NormalizedSource&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">sources&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">determineSources&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">CompositePropertySource&lt;/span> &lt;span style="color:#c1abea">composite&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CompositePropertySource&lt;/span>(&lt;span style="color:#98c379">&amp;#34;composite-configmap&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">properties&lt;/span>.&lt;span style="color:#b3d23c">isEnableApi&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">sources&lt;/span>.&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">s&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">composite&lt;/span>.&lt;span style="color:#b3d23c">addFirstPropertySource&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#c1abea">getMapPropertySourceForSingleConfigMap&lt;/span>(&lt;span style="color:#c1abea">env&lt;/span>, &lt;span style="color:#c1abea">s&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// 将配置添加的容器环境中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">addPropertySourcesFromPaths&lt;/span>(&lt;span style="color:#c1abea">environment&lt;/span>, &lt;span style="color:#c1abea">composite&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">composite&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>真正向 Kubernetes 发起请求的是通过调用 &lt;code>getMapPropertySourceForSingleConfigMap&lt;/code> 方法，创建&lt;code>ConfigMapPropertySource&lt;/code>实例的时候，会根据 &lt;code>getData&lt;/code> 方法，从 ConfigMap 获取属性解析并添加到环境中&lt;/p></description></item><item><title>Spring Cloud Consul 服务注册和发现</title><link>https://blog.hellowood.dev/posts/spring-cloud-consul-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</link><pubDate>Sun, 20 Sep 2020 22:27:16 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-consul-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</guid><description>&lt;p>Spring Cloud Kubernetes 使用，可以通过引入 &lt;code>org.springframework.cloud:spring-cloud-starter-consul-discovery&lt;/code>，这个 starter 依赖于 &lt;code>org.springframework.cloud:spring-cloud-consul-core&lt;/code> 和 &lt;code>org.springframework.cloud:spring-cloud-consul-discovery&lt;/code>&lt;/p>
&lt;h2 id="consul-的核心概念">Consul 的核心概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>server
集群的核心节点，用于和 agent 通讯，保存服务的信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>agent
集群节点的守护进程，用于服务注册等行为，但不保存数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>catalog
集群服务通信的接口&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="初始化-kubernetes-client">初始化 Kubernetes Client&lt;/h2>
&lt;h3 id="初始化-consul-依赖">初始化 Consul 依赖&lt;/h3>
&lt;p>相关 Consul 核心依赖的初始化是通过 &lt;code>org.springframework.cloud.consul.ConsulAutoConfiguration&lt;/code>实现的&lt;/p>
&lt;ul>
&lt;li>初始化 ConsulClient&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@ConditionalOnMissingBean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ConsulClient&lt;/span> &lt;span style="color:#00b1f7">consulClient&lt;/span>(&lt;span style="color:#c1abea">ConsulProperties&lt;/span> &lt;span style="color:#c1abea">consulProperties&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">agentPort&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getPort&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">agentHost&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">StringUtils&lt;/span>.&lt;span style="color:#b3d23c">isEmpty&lt;/span>(&lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getScheme&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c7bf54">?&lt;/span> &lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getScheme&lt;/span>() &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;://&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getHost&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			: &lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getHost&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getTls&lt;/span>() &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">ConsulProperties&lt;/span>.&lt;span style="color:#b3d23c">TLSConfig&lt;/span> &lt;span style="color:#c1abea">tls&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">consulProperties&lt;/span>.&lt;span style="color:#b3d23c">getTls&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">TLSConfig&lt;/span> &lt;span style="color:#c1abea">tlsConfig&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TLSConfig&lt;/span>(&lt;span style="color:#c1abea">tls&lt;/span>.&lt;span style="color:#b3d23c">getKeyStoreInstanceType&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">tls&lt;/span>.&lt;span style="color:#b3d23c">getCertificatePath&lt;/span>(), &lt;span style="color:#c1abea">tls&lt;/span>.&lt;span style="color:#b3d23c">getCertificatePassword&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">tls&lt;/span>.&lt;span style="color:#b3d23c">getKeyStorePath&lt;/span>(), &lt;span style="color:#c1abea">tls&lt;/span>.&lt;span style="color:#b3d23c">getKeyStorePassword&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConsulClient&lt;/span>(&lt;span style="color:#c1abea">agentHost&lt;/span>, &lt;span style="color:#c1abea">agentPort&lt;/span>, &lt;span style="color:#c1abea">tlsConfig&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConsulClient&lt;/span>(&lt;span style="color:#c1abea">agentHost&lt;/span>, &lt;span style="color:#c1abea">agentPort&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="服务注册">服务注册&lt;/h2>
&lt;h3 id="初始化-bean">初始化 Bean&lt;/h3>
&lt;p>相关 Bean 的初始化是在 &lt;code>org.springframework.cloud.consul.serviceregistry.ConsulAutoServiceRegistrationAutoConfiguration&lt;/code> 中完成的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 自动注册&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@ConditionalOnMissingBean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ConsulAutoServiceRegistration&lt;/span> &lt;span style="color:#00b1f7">consulAutoServiceRegistration&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ConsulServiceRegistry&lt;/span> &lt;span style="color:#c1abea">registry&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">AutoServiceRegistrationProperties&lt;/span> &lt;span style="color:#c1abea">autoServiceRegistrationProperties&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ConsulDiscoveryProperties&lt;/span> &lt;span style="color:#c1abea">properties&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ConsulAutoRegistration&lt;/span> &lt;span style="color:#c1abea">consulRegistration&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConsulAutoServiceRegistration&lt;/span>(&lt;span style="color:#c1abea">registry&lt;/span>, &lt;span style="color:#c1abea">autoServiceRegistrationProperties&lt;/span>, &lt;span style="color:#c1abea">properties&lt;/span>, &lt;span style="color:#c1abea">consulRegistration&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#8a93a5;font-style:italic">// 启动事件监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ConsulAutoServiceRegistrationListener&lt;/span> &lt;span style="color:#00b1f7">consulAutoServiceRegistrationListener&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ConsulAutoServiceRegistration&lt;/span> &lt;span style="color:#c1abea">registration&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ConsulAutoServiceRegistrationListener&lt;/span>(&lt;span style="color:#c1abea">registration&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@ConditionalOnMissingBean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ConsulAutoRegistration&lt;/span> &lt;span style="color:#00b1f7">consulRegistration&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">AutoServiceRegistrationProperties&lt;/span> &lt;span style="color:#c1abea">autoServiceRegistrationProperties&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ConsulDiscoveryProperties&lt;/span> &lt;span style="color:#c1abea">properties&lt;/span>, &lt;span style="color:#c1abea">ApplicationContext&lt;/span> &lt;span style="color:#c1abea">applicationContext&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ObjectProvider&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ConsulRegistrationCustomizer&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#c1abea">registrationCustomizers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">ObjectProvider&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">ConsulManagementRegistrationCustomizer&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#c1abea">managementRegistrationCustomizers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">HeartbeatProperties&lt;/span> &lt;span style="color:#c1abea">heartbeatProperties&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">ConsulAutoRegistration&lt;/span>.&lt;span style="color:#b3d23c">registration&lt;/span>(&lt;span style="color:#c1abea">autoServiceRegistrationProperties&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">properties&lt;/span>, &lt;span style="color:#c1abea">applicationContext&lt;/span>, &lt;span style="color:#c1abea">registrationCustomizers&lt;/span>.&lt;span style="color:#b3d23c">getIfAvailable&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c1abea">managementRegistrationCustomizers&lt;/span>.&lt;span style="color:#b3d23c">getIfAvailable&lt;/span>(), &lt;span style="color:#c1abea">heartbeatProperties&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="注册流程">注册流程&lt;/h3>
&lt;ul>
&lt;li>当监听到 &lt;code>WebServerInitializedEvent&lt;/code> 事件时触发注册&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ConsulAutoServiceRegistrationListener&lt;/code> 类实现了 &lt;code>SmartApplicationListener&lt;/code>接口&lt;/p></description></item><item><title>Spring Cloud Kubernetes 服务注册和发现</title><link>https://blog.hellowood.dev/posts/spring-cloud-kubernetes-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</link><pubDate>Sun, 20 Sep 2020 22:26:03 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-kubernetes-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0/</guid><description>&lt;p>Spring Cloud Kubernetes 使用，可以通过引入 &lt;code>org.springframework.cloud:spring-cloud-starter-kubernetes&lt;/code>，这个 starter 依赖于 &lt;code>org.springframework.cloud:spring-cloud-kubernetes-core&lt;/code> 和 &lt;code>org.springframework.cloud:spring-cloud-kubernetes-discovery&lt;/code>&lt;/p>
&lt;h2 id="初始化-kubernetes-client">初始化 Kubernetes Client&lt;/h2>
&lt;h3 id="初始化环境配置">初始化环境配置&lt;/h3>
&lt;p>环境初始化是通过 &lt;code>org.springframework.cloud.kubernetes.profile.KubernetesProfileEnvironmentPostProcessor&lt;/code>类实现的，当环境初始化完成时，会检查 Kubernetes 是否开启，如果开启则会判断 Profile 是否注入到容器中，没有时将会注入 Profile 到容器中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">postProcessEnvironment&lt;/span>(&lt;span style="color:#c1abea">ConfigurableEnvironment&lt;/span> &lt;span style="color:#c1abea">environment&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#c1abea">SpringApplication&lt;/span> &lt;span style="color:#c1abea">application&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#8a93a5;font-style:italic">// 判断是否启用 kubernetes，默认为 true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">kubernetesEnabled&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">environment&lt;/span>.&lt;span style="color:#b3d23c">getProperty&lt;/span>(&lt;span style="color:#98c379">&amp;#34;spring.cloud.kubernetes.enabled&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">Boolean&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">kubernetesEnabled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#8a93a5;font-style:italic">// 如果在 Kubernetes 中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">isInsideKubernetes&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// 判断是否存在 Kubernetes 环境的配置，如果不存在，则添加到环境变量中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">hasKubernetesProfile&lt;/span>(&lt;span style="color:#c1abea">environment&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#8a93a5;font-style:italic">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			} &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#c1abea">environment&lt;/span>.&lt;span style="color:#b3d23c">addActiveProfile&lt;/span>(&lt;span style="color:#c1abea">KUBERNETES_PROFILE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		} &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#8a93a5;font-style:italic">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="初始化-kubernetes-依赖">初始化 Kubernetes 依赖&lt;/h3>
&lt;p>相关 Kubernetes 核心依赖的初始化是通过 &lt;code>org.springframework.cloud.kubernetes.KubernetesAutoConfiguration&lt;/code>实现的&lt;/p></description></item><item><title>Spring Cloud Gateway 使用 Kubernetes 作为服务发现</title><link>https://blog.hellowood.dev/posts/spring-cloud-gateway-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</link><pubDate>Sun, 20 Sep 2020 22:25:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-gateway-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</guid><description>&lt;p>Spring Cloud Gateway 作为网关，通过用于执行一些通用逻辑后做请求转发，后端可能涉及到多个服务，每个服务又有多个实例，调用服务实例就需要动态的更新，可以通过注册中心来实现，如果部署在K8S集群中，可以直接使用K8S实现服务发现&lt;/p>
&lt;h2 id="应用">应用&lt;/h2>
&lt;h3 id="gateway">Gateway&lt;/h3>
&lt;h4 id="添加依赖">添加依赖&lt;/h4>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">plugins&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot&amp;#39;&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#98c379">&amp;#39;2.2.6.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;io.spring.dependency-management&amp;#39;&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#98c379">&amp;#39;1.0.9.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">ext&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">set&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;springCloudVersion&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;Hoxton.SR1&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">set&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;springKubernetesVersion&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;1.1.2.RELEASE&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-gateway&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-kubernetes-discovery&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testImplementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">exclude&lt;/span> &lt;span style="color:#f5a40d">group:&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.junit.vintage&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#f5a40d">module:&lt;/span> &lt;span style="color:#98c379">&amp;#39;junit-vintage-engine&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencyManagement&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">imports&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenBom&lt;/span> &lt;span style="color:#63c381">&amp;#34;org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenBom&lt;/span> &lt;span style="color:#63c381">&amp;#34;org.springframework.cloud:spring-cloud-kubernetes-dependencies:${springKubernetesVersion}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果是需要客户端实现负载均衡，依赖是&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-gateway&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-kubernetes-all&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-ribbon&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="添加路由配置">添加路由配置&lt;/h4>
&lt;ul>
&lt;li>bootstrap.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cloud&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">kubernetes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">discovery&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">catalogServicesWatchDelay&lt;/span>: &lt;span style="color:#d19a66">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">client&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">master-url&lt;/span>: &lt;span style="color:#98c379">https://kubernetes.docker.internal:6443&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ca-cert-data&lt;/span>: &lt;span style="color:#98c379">xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">default&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>applicaiton.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">application.name&lt;/span>: &lt;span style="color:#98c379">gateway&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cloud&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">gateway&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">discovery&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">locator&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enabled&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">url-expression&lt;/span>: &lt;span style="color:#63c381">&amp;#34;&amp;#39;http://&amp;#39;+serviceId+&amp;#39;:&amp;#39;+port&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lower-case-service-id&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">management&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">endpoints&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">exposure&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">include&lt;/span>: &lt;span style="color:#63c381">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 &lt;code>url-expression&lt;/code> 目的是为了在转发的时候直接转发到 Kubernetes 中相应的 Service 上去，默认的表达式为 &lt;code>&amp;quot;'lb://'+serviceId&amp;quot;&lt;/code>，这种适用于通过 Consul 或者 Eureka，最终是根据服务的IP和端口访问，&lt;code>spring-cloud-kubernetes&lt;/code>没有实现&lt;code>com.netflix.loadbalancer.AbstractServerList&lt;/code>，所以不会进行IP转换，最终是通过服务名称查找Service 实现调用，所以不需要负载均衡&lt;/p></description></item><item><title>Spring Cloud Gateway 使用 Kubernetes 实现负载均衡</title><link>https://blog.hellowood.dev/posts/spring-cloud-gateway-%E4%BD%BF%E7%94%A8-kubernetes-%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Sun, 20 Sep 2020 22:23:18 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-gateway-%E4%BD%BF%E7%94%A8-kubernetes-%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>&lt;p>在使用 Spring Cloud Gateway 作为服务服务发现时，可能会遇到 Gateway 并没有部署在服务所在的 Kubernetes 集群中，或者存在网络隔离，无法直接通过 Service Name 访问到相应的服务，这时候就需要通过 Service 的 IP 访问，但是，&lt;code>spring-cloud-kubernetes-discovery &lt;/code>没有像 &lt;code>spring-cloud-consul-discovery&lt;/code>一样实现服务负载均衡的接口，所以默认只会访问某个服务固定的 IP；这样就需要使用负载均衡的依赖&lt;/p>
&lt;h3 id="添加依赖">添加依赖&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-gateway&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-kubernetes-all&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-ribbon&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>spring-cloud-starter-kubernetes-all&lt;/code>包含 Kubernetes 负载均衡的实现&lt;/p>
&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;ul>
&lt;li>bootstrap.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cloud&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">kubernetes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">discovery&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">catalogServicesWatchDelay&lt;/span>: &lt;span style="color:#d19a66">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">client&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">master-url&lt;/span>: &lt;span style="color:#98c379">https://localhost:60002&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ca-cert-data&lt;/span>: &lt;span style="color:#98c379">xxxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">develop&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>applicaiton.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">application&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">gateway&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cloud&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">gateway&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">discovery&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">locator&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enabled&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lower-case-service-id&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">management&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">endpoints&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">exposure&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">include&lt;/span>: &lt;span style="color:#63c381">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Prometheus 使用 Consul 自动发现 Spring Boot 服务并拉取数据</title><link>https://blog.hellowood.dev/posts/prometheus-%E4%BD%BF%E7%94%A8-consul-%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0-spring-boot-%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%8B%89%E5%8F%96%E6%95%B0%E6%8D%AE/</link><pubDate>Sat, 16 May 2020 14:49:38 +0800</pubDate><guid>https://blog.hellowood.dev/posts/prometheus-%E4%BD%BF%E7%94%A8-consul-%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0-spring-boot-%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%8B%89%E5%8F%96%E6%95%B0%E6%8D%AE/</guid><description>&lt;p>使用 Prometheus监控 SpringBoot 应用，当应用很多，且上下线频繁时，需要不断的更改 Prometheus 的配置文件，不能灵活的使用，可以通过为 Prometheus配置注册中心，从注册中心拉取应用数据获取监控数据&lt;/p>
&lt;h2 id="启动-prometheus">启动 Prometheus&lt;/h2>
&lt;ul>
&lt;li>添加配置文件 prometheus.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p ~/docker/prometheus/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vi ~/docker/prometheus/config/prometheus.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">global&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scrape_interval&lt;/span>: &lt;span style="color:#98c379">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scrape_timeout&lt;/span>: &lt;span style="color:#98c379">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">evaluation_interval&lt;/span>: &lt;span style="color:#98c379">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">alerting&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">alertmanagers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">targets&lt;/span>: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scheme&lt;/span>: &lt;span style="color:#98c379">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timeout&lt;/span>: &lt;span style="color:#98c379">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">api_version&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">scrape_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">job_name&lt;/span>: &lt;span style="color:#98c379">prometheus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">honor_timestamps&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scrape_interval&lt;/span>: &lt;span style="color:#98c379">15s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scrape_timeout&lt;/span>: &lt;span style="color:#98c379">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metrics_path&lt;/span>: &lt;span style="color:#98c379">/metrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scheme&lt;/span>: &lt;span style="color:#98c379">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">localhost:9090&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动容器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name prometheus &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 9090:9090 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v ~/docker/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> prom/prometheus
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动-consul">启动 Consul&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name consul &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 8500:8500 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> consul
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动-spring-boot-应用">启动 Spring Boot 应用&lt;/h2>
&lt;h3 id="添加监控">添加监控&lt;/h3>
&lt;ul>
&lt;li>添加依赖 build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-consul-discovery&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span> &lt;span style="color:#98c379">&amp;#39;io.micrometer:micrometer-core:1.5.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span> &lt;span style="color:#98c379">&amp;#39;io.micrometer:micrometer-registry-prometheus:1.5.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改应用配置 applicaiton.properties&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.cloud.consul.host=localhost
spring.cloud.consul.port=8500
spring.cloud.consul.discovery.service-name=${spring.application.name}
spring.cloud.consul.discovery.prefer-ip-address=true
spring.cloud.consul.discovery.health-check-url=http://host.docker.internal:${server.port}/actuator/health
spring.cloud.consul.discovery.tags=metrics=true

management.endpoints.web.exposure.include=*
# prometheus
management.metrics.tags.application=${spring.application.name}
&lt;/code>&lt;/pre>&lt;p>上面配置中指定健康检查是为了 Consul 从容器访问宿主机的应用，指定tag是为了Prometheus 从Consul列表中拉取需要监控的指定应用&lt;/p></description></item><item><title>使用自定义 Grafana 面板监控 Consul</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89-grafana-%E9%9D%A2%E6%9D%BF%E7%9B%91%E6%8E%A7-consul/</link><pubDate>Sat, 16 May 2020 14:47:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89-grafana-%E9%9D%A2%E6%9D%BF%E7%9B%91%E6%8E%A7-consul/</guid><description>&lt;p>使用 Prometheus和 Grafana监控 Consul，&lt;a href="https://grafana.com/grafana/dashboards?orderBy=name&amp;amp;direction=asc">Dashboard&lt;/a> 中的基本都是Consul 自身的状态，除此之外，还需要一些业务相关的监控，比如当前注册的服务数量，健康和不健康的服务数量，拉取服务请求响应时间等数据&lt;/p>
&lt;h2 id="使用已有的-dashboard">使用已有的 Dashboard&lt;/h2>
&lt;p>如使用 &lt;a href="https://grafana.com/grafana/dashboards/10890">consul server&lt;/a> 这个面板，这个面板数据非常齐全，但是在 Prometheus 中添加了任务之后，发现很多数据都没有，如集群中 server的数量 &lt;code>consul_serf_lan_members&lt;/code> 这个数据，从 Consul 的 Metrics 中 &lt;a href="http://localhost:8500/v1/agent/metrics?format=prometheus">http://localhost:8500/v1/agent/metrics?format=prometheus&lt;/a>拉取也没有相关的数据，是因为Consul并没有提供相应的数据检测&lt;/p>
&lt;p>针对这种问题，可以使用 &lt;a href="https://github.com/prometheus/consul_exporter">consul_exporter&lt;/a> 这个项目，该项目会通过 Consul 的API 拉取相应的数据，在整理后通过自己的接口提供相应的统计数据&lt;/p>
&lt;ul>
&lt;li>通过 Docker 启动&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name exporter -d -p 9107:9107 prom/consul-exporter --consul.server&lt;span style="color:#c7bf54">=&lt;/span>host.docker.internal:8500
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>检查数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl localhost:9107/metrics
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>会返回相应的监控数据，这样就可以将 Consul中未提供的数据添加到 Prometheus中了&lt;/p>
&lt;h2 id="自定义监控数据">自定义监控数据&lt;/h2>
&lt;p>如果数据仍然不满足，可以基于&lt;a href="https://github.com/prometheus/consul_exporter">consul_exporter&lt;/a> 这个项目进行扩展，添加自定义的统计数据；如现在需要统计集群的响应时间，可以通过统计请求consul的耗时来实现：&lt;/p>
&lt;ol>
&lt;li>添加自定义的统计项&lt;/li>
&lt;/ol>
&lt;p>在常量中添加一个新的统计项&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">responseTime&lt;/span> = &lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#00b1f7">NewDesc&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#00b1f7">BuildFQName&lt;/span>(&lt;span style="color:#c1abea">namespace&lt;/span>, &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;response_time&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;Time spend for a request &amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> []&lt;span style="color:#ef8383">string&lt;/span>{&lt;span style="color:#98c379">&amp;#34;node&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;server_ip&amp;#34;&lt;/span>}, &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>实现统计方法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">Exporter&lt;/span>) &lt;span style="color:#00b1f7">collectResponseTime&lt;/span>(&lt;span style="color:#c1abea">ch&lt;/span> &lt;span style="color:#c678dd">chan&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;-&lt;/span> &lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#c1abea">Metric&lt;/span>) &lt;span style="color:#ef8383">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">start&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">time&lt;/span>.&lt;span style="color:#00b1f7">Now&lt;/span>().&lt;span style="color:#00b1f7">Nanosecond&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">serverIp&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#c1abea">client&lt;/span>.&lt;span style="color:#00b1f7">Status&lt;/span>().&lt;span style="color:#00b1f7">Leader&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">_&lt;/span> = &lt;span style="color:#c1abea">level&lt;/span>.&lt;span style="color:#00b1f7">Error&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#c1abea">logger&lt;/span>).&lt;span style="color:#00b1f7">Log&lt;/span>(&lt;span style="color:#98c379">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Failed to query leader data&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">costTime&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">time&lt;/span>.&lt;span style="color:#00b1f7">Now&lt;/span>().&lt;span style="color:#00b1f7">Nanosecond&lt;/span>() &lt;span style="color:#c7bf54">-&lt;/span> &lt;span style="color:#c1abea">start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ch&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;-&lt;/span> &lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#00b1f7">MustNewConstMetric&lt;/span>(&lt;span style="color:#c1abea">responseTime&lt;/span>, &lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#c1abea">GaugeValue&lt;/span>, &lt;span style="color:#ef8383">float64&lt;/span>(&lt;span style="color:#c1abea">costTime&lt;/span>), &lt;span style="color:#98c379">&amp;#34;leader&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">serverIp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>将统计项添加到 &lt;code>Collect&lt;/code> 和 &lt;code>Describe&lt;/code>中&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">Exporter&lt;/span>) &lt;span style="color:#00b1f7">Describe&lt;/span>(&lt;span style="color:#c1abea">ch&lt;/span> &lt;span style="color:#c678dd">chan&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;-&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#c1abea">Desc&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ch&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;-&lt;/span> &lt;span style="color:#c1abea">responseTime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">Exporter&lt;/span>) &lt;span style="color:#00b1f7">Collect&lt;/span>(&lt;span style="color:#c1abea">ch&lt;/span> &lt;span style="color:#c678dd">chan&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;-&lt;/span> &lt;span style="color:#c1abea">prometheus&lt;/span>.&lt;span style="color:#c1abea">Metric&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ok&lt;/span> = &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#00b1f7">collectResponseTime&lt;/span>(&lt;span style="color:#c1abea">ch&lt;/span>) &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#c1abea">ok&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，就会在启动后获取相应的数据，之后在 Prometheus 和 Grafana 中可以看到相应的数据&lt;/p></description></item><item><title>使用 Prometheus 和 Grafana 监控 SpringBoot 应用</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-prometheus-%E5%92%8C-grafana-%E7%9B%91%E6%8E%A7-springboot-%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 16 May 2020 14:43:07 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-prometheus-%E5%92%8C-grafana-%E7%9B%91%E6%8E%A7-springboot-%E5%BA%94%E7%94%A8/</guid><description>&lt;p>监控 Spring Boot 应用的状态，以及一些自定义的业务数据&lt;/p>
&lt;h2 id="监控-spring-boot-应用">监控 Spring Boot 应用&lt;/h2>
&lt;ul>
&lt;li>添加依赖 build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.micrometer:micrometer-core:1.5.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.micrometer:micrometer-registry-prometheus:1.5.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改配置 application.properties&lt;/li>
&lt;/ul>
&lt;p>需要注意的是，&lt;code>management.metrics.tags.application&lt;/code>这个参数一定要有，否则很多报表会因为没有这个tag不能正常显示&lt;/p>
&lt;pre tabindex="0">&lt;code># Actuator
management.endpoints.web.exposure.include=*
# Prometheus
management.metrics.tags.application=${spring.application.name}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 Prometheus 监控&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#e06c75">job_name&lt;/span>: &lt;span style="color:#63c381">&amp;#34;spring-prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metrics_path&lt;/span>: &lt;span style="color:#63c381">&amp;#34;/actuator/prometheus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scrape_interval&lt;/span>: &lt;span style="color:#98c379">5s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">static_configs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">targets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">host.docker.internal:8081&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置 Grafana&lt;/li>
&lt;/ul>
&lt;p>从 Grafana Dashboard 市场查找 Spring Boot 的看板，复制 ID 导入到 Grafana 中，如 &lt;a href="https://grafana.com/grafana/dashboards/6756">6756&lt;/a>&lt;/p>
&lt;p>导入之后发现有些数据不能正确显示，这是因为设置了变量，需要修改变量的值：&lt;/p>
&lt;p>Dashboard Setting -&amp;gt; Variables，选择相应的变量进行修改，这里修改两个：&lt;code>applicaiton&lt;/code> 和 &lt;code>instance&lt;/code>&lt;/p>
&lt;p>application&lt;/p>
&lt;pre tabindex="0">&lt;code>label_values(application)
&lt;/code>&lt;/pre>&lt;p>instance&lt;/p>
&lt;pre tabindex="0">&lt;code>label_values(jvm_memory_used_bytes{application=&amp;#34;$application&amp;#34;},instance)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://img.hellowood.dev/picture/springboot-grafana-dashboard-variable.png" alt="springboot-grafana-dashboard-variable.png">&lt;/p>
&lt;p>这样，就可以实现 application 和 instance的联动，选择application后，instance中显示相应的应用的实例&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/springboot-grafana-dashboard.png" alt="springboot-grafana-dashboard.png">&lt;/p>
&lt;h2 id="监控方法执行时间和数量">监控方法执行时间和数量&lt;/h2>
&lt;p>Prometheus 提供了时间和数量的监控指标，通过在方法上添加 &lt;code>@Counted&lt;/code>和&lt;code>@Timed&lt;/code>来监控数据；相关文档可以参考 &lt;a href="http://micrometer.io/docs/concepts#_the_timed_annotation">The @Timed annotation&lt;/a>&lt;/p>
&lt;ul>
&lt;li>注入切面的Bean&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@EnableAspectJAutoProxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">PrometheusAspectConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">TimedAspect&lt;/span> &lt;span style="color:#00b1f7">timedAspect&lt;/span>(&lt;span style="color:#c1abea">MeterRegistry&lt;/span> &lt;span style="color:#c1abea">registry&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TimedAspect&lt;/span>(&lt;span style="color:#c1abea">registry&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">CountedAspect&lt;/span> &lt;span style="color:#00b1f7">countedAspect&lt;/span>(&lt;span style="color:#c1abea">MeterRegistry&lt;/span> &lt;span style="color:#c1abea">registry&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">CountedAspect&lt;/span>(&lt;span style="color:#c1abea">registry&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="监控定时任务">监控定时任务&lt;/h4>
&lt;ul>
&lt;li>监控定时任务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomScheduleTask&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Random&lt;/span> &lt;span style="color:#c1abea">random&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Random&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Scheduled&lt;/span>(&lt;span style="color:#c1abea">fixedDelay&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">5000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Timed&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;custom_task_time&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">extraTags&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> {&lt;span style="color:#98c379">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;自定义定时任务&amp;#34;&lt;/span>}, &lt;span style="color:#c1abea">description&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;自定义定时任务监控&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">customSchedule&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">InterruptedException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Thread&lt;/span>.&lt;span style="color:#b3d23c">sleep&lt;/span>(&lt;span style="color:#c1abea">random&lt;/span>.&lt;span style="color:#b3d23c">nextInt&lt;/span>(&lt;span style="color:#c1abea">5000&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;定时任务执行完成&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查看监控数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl localhost:8081/actuator/prometheus | grep custom_task
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="监控接口">监控接口&lt;/h4>
&lt;ul>
&lt;li>controller&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Timed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Counted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/timed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#00b1f7">timed&lt;/span>() &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">InterruptedException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">customService&lt;/span>.&lt;span style="color:#b3d23c">timed&lt;/span>(&lt;span style="color:#c1abea">UUID&lt;/span>.&lt;span style="color:#b3d23c">randomUUID&lt;/span>().&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>监控数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl localhost:8081/actuator/prometheus | grep method_time
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自定义监控指标">自定义监控指标&lt;/h2>
&lt;p>通过自定义监控指标监控业务相关数据&lt;/p></description></item><item><title>使用 Prometheus 和 Grafana 监控 Consul</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-prometheus-%E5%92%8C-grafana-%E7%9B%91%E6%8E%A7-consul/</link><pubDate>Sat, 16 May 2020 14:36:34 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-prometheus-%E5%92%8C-grafana-%E7%9B%91%E6%8E%A7-consul/</guid><description>&lt;p>使用 Prometheus 和 Grafana 监控 Consul ，便于了解 Consul当前的状态，使用 Docker分别启动多个容器&lt;/p>
&lt;h2 id="启动-consul">启动 Consul&lt;/h2>
&lt;ul>
&lt;li>创建配置文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p ~/docker/consul/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vi ~/docker/consul/config/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加以下内容，目的是为了启用 Consul 的 Prometheus，否则会在调用相关端口时提示 &lt;code>415 Unsupport Media Type&lt;/code> 和 &lt;code>Prometheus is not enabled since its retention time is not positive&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;telemetry&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;prometheus_retention_time&amp;#34;&lt;/span>: &lt;span style="color:#63c381">&amp;#34;480h&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;disable_hostname&amp;#34;&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动容器&lt;/li>
&lt;/ul>
&lt;p>将当前目录挂载到容器的config目录下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -d &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --name consul &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v ~/docker/consul/config:/consul/config &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 8500:8500 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> consul
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>检查是否正常&lt;/li>
&lt;/ul>
&lt;p>如果正常的话会返回相应的 Prometheus 数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://127.0.0.1:8500/v1/agent/metrics&lt;span style="color:#d26464;font-weight:bold">\?&lt;/span>format&lt;span style="color:#d26464;font-weight:bold">\=&lt;/span>prometheus
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动-prometheus">启动 Prometheus&lt;/h2>
&lt;ul>
&lt;li>创建配置文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p ~/docker/prometheus/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vi ~/docker/prometheus/config/prometheus.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加以下内容:&lt;/p></description></item><item><title>Seata 高可用部署实践</title><link>https://blog.hellowood.dev/posts/seata-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 10 Apr 2020 10:51:17 +0800</pubDate><guid>https://blog.hellowood.dev/posts/seata-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/</guid><description>&lt;p>使用配置中心和数据库来实现 Seata 的高可用，以 Nacos 和 MySQL 为例，将&lt;a href="https://github.com/helloworlde/spring-cloud-alibaba-component/blob/master/cloud-seata-nacos/">cloud-seata-nacos&lt;/a>应用部署到 Kubernetes 集群中&lt;/p>
&lt;p>该应用使用 Nacos 作为配置和注册中心，总共有三个服务: order-service, pay-service, storage-service, 其中 order-service 对外提供下单接口，当余额和库存充足时，下单成功，会提交事务，当不足时会抛出异常，下单失败，回滚事务&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;p>需要准备可用的注册中心、配置中心 Nacos 和 MySQL，通常情况下，注册中心、配置中心和数据库都是已有的，不需要特别配置，在这个实践中，为了简单，只部署单机的注册中心、配置中心和数据库，假设他们是可靠的&lt;/p>
&lt;ul>
&lt;li>部署 Nacos&lt;/li>
&lt;/ul>
&lt;p>在服务器部署 Nacos，开放 8848 端口，用于 seata-server 注册，服务器地址为 &lt;code>192.168.199.2&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name nacos -p 8848:8848 -e &lt;span style="color:#dcaeea">MODE&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>standalone nacos/nacos-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>部署 MySQL&lt;/li>
&lt;/ul>
&lt;p>部署一台MySQL 数据库，用于保存事务数据，服务器地址为 &lt;code>192.168.199.2&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name mysql -p 30060:3306-e &lt;span style="color:#dcaeea">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">123456&lt;/span> -d mysql:5.7.17
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署-seata-server">部署 seata-server&lt;/h2>
&lt;ul>
&lt;li>创建seata-server需要的表&lt;/li>
&lt;/ul>
&lt;p>具体的 SQL 参考 &lt;a href="https://github.com/seata/seata/tree/develop/script/server/db">script/server/db&lt;/a>，这里使用的是 MySQL 的脚本，数据库名称为 &lt;code>seata&lt;/code>&lt;/p>
&lt;p>同时，也需要创建 undo_log 表， 可以参考 &lt;a href="https://github.com/seata/seata/blob/develop/script/client/at/db/">script/client/at/db/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>修改seata-server配置&lt;/li>
&lt;/ul>
&lt;p>将以下配置添加到 Nacos 配置中心，具体添加方法可以参考 &lt;a href="https://github.com/seata/seata/tree/develop/script/config-center">script/config-center&lt;/a>&lt;/p></description></item><item><title>Kubernetes 中使用 Helm 部署使用 Prometheus</title><link>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E4%BD%BF%E7%94%A8-helm-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8-prometheus/</link><pubDate>Sun, 29 Dec 2019 18:57:38 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E4%BD%BF%E7%94%A8-helm-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8-prometheus/</guid><description>&lt;blockquote>
&lt;p>使用 Helm 在 Kubernetes 中部署 Prometheus，并使用 Grafana 监控集群状态，Helm 版本为 Helm3&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装-prometheus-和-grafana">安装 Prometheus 和 Grafana&lt;/h2>
&lt;h3 id="添加标准仓库">添加标准仓库&lt;/h3>
&lt;p>如果没有 stable 仓库，会提示找不到 &lt;code>prometheus-operator&lt;/code>这个应用，需要先添加stable 仓库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm repo add stable https://kubernetes-charts.storage.googleapis.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-prometheus">安装 Prometheus&lt;/h3>
&lt;h4 id="使用参数指定配置">使用参数指定配置&lt;/h4>
&lt;p>指定节点的端口用于在集群外的机器访问&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm install prometheus stable/prometheus-operator &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	--set prometheus.service.type&lt;span style="color:#c7bf54">=&lt;/span>NodePort &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	--set prometheus.service.nodePort&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">30090&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	--set grafana.service.type&lt;span style="color:#c7bf54">=&lt;/span>NodePort &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	--set grafana.service.nodePort&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">30080&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>	--set grafana.adminPassword&lt;span style="color:#c7bf54">=&lt;/span>admin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="指定配置文件安装">指定配置文件安装&lt;/h4>
&lt;ul>
&lt;li>如果有需要自定义的配置，可以下载应用后修改&lt;code>values.yaml&lt;/code>，然后指定该配置文件进行安装&lt;/li>
&lt;/ul>
&lt;p>values.yaml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">prometheus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nodePort&lt;/span>: &lt;span style="color:#d19a66">30090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: &lt;span style="color:#98c379">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">grafana&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nodePort&lt;/span>: &lt;span style="color:#d19a66">30080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: &lt;span style="color:#98c379">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">adminPassword&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm install prometheus stable/prometheus-operator -f values.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果有更多配置项，可以通过下载 Helm 的安装包，解压后自己修改：&lt;/p></description></item><item><title>树莓派 4b 无网线安装 Ubuntu 并初始化</title><link>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E6%97%A0%E7%BD%91%E7%BA%BF%E5%AE%89%E8%A3%85-ubuntu-%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sun, 15 Dec 2019 22:42:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-4b-%E6%97%A0%E7%BD%91%E7%BA%BF%E5%AE%89%E8%A3%85-ubuntu-%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;blockquote>
&lt;p>必需设备：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>树莓派 4b&lt;/li>
&lt;li>SD 卡&lt;/li>
&lt;li>HDMI 线&lt;/li>
&lt;li>显示器&lt;/li>
&lt;li>键盘&lt;/li>
&lt;li>电源及数据线&lt;/li>
&lt;/ul>
&lt;h2 id="设置镜像">设置镜像&lt;/h2>
&lt;p>在树莓派官网的连接，找到 Ubuntu，根据指引，找到 Ubuntu 的镜像，即&lt;a href="https://ubuntu.com/download/raspberry-pi">https://ubuntu.com/download/raspberry-pi&lt;/a>
&lt;img src="https://img.hellowood.dev/picture/raspberrypi-ubuntu.png" alt="raspberrypi-ubuntu.png">&lt;/p>
&lt;h3 id="下载镜像">下载镜像&lt;/h3>
&lt;p>点击下载 64 位镜像，随后会开始下载&lt;a href="http://cdimage.ubuntu.com/releases/19.10.1/release/ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz?_ga=2.165606655.1314896456.1576331584-894154124.1576331584">ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz&lt;/a>这个文件&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/picture/raspberrypi-ubuntu-download.png" alt="raspberrypi-ubuntu-download.png">&lt;/p>
&lt;p>但是这个文件下载很慢，也没有国内的镜像，可以使用迅雷下载，或者直接下载上传的镜像 &lt;a href="https://img.hellowood.dev/picture/ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz">ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz&lt;/a>&lt;/p>
&lt;h3 id="刻录镜像">刻录镜像&lt;/h3>
&lt;h4 id="格式化-sd卡">格式化 SD卡&lt;/h4>
&lt;p>刻录镜像前，要先将 SD 卡格式化，在 Mac 上，可以使用官方推荐的&lt;a href="https://www.sdcard.org/downloads/formatter/">SD Card Formatter&lt;/a>, 也可以用上传到地址进行下载Mac 版：&lt;a href="https://img.hellowood.dev/picture/SDCardFormatterv5_Mac.zip">SDCardFormatterv5_Mac.zip&lt;/a>&lt;/p>
&lt;h4 id="刻录镜像-1">刻录镜像&lt;/h4>
&lt;p>刻录镜像有多种方式，不同平台操作不同，可以参考 &lt;a href="https://ubuntu.com/download/iot/installation-media">https://ubuntu.com/download/iot/installation-media&lt;/a>&lt;/p>
&lt;p>在 Mac 上，可以用官方推荐的软件&lt;a href="https://www.balena.io/etcher">balenaEtcher&lt;/a>，可以从上传的位置下载&lt;a href="https://img.hellowood.dev/picture/balenaEtcher-1.5.70.dmg">balenaEtcher-1.5.70.dmg&lt;/a>，也可以直接用命令行执行&lt;/p>
&lt;ul>
&lt;li>查找 SD 卡挂载名称&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>diskutil list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>/dev/disk0 (internal, physical):
 #: TYPE NAME SIZE IDENTIFIER
 0: GUID_partition_scheme *500.3 GB disk0
 1: EFI EFI 314.6 MB disk0s1
 2: Apple_APFS Container disk1 500.0 GB disk0s2

/dev/disk1 (synthesized):
 #: TYPE NAME SIZE IDENTIFIER
 0: APFS Container Scheme - +500.0 GB disk1
 Physical Store disk0s2
 1: APFS Volume Macintosh HD - 数据 280.9 GB disk1s1
 2: APFS Volume Preboot 82.4 MB disk1s2
 3: APFS Volume Recovery 528.5 MB disk1s3
 4: APFS Volume VM 8.6 GB disk1s4
 5: APFS Volume Macintosh HD 10.8 GB disk1s5
/dev/disk3
#: TYPE NAME SIZE IDENTIFIER
0: FDisk_partition_scheme *32.0 GB disk3
1: DOS_FAT_32 SD 32.0 GB disk3s1
&lt;/code>&lt;/pre>&lt;p>其中的 &lt;code>/dev/disk3&lt;/code>就是 SD卡&lt;/p></description></item><item><title>使用 GitHub 作为 Helm 仓库</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-github-%E4%BD%9C%E4%B8%BA-helm-%E4%BB%93%E5%BA%93/</link><pubDate>Sat, 07 Dec 2019 22:16:35 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-github-%E4%BD%9C%E4%B8%BA-helm-%E4%BB%93%E5%BA%93/</guid><description>&lt;blockquote>
&lt;p>使用 GitHub 作为 Helm 的仓库；在创建前需要按照 Helm，以 Helm3 为例&lt;/p>
&lt;/blockquote>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;ul>
&lt;li>创建仓库&lt;/li>
&lt;/ul>
&lt;p>在 GitHub 上创建名为 &lt;code>helm-chart&lt;/code>的仓库&lt;/p>
&lt;ul>
&lt;li>本地创建 &lt;code>helm-chart&lt;/code>文件夹&lt;/li>
&lt;/ul>
&lt;h2 id="创建并配置仓库">创建并配置仓库&lt;/h2>
&lt;ul>
&lt;li>进入文件夹，并执行以下命令创建 Helm 包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir helm-chart-sources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>helm create helm-chart-sources/helloworld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，已经在 &lt;code>helm-chart-resources&lt;/code>目录下创建出了 &lt;code>helloworld&lt;/code>这个包的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── helm-chart-sources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── helloworld
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── Chart.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── charts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── NOTES.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── _helpers.tpl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── ingress.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── service.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── serviceaccount.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └── tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └── test-connection.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── values.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">5&lt;/span> directories, &lt;span style="color:#d19a66">9&lt;/span> files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改为自己的相应的配置&lt;/p></description></item><item><title>使用腾讯云的Serverless部署天气应用</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84serverless%E9%83%A8%E7%BD%B2%E5%A4%A9%E6%B0%94%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 13 Oct 2019 18:56:40 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84serverless%E9%83%A8%E7%BD%B2%E5%A4%A9%E6%B0%94%E5%BA%94%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>使用腾讯云的Serverless服务，部署一个Go编写的天气变化的提醒应用
该应用通过定时查询高德地图的&lt;a href="https://lbs.amap.com/api/webservice/guide/api/weatherinfo">天气API&lt;/a>，当当前天气或未来几天天气不好时，通过&lt;a href="http://sc.ftqq.com">Server酱&lt;/a>在微信中进行提醒&lt;/p>
&lt;/blockquote>
&lt;h2 id="构建应用">构建应用&lt;/h2>
&lt;p>应用使用 go modules开发&lt;/p>
&lt;ul>
&lt;li>go.mod&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">module&lt;/span> &lt;span style="color:#c1abea">weather&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">go&lt;/span> &lt;span style="color:#d19a66">1.12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">require&lt;/span> &lt;span style="color:#c1abea">github&lt;/span>.&lt;span style="color:#c1abea">com&lt;/span>&lt;span style="color:#c7bf54">/&lt;/span>&lt;span style="color:#c1abea">tencentyun&lt;/span>&lt;span style="color:#c7bf54">/&lt;/span>&lt;span style="color:#c1abea">scf&lt;/span>&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#c678dd">go&lt;/span>&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#c1abea">lib&lt;/span> &lt;span style="color:#c1abea">v0&lt;/span>&lt;span style="color:#d19a66">.0.0&lt;/span>&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#d19a66">20190817080819&lt;/span>&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#c1abea">a2819cda320&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>main.go&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#c1abea">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;github.com/tencentyun/scf-go-lib/cloudfunction&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;weather/tool&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">cloudfunction&lt;/span>.&lt;span style="color:#00b1f7">Start&lt;/span>(&lt;span style="color:#c1abea">checkWeather&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">checkWeather&lt;/span>() (&lt;span style="color:#ef8383">string&lt;/span>, &lt;span style="color:#ef8383">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建函数">创建函数&lt;/h2>
&lt;p>在腾讯云的&lt;a href="https://console.cloud.tencent.com/scf/list?rid=8&amp;amp;ns=default">Serverless服务&lt;/a>中创建新的函数&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9oZWxsb3dvb2Rlcy5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vYmxvZy9xY2xvdWQtc2VydmVybGVzcy8lRTUlODglOUIlRTUlQkIlQkElRTUlODclQkQlRTYlOTUlQjAucG5n?x-oss-process=image/format,png" alt="创建函数">&lt;/p>
&lt;h2 id="添加配置">添加配置&lt;/h2>
&lt;p>配置共三项：&lt;/p>
&lt;ul>
&lt;li>高德地图的SecretKey，可以在高德地图的&lt;a href="https://lbs.amap.com/dev/key/app">控制面板&lt;/a>中添加应用后获取&lt;/li>
&lt;li>Server酱的SecretKey，在发送的URL中可以找到&lt;/li>
&lt;li>城市id，高德地图的城市id，可以在&lt;a href="https://lbs.amap.com/api/webservice/download">城市编码&lt;/a>中找到&lt;/li>
&lt;/ul>
&lt;h3 id="添加环境变量">添加环境变量&lt;/h3>
&lt;p>在函数配置点击编辑，添加环境变量&lt;/p>
&lt;pre tabindex="0">&lt;code>city xxxx
weatherKey xxxx
notifyKey xxxx
&lt;/code>&lt;/pre>&lt;h2 id="上传函数">上传函数&lt;/h2>
&lt;h3 id="本地编译打包">本地编译打包&lt;/h3>
&lt;ul>
&lt;li>Mac/Linux&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">GOOS&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>linux &lt;span style="color:#dcaeea">GOARCH&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>amd64 go build -o main main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zip main.zip main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Win&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">set&lt;/span> &lt;span style="color:#dcaeea">GOOS&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">set&lt;/span> &lt;span style="color:#dcaeea">GOARCH&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go build -o main main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后将main添加到压缩文件中&lt;/p></description></item><item><title>Go 调用 Windows 的系统 API，检测是否锁屏</title><link>https://blog.hellowood.dev/posts/go-%E8%B0%83%E7%94%A8-windows-%E7%9A%84%E7%B3%BB%E7%BB%9F-api%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E9%94%81%E5%B1%8F/</link><pubDate>Sun, 15 Sep 2019 21:56:13 +0800</pubDate><guid>https://blog.hellowood.dev/posts/go-%E8%B0%83%E7%94%A8-windows-%E7%9A%84%E7%B3%BB%E7%BB%9F-api%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E9%94%81%E5%B1%8F/</guid><description>&lt;blockquote>
&lt;p>因为应用需要根据当前电脑是否处于活跃状态来执行不同的动作，所以需要获取电脑当前活跃的窗口判断是否处于锁屏
可以通过调用Windows 的库来执行相应的API&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;syscall&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#c1abea">successCallMessage&lt;/span> = &lt;span style="color:#98c379">&amp;#34;The operation completed successfully.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 加载类库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">user32&lt;/span> = &lt;span style="color:#c1abea">syscall&lt;/span>.&lt;span style="color:#00b1f7">NewLazyDLL&lt;/span>(&lt;span style="color:#98c379">&amp;#34;user32.dll&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 创建新的调用进程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">getForegroundWindow&lt;/span> = &lt;span style="color:#c1abea">user32&lt;/span>.&lt;span style="color:#00b1f7">NewProc&lt;/span>(&lt;span style="color:#98c379">&amp;#34;GetForegroundWindow&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 调用相应的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">activeWindowId&lt;/span>, &lt;span style="color:#c1abea">_&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">getForegroundWindow&lt;/span>.&lt;span style="color:#00b1f7">Call&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#c1abea">err&lt;/span>.&lt;span style="color:#00b1f7">Error&lt;/span>() &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#c1abea">successCallMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#c1abea">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;activeWindowId:&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">activeWindowId&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当调用成功后时，会返回三个结果，第一个是当前活跃的窗口 ID，当 ID 为 0 时，就说明处于锁屏状态；第三个参数是操作信息，如果成功内容就是&lt;code>The operation completed successfully.&lt;/code>&lt;/p>
&lt;p>这个函数没有入参，所以直接通过&lt;code>Call()&lt;/code>调用，函数的详细信息可以参考微软提供的API &lt;a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getforegroundwindow">GetForegroundWindow function&lt;/a>&lt;/p>
&lt;p>其他的函数调用也是一样，不同的是传入的参数和返回的结果，但调用过程是一样的&lt;/p>
&lt;h4 id="参考文章">参考文章&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-cn/windows/win32/api/">Programming reference for Windows API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getforegroundwindow">GetForegroundWindow function&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/WindowsDLLs">WindowsDLLs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Kubenetes 部署 Dashboard</title><link>https://blog.hellowood.dev/posts/kubenetes-%E9%83%A8%E7%BD%B2-dashboard/</link><pubDate>Sun, 08 Sep 2019 19:28:25 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubenetes-%E9%83%A8%E7%BD%B2-dashboard/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://github.com/kubernetes/dashboard">Kubenestes Dashboard&lt;/a> 是提供 Kubernetes信息可视化的 Web 插件&lt;/p>
&lt;/blockquote>
&lt;h2 id="部署">部署&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta1/aio/deploy/recommended.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;h3 id="修改为通过-nodeport-访问">修改为通过 NodePort 访问&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl -n kubernetes-dashboard edit service kubernetes-dashboard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>ports&lt;/code>下面添加&lt;code>nodePort: 32576&lt;/code>，将 &lt;code>clusterIp&lt;/code>改为&lt;code>NodePort&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clusterIP&lt;/span>: &lt;span style="color:#d19a66">10.104.3.252&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">externalTrafficPolicy&lt;/span>: &lt;span style="color:#98c379">Cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">nodePort&lt;/span>: &lt;span style="color:#d19a66">32576&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">443&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">protocol&lt;/span>: &lt;span style="color:#98c379">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">targetPort&lt;/span>: &lt;span style="color:#d19a66">8443&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">k8s-app&lt;/span>: &lt;span style="color:#98c379">kubernetes-dashboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sessionAffinity&lt;/span>: &lt;span style="color:#98c379">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: &lt;span style="color:#98c379">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时可以通过节点 IP 和端口&lt;a href="https://192.168.0.110:32576/">https://192.168.0.110:32576/&lt;/a>访问到 Dashboard(Chrome 可能会提示证书错误,无法访问,Fix)&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/KubernetesDashboard-1.png" alt="Dashboard">&lt;/p>
&lt;h3 id="创建-serviceaccount">创建 ServiceAccount&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi admin-role.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入以下内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">rbac.authorization.k8s.io/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rbac.authorization.kubernetes.io/autouptype&lt;/span>: &lt;span style="color:#98c379">post&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">date&lt;/span>: &lt;span style="color:#63c381">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">cluster-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">apiGroup&lt;/span>: &lt;span style="color:#98c379">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kubernetes-dashboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kubernetes-dashboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">kubernetes.io/cluster-service&lt;/span>: &lt;span style="color:#63c381">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addonmanager.kubernetes.io/mode&lt;/span>: &lt;span style="color:#98c379">Reconcile&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f admin-role.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取-token">获取 Token&lt;/h3>
&lt;p>执行：&lt;/p></description></item><item><title>Spring Cloud 使用 Kubernetes 作为配置中心 - 使用加密配置</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%AF%86%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 08 Sep 2019 19:18:09 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%AF%86%E9%85%8D%E7%BD%AE/</guid><description>&lt;blockquote>
&lt;p>Spring Cloud 可以通过使用 Kubernetes 的 Secrets 作为加密配置&lt;/p>
&lt;/blockquote>
&lt;h2 id="创建应用">创建应用&lt;/h2>
&lt;h3 id="添加依赖">添加依赖&lt;/h3>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-kubernetes-config&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;h4 id="编码">编码&lt;/h4>
&lt;p>内容通过 Base64 编码后添加到 Kubernetes 中&lt;/p>
&lt;ul>
&lt;li>secrets.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: secrets-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url: amRiYzpteXNxbDovL2xvY2FsaG9zdDozMzA2L3NlYXRhP3VzZVVuaWNvZGU9dHJ1ZSZjaGFyYWN0ZXJFbmNvZGluZz11dGY4JmFsbG93TXVsdGlRdWVyaWVzPXRydWUmdXNlU1NMPWZhbHNl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: aGVsbG93b29k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> password: MTIzNDU2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将Secrets 添加到 Kubernetes 中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f secrets.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="applicationproperties">application.properties&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.application.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">secrets-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">8081&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">management.endpoint.restart.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Secret Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.secrets.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.secrets.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">secrets-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.secrets.namespace&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.reload.monitoring-secrets&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># DataSource Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.url&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">${DB_URL}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">${DB_USERNAME}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">${DB_PASSWORD}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>spring.cloud.kubernetes.secrets.enabled&lt;/code>默认是关闭的，所以需要主动开启&lt;/li>
&lt;li>&lt;code>spring.cloud.kubernetes.secrets.name&lt;/code>默认和&lt;code>spring.application.name&lt;/code>一致&lt;/li>
&lt;li>&lt;code>spring.cloud.kubernetes.secrets.namespace&lt;/code>指定 Namespace&lt;/li>
&lt;li>&lt;code>spring.cloud.kubernetes.reload.monitoring-secrets&lt;/code>监听配置更新事件&lt;/li>
&lt;/ul>
&lt;h3 id="添加接口">添加接口&lt;/h3>
&lt;ul>
&lt;li>ConfigProperties.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@ConfigurationProperties&lt;/span>(&lt;span style="color:#c1abea">prefix&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;spring.datasource&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ConfigProperties&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">url&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">username&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">password&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ConfigMapController.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">SecretsController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">ConfigProperties&lt;/span> &lt;span style="color:#c1abea">configProperties&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/db&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">config&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">String&lt;/span>.&lt;span style="color:#b3d23c">format&lt;/span>(&lt;span style="color:#98c379">&amp;#34;url:%s\nusername:%s\npassword:%s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">configProperties&lt;/span>.&lt;span style="color:#b3d23c">getUrl&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">configProperties&lt;/span>.&lt;span style="color:#b3d23c">getUsername&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">configProperties&lt;/span>.&lt;span style="color:#b3d23c">getPassword&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署应用">部署应用&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>构建并上传镜像&lt;/p></description></item><item><title>Spring Cloud 使用 Kubernetes 作为配置中心</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link><pubDate>Sun, 08 Sep 2019 19:15:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid><description>&lt;blockquote>
&lt;p>Spring Cloud 可以通过使用 Kubernetes 的 ConfigMap 作为配置中心，实现配置的拉取和刷新&lt;/p>
&lt;/blockquote>
&lt;h2 id="创建应用">创建应用&lt;/h2>
&lt;h3 id="添加依赖">添加依赖&lt;/h3>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-kubernetes-config&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;h4 id="configmap">ConfigMap&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ConfigMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">config-map-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">application.yaml&lt;/span>: |-&lt;span style="color:#7e97c3">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> spring:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> profiles: dev
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> config:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> applicationVersion: dev-0.0.1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> spring:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> profiles: prod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> config:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7e97c3"> applicationVersion: prod-0.0.1&lt;/span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ConfigMap的名称要和应用名称一致，否则需要指定相应的名称；应用的配置信息可以使用&lt;code>application.yaml|properties&lt;/code>作为 key，需要注意的是环境配置是&lt;code>spring.profiles&lt;/code>，而不是&lt;code>spring.profiles.active&lt;/code>，否则只会使用最后一行的配置&lt;/p>
&lt;p>通过以下命令将 ConfigMap 添加到 Kubernetes 中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f config-map.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="applicationproperties">application.properties&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.application.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">config-map-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.profiles.active&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">${PROFILE:dev}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">management.endpoint.restart.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Reload Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.reload.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.reload.mode&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">polling&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.reload.period&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.cloud.kubernetes.reload.strategy&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">refresh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>spring.profiles.active=${PROFILE:dev}&lt;/code>用于获取 Deployment 传递的参数来决定使用什么配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>spring.cloud.kubernetes.reload.enabled&lt;/code>默认是关闭的，所以需要主动开启&lt;/p></description></item><item><title>Spring Cloud 使用 Kubernetes 作为注册中心</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</link><pubDate>Sun, 08 Sep 2019 19:12:29 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E4%BD%BF%E7%94%A8-kubernetes-%E4%BD%9C%E4%B8%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</guid><description>&lt;blockquote>
&lt;p>Spring Cloud 可以使用 Kubernetes 作为注册中心，实现服务注册和发现&lt;/p>
&lt;/blockquote>
&lt;p>创建两个应用，Consumer 和 Provider，Provider 提供一个 REST 接口供 Consumer 调用&lt;/p>
&lt;h2 id="provider">Provider&lt;/h2>
&lt;h3 id="添加依赖">添加依赖&lt;/h3>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span> &lt;span style="color:#00b1f7">project&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;:discovery/common&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-kubernetes-all&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compileOnly&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">annotationProcessor&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testImplementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;p>指定服务的名称，用于实现调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.application.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">provider-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">8082&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ProviderApplication.java&lt;/li>
&lt;/ul>
&lt;p>添加 &lt;code>@EnableDiscoveryClient&lt;/code>启用服务发现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@EnableDiscoveryClient&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ProviderApplication&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SpringApplication&lt;/span>.&lt;span style="color:#b3d23c">run&lt;/span>(&lt;span style="color:#c1abea">ProviderApplication&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>, &lt;span style="color:#c1abea">args&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加接口">添加接口&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/ping&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">ping&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">InetAddress&lt;/span>.&lt;span style="color:#b3d23c">getLocalHost&lt;/span>().&lt;span style="color:#b3d23c">getHostName&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">UnknownHostException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#34;Pong&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署到-kubernetes">部署到 Kubernetes&lt;/h3>
&lt;ul>
&lt;li>Dockerfile&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> openjdk:8-jdk-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">VOLUME&lt;/span>&lt;span style="color:#98c379"> /tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">TZ&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>Asia/Shanghai
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> ln -snf /usr/share/zoneinfo/&lt;span style="color:#dcaeea">$TZ&lt;/span> /etc/localtime &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ef8383">echo&lt;/span> &lt;span style="color:#dcaeea">$TZ&lt;/span> &amp;gt; /etc/timezone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ARG&lt;/span> JAR_FILE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ADD&lt;/span> discovery/provider/build/libs/provider-0.0.1-SNAPSHOT.jar app.jar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENTRYPOINT&lt;/span> [&lt;span style="color:#63c381">&amp;#34;java&amp;#34;&lt;/span>,&lt;span style="color:#63c381">&amp;#34;-Djava.security.egd=file:/dev/./urandom&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-Duser.timezone=GMT+08&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-jar&amp;#34;&lt;/span>,&lt;span style="color:#63c381">&amp;#34;/app.jar&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建并上传镜像&lt;/p></description></item><item><title>Kubenetes 中使用 Traefik 作为 Ingress 转发流量</title><link>https://blog.hellowood.dev/posts/kubenetes-%E4%B8%AD%E4%BD%BF%E7%94%A8-traefik-%E4%BD%9C%E4%B8%BA-ingress-%E8%BD%AC%E5%8F%91%E6%B5%81%E9%87%8F/</link><pubDate>Sun, 08 Sep 2019 19:06:11 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubenetes-%E4%B8%AD%E4%BD%BF%E7%94%A8-traefik-%E4%BD%9C%E4%B8%BA-ingress-%E8%BD%AC%E5%8F%91%E6%B5%81%E9%87%8F/</guid><description>&lt;p>Ingress 就是 Kubernetes 机器外访问集群的入口，将请求的 URL 转发到不同的 Service 上，相当于 Nginx 等代理服务器
路由信息由 Ingress Controller 提供，Ingress Controller 可以理解为监视器，不断请求 Kubernetes API 实时感知 Service 和 Pod 的状态，结合上下文的 Ingress 生成配置，然后更新反向代理服务器的配置，达到服务发现的作用&lt;/p>
&lt;p>Traefik 是一个开源的反向代理与负载均衡工具，能够与常见的微服务系统直接整合，可以实现自动化动态配置&lt;/p>
&lt;h2 id="通过配置文件部署-traefik">通过配置文件部署 Traefik&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;ul>
&lt;li>Ingress-rbac.yaml&lt;/li>
&lt;/ul>
&lt;p>用于 Service Account 验证&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kube-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">rbac.authorization.k8s.io/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kube-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">cluster-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">apiGroup&lt;/span>: &lt;span style="color:#98c379">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>traefik-daemon-set.yaml&lt;/li>
&lt;/ul>
&lt;p>使用 DaemonSet 部署 Traefik&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">extensions/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">DaemonSet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">traefik-ingress-lb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kube-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">k8s-app&lt;/span>: &lt;span style="color:#98c379">traefik-ingress-lb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">k8s-app&lt;/span>: &lt;span style="color:#98c379">traefik-ingress-lb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">traefik-ingress-lb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">terminationGracePeriodSeconds&lt;/span>: &lt;span style="color:#d19a66">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostNetwork&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">restartPolicy&lt;/span>: &lt;span style="color:#98c379">Always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">serviceAccountName&lt;/span>: &lt;span style="color:#98c379">ingress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">traefik&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">traefik-ingress-lb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cpu&lt;/span>: &lt;span style="color:#98c379">200m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memory&lt;/span>: &lt;span style="color:#98c379">30Mi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cpu&lt;/span>: &lt;span style="color:#98c379">100m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memory&lt;/span>: &lt;span style="color:#98c379">20Mi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">containerPort&lt;/span>: &lt;span style="color:#d19a66">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostPort&lt;/span>: &lt;span style="color:#d19a66">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">containerPort&lt;/span>: &lt;span style="color:#d19a66">8580&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hostPort&lt;/span>: &lt;span style="color:#d19a66">8580&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#98c379">web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#98c379">web.address=:8580&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#98c379">kubernetes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>traefik-ui.yaml&lt;/li>
&lt;/ul>
&lt;p>创建 Traefik 的 UI&lt;/p></description></item><item><title>Kubernetes 中使用 Helm 部署应用</title><link>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E4%BD%BF%E7%94%A8-helm-%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 08 Sep 2019 19:03:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E4%BD%BF%E7%94%A8-helm-%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="创建应用">创建应用&lt;/h2>
&lt;p>创建一个简单的应用，提供一个 REST 接口；使用 Golang 编写，然后将镜像 push 到 Docker Hub&lt;/p>
&lt;ul>
&lt;li>go.mod&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">module&lt;/span> &lt;span style="color:#c1abea">github&lt;/span>.&lt;span style="color:#c1abea">com&lt;/span>&lt;span style="color:#c7bf54">/&lt;/span>&lt;span style="color:#c1abea">helloworlde&lt;/span>&lt;span style="color:#c7bf54">/&lt;/span>&lt;span style="color:#c1abea">rest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">go&lt;/span> &lt;span style="color:#d19a66">1.12&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>main.go&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#c1abea">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#00b1f7">HandleFunc&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/ping&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">func&lt;/span>(&lt;span style="color:#c1abea">writer&lt;/span> &lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#c1abea">ResponseWriter&lt;/span>, &lt;span style="color:#c1abea">request&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#c1abea">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">fmt&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Pong&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">_&lt;/span>, &lt;span style="color:#c1abea">_&lt;/span> = &lt;span style="color:#c1abea">fmt&lt;/span>.&lt;span style="color:#00b1f7">Fprint&lt;/span>(&lt;span style="color:#c1abea">writer&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Pong&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">fmt&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Server Started&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#00b1f7">Fatal&lt;/span>(&lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#00b1f7">ListenAndServe&lt;/span>(&lt;span style="color:#98c379">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Dockerfile&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> golang AS build-env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">WORKDIR&lt;/span>&lt;span style="color:#98c379"> /go/src/github.com/hellowrolde/rest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">COPY&lt;/span> . .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> GO111MODULE on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">GOPROXY&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>https://gocenter.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> GOOS linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> GOARCH &lt;span style="color:#d19a66">386&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> go mod download
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> go build -v -o /go/src/github.com/hellowrolde/rest/app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">COPY&lt;/span> --from&lt;span style="color:#c7bf54">=&lt;/span>build-env /go/src/github.com/hellowrolde/rest/app /usr/local/bin/app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">EXPOSE&lt;/span>&lt;span style="color:#98c379"> 8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CMD&lt;/span> [&lt;span style="color:#63c381">&amp;#34;app&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>构建并 push 镜像&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker build -t hellowooeds/rest .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker push hellowooeds/rest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-helm">使用 Helm&lt;/h2>
&lt;h3 id="添加-helm">添加 Helm&lt;/h3>
&lt;h4 id="初始化">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm create rest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后会在项目目录下创建一个 rest 的文件夹，里面包含所需要的 Helm 配置文件&lt;/p></description></item><item><title>Kubernetes 中安装 Helm</title><link>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E5%AE%89%E8%A3%85-helm/</link><pubDate>Sun, 08 Sep 2019 19:00:28 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E5%AE%89%E8%A3%85-helm/</guid><description>&lt;blockquote>
&lt;p>Helm 是构建于 Kubernetes 之上的包管理器，可以理解为 yum，homebrew 或者 pip，用于简化包分发，安装，版本管理等操作流程&lt;/p>
&lt;/blockquote>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;ul>
&lt;li>Chart&lt;/li>
&lt;/ul>
&lt;p>chart 就是 Helm 所管理的包，包含着一个应用要部署至 Kubernetes 上所必须的所有资源&lt;/p>
&lt;ul>
&lt;li>Release&lt;/li>
&lt;/ul>
&lt;p>Release 就是 chart 在 Kubernetes 上部署后的实例，chart 每次部署都会产生一次 Release&lt;/p>
&lt;ul>
&lt;li>Repository&lt;/li>
&lt;/ul>
&lt;p>存储chart 的仓库，初始化 Helm 时会添加两个仓库，一个是 stable 仓库，地址是&lt;a href="https://kubernetes-charts.storage.googleapis.com/">https://kubernetes-charts.storage.googleapis.com/&lt;/a> ，另一个则是 local 仓库，地址是 &lt;a href="http://127.0.0.1:8879/charts">http://127.0.0.1:8879/charts&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Config
Config 用于部署 chart 时自定义配置，在部署的时候，会将 Config 和 chart 进行合并，共同构成将部署的应用&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>Helm 是一个 C/S 架构，分为客户端helm 和服务端Tiller&lt;/p>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;ul>
&lt;li>Mac&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install kubernetes-helm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Ubuntu&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo snap install helm --classic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="服务端">服务端&lt;/h3>
&lt;p>服务端安装要求 &lt;code>$HOME/.kube/config&lt;/code>配置正确且有&lt;code>kubectl&lt;/code>操作权限&lt;/p>
&lt;ul>
&lt;li>创建账户&lt;/li>
&lt;/ul>
&lt;p>tiller-rbac.yaml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">tiller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kube-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">tiller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">apiGroup&lt;/span>: &lt;span style="color:#98c379">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">cluster-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">ServiceAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">tiller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">kube-system&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f tiller-rbac.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm init --service-account tiller
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方式默认会使用 &lt;code>gcr.io/kubernetes-helm/tiller&lt;/code>，可以通过指定镜像的方式初始化&lt;/p></description></item><item><title>Go 开发命令行工具-OSS文件上传</title><link>https://blog.hellowood.dev/posts/go-%E5%BC%80%E5%8F%91%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-oss%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link><pubDate>Sun, 08 Sep 2019 18:53:25 +0800</pubDate><guid>https://blog.hellowood.dev/posts/go-%E5%BC%80%E5%8F%91%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-oss%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid><description>&lt;blockquote>
&lt;p>使用 Go 语言开发一个命令行工具，用于向 OSS 文件上传文件
命令行工具有很多框架，选择使用 &lt;a href="https://github.com/spf13/cobra">Cobra&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="准备">准备&lt;/h2>
&lt;ul>
&lt;li>安装 Cobra&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go get -u github.com/spf13/cobra/cobra
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化项目">初始化项目&lt;/h2>
&lt;ul>
&lt;li>创建项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> &lt;span style="color:#dcaeea">$GOPATH&lt;/span>/src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir oss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> oss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cobra init --pkg-name oss
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，已经创建了一个 oss 的目录，里面已经包含一个 root 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── root.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> directory, &lt;span style="color:#d19a66">3&lt;/span> files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 &lt;code>go run main.go&lt;/code>查看root 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go run main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A longer description that spans multiple lines and likely contains
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>examples and usage of using your application. For example:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cobra is a CLI library &lt;span style="color:#c678dd">for&lt;/span> Go that empowers applications.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This application is a tool to generate the needed files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>to quickly create a Cobra application.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加 mod&lt;/li>
&lt;/ul>
&lt;p>添加mod 是为了更方便的管理依赖，module 设置 GitHub 是为了安装方便&lt;/p></description></item><item><title>Spring Boot 中使用Spring Cloud Stream</title><link>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8spring-cloud-stream/</link><pubDate>Sun, 08 Sep 2019 18:50:09 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8spring-cloud-stream/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://spring.io/projects/spring-cloud-stream">Spring Cloud Stream&lt;/a> 用于构建高可扩展的使用消息系统连接的事件驱动服务的框架&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Binder: 负责提供与外部消息系统集成的组件&lt;/li>
&lt;li>Binding: 提供外部消息系统与应用之间桥接的生产者和消费者&lt;/li>
&lt;li>Message: 生产者和消费者与外部消息系统之间通信的数据结构&lt;/li>
&lt;/ul>
&lt;h2 id="构建应用">构建应用&lt;/h2>
&lt;p>假设一个点咖啡场景：调用下单接口后，需要通知店员制作咖啡，待制作完成后，需要更新订单状态为完成，并通知客户；假设有两个服务，一个是订单服务(Order Service)，一个是店员服务(Waiter Service)&lt;/p>
&lt;p>使用 RabbitMQ 作为MQ 服务&lt;/p>
&lt;h3 id="order-service">Order Service&lt;/h3>
&lt;h5 id="添加依赖">添加依赖&lt;/h5>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-stream-binder-rabbit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compileOnly&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">annotationProcessor&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testImplementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testImplementation&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-stream-test-support&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="添加配置">添加配置&lt;/h5>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.application.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">producer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">8082&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.rabbitmq.host&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.rabbitmq.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">5672&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.rabbitmq.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">guest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.rabbitmq.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">guest&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="binding">Binding&lt;/h5>
&lt;ul>
&lt;li>OrderBinding&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">OrderBinding&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">NEW_ORDERS&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;newOrders&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">FINISHED_ORDERS&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;finishedOrders&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SubscribableChannel&lt;/span> &lt;span style="color:#00b1f7">finishedOrders&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">MessageChannel&lt;/span> &lt;span style="color:#00b1f7">newOrders&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@Input&lt;/code>用于指定订阅消息Topic，当有该 Topic 的消息时会调用监听该消息的处理器
&lt;code>@Output&lt;/code>用于指定发送消息Topic，可以通过该MessageChannel发送消息&lt;/p>
&lt;h5 id="发送消息">发送消息&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">OrderController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">OrderBinding&lt;/span> &lt;span style="color:#c1abea">orderBinding&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/newOrder&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#00b1f7">sendMessage&lt;/span>(&lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">orderId&lt;/span>, &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">userId&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">OrderVO&lt;/span> &lt;span style="color:#c1abea">orderVO&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">OrderVO&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">orderId&lt;/span>(&lt;span style="color:#c1abea">orderId&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">userId&lt;/span>(&lt;span style="color:#c1abea">userId&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">orderBinding&lt;/span>.&lt;span style="color:#b3d23c">newOrders&lt;/span>().&lt;span style="color:#b3d23c">send&lt;/span>(&lt;span style="color:#c1abea">MessageBuilder&lt;/span>.&lt;span style="color:#b3d23c">withPayload&lt;/span>(&lt;span style="color:#c1abea">orderVO&lt;/span>).&lt;span style="color:#b3d23c">build&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">HashMap&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">String&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>() {{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">put&lt;/span>(&lt;span style="color:#98c379">&amp;#34;message&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">?&lt;/span> &lt;span style="color:#98c379">&amp;#34;下单成功&amp;#34;&lt;/span> : &lt;span style="color:#98c379">&amp;#34;下单失败&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>发送消息可以通过注入 Binding 对象，或者注入 &lt;code>MessageChannel&lt;/code>对象时指定 Bean 来实现&lt;/p></description></item><item><title>Spring Boot 中使用 WebSocket</title><link>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8-websocket/</link><pubDate>Sun, 08 Sep 2019 18:48:25 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E4%BD%BF%E7%94%A8-websocket/</guid><description>&lt;blockquote>
&lt;p>WebSocket 是一种长连接技术，可以实现服务端和客户端的双向通信，服务端可以主动推送信息给客户端&lt;/p>
&lt;/blockquote>
&lt;h2 id="构建应用">构建应用&lt;/h2>
&lt;h3 id="添加依赖">添加依赖&lt;/h3>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.springframework.boot:spring-boot-starter-websocket&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.webjars:webjars-locator-core&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.webjars:sockjs-client:1.0.2&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.webjars:stomp-websocket:2.3.3&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.webjars:bootstrap:3.3.7&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.webjars:jquery:3.1.0&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.springframework.boot:spring-boot-starter-test&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置">配置&lt;/h3>
&lt;ul>
&lt;li>WebSocketConfig.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@EnableWebSocketMessageBroker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">WebSocketConfig&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">WebSocketMessageBrokerConfigurer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">configureMessageBroker&lt;/span>(&lt;span style="color:#c1abea">MessageBrokerRegistry&lt;/span> &lt;span style="color:#c1abea">registry&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">registry&lt;/span>.&lt;span style="color:#b3d23c">enableSimpleBroker&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/topic&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">registry&lt;/span>.&lt;span style="color:#b3d23c">setApplicationDestinationPrefixes&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/app&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">registerStompEndpoints&lt;/span>(&lt;span style="color:#c1abea">StompEndpointRegistry&lt;/span> &lt;span style="color:#c1abea">registry&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">registry&lt;/span>.&lt;span style="color:#b3d23c">addEndpoint&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/socket&amp;#34;&lt;/span>).&lt;span style="color:#b3d23c">withSockJS&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>/topic&lt;/code> 是用于推送给客户端的消息路径前缀；&lt;code>/app&lt;/code>是用于请求服务端的消息路径前缀， &lt;code>/socket&lt;/code>用于客户端建立连接&lt;/p>
&lt;p>SockJS用于提供浏览器兼容性，当浏览器不支持 WebSocket 时，就会尝试降级为HTTP流或者长轮询的方式以实现和 WebSocket 相同的效果，参考 &lt;a href="https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/web.html#websocket-fallback">4.3. SockJS Fallback&lt;/a>&lt;/p>
&lt;h3 id="群发消息">群发消息&lt;/h3>
&lt;p>群发消息可以将消息发送给所有订阅了该消息的客户端，可以通过 &lt;code>@SendTo&lt;/code>或&lt;code>org.springframework.messaging.simp.SimpMessagingTemplate#convertAndSend&lt;/code>发送&lt;/p>
&lt;h4 id="服务端">服务端&lt;/h4>
&lt;ul>
&lt;li>通过注解实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@MessageMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/message/broadcast&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@SendTo&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/response/message&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Message&lt;/span> &lt;span style="color:#00b1f7">broadcastMessage&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">title&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Receive new broadcast message from socket, title is :&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">title&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">Message&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">title&lt;/span>(&lt;span style="color:#c1abea">title&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">content&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Socket Broadcast:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">title&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; content!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">createTime&lt;/span>(&lt;span style="color:#c1abea">LocalDateTime&lt;/span>.&lt;span style="color:#b3d23c">now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过 REST接口调用方法实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">SimpMessagingTemplate&lt;/span> &lt;span style="color:#c1abea">simpMessagingTemplate&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/message/broadcast&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">sendBroadcastMessage&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">title&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Receive new broadcast message from REST interface, title is :&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">title&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Message&lt;/span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Message&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">title&lt;/span>(&lt;span style="color:#c1abea">title&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">content&lt;/span>(&lt;span style="color:#98c379">&amp;#34;REST Broadcast:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">title&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; content!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">createTime&lt;/span>(&lt;span style="color:#c1abea">LocalDateTime&lt;/span>.&lt;span style="color:#b3d23c">now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">simpMessagingTemplate&lt;/span>.&lt;span style="color:#b3d23c">convertAndSend&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/response/message&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="客户端">客户端&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">function&lt;/span> &lt;span style="color:#c1abea">connect&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">var&lt;/span> &lt;span style="color:#c1abea">socket&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SockJS&lt;/span>(&lt;span style="color:#63c381">&amp;#34;/socket&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">stompClient&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Stomp&lt;/span>.&lt;span style="color:#c1abea">over&lt;/span>(&lt;span style="color:#c1abea">socket&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">stompClient&lt;/span>.&lt;span style="color:#c1abea">connect&lt;/span>({}, &lt;span style="color:#c678dd">function&lt;/span> (&lt;span style="color:#c1abea">frame&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">stompClient&lt;/span>.&lt;span style="color:#c1abea">subscribe&lt;/span>(&lt;span style="color:#63c381">&amp;#34;/response/message&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">function&lt;/span> (&lt;span style="color:#c1abea">message&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">console&lt;/span>.&lt;span style="color:#c1abea">log&lt;/span>(&lt;span style="color:#63c381">&amp;#34;Receive message from server:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">function&lt;/span> &lt;span style="color:#c1abea">sendMessage&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">stompClient&lt;/span>.&lt;span style="color:#c1abea">send&lt;/span>(&lt;span style="color:#63c381">&amp;#34;/request/message/broadcast&amp;#34;&lt;/span>, {}, &lt;span style="color:#63c381">&amp;#34;Message&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="测试">测试&lt;/h4>
&lt;ul>
&lt;li>启动应用，用两个不同的浏览器访问 &lt;a href="localhost:8080">localhost:8080&lt;/a>&lt;/li>
&lt;li>广播消息建立连接，并发送消息，此时可以看到两个浏览器都收到了刚才发送的消息&lt;/li>
&lt;li>通过 REST 接口：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#98c379">&amp;#39;localhost:8080/message/broadcast?title=hello&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="发送给指定客户端">发送给指定客户端&lt;/h3>
&lt;p>群发消息可以将消息发送给所有订阅了该消息的客户端，可以通过 &lt;code>@SendToUser&lt;/code>或&lt;code>org.springframework.messaging.simp.SimpMessagingTemplate#convertAndSendToUser&lt;/code>发送&lt;/p></description></item><item><title>Spring Boot 中自定义异常处理</title><link>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Sun, 08 Sep 2019 18:47:12 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>&lt;ul>
&lt;li>项目地址&lt;a href="https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-Exception">https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-Exception&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Spring Boot 中提供了默认的异常处理，但是对于应用来说，这些信息并不应该直接返回或者不够明确，需要结合自己的情况进行定制
自定义处理异常有两种方式:&lt;/p>
&lt;ul>
&lt;li>&lt;code>org.springframework.web.servlet.HandlerExceptionResolver#resolveException&lt;/code>方法&lt;/li>
&lt;li>&lt;code>org.springframework.web.bind.annotation.RestControllerAdvice&lt;/code>或&lt;code>org.springframework.web.bind.annotation.ControllerAdvice&lt;/code>和&lt;code>org.springframework.web.bind.annotation.ExceptionHandler&lt;/code>注解来实现&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>当两种方式都实现时，&lt;code>HandlerExceptionResolver&lt;/code>要先于&lt;code>ControllerAdvice&lt;/code>执行&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用-handlerexceptionresolver-处理异常">使用 HandlerExceptionResolver 处理异常&lt;/h2>
&lt;ul>
&lt;li>CustomExceptionHandlerResolver.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomExceptionHandlerResolver&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">HandlerExceptionResolver&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">ObjectMapper&lt;/span> &lt;span style="color:#c1abea">OBJECT_MAPPER&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">OBJECT_MAPPER&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ObjectMapper&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">OBJECT_MAPPER&lt;/span>.&lt;span style="color:#b3d23c">configure&lt;/span>(&lt;span style="color:#c1abea">JsonParser&lt;/span>.&lt;span style="color:#b3d23c">Feature&lt;/span>.&lt;span style="color:#b3d23c">ALLOW_SINGLE_QUOTES&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">OBJECT_MAPPER&lt;/span>.&lt;span style="color:#b3d23c">configure&lt;/span>(&lt;span style="color:#c1abea">JsonParser&lt;/span>.&lt;span style="color:#b3d23c">Feature&lt;/span>.&lt;span style="color:#b3d23c">ALLOW_UNQUOTED_FIELD_NAMES&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">OBJECT_MAPPER&lt;/span>.&lt;span style="color:#b3d23c">setDateFormat&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SimpleDateFormat&lt;/span>(&lt;span style="color:#98c379">&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ModelAndView&lt;/span> &lt;span style="color:#00b1f7">resolveException&lt;/span>(&lt;span style="color:#c1abea">HttpServletRequest&lt;/span> &lt;span style="color:#c1abea">httpServletRequest&lt;/span>, &lt;span style="color:#c1abea">HttpServletResponse&lt;/span> &lt;span style="color:#c1abea">httpServletResponse&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#c1abea">o&lt;/span>, &lt;span style="color:#c1abea">Exception&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;服务器错误&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">o&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">HandlerMethod&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">IllegalArgumentException&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;参数错误&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">SecurityException&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;不允许访问&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">NullPointerException&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;空指针异常&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">NoHandlerFoundException&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;未找到相应资源&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">e&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">HttpMediaTypeNotSupportedException&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;请求类型不支持&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">httpServletResponse&lt;/span>.&lt;span style="color:#b3d23c">setCharacterEncoding&lt;/span>(&lt;span style="color:#c1abea">StandardCharsets&lt;/span>.&lt;span style="color:#b3d23c">UTF_8&lt;/span>.&lt;span style="color:#b3d23c">name&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">httpServletResponse&lt;/span>.&lt;span style="color:#b3d23c">setContentType&lt;/span>(&lt;span style="color:#c1abea">MediaType&lt;/span>.&lt;span style="color:#b3d23c">APPLICATION_JSON_UTF8_VALUE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">httpServletResponse&lt;/span>.&lt;span style="color:#b3d23c">getWriter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">write&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">OBJECT_MAPPER&lt;/span>.&lt;span style="color:#b3d23c">writeValueAsString&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CustomResponseContent&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">code&lt;/span>(&lt;span style="color:#c1abea">500&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">status&lt;/span>(&lt;span style="color:#98c379">&amp;#34;fail&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">message&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">ex&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ex&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ModelAndView&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还需要将该配置添加到应用中&lt;/p></description></item><item><title>Spring Boot 中自定义接口返回格式</title><link>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</link><pubDate>Sun, 08 Sep 2019 18:45:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>Spring Boot 项目中提供的 REST 接口往往需要封装状态或者其他附加的内容返回给客户端，如果每个接口都用一些工具类来处理很繁琐，会增加很多重复代码，还有可能漏掉导致客户端无法解析；用切面也可以实现，但是 SpringBoot 提供了处理的接口&lt;/p>
&lt;/blockquote>
&lt;h3 id="项目地址">项目地址&lt;/h3>
&lt;p>&lt;a href="https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-CustomResponse">https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-CustomResponse&lt;/a>&lt;/p>
&lt;h3 id="添加自定义注解">添加自定义注解&lt;/h3>
&lt;ul>
&lt;li>CustomResponse.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.lang.annotation.*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Target&lt;/span>(&lt;span style="color:#c1abea">ElementType&lt;/span>.&lt;span style="color:#b3d23c">METHOD&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Retention&lt;/span>(&lt;span style="color:#c1abea">RetentionPolicy&lt;/span>.&lt;span style="color:#b3d23c">RUNTIME&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Documented&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e5c07b">@interface&lt;/span> &lt;span style="color:#c1abea">CustomResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消息内容">消息内容&lt;/h3>
&lt;p>封装返回内容的实体&lt;/p>
&lt;ul>
&lt;li>CustomResponseContent.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Builder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@NoArgsConstructor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@AllArgsConstructor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomResponseContent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">code&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#c1abea">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="返回内容处理器">返回内容处理器&lt;/h3>
&lt;p>用于封装返回内容&lt;/p>
&lt;ul>
&lt;li>CustomResponseReturnValueHandler.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CustomResponseReturnValueHandler&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">HandlerMethodReturnValueHandler&lt;/span>, &lt;span style="color:#c1abea">AsyncHandlerMethodReturnValueHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">ObjectMapper&lt;/span> &lt;span style="color:#c1abea">objectMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">objectMapper&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ObjectMapper&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">objectMapper&lt;/span>.&lt;span style="color:#b3d23c">configure&lt;/span>(&lt;span style="color:#c1abea">JsonParser&lt;/span>.&lt;span style="color:#b3d23c">Feature&lt;/span>.&lt;span style="color:#b3d23c">ALLOW_SINGLE_QUOTES&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">objectMapper&lt;/span>.&lt;span style="color:#b3d23c">configure&lt;/span>(&lt;span style="color:#c1abea">JsonParser&lt;/span>.&lt;span style="color:#b3d23c">Feature&lt;/span>.&lt;span style="color:#b3d23c">ALLOW_UNQUOTED_FIELD_NAMES&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">objectMapper&lt;/span>.&lt;span style="color:#b3d23c">setDateFormat&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SimpleDateFormat&lt;/span>(&lt;span style="color:#98c379">&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">isAsyncReturnValue&lt;/span>(&lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#c1abea">o&lt;/span>, &lt;span style="color:#c1abea">MethodParameter&lt;/span> &lt;span style="color:#c1abea">methodParameter&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">supportsReturnType&lt;/span>(&lt;span style="color:#c1abea">methodParameter&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">boolean&lt;/span> &lt;span style="color:#00b1f7">supportsReturnType&lt;/span>(&lt;span style="color:#c1abea">MethodParameter&lt;/span> &lt;span style="color:#c1abea">methodParameter&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">methodParameter&lt;/span>.&lt;span style="color:#b3d23c">getAnnotatedElement&lt;/span>().&lt;span style="color:#b3d23c">getAnnotation&lt;/span>(&lt;span style="color:#c1abea">CustomResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>) &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">handleReturnValue&lt;/span>(&lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#c1abea">data&lt;/span>, &lt;span style="color:#c1abea">MethodParameter&lt;/span> &lt;span style="color:#c1abea">methodParameter&lt;/span>, &lt;span style="color:#c1abea">ModelAndViewContainer&lt;/span> &lt;span style="color:#c1abea">modelAndViewContainer&lt;/span>, &lt;span style="color:#c1abea">NativeWebRequest&lt;/span> &lt;span style="color:#c1abea">nativeWebRequest&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">Exception&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">modelAndViewContainer&lt;/span>.&lt;span style="color:#b3d23c">setRequestHandled&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HttpServletResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">nativeWebRequest&lt;/span>.&lt;span style="color:#b3d23c">getNativeResponse&lt;/span>(&lt;span style="color:#c1abea">HttpServletResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setContentType&lt;/span>(&lt;span style="color:#c1abea">MediaType&lt;/span>.&lt;span style="color:#b3d23c">APPLICATION_JSON_UTF8_VALUE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;操作成功&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">status&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;success&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> ((&lt;span style="color:#c1abea">data&lt;/span> &lt;span style="color:#c678dd">instanceof&lt;/span> &lt;span style="color:#c1abea">Boolean&lt;/span>) &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>((&lt;span style="color:#c1abea">Boolean&lt;/span>) &lt;span style="color:#c1abea">data&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;操作失败&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">status&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">CustomResponseContent&lt;/span> &lt;span style="color:#c1abea">responseContent&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CustomResponseContent&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">code&lt;/span>(&lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getStatus&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">status&lt;/span>(&lt;span style="color:#c1abea">status&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">message&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">data&lt;/span>(&lt;span style="color:#c1abea">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getWriter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">write&lt;/span>(&lt;span style="color:#c1abea">objectMapper&lt;/span>.&lt;span style="color:#b3d23c">writeValueAsString&lt;/span>(&lt;span style="color:#c1abea">responseContent&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加配置">添加配置&lt;/h3>
&lt;p>将返回值处理器添加到应用中&lt;/p></description></item><item><title>Ubuntu/Docker 替换软件源</title><link>https://blog.hellowood.dev/posts/ubuntu-docker-%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</link><pubDate>Mon, 27 May 2019 15:06:43 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-docker-%E6%9B%BF%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</guid><description>&lt;h2 id="ubuntu">Ubuntu&lt;/h2>
&lt;h3 id="使用-sed-命令">使用 sed 命令&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo sed -i &lt;span style="color:#98c379">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apt/sources.list/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="手动修改">手动修改&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef8383">cd&lt;/span> /etc/apt/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mv sources.list sources.list.bak
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo vi sources.list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入以下内容&lt;/p>
&lt;pre tabindex="0">&lt;code>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse

deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse

deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse

deb http://archive.canonical.com/ubuntu/ xenial partner
deb http://extras.ubuntu.com/ubuntu/ xenial main
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-alpine-镜像替换软件源">Docker alpine 镜像替换软件源&lt;/h2>
&lt;h3 id="在-dockerfile-中添加">在 Dockerfile 中添加&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> sed -i &lt;span style="color:#98c379">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apk/repositories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改容器中软件源">修改容器中软件源&lt;/h3>
&lt;h4 id="使用-sed-命令-1">使用 sed 命令&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="color:#98c379">&amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39;&lt;/span> /etc/apk/repositories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="手动修改-1">手动修改&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi etc/apk/repositories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入以下内容&lt;/p></description></item><item><title>Google Cloud Run 部署 Knative Serverless 应用</title><link>https://blog.hellowood.dev/posts/google-cloud-run-%E9%83%A8%E7%BD%B2-knative-serverless-%E5%BA%94%E7%94%A8/</link><pubDate>Wed, 15 May 2019 08:23:26 +0800</pubDate><guid>https://blog.hellowood.dev/posts/google-cloud-run-%E9%83%A8%E7%BD%B2-knative-serverless-%E5%BA%94%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>Google Cloud Run 是 Google 最近推出的基于容器运行的支持 Serverless 应用的服务，是 Knative 的Google Cloud 托管版本；和其他的 Serverless 如Google Cloud Functions, AWS Lambda 等相比，优点在于完全的基于容器，且不限语言&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装-cloud-sdkhttpscloudgooglecomsdk">安装 &lt;a href="https://cloud.google.com/sdk/">Cloud SDK&lt;/a>&lt;/h2>
&lt;p>Cloud SDK 是 Google Cloud 的命令行工具，用于访问Google Cloud相关资源&lt;/p>
&lt;p>具体平台的安装方式可以参考 &lt;a href="https://cloud.google.com/sdk/docs/quickstarts">https://cloud.google.com/sdk/docs/quickstarts&lt;/a>&lt;/p>
&lt;h2 id="创建应用上传镜像">创建应用，上传镜像&lt;/h2>
&lt;p>以 Go 语言为例，创建一个应用，根据不同的请求返回不同的内容&lt;/p>
&lt;ul>
&lt;li>main.go&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#c1abea">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#98c379">&amp;#34;net/url&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#c1abea">CustomResponse&lt;/span> &lt;span style="color:#c678dd">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">Code&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#98c379">`json:&amp;#34;code&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">Message&lt;/span> &lt;span style="color:#ef8383">string&lt;/span> &lt;span style="color:#98c379">`json:&amp;#34;message&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">fmt&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Server started&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#00b1f7">HandleFunc&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">rootHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">_&lt;/span> = &lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#00b1f7">ListenAndServe&lt;/span>(&lt;span style="color:#98c379">&amp;#34;:8080&amp;#34;&lt;/span>, &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">func&lt;/span> &lt;span style="color:#00b1f7">rootHandler&lt;/span>(&lt;span style="color:#c1abea">w&lt;/span> &lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#c1abea">ResponseWriter&lt;/span>, &lt;span style="color:#c1abea">r&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>&lt;span style="color:#c1abea">http&lt;/span>.&lt;span style="color:#c1abea">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">fmt&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Start handler request&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">queryForm&lt;/span>, &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#c1abea">url&lt;/span>.&lt;span style="color:#00b1f7">ParseQuery&lt;/span>(&lt;span style="color:#c1abea">r&lt;/span>.&lt;span style="color:#c1abea">URL&lt;/span>.&lt;span style="color:#c1abea">RawQuery&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">w&lt;/span>.&lt;span style="color:#00b1f7">Header&lt;/span>().&lt;span style="color:#00b1f7">Set&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Content-Type&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;application/json&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">:=&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#c1abea">err&lt;/span> &lt;span style="color:#c7bf54">==&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">nil&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ef8383">len&lt;/span>(&lt;span style="color:#c1abea">queryForm&lt;/span>[&lt;span style="color:#98c379">&amp;#34;message&amp;#34;&lt;/span>]) &amp;gt; &lt;span style="color:#d19a66">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">message&lt;/span> = &lt;span style="color:#c1abea">queryForm&lt;/span>[&lt;span style="color:#98c379">&amp;#34;message&amp;#34;&lt;/span>][&lt;span style="color:#d19a66">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	} &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#c1abea">message&lt;/span> = &lt;span style="color:#98c379">&amp;#34;Hello Go Server&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">_&lt;/span> = &lt;span style="color:#c1abea">json&lt;/span>.&lt;span style="color:#00b1f7">NewEncoder&lt;/span>(&lt;span style="color:#c1abea">w&lt;/span>).&lt;span style="color:#00b1f7">Encode&lt;/span>(&lt;span style="color:#c1abea">CustomResponse&lt;/span>{&lt;span style="color:#d19a66">200&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#c1abea">fmt&lt;/span>.&lt;span style="color:#00b1f7">Println&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Handler request completed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Dockerfile&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> golang:1.12.3-alpine3.9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> mkdir /app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ADD&lt;/span> . /app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">WORKDIR&lt;/span>&lt;span style="color:#98c379"> /app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> &lt;span style="color:#dcaeea">CGO_ENABLED&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#dcaeea">GOOS&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>linux go build -o main main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">EXPOSE&lt;/span>&lt;span style="color:#98c379"> 8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CMD&lt;/span> [&lt;span style="color:#63c381">&amp;#34;/app/main&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置 &lt;a href="https://console.cloud.google.com/gcr">Google Container Registry&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>相关配置可以参考 &lt;a href="https://cloud.google.com/container-registry/docs/pushing-and-pulling">推送和拉取映像&lt;/a>，需要注意的是需要一个项目 ID，这个 ID 可以在 &lt;a href="https://console.cloud.google.com/home/dashboard">home/dashboard&lt;/a> 下找到&lt;/p></description></item><item><title>AWS Lambda 部署 SpringBoot 应用</title><link>https://blog.hellowood.dev/posts/aws-lambda-%E9%83%A8%E7%BD%B2-springboot-%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 06 May 2019 11:36:14 +0800</pubDate><guid>https://blog.hellowood.dev/posts/aws-lambda-%E9%83%A8%E7%BD%B2-springboot-%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="配置-aws-cli-和-severless">配置 AWS CLI 和 Severless&lt;/h2>
&lt;p>AWS CLI 和 Serverless 都可以用于部署 Serverless 应用&lt;/p>
&lt;h3 id="获取密钥">获取密钥&lt;/h3>
&lt;ol>
&lt;li>登录 AWS， 在服务中搜索并选择 IAM，之后选择用户，添加用户&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/serverless/Serverless1.png" alt="Serverless1">&lt;/p>
&lt;ol start="2">
&lt;li>输入用户名，选择编程访问&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/serverless/Serverless2-add-user.png" alt="Serverless2-add-user">&lt;/p>
&lt;ol start="3">
&lt;li>选择权限-直接附加现有策略，搜索&lt;code>AdministratorAccess&lt;/code>并选中(有最高权限)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/serverless/Serverless3-add-permission.png" alt="Serverless3-add-permission">&lt;/p>
&lt;ol start="4">
&lt;li>选择下一步直到完成，然后保存好密钥(只会出现这一次，否则就只能重新创建)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/serverless/Serverless4-save-secret.png" alt="Serverless3-save-secret">&lt;/p>
&lt;h3 id="安装配置-aws-cli">安装配置 AWS CLI&lt;/h3>
&lt;h4 id="安装">安装&lt;/h4>
&lt;p>参考 &lt;a href="https://aws.amazon.com/cn/cli/">AWS 命令行界面&lt;/a> 安装&lt;/p>
&lt;ul>
&lt;li>Win 下载 &lt;a href="https://s3.amazonaws.com/aws-cli/AWSCLI64.msi">https://s3.amazonaws.com/aws-cli/AWSCLI64.msi&lt;/a> 安装&lt;/li>
&lt;li>Mac/Linux 执行 &lt;code>pip install awscli&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="配置-aws-cli">配置 AWS CLI&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aws configure
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后输入刚才的密钥的 Key 和 Secret，Region 可以选择常用的 region，如&lt;code>us-east-1&lt;/code>&lt;/p>
&lt;h3 id="安装配置-severless">安装配置 Severless&lt;/h3>
&lt;h4 id="安装-1">安装&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install -g serverless
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>或
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn global add serverless
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="配置">配置&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>serverless config credentials --provider aws --key YOUR_KEY --secret YOUR_SECRET
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-aws-sam-local">安装配置 AWS SAM Local&lt;/h3>
&lt;p>aws-sam-local 是用于本地调试 Serverless 应用的工具&lt;/p></description></item><item><title>MyBatis 查询错误：java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String</title><link>https://blog.hellowood.dev/posts/mybatis-%E6%9F%A5%E8%AF%A2%E9%94%99%E8%AF%AFjava-lang-illegalargumentexception-invalid-comparison-java-util-date-and-java-lang-string/</link><pubDate>Fri, 29 Mar 2019 21:17:57 +0800</pubDate><guid>https://blog.hellowood.dev/posts/mybatis-%E6%9F%A5%E8%AF%A2%E9%94%99%E8%AF%AFjava-lang-illegalargumentexception-invalid-comparison-java-util-date-and-java-lang-string/</guid><description>&lt;p>项目中用 MyBatis Plus 替换了 MyBatis，原来的 MyBatis版本是 &lt;code>3.2.8&lt;/code>, MyBatis Plus 的版本是 &lt;code>3.1.0&lt;/code>，是基于 MyBatis &lt;code>3.5.0&lt;/code>开发的，测试没啥问题，上线之后有一些功能不能使用，排查日志发现错误&lt;code>Error querying database. Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String&lt;/code>&lt;/p>
&lt;p>很快就定位到问题，是因为传入的 Date 在 XML 中使用了 &lt;code>date != null and date != ''&lt;/code>这样的判断引起的，删除&lt;code>date != ''&lt;/code>这个判断就好了&lt;/p>
&lt;ul>
&lt;li>异常信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Caused&lt;/span> &lt;span style="color:#c1abea">by&lt;/span>: &lt;span style="color:#c1abea">org&lt;/span>.&lt;span style="color:#b3d23c">apache&lt;/span>.&lt;span style="color:#b3d23c">ibatis&lt;/span>.&lt;span style="color:#b3d23c">exceptions&lt;/span>.&lt;span style="color:#b3d23c">PersistenceException&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>### &lt;span style="color:#c1abea">Error&lt;/span> &lt;span style="color:#c1abea">querying&lt;/span> &lt;span style="color:#c1abea">database&lt;/span>. &lt;span style="color:#c1abea">Cause&lt;/span>: &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">lang&lt;/span>.&lt;span style="color:#b3d23c">IllegalArgumentException&lt;/span>: &lt;span style="color:#c1abea">invalid&lt;/span> &lt;span style="color:#c1abea">comparison&lt;/span>: &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">util&lt;/span>.&lt;span style="color:#b3d23c">Date&lt;/span> &lt;span style="color:#c1abea">and&lt;/span> &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">lang&lt;/span>.&lt;span style="color:#b3d23c">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>### &lt;span style="color:#c1abea">Cause&lt;/span>: &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">lang&lt;/span>.&lt;span style="color:#b3d23c">IllegalArgumentException&lt;/span>: &lt;span style="color:#c1abea">invalid&lt;/span> &lt;span style="color:#c1abea">comparison&lt;/span>: &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">util&lt;/span>.&lt;span style="color:#b3d23c">Date&lt;/span> &lt;span style="color:#c1abea">and&lt;/span> &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">lang&lt;/span>.&lt;span style="color:#b3d23c">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">org&lt;/span>.&lt;span style="color:#b3d23c">apache&lt;/span>.&lt;span style="color:#b3d23c">ibatis&lt;/span>.&lt;span style="color:#b3d23c">exceptions&lt;/span>.&lt;span style="color:#b3d23c">ExceptionFactory&lt;/span>.&lt;span style="color:#b3d23c">wrapException&lt;/span>(&lt;span style="color:#c1abea">ExceptionFactory&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">30&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">org&lt;/span>.&lt;span style="color:#b3d23c">apache&lt;/span>.&lt;span style="color:#b3d23c">ibatis&lt;/span>.&lt;span style="color:#b3d23c">session&lt;/span>.&lt;span style="color:#b3d23c">defaults&lt;/span>.&lt;span style="color:#b3d23c">DefaultSqlSession&lt;/span>.&lt;span style="color:#b3d23c">selectList&lt;/span>(&lt;span style="color:#c1abea">DefaultSqlSession&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">150&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">org&lt;/span>.&lt;span style="color:#b3d23c">apache&lt;/span>.&lt;span style="color:#b3d23c">ibatis&lt;/span>.&lt;span style="color:#b3d23c">session&lt;/span>.&lt;span style="color:#b3d23c">defaults&lt;/span>.&lt;span style="color:#b3d23c">DefaultSqlSession&lt;/span>.&lt;span style="color:#b3d23c">selectList&lt;/span>(&lt;span style="color:#c1abea">DefaultSqlSession&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">141&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">org&lt;/span>.&lt;span style="color:#b3d23c">apache&lt;/span>.&lt;span style="color:#b3d23c">ibatis&lt;/span>.&lt;span style="color:#b3d23c">session&lt;/span>.&lt;span style="color:#b3d23c">defaults&lt;/span>.&lt;span style="color:#b3d23c">DefaultSqlSession&lt;/span>.&lt;span style="color:#b3d23c">selectOne&lt;/span>(&lt;span style="color:#c1abea">DefaultSqlSession&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">77&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">sun&lt;/span>.&lt;span style="color:#b3d23c">reflect&lt;/span>.&lt;span style="color:#b3d23c">NativeMethodAccessorImpl&lt;/span>.&lt;span style="color:#b3d23c">invoke0&lt;/span>(&lt;span style="color:#c1abea">Native&lt;/span> &lt;span style="color:#c1abea">Method&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">sun&lt;/span>.&lt;span style="color:#b3d23c">reflect&lt;/span>.&lt;span style="color:#b3d23c">NativeMethodAccessorImpl&lt;/span>.&lt;span style="color:#b3d23c">invoke&lt;/span>(&lt;span style="color:#c1abea">NativeMethodAccessorImpl&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">62&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">sun&lt;/span>.&lt;span style="color:#b3d23c">reflect&lt;/span>.&lt;span style="color:#b3d23c">DelegatingMethodAccessorImpl&lt;/span>.&lt;span style="color:#b3d23c">invoke&lt;/span>(&lt;span style="color:#c1abea">DelegatingMethodAccessorImpl&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">43&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">java&lt;/span>.&lt;span style="color:#b3d23c">lang&lt;/span>.&lt;span style="color:#b3d23c">reflect&lt;/span>.&lt;span style="color:#b3d23c">Method&lt;/span>.&lt;span style="color:#b3d23c">invoke&lt;/span>(&lt;span style="color:#c1abea">Method&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">498&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">at&lt;/span> &lt;span style="color:#c1abea">org&lt;/span>.&lt;span style="color:#b3d23c">mybatis&lt;/span>.&lt;span style="color:#b3d23c">spring&lt;/span>.&lt;span style="color:#b3d23c">SqlSessionTemplate$SqlSessionInterceptor&lt;/span>.&lt;span style="color:#b3d23c">invoke&lt;/span>(&lt;span style="color:#c1abea">SqlSessionTemplate&lt;/span>.&lt;span style="color:#b3d23c">java&lt;/span>:&lt;span style="color:#c1abea">433&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... &lt;span style="color:#c1abea">98&lt;/span> &lt;span style="color:#c1abea">more&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="问题复现">问题复现&lt;/h3>
&lt;ul>
&lt;li>ServiceImpl&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">testDao&lt;/span>.&lt;span style="color:#b3d23c">getDate&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Date&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Dao&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">Date&lt;/span> &lt;span style="color:#00b1f7">test&lt;/span>(&lt;span style="color:#e5c07b">@Param&lt;/span>(&lt;span style="color:#98c379">&amp;#34;date&amp;#34;&lt;/span>) &lt;span style="color:#c1abea">Date&lt;/span> &lt;span style="color:#c1abea">date&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>XML&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;select&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">resultType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.util.Date&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;if&lt;/span> &lt;span style="color:#b3d23c">test=&lt;/span>&lt;span style="color:#98c379">&amp;#34;date != null and date !=&amp;#39;&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #{date} AS now
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM dual
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;/if&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;if&lt;/span> &lt;span style="color:#b3d23c">test=&lt;/span>&lt;span style="color:#98c379">&amp;#34; date== null&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> date_add(now(), INTERVAL 1 DAY_HOUR) AS now
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM dual
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;/if&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过debug，发现 MyBatis 3.3之前和3.3之后的判断逻辑不一样&lt;/p></description></item><item><title>微服务网关 Traefik - Docker Swarm 使用</title><link>https://blog.hellowood.dev/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-traefik-docker-swarm-%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 24 Mar 2019 21:20:35 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-traefik-docker-swarm-%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>&lt;a href="https://docs.traefik.io/">traefik&lt;/a> 是一个用 Go 开发的适用于微服务的反向代理和负载均衡的网关；可以自动发现并代理服务，可以用 Kubernetes 或 Docker Swarm 等方式，支持使用 Eureka，Consul，Etcd，ZooKeeper 等注册中心&lt;/p>
&lt;h2 id="docker-swarm-使用">Docker Swarm 使用&lt;/h2>
&lt;h3 id="启动官方-demo">启动官方 Demo&lt;/h3>
&lt;ul>
&lt;li>docker-compose.yml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">version&lt;/span>: &lt;span style="color:#63c381">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reverse-proxy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">traefik&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># The official Traefik docker image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">command&lt;/span>: --&lt;span style="color:#98c379">api --docker&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># Enables the web UI and tells Traefik to listen to docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;80:80&amp;#34;&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># The HTTP port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;8080:8080&amp;#34;&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># The Web UI (enabled by --api)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">/var/run/docker.sock:/var/run/docker.sock&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># So that Traefik can listen to the Docker events&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">whoami&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">containous/whoami&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># A container that exposes an API to show its IP address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#63c381">&amp;#34;traefik.frontend.rule=Host:whoami.docker.localhost&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker-compose up -d
&lt;/code>&lt;/pre>&lt;p>这样会启动一个 treafik 的 WebUI 和一个后端服务器&lt;/p></description></item><item><title>GraphQL Spring Boot 使用</title><link>https://blog.hellowood.dev/posts/graphql-spring-boot-%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 29 Jan 2019 19:57:12 +0800</pubDate><guid>https://blog.hellowood.dev/posts/graphql-spring-boot-%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>项目地址 &lt;a href="https://github.com/helloworlde/spring-boot-graphql-demo">https://github.com/helloworlde/spring-boot-graphql-demo&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>使用 SpringBoot 和 GraphQL 创建一个最简单的增删改查接口应用，使用 MongoDB 存储数据&lt;/p>
&lt;/blockquote>
&lt;h2 id="创建应用">创建应用&lt;/h2>
&lt;ul>
&lt;li>添加依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-data-mongodb&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compileOnly&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testImplementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加基础接口">添加基础接口&lt;/h3>
&lt;ul>
&lt;li>添加 Model&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Builder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Document&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@AllArgsConstructor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@NoArgsConstructor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">Post&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">title&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">content&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@CreatedDate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Date&lt;/span> &lt;span style="color:#c1abea">createDate&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加 Repository&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">PostRepository&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">MongoRepository&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Post&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># MongoDB Config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.data.mongodb.host&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">localhost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.data.mongodb.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">27017&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.data.mongodb.username=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.data.mongodb.password=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.data.mongodb.database&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">graphql&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加数据初始化&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">DataInitializer&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">ApplicationRunner&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">PostRepository&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">run&lt;/span>(&lt;span style="color:#c1abea">ApplicationArguments&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">Exception&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Post&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">posts&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">initPost&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">posts&lt;/span>.&lt;span style="color:#b3d23c">forEach&lt;/span>(&lt;span style="color:#c1abea">post&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c1abea">log&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Post: {}&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">post&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Post&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">initPost&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">deleteAll&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">Stream&lt;/span>.&lt;span style="color:#b3d23c">of&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Post one&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Post two&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">map&lt;/span>(&lt;span style="color:#c1abea">title&lt;/span> &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#c1abea">post&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Post&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">title&lt;/span>(&lt;span style="color:#c1abea">title&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">content&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Content of &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">title&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">save&lt;/span>(&lt;span style="color:#c1abea">post&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">collect&lt;/span>(&lt;span style="color:#c1abea">Collectors&lt;/span>.&lt;span style="color:#b3d23c">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加-graphql-配置">添加 GraphQL 配置&lt;/h3>
&lt;ul>
&lt;li>添加 GraphQL 依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">implementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.graphql-java:graphql-spring-boot-starter:5.0.2&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 提供 UI
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">implementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.graphql-java:graphiql-spring-boot-starter:5.0.2&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 用于 Resolver
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">implementation&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.graphql-java:graphql-java-tools:5.2.4&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加接口定义脚本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># io.github.helloworlde.graphql.model.Post 对应的Model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#76a9f9">Post&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">id&lt;/span>: &lt;span style="color:#76a9f9">ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">title&lt;/span>: &lt;span style="color:#76a9f9">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">content&lt;/span>: &lt;span style="color:#76a9f9">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">createtype&lt;/span>: &lt;span style="color:#76a9f9">post&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">date&lt;/span>: &lt;span style="color:#76a9f9">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># io.github.helloworlde.graphql.resolver.PostMutation.updatePost 的入参 post&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">input&lt;/span> &lt;span style="color:#76a9f9">PostInput&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">title&lt;/span>: &lt;span style="color:#76a9f9">String&lt;/span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">content&lt;/span>: &lt;span style="color:#76a9f9">String&lt;/span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 查询 io.github.helloworlde.graphql.resolver.PostQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#76a9f9">Query&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">posts&lt;/span>: [&lt;span style="color:#76a9f9">Post&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">post&lt;/span>(&lt;span style="color:#cebc3a">id&lt;/span>: &lt;span style="color:#76a9f9">ID&lt;/span>!): &lt;span style="color:#76a9f9">Post&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 修改 io.github.helloworlde.graphql.resolver.PostMutation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#76a9f9">Mutation&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">createPost&lt;/span>(&lt;span style="color:#cebc3a">post&lt;/span>: &lt;span style="color:#76a9f9">PostInput&lt;/span>): &lt;span style="color:#76a9f9">Post&lt;/span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">updatePost&lt;/span>(&lt;span style="color:#cebc3a">id&lt;/span>: &lt;span style="color:#76a9f9">ID&lt;/span>!, &lt;span style="color:#cebc3a">post&lt;/span>: &lt;span style="color:#76a9f9">PostInput&lt;/span>): &lt;span style="color:#76a9f9">Post&lt;/span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cebc3a">deletePost&lt;/span>(&lt;span style="color:#cebc3a">id&lt;/span>: &lt;span style="color:#76a9f9">ID&lt;/span>!): &lt;span style="color:#76a9f9">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="添加接口-resolver">添加接口 Resolver&lt;/h4>
&lt;ul>
&lt;li>查询 Resolver&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">PostQuery&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">GraphQLQueryResolver&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">PostRepository&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Post&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">posts&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">findAll&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Optional&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Post&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">post&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">findById&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改 Resolver&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">PostMutation&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">GraphQLMutationResolver&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">PostRepository&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#00b1f7">createPost&lt;/span>(&lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#c1abea">post&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#c1abea">newPost&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Post&lt;/span>.&lt;span style="color:#b3d23c">builder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">title&lt;/span>(&lt;span style="color:#c1abea">post&lt;/span>.&lt;span style="color:#b3d23c">getTitle&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">content&lt;/span>(&lt;span style="color:#c1abea">post&lt;/span>.&lt;span style="color:#b3d23c">getContent&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">save&lt;/span>(&lt;span style="color:#c1abea">newPost&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#00b1f7">updatePost&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>, &lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#c1abea">post&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">Exception&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Post&lt;/span> &lt;span style="color:#c1abea">currentPost&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">findById&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">orElseThrow&lt;/span>(() &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">IllegalArgumentException&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Post &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; Not Exist&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">currentPost&lt;/span>.&lt;span style="color:#b3d23c">setTitle&lt;/span>(&lt;span style="color:#c1abea">post&lt;/span>.&lt;span style="color:#b3d23c">getTitle&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">currentPost&lt;/span>.&lt;span style="color:#b3d23c">setContent&lt;/span>(&lt;span style="color:#c1abea">post&lt;/span>.&lt;span style="color:#b3d23c">getContent&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">save&lt;/span>(&lt;span style="color:#c1abea">currentPost&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">deletePost&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">Exception&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">findById&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">orElseThrow&lt;/span>(() &lt;span style="color:#c7bf54">-&amp;gt;&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">IllegalArgumentException&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Post &amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; Not Exist&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">postRepository&lt;/span>.&lt;span style="color:#b3d23c">deleteById&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试">测试&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动应用&lt;/p></description></item><item><title>MySQL 中关于gap lock / next-key lock 的一个问题</title><link>https://blog.hellowood.dev/posts/mysql-%E4%B8%AD%E5%85%B3%E4%BA%8Egap-lock-next-key-lock-%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 07 Jan 2019 21:40:58 +0800</pubDate><guid>https://blog.hellowood.dev/posts/mysql-%E4%B8%AD%E5%85%B3%E4%BA%8Egap-lock-next-key-lock-%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</guid><description>&lt;blockquote>
&lt;p>在学习 MySQL 的过程中遇到的一个关于锁的问题，包含多个 MySQL 相关的知识；相关资料在文章末尾&lt;/p>
&lt;/blockquote>
&lt;h3 id="问题描述">问题描述&lt;/h3>
&lt;ul>
&lt;li>表初始化&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span> &lt;span style="color:#c678dd">PRIMARY&lt;/span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">b&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">b&lt;/span>(&lt;span style="color:#c1abea">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ENGINE&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">InnoDB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#c1abea">CHARSET&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">utf8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> (&lt;span style="color:#c1abea">id&lt;/span>, &lt;span style="color:#c1abea">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#d19a66">5&lt;/span>, &lt;span style="color:#d19a66">6&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#d19a66">7&lt;/span>, &lt;span style="color:#d19a66">8&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#d19a66">9&lt;/span>, &lt;span style="color:#d19a66">10&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>session A&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">BEGIN&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">SELECT&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span> &lt;span style="color:#c1abea">z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">WHERE&lt;/span> &lt;span style="color:#c1abea">b&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">6&lt;/span> &lt;span style="color:#c678dd">FOR&lt;/span> &lt;span style="color:#c678dd">UPDATE&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>session B&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*success*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">8&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*blocked*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">4&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*blocked*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">4&lt;/span>, &lt;span style="color:#d19a66">8&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*blocked*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">8&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*blocked*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">8&lt;/span>, &lt;span style="color:#d19a66">8&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*success*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#d19a66">0&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*blocked*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">z&lt;/span> &lt;span style="color:#c678dd">VALUES&lt;/span> (&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>);&lt;span style="color:#8a93a5;font-style:italic">/*success*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分别执行 session B中的insert 会出现上述情况，为什么？&lt;/p>
&lt;h3 id="加锁过程">加锁过程&lt;/h3>
&lt;ol>
&lt;li>在索引 b 上的等值查询，给索引 b 加上了 next-key lock (4, 6]；索引向右遍历，且最后一个值不满足条件时退化为间隙锁；所以会再加上间隙锁 (6,8)；所以索引 b 上的 next-key lock 的范围是(b=4,id=3)到(b=6,id=5)这个左开右闭区间和(b=6,id=5)到(b=8,id=7)这个开区间&lt;/li>
&lt;li>for update 会给 b = 6 这一行加上行锁；因此 (b=6,id=5) 这一行上有行锁&lt;/li>
&lt;/ol>
&lt;hr>
&lt;ul>
&lt;li>这么看来上述语句都不在锁的范围内，为什么会被锁&lt;/li>
&lt;/ul>
&lt;p>这个问题其实是因为没有理解索引的结构，所以认为所有值都不应该被锁&lt;/p></description></item><item><title>SpringBoot 使用 MySQL保存emoji 表情</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-mysql%E4%BF%9D%E5%AD%98emoji-%E8%A1%A8%E6%83%85/</link><pubDate>Mon, 31 Dec 2018 22:59:16 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-mysql%E4%BF%9D%E5%AD%98emoji-%E8%A1%A8%E6%83%85/</guid><description>&lt;blockquote>
&lt;p>在使用 SpringBoot 开发的应用中，有表单提交的内容中含有 emoji 表情，导致保存失败；这是因为MySQL 默认的 utf8 长度为3位，emoji 表情有4位&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>更改表的字符集为&lt;code>utf8mb4&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ALTER&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">content&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#ef8383">CHARACTER&lt;/span> &lt;span style="color:#c678dd">SET&lt;/span> &lt;span style="color:#c1abea">utf8mb4&lt;/span> &lt;span style="color:#c678dd">COLLATE&lt;/span> &lt;span style="color:#c1abea">utf8_general_ci&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是这样更改后仍然没有解决保存失败的问题&lt;/p>
&lt;ul>
&lt;li>更改数据库的字符集&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ALTER&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c1abea">db_name&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#ef8383">CHARACTER&lt;/span> &lt;span style="color:#c678dd">SET&lt;/span> &lt;span style="color:#c1abea">utf8mb4&lt;/span> &lt;span style="color:#c678dd">COLLATE&lt;/span> &lt;span style="color:#c1abea">utf8_general_ci&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于暂时不能重启数据库，这种修改方式只在当前连接中生效，同样未能解决问题&lt;/p>
&lt;ul>
&lt;li>修改 SpringBoot 的配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-dsconfig" data-lang="dsconfig">spring.datasource.hikari.connection-init-sql=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci
&lt;/code>&lt;/pre>&lt;p>这样，在应用的所有连接内都使用utf8mb4 作为字符集，解决了 emoji 保存失败的问题&lt;/p></description></item><item><title>Spring Boot 配置 HTTPS 访问</title><link>https://blog.hellowood.dev/posts/spring-boot-%E9%85%8D%E7%BD%AE-https-%E8%AE%BF%E9%97%AE/</link><pubDate>Mon, 31 Dec 2018 22:42:17 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E9%85%8D%E7%BD%AE-https-%E8%AE%BF%E9%97%AE/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-Https">相关代码&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="生成证书">生成证书&lt;/h2>
&lt;ul>
&lt;li>创建新证书&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>keytool -genkeypair -alias hellowood -keyalg RSA -keysize &lt;span style="color:#d19a66">2048&lt;/span> -storetype PKCS12 -keystore hellowood.p12 -validity &lt;span style="color:#d19a66">3650&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>输入密钥库口令:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>再次输入新口令:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>您的名字与姓氏是什么?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>Unknown&lt;span style="color:#c7bf54">]&lt;/span>: HellWood
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>您的组织单位名称是什么?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>Unknown&lt;span style="color:#c7bf54">]&lt;/span>: HelloWood
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>您的组织名称是什么?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>Unknown&lt;span style="color:#c7bf54">]&lt;/span>: HelloWood
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>您所在的城市或区域名称是什么?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>Unknown&lt;span style="color:#c7bf54">]&lt;/span>: BJ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>您所在的省/市/自治区名称是什么?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>Unknown&lt;span style="color:#c7bf54">]&lt;/span>: BJ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>该单位的双字母国家/地区代码是什么?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>Unknown&lt;span style="color:#c7bf54">]&lt;/span>: CN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">CN&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>HellWood, &lt;span style="color:#dcaeea">OU&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>HelloWood, &lt;span style="color:#dcaeea">O&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>HelloWood, &lt;span style="color:#dcaeea">L&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>BJ, &lt;span style="color:#dcaeea">ST&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>BJ, &lt;span style="color:#dcaeea">C&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>CN是否正确?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">[&lt;/span>否&lt;span style="color:#c7bf54">]&lt;/span>: y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就生成了 &lt;code>hellowood.p12&lt;/code>这个证书&lt;/p>
&lt;ul>
&lt;li>如果已经有一个证书，可以将该证书转换为 PKCS格式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>keytool -import -alias hellowood -file hellowood.crt -keystore hellowood.p12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>// 或
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keytool -importkeystore -srckeystore hellowood.jks -destkeystore hellowood.p12 -deststoretype pkcs12
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-https">配置 HTTPS&lt;/h2>
&lt;ul>
&lt;li>将 &lt;code>hellowood.p12&lt;/code> 添加到 &lt;code>resources/&lt;/code>下&lt;/li>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># SSL config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.ssl.key-store-type&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">PKCS12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.ssl.key-store&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">classpath:hellowood.p12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.ssl.key-store-password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.ssl.key-alias&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">hellowood&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.ssl.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加接口&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">BaseController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">root&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#34;HelloWood&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启动应用，会看到日志中有提示应用使用 HTTPS 启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>2018-12-31 21:54:07.940 INFO 24001 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (https) with context path &amp;#39;&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>访问 &lt;code>http://localhost:8080&lt;/code>，会提示需要使用 HTTPS 进行访问&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://localhost:8080/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bad Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This combination of host and port requires TLS.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>访问 &lt;code>https://localhost:8080&lt;/code>，会成功返回 HelloWood&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> curl --insecure https://localhost:8080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HelloWood%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="重定向-http-到-https">重定向 HTTP 到 HTTPS&lt;/h2>
&lt;ul>
&lt;li>修改端口，添加 HTTP 端口 (application.properties)&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-dsconfig" data-lang="dsconfig">server.port=8443
server.port.http=8080
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加重定向配置&lt;code>ConnectorConfig.java&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.apache.catalina.Context&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.apache.catalina.connector.Connector&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.apache.coyote.http11.Http11NioProtocol&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.apache.tomcat.util.descriptor.web.SecurityCollection&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.apache.tomcat.util.descriptor.web.SecurityConstraint&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.beans.factory.annotation.Value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.boot.web.servlet.server.ServletWebServerFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.context.annotation.Bean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.context.annotation.Configuration&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ConnectorConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Value&lt;/span>(&lt;span style="color:#98c379">&amp;#34;${server.port.http}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">serverPortHttp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Value&lt;/span>(&lt;span style="color:#98c379">&amp;#34;${server.port}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">serverPortHttps&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">ServletWebServerFactory&lt;/span> &lt;span style="color:#00b1f7">servletWebServerFactory&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TomcatServletWebServerFactory&lt;/span> &lt;span style="color:#c1abea">factory&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">TomcatServletWebServerFactory&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">postProcessContext&lt;/span>(&lt;span style="color:#c1abea">Context&lt;/span> &lt;span style="color:#c1abea">context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SecurityConstraint&lt;/span> &lt;span style="color:#c1abea">securityConstraint&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SecurityConstraint&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">securityConstraint&lt;/span>.&lt;span style="color:#b3d23c">setUserConstraint&lt;/span>(&lt;span style="color:#98c379">&amp;#34;CONFIDENTIAL&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SecurityCollection&lt;/span> &lt;span style="color:#c1abea">securityCollection&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SecurityCollection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">securityCollection&lt;/span>.&lt;span style="color:#b3d23c">addPattern&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">securityConstraint&lt;/span>.&lt;span style="color:#b3d23c">addCollection&lt;/span>(&lt;span style="color:#c1abea">securityCollection&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">context&lt;/span>.&lt;span style="color:#b3d23c">addConstraint&lt;/span>(&lt;span style="color:#c1abea">securityConstraint&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">factory&lt;/span>.&lt;span style="color:#b3d23c">addAdditionalTomcatConnectors&lt;/span>(&lt;span style="color:#c1abea">redirectConnector&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">factory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Connector&lt;/span> &lt;span style="color:#00b1f7">redirectConnector&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Connector&lt;/span> &lt;span style="color:#c1abea">connector&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Connector&lt;/span>(&lt;span style="color:#c1abea">Http11NioProtocol&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>.&lt;span style="color:#b3d23c">getName&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connector&lt;/span>.&lt;span style="color:#b3d23c">setScheme&lt;/span>(&lt;span style="color:#98c379">&amp;#34;http&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connector&lt;/span>.&lt;span style="color:#b3d23c">setPort&lt;/span>(&lt;span style="color:#c1abea">serverPortHttp&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connector&lt;/span>.&lt;span style="color:#b3d23c">setSecure&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connector&lt;/span>.&lt;span style="color:#b3d23c">setRedirectPort&lt;/span>(&lt;span style="color:#c1abea">serverPortHttps&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">connector&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>再次启动应用，看到日志中有 HTTP 和 HTTPS 的端口信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2018&lt;/span>&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#d19a66">12&lt;/span>&lt;span style="color:#c7bf54">-&lt;/span>&lt;span style="color:#d19a66">31&lt;/span> &lt;span style="color:#d19a66">22&lt;/span>&lt;span style="color:#c7bf54">:&lt;/span>&lt;span style="color:#d19a66">17&lt;/span>&lt;span style="color:#c7bf54">:&lt;/span>&lt;span style="color:#d19a66">47.113&lt;/span> &lt;span style="color:#c1abea">INFO&lt;/span> &lt;span style="color:#d19a66">24612&lt;/span> &lt;span style="color:#c7bf54">---&lt;/span> [ &lt;span style="color:#c1abea">main&lt;/span>] &lt;span style="color:#c1abea">o&lt;/span>.&lt;span style="color:#c1abea">s&lt;/span>.&lt;span style="color:#c1abea">b&lt;/span>.&lt;span style="color:#c1abea">w&lt;/span>.&lt;span style="color:#c1abea">embedded&lt;/span>.&lt;span style="color:#c1abea">tomcat&lt;/span>.&lt;span style="color:#c1abea">TomcatWebServer&lt;/span> &lt;span style="color:#c7bf54">:&lt;/span> &lt;span style="color:#c1abea">Tomcat&lt;/span> &lt;span style="color:#c1abea">started&lt;/span> &lt;span style="color:#c1abea">on&lt;/span> &lt;span style="color:#c1abea">port&lt;/span>(&lt;span style="color:#c1abea">s&lt;/span>)&lt;span style="color:#c7bf54">:&lt;/span> &lt;span style="color:#d19a66">8443&lt;/span> (&lt;span style="color:#c1abea">https&lt;/span>) &lt;span style="color:#d19a66">8080&lt;/span> (&lt;span style="color:#c1abea">http&lt;/span>) &lt;span style="color:#c1abea">with&lt;/span> &lt;span style="color:#c1abea">context&lt;/span> &lt;span style="color:#c1abea">path&lt;/span> &amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>访问 &lt;code>http://localhost:8080&lt;/code>，将会被重定向到&lt;code>https://localhost:8443&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -v http://localhost:8080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Rebuilt URL to: http://localhost:8080/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Trying ::1...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* TCP_NODELAY &lt;span style="color:#ef8383">set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Connected to localhost &lt;span style="color:#c7bf54">(&lt;/span>::1&lt;span style="color:#c7bf54">)&lt;/span> port &lt;span style="color:#d19a66">8080&lt;/span> &lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#8a93a5;font-style:italic">#0)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; GET / HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; Host: localhost:8080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; User-Agent: curl/7.54.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; Accept: */*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; HTTP/1.1 &lt;span style="color:#d19a66">302&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; Cache-Control: private
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; Expires: Thu, &lt;span style="color:#d19a66">01&lt;/span> Jan &lt;span style="color:#d19a66">1970&lt;/span> 00:00:00 GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; Location: https://localhost:8443/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; Content-Length: &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; type: post
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: Mon, &lt;span style="color:#d19a66">31&lt;/span> Dec &lt;span style="color:#d19a66">2018&lt;/span> 14:31:44 GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Connection &lt;span style="color:#8a93a5;font-style:italic">#0 to host localhost left intact&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>访问 &lt;code>https://localhost:8443&lt;/code>正常返回&lt;code>HelloWood&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>curl https://localhost:8443 --insecure
HelloWood%
&lt;/code>&lt;/pre></description></item><item><title>SpringBoot 中 Spring Security 403 自定义返回消息</title><link>https://blog.hellowood.dev/posts/springboot-%E4%B8%AD-spring-security-403-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%94%E5%9B%9E%E6%B6%88%E6%81%AF/</link><pubDate>Mon, 24 Dec 2018 21:15:25 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%B8%AD-spring-security-403-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%94%E5%9B%9E%E6%B6%88%E6%81%AF/</guid><description>&lt;ul>
&lt;li>自定义处理类 CustomAccessDeniedHandler&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.web.access.AccessDeniedHandler;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class CustomAccessDeniedHandler implements AccessDeniedHandler {

 @Override
 public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {
 response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
 response.setStatus(HttpStatus.FORBIDDEN.value());
 response.getWriter().write(new ObjectMapper().writeValueAsString(new CustomResponse(&amp;#34;Session Invalid&amp;#34;, null)));
 }

 static class CustomResponse {
 private String message;
 private Object data;

 CustomResponse(String message, Object data) {
 this.message = message;
 this.data = data;
 }

 public String getMessage() {
 return message;
 }

 public void setMessage(String message) {
 this.message = message;
 }

 public Object getData() {
 return data;
 }

 public void setData(Object data) {
 this.data = data;
 }
 }
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在Spring Security 配置中添加配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.access.AccessDeniedHandler;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 http.authorizeRequests()
 .antMatchers(&amp;#34;/&amp;#34;,
 &amp;#34;/index.html&amp;#34;,
 &amp;#34;/**/favicon.ico&amp;#34;,
 &amp;#34;/login&amp;#34;,
 &amp;#34;/logout&amp;#34;,
 &amp;#34;/index&amp;#34;,
 &amp;#34;/error&amp;#34;)
 .permitAll();

 http.authorizeRequests()
 .anyRequest()
 .authenticated()
 .and()
 .exceptionHandling().accessDeniedHandler(accessDeniedHandler());
 }

 @Bean
 public AccessDeniedHandler accessDeniedHandler() {
 return new CustomAccessDeniedHandler();
 }
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>返回值&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{&amp;#34;message&amp;#34;:&amp;#34;Session Invalid&amp;#34;,&amp;#34;data&amp;#34;:null}
&lt;/code>&lt;/pre></description></item><item><title>Kubernetes 配置 kubeconfig 访问多个集群</title><link>https://blog.hellowood.dev/posts/kubernetes-%E9%85%8D%E7%BD%AE-kubeconfig-%E8%AE%BF%E9%97%AE%E5%A4%9A%E4%B8%AA%E9%9B%86%E7%BE%A4/</link><pubDate>Tue, 23 Oct 2018 21:09:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubernetes-%E9%85%8D%E7%BD%AE-kubeconfig-%E8%AE%BF%E9%97%AE%E5%A4%9A%E4%B8%AA%E9%9B%86%E7%BE%A4/</guid><description>&lt;blockquote>
&lt;p>如果有多个不同的集群，需要切换访问，就需要配置多个 Kubernetes 账号和 Context；集群的 KubeConfig 文件一般为&lt;code>~/.kube/config&lt;/code>，默认只能访问一个集群，如果需要访问多个集群就需要修改这个文件&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>可以参考文档 &lt;a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/&lt;/a>配置，但是这个文档描述不够直接简单，可以参考以下内容直接修改&lt;/p>
&lt;/blockquote>
&lt;p>假设现在有两个集群，一个是本地的 &lt;code>docker-for-desktop-cluster&lt;/code>，另一个是部署在测试环境的 &lt;code>kubernetes&lt;/code> ，本地只有 &lt;code>docker-for-desktop-cluster&lt;/code>的配置&lt;/p>
&lt;p>根据官方文档合并后的 Demo，其实是将两个 Config 文件的相同类型的字段直接合并了，所以直接将相同的字段的其他集群的配置内容复制到当前的配置中即可，如：将&lt;code>kubernetes&lt;/code>中 &lt;code>cluster&lt;/code> 的配置直接复制到当前配置中：&lt;/p>
&lt;ul>
&lt;li>测试环境 cluster 配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>- cluster:
 certificate-authority-data: CERTIFICATE_AUTHORITY_DATA
 server: https://192.168.111.129:6443
 name: kubernetes
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>本地集群 cluster 配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>- cluster:
 insecure-skip-tls-verify: true
 server: https://localhost:6443
 name: docker-for-desktop-cluster
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>合并后&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>clusters:
- cluster:
 insecure-skip-tls-verify: true
 server: https://localhost:6443
 name: docker-for-desktop-cluster
- cluster:
 certificate-authority-data: CERTIFICATE_AUTHORITY_DATA
 server: https://192.168.111.129:6443
 name: kubernetes
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>合并完成后更新配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>export KUBECONFIG=~/.kube/config
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>查看合并后的 kubeconfig&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>kubectl config view
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>apiVersion: v1
clusters:
- cluster:
 insecure-skip-tls-verify: true
 server: https://localhost:6443
 name: docker-for-desktop-cluster
- cluster:
 certificate-authority-data: REDACTED
 server: https://192.168.111.129:6443
 name: kubernetes
contexts:
- context:
 cluster: docker-for-desktop-cluster
 user: docker-for-desktop
 name: docker-for-desktop
- context:
 cluster: kubernetes
 user: kubernetes-admin
 name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: docker-for-desktop
 user:
 client-certificate-data: REDACTED
 client-key-data: REDACTED
- name: kubernetes-admin
 user:
 client-certificate-data: REDACTED
 client-key-data: REDACTED
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>查看集群&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>kubectl config get-contexts
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>CURRENT NAME CLUSTER AUTHINFO NAMESPACE
 docker-for-desktop docker-for-desktop-cluster docker-for-desktop
* kubernetes-admin@kubernetes kubernetes kubernetes-admin
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>切换集群&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>kubectl config use-context docker-for-desktop
kubectl config use-context kubernetes-admin@kubernetes
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>如果想限制用户的 Namespace，可以在 context 中加入namespaces 配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>- context:
 cluster: docker-for-desktop-cluster
 user: docker-for-desktop
 namespace: default
 name: docker-for-desktop
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>本地&lt;code>docker-for-desktop-cluster&lt;/code> 的配置 (&lt;code>~/.kube/config&lt;/code>)内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>apiVersion: v1
clusters:
- cluster:
 insecure-skip-tls-verify: true
 server: https://localhost:6443
 name: docker-for-desktop-cluster
contexts:
- context:
 cluster: docker-for-desktop-cluster
 user: docker-for-desktop
 name: docker-for-desktop
current-context: docker-for-desktop
kind: Config
preferences: {}
users:
- name: docker-for-desktop
 user:
 client-certificate-data: CLIENT_CERTIFICATE_DATA
 client-key-data: CLIENT_KEY_DATA
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>测试环境 &lt;code>kubernetes&lt;/code> 的 配置(&lt;code>~/.kube/config&lt;/code>)内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>apiVersion: v1
clusters:
- cluster:
 certificate-authority-data: CERTIFICATE_AUTHORITY_DATA
 server: https://192.168.111.129:6443
 name: kubernetes
contexts:
- context:
 cluster: kubernetes
 user: kubernetes-admin
 name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
 user:
 client-certificate-data: CLIENT_CERTIFICATE_DATA
 client-key-data: CLIENT_KEY_DATA
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>合并后&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>apiVersion: v1
clusters:
- cluster:
 insecure-skip-tls-verify: true
 server: https://localhost:6443
 name: docker-for-desktop-cluster
- cluster:
 certificate-authority-data: CERTIFICATE_AUTHORITY_DATA
 server: https://192.168.111.129:6443
 name: kubernetes
contexts:
- context:
 cluster: docker-for-desktop-cluster
 user: docker-for-desktop
 name: docker-for-desktop
- context:
 cluster: kubernetes
 user: kubernetes-admin
 name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: docker-for-desktop
 user:
 client-certificate-data: CLIENT_CERTIFICATE_DATA
 client-key-data: CLIENT_KEY_DATA
- name: kubernetes-admin
 user:
 client-certificate-data: CLIENT_CERTIFICATE_DATA
 client-key-data: CLIENT_KEY_DATA
&lt;/code>&lt;/pre></description></item><item><title>Kubernetes 中部署 SpringBoot 应用</title><link>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E9%83%A8%E7%BD%B2-springboot-%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 22 Oct 2018 18:30:37 +0800</pubDate><guid>https://blog.hellowood.dev/posts/kubernetes-%E4%B8%AD%E9%83%A8%E7%BD%B2-springboot-%E5%BA%94%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>在 Kubernetes 中通过yaml 配置文件预先声明部署 SpringBoot 应用&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>代码地址 &lt;a href="https://github.com/helloworlde/k8s-service">https://github.com/helloworlde/k8s-service&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="创建-springboot-应用">创建 SpringBoot 应用&lt;/h2>
&lt;ul>
&lt;li>创建名为 k8s-service 的 SpringBoot 应用&lt;/li>
&lt;li>添加 REST API
&lt;ul>
&lt;li>K8sController.java&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.k8sservice.controller&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.GetMapping&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.RequestMapping&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.RestController&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RequestMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">K8sController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">root&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#34;Hello Kubernetes&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/healthz&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">healthz&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#34;ok&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加 Dockerfile&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">FROM&lt;/span>&lt;span style="color:#98c379"> openjdk:8-jdk-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">VOLUME&lt;/span>&lt;span style="color:#98c379"> /tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENV&lt;/span> &lt;span style="color:#dcaeea">TZ&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>Asia/Shanghai
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">RUN&lt;/span> ln -snf /usr/share/zoneinfo/&lt;span style="color:#dcaeea">$TZ&lt;/span> /etc/localtime &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ef8383">echo&lt;/span> &lt;span style="color:#dcaeea">$TZ&lt;/span> &amp;gt; /etc/timezone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ARG&lt;/span> JAR_FILE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ADD&lt;/span> &lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#dcaeea">JAR_FILE&lt;/span>&lt;span style="color:#98c379">}&lt;/span> app.jar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">ENTRYPOINT&lt;/span> [&lt;span style="color:#63c381">&amp;#34;java&amp;#34;&lt;/span>,&lt;span style="color:#63c381">&amp;#34;-Djava.security.egd=file:/dev/./urandom&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-Duser.timezone=GMT+08&amp;#34;&lt;/span>, &lt;span style="color:#63c381">&amp;#34;-jar&amp;#34;&lt;/span>,&lt;span style="color:#63c381">&amp;#34;/app.jar&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>编译打包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew clean build -x &lt;span style="color:#ef8383">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>生成并推送镜像&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew dockerPush -i
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在-kubernetes-中添加服务">在 Kubernetes 中添加服务&lt;/h2>
&lt;ul>
&lt;li>添加 k8s-demo.yaml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">namespace&lt;/span>: &lt;span style="color:#98c379">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: &lt;span style="color:#98c379">NodePort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nodePort&lt;/span>: &lt;span style="color:#d19a66">30002&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: &lt;span style="color:#98c379">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: &lt;span style="color:#98c379">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">replicas&lt;/span>: &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">app&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">name&lt;/span>: &lt;span style="color:#98c379">k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: &lt;span style="color:#98c379">registry.cn-qingdao.aliyuncs.com/hellowoodes/k8s-service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">imagePullPolicy&lt;/span>: &lt;span style="color:#98c379">IfNotPresent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">containerPort&lt;/span>: &lt;span style="color:#d19a66">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">livenessProbe&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">httpGet&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">path&lt;/span>: &lt;span style="color:#98c379">/healthz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">scheme&lt;/span>: &lt;span style="color:#98c379">HTTP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">periodSeconds&lt;/span>: &lt;span style="color:#d19a66">15&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">initialDelaySeconds&lt;/span>: &lt;span style="color:#d19a66">30&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建服务&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>kubectl apply -f k8s-service.yaml
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>等待服务启动之后访问 &lt;code>${NodeIP}:30090&lt;/code>，会返回 &lt;code>Hello Kubernetes&lt;/code>，部署完成&lt;/li>
&lt;/ul></description></item><item><title>Ubuntu 搭建 ShadowSocks 服务</title><link>https://blog.hellowood.dev/posts/ubuntu-%E6%90%AD%E5%BB%BA-shadowsocks-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 21 Oct 2018 22:39:52 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-%E6%90%AD%E5%BB%BA-shadowsocks-%E6%9C%8D%E5%8A%A1/</guid><description>&lt;blockquote>
&lt;p>在 Ubuntu 服务器上通过脚本安装 ShadowSocks 服务&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>来自 &lt;a href="https://teddysun.com/342.html">https://teddysun.com/342.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>下载安装脚本&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>改变脚本执行权限&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>chmod +x shadowsocks.sh
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>./shadowsocks.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks.log
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加配置
在执行过程中会提示设置端口，密码，加密算法等配置，根据需要自己选择即可，端口默认&lt;code>8899&lt;/code>，加密算法可选&lt;code>aes-256-cfb&lt;/code>，适合大多数设备使用&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Congratulations, Shadowsocks-python server install completed!
Your Server IP : 127.0.0.1
Your Server Port : 8899
Your Password : password
Your Encryption Method: aes-256-cfb

Welcome to visit:https://teddysun.com/342.html
Enjoy it!
&lt;/code>&lt;/pre>&lt;p>安装完成，在客户端设备添加配置即可&lt;/p>
&lt;ul>
&lt;li>
&lt;p>后续修改设置可以在 &lt;code>/etc/shadowsocks.json&lt;/code>中修改&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多账户多端口配置，修改配置文件 &lt;code>/etc/shadowsocks.json&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;server&amp;#34;:&amp;#34;0.0.0.0&amp;#34;,
 &amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;,
 &amp;#34;local_port&amp;#34;:1080,
 &amp;#34;port_password&amp;#34;:{
 &amp;#34;8989&amp;#34;:&amp;#34;password0&amp;#34;,
 &amp;#34;9001&amp;#34;:&amp;#34;password1&amp;#34;,
 &amp;#34;9002&amp;#34;:&amp;#34;password2&amp;#34;,
 &amp;#34;9003&amp;#34;:&amp;#34;password3&amp;#34;,
 &amp;#34;9004&amp;#34;:&amp;#34;password4&amp;#34;
 },
 &amp;#34;timeout&amp;#34;:300,
 &amp;#34;method&amp;#34;:&amp;#34;your_encryption_method&amp;#34;,
 &amp;#34;fast_open&amp;#34;: false
}
&lt;/code>&lt;/pre>&lt;h2 id="卸载">卸载&lt;/h2>
&lt;pre tabindex="0">&lt;code>./shadowsocks.sh uninstall
&lt;/code>&lt;/pre></description></item><item><title>Mac 客户端访问 Dropbox</title><link>https://blog.hellowood.dev/posts/mac-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AE-dropbox/</link><pubDate>Sat, 13 Oct 2018 12:54:07 +0800</pubDate><guid>https://blog.hellowood.dev/posts/mac-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AE-dropbox/</guid><description>&lt;blockquote>
&lt;p>通过使用 ShadowSocks 的 PAC 代理模式可以访问到 &lt;a href="https://www.dropbox.com/">Dropbox&lt;/a> 的网页版，但是在 Mac 上下载客户端，打开后却提示无法连接&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>参考文章 &lt;a href="https://my.oschina.net/frankies/blog/367659">https://my.oschina.net/frankies/blog/367659&lt;/a> 设置更改Host 无效&lt;/li>
&lt;li>尝试开启 ShadowSocks 全局代理，同样无效，但是遇到过 ShadowSocks 的全局代理不生效的情况，所以尝试手动配置代理&lt;/li>
&lt;/ul>
&lt;h3 id="获取-shadowsocks-代理配置">获取 ShadowSocks 代理配置&lt;/h3>
&lt;ul>
&lt;li>偏好设置 - 高级
&lt;img src="https://img.hellowood.dev/blog/Dropbox1.png" alt="ShadowSocks 配置">&lt;/li>
&lt;/ul>
&lt;h3 id="设置-dropbox-网络代理">设置 Dropbox 网络代理&lt;/h3>
&lt;ul>
&lt;li>设置 - 首选项 - 网络 - 代理服务器 - 更改设置&lt;/li>
&lt;li>选择手动，代理类型为 SOCKS5 ，IP 和端口填写 ShadowSocks 的IP和端口&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/Dropbox2.png" alt="Dropbox 配置">&lt;/p>
&lt;ul>
&lt;li>更新之后就可以正常通过客户端使用 Dropbox 了&lt;/li>
&lt;/ul></description></item><item><title>Java 中计算字符串表达式的值</title><link>https://blog.hellowood.dev/posts/java-%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC/</link><pubDate>Sat, 25 Aug 2018 10:55:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/java-%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC/</guid><description>&lt;blockquote>
&lt;p>在 Java 中计算字符串数值表达式可以用 &lt;code>javax.script.ScriptEngine#eval(java.lang.String)&lt;/code>，通过调用 JavaScript 来计算&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.script.ScriptEngine&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.script.ScriptEngineManager&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.script.ScriptException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ExpressionCalculate&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ScriptEngineManager&lt;/span> &lt;span style="color:#c1abea">scriptEngineManager&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ScriptEngineManager&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ScriptEngine&lt;/span> &lt;span style="color:#c1abea">scriptEngine&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">scriptEngineManager&lt;/span>.&lt;span style="color:#b3d23c">getEngineByName&lt;/span>(&lt;span style="color:#98c379">&amp;#34;nashorn&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">expression&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;10 * 2 + 6 / (3 - 1)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">String&lt;/span>.&lt;span style="color:#b3d23c">valueOf&lt;/span>(&lt;span style="color:#c1abea">scriptEngine&lt;/span>.&lt;span style="color:#b3d23c">eval&lt;/span>(&lt;span style="color:#c1abea">expression&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">out&lt;/span>.&lt;span style="color:#b3d23c">println&lt;/span>(&lt;span style="color:#c1abea">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">ScriptException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果： 23&lt;/p></description></item><item><title>Docker 容器中运行 Docker 命令</title><link>https://blog.hellowood.dev/posts/docker-%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C-docker-%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 08 Aug 2018 16:04:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C-docker-%E5%91%BD%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>在使用 GitLab/Jenkins 等 CI 软件的时候需要使用 Docker 命令来构建镜像，需要在容器中使用 Docker 命令；通过将宿主机的 Docker 共享给容器即可&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>在启动容器时添加以下命令：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>--privileged &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>-v /var/run/docker.sock:/var/run/docker.sock &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span>-v &lt;span style="color:#c678dd">$(&lt;/span>which docker&lt;span style="color:#c678dd">)&lt;/span>r:/bin/docker &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>--privileged&lt;/code> 表示该容器真正启用 root 权限&lt;/li>
&lt;li>&lt;code>-v /var/run/docker.sock:/var/run/docker.sock&lt;/code>和&lt;code>-v $(which docker)r:/bin/docker&lt;/code>命令将相关的 Docker 文件挂载到容器&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>Demo: 启动 GitLab&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name gitlab-ee &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -d -p 443:443 -p 80:80 -p 22:22 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --privileged &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --restart always &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> --hostname 10.0.0.24 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /Users/hellowood/gitlab/logs:/var/log/gitlab &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /Users/hellowood/gitlab/data:/var/opt/gitlab &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /Users/hellowood/.m2:/root/.m2 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /Users/hellowood/.gradle:/root/.gradle &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v /var/run/docker.sock:/var/run/docker.sock &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -v &lt;span style="color:#c678dd">$(&lt;/span>which docker&lt;span style="color:#c678dd">)&lt;/span>:/bin/docker &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> gitlab/gitlab-ee:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>代码质量工具 Sonarqube 搭建使用</title><link>https://blog.hellowood.dev/posts/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E5%B7%A5%E5%85%B7-sonarqube-%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 01 Aug 2018 00:31:41 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E5%B7%A5%E5%85%B7-sonarqube-%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://www.sonarqube.org/">Sonarqube&lt;/a> 是一个代码质量管理平台，可以结合不同的测试工具，代码分析工具，持续集成工具等提供代码质量可是化和管理的工具&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://sonarcloud.io">在线工具&lt;/a>&lt;/li>
&lt;li>截图
&lt;img src="https://img.hellowood.dev/blog/SonarqubeDemo1.png" alt="https://img.hellowood.dev/blog/SonarqubeDemo1.png">
&lt;img src="https://img.hellowood.dev/blog/SonarqubeDemo2.png" alt="https://img.hellowood.dev/blog/SonarqubeDemo2.png">
&lt;img src="https://img.hellowood.dev/blog/SonarqubeDemo3.png" alt="https://img.hellowood.dev/blog/SonarqubeDemo3.png">
&lt;img src="https://img.hellowood.dev/blog/SonarqubeDemo4.png" alt="https://img.hellowood.dev/blog/SonarqubeDemo4.png">&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="启动容器">启动容器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d --name sonarqube &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -p 9000:9000 -p 9092:9092 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -e &lt;span style="color:#dcaeea">SONARQUBE_JDBC_USERNAME&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>root &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -e &lt;span style="color:#dcaeea">SONARQUBE_JDBC_PASSWORD&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#d19a66">123456&lt;/span> &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -e &lt;span style="color:#dcaeea">SONARQUBE_JDBC_URL&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>jdbc:mysql://localhost:3308/sonar&lt;span style="color:#d26464;font-weight:bold">\?&lt;/span>&lt;span style="color:#dcaeea">useUnicode&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>true&lt;span style="color:#d26464;font-weight:bold">\&amp;amp;&lt;/span>&lt;span style="color:#dcaeea">characterEncoding&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>utf8 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> sonarqube
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="分析项目">分析项目&lt;/h3>
&lt;ul>
&lt;li>Java - Maven&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mvn sonar:sonar &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -Dsonar.host.url&lt;span style="color:#c7bf54">=&lt;/span>http://localhost:9000 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -Dsonar.login&lt;span style="color:#c7bf54">=&lt;/span>d84cd047d5a4e149af1f4d614e28ed5183ef0c50
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Java - Gradle&lt;/li>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">plugins&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#63c381">&amp;#34;org.sonarqube&amp;#34;&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#63c381">&amp;#34;2.6&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew sonarqube &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -Dsonar.host.url&lt;span style="color:#c7bf54">=&lt;/span>http://localhost:9000 &lt;span style="color:#d26464;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d26464;font-weight:bold">&lt;/span> -Dsonar.login&lt;span style="color:#c7bf54">=&lt;/span>d84cd047d5a4e149af1f4d614e28ed5183ef0c50
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>服务追踪工具 SkyWorking 搭建使用</title><link>https://blog.hellowood.dev/posts/%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA%E5%B7%A5%E5%85%B7-skyworking-%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 31 Jul 2018 23:56:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA%E5%B7%A5%E5%85%B7-skyworking-%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://github.com/apache/incubator-skywalking">SkyWalking&lt;/a> 是用于对微服务，Cloud Native，容器等提供应用性能监控和分布式调用链追踪的工具&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://49.4.12.44:8080/#/monitor/dashboard">Demo&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>截图&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/SkyWalkingDemo1.png" alt="https://img.hellowood.dev/blog/SkyWalkingDemo1.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/SkyWalkingDemo2.png" alt="https://img.hellowood.dev/blog/SkyWalkingDemo2.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/SkyWalkingDemo3.png" alt="https://img.hellowood.dev/blog/SkyWalkingDemo3.png">&lt;/p>
&lt;p>&lt;img src="https://img.hellowood.dev/blog/SkyWalkingDemo4.png" alt="https://img.hellowood.dev/blog/SkyWalkingDemo4.png">&lt;/p>
&lt;blockquote>
&lt;p>环境&lt;/p>
&lt;ul>
&lt;li>SkyWalking 5.0.0-beat2&lt;/li>
&lt;li>Mac OS&lt;/li>
&lt;li>ElasticSearch 5.6.10&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="安装-elasticsearch">安装 ElasticSearch&lt;/h2>
&lt;ul>
&lt;li>下载解压 ElasticSearch 5.6.10&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.10.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -vxf elasticsearch-5.6.10.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改配置文件&lt;code>config/elasticsearch.yml&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">cluster.name&lt;/span>: &lt;span style="color:#98c379">CollectorDBCluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">node.name&lt;/span>: &lt;span style="color:#98c379">CollectorDBCluster1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">network.host&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是&lt;code>cluster.name&lt;/code>最好是&lt;code>CollectorDBCluster&lt;/code>，&lt;code>network.host&lt;/code>最好是局域网 IP，否则可能会在使用时出现很多问题&lt;/p>
&lt;ul>
&lt;li>启动&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./bin/elasticsearch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-skywalking">安装 SkyWalking&lt;/h2>
&lt;ul>
&lt;li>下载解压 SkyWalking 5.0.0-beat2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -L -O https://mirrors.tuna.tsinghua.edu.cn/apache/incubator/skywalking/5.0.0-beta/apache-skywalking-apm-incubating-5.0.0-beta.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -vxf apache-skywalking-apm-incubating-5.0.0-beta.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改配置文件&lt;code>config/application.yml&lt;/code>，修改所有的&lt;code>localhost&lt;/code>为局域网 IP&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">host&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">10800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">contextPath&lt;/span>: &lt;span style="color:#98c379">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">cache&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">caffeine&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">remote&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">gRPC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">host&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">11800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">agent_gRPC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">gRPC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">host&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">11800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">agent_jetty&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">jetty&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">host&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">12800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">contextPath&lt;/span>: &lt;span style="color:#98c379">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">analysis_register&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">analysis_jvm&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">analysis_segment_parser&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bufferFilePath&lt;/span>: &lt;span style="color:#98c379">../buffer/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bufferOffsetMaxFileSize&lt;/span>: &lt;span style="color:#98c379">10M&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bufferSegmentMaxFileSize&lt;/span>: &lt;span style="color:#98c379">500M&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bufferFileCleanWhenRestart&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">ui&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">jetty&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">host&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">12800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">contextPath&lt;/span>: &lt;span style="color:#98c379">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">storage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">elasticsearch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clusterName&lt;/span>: &lt;span style="color:#98c379">CollectorDBCluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clusterTransportSniffer&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clusterNodes&lt;/span>: &lt;span style="color:#98c379">localhost:9300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">indexShardsNumber&lt;/span>: &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">indexReplicasNumber&lt;/span>: &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">highPerformanceMode&lt;/span>: &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bulkActions&lt;/span>: &lt;span style="color:#d19a66">2000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bulkSize&lt;/span>: &lt;span style="color:#d19a66">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">flushInterval&lt;/span>: &lt;span style="color:#d19a66">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">concurrentRequests&lt;/span>: &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">traceDataTTL&lt;/span>: &lt;span style="color:#d19a66">90&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># Unit is minute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">minuteMetricDataTTL&lt;/span>: &lt;span style="color:#d19a66">90&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># Unit is minute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hourMetricDataTTL&lt;/span>: &lt;span style="color:#d19a66">36&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># Unit is hour&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dayMetricDataTTL&lt;/span>: &lt;span style="color:#d19a66">45&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># Unit is day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">monthMetricDataTTL&lt;/span>: &lt;span style="color:#d19a66">18&lt;/span> &lt;span style="color:#8a93a5;font-style:italic"># Unit is month&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">configuration&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">applicationApdexThreshold&lt;/span>: &lt;span style="color:#d19a66">2000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">serviceErrorRateThreshold&lt;/span>: &lt;span style="color:#d19a66">10.00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">serviceAverageResponseTimeThreshold&lt;/span>: &lt;span style="color:#d19a66">2000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instanceErrorRateThreshold&lt;/span>: &lt;span style="color:#d19a66">10.00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instanceAverageResponseTimeThreshold&lt;/span>: &lt;span style="color:#d19a66">2000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">applicationErrorRateThreshold&lt;/span>: &lt;span style="color:#d19a66">10.00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">applicationAverageResponseTimeThreshold&lt;/span>: &lt;span style="color:#d19a66">2000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">thermodynamicResponseTimeStep&lt;/span>: &lt;span style="color:#d19a66">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">thermodynamicCountOfResponseTimeSteps&lt;/span>: &lt;span style="color:#d19a66">40&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">workerCacheMaxSize&lt;/span>: &lt;span style="color:#d19a66">10000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改 &lt;code>webapp/webapp.yml&lt;/code> Collector 地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">server&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>: &lt;span style="color:#d19a66">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">collector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">path&lt;/span>: &lt;span style="color:#98c379">/graphql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ribbon&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ReadTimeout&lt;/span>: &lt;span style="color:#d19a66">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">listOfServers&lt;/span>: &lt;span style="color:#d19a66">10.0.0.34&lt;/span>:&lt;span style="color:#d19a66">10800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">security&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">user&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">admin&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">password&lt;/span>: &lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改 &lt;code>config/agent.config&lt;/code> Collector 地址&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>agent.application_code=AppService
collector.servers=10.0.0.34:10800
logging.level=INFO
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>启动 Collector 和 Webapp&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./bin/startup.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或单独启动 Collector 和 Webapp&lt;/p></description></item><item><title>使用 Jib 生成 Java Docker 镜像</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-jib-%E7%94%9F%E6%88%90-java-docker-%E9%95%9C%E5%83%8F/</link><pubDate>Mon, 16 Jul 2018 00:17:43 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8-jib-%E7%94%9F%E6%88%90-java-docker-%E9%95%9C%E5%83%8F/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a> 是谷歌最新开源的 Java 应用的 Docker 镜像生成工具，可以通过 Gradle 或 Maven 直接生成镜像并上传到仓库而不需要 Dockerfile 文件或者其他插件；Jib 支持将资源文件和类分层打包，可以大幅度提升生成镜像的速度&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>有一些其他的插件也可以通过 Docker 实现生成镜像，如&lt;a href="https://helloworlde.github.io/2018/04/08/Docker-%E6%9E%84%E5%BB%BA-SpringBoot-%E5%BA%94%E7%94%A8/">&lt;code>com.palantir.docker&lt;/code>&lt;/a>等，但是都需要额外配置 Dockerfile, 如果应用仅需要通过 Dockerfile 构建镜像，建议使用 Jib 来提升构建和上传速度&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="添加依赖httpspluginsgradleorgplugincomgooglecloudtoolsjib">&lt;a href="https://plugins.gradle.org/plugin/com.google.cloud.tools.jib">添加依赖&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">buildscript&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">maven&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#98c379">&amp;#39;https://plugins.gradle.org/m2/&amp;#39;&lt;/span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">classpath&lt;/span> &lt;span style="color:#63c381">&amp;#34;gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:0.9.6&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#63c381">&amp;#34;com.google.cloud.tools.jib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">plugins&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#98c379">&amp;#39;com.google.cloud.tools.jib&amp;#39;&lt;/span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#98c379">&amp;#39;0.9.6&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="构建镜像">构建镜像&lt;/h3>
&lt;blockquote>
&lt;p>以下方式都需要终端能够访问 &lt;code>gcr.io&lt;/code>或 &lt;code>hub.docker.com&lt;/code>等 Docker Hub 才能成功&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>直接构建并推送到 &lt;a href="https://cloud.google.com/container-registry/">GCR&lt;/a>
通过这种方式构建的镜像会以&lt;code>gcr.io/distroless/java&lt;/code>为底层镜像，编译之后生成镜像，并推送到 Google 容器镜像仓库中：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">gradle&lt;/span> &lt;span style="color:#c1abea">jib&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>指定推送的容器镜像仓库&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://cloud.google.com/container-registry/">Google Container Center&lt;/a>, &lt;a href="https://aws.amazon.com/ecr/">Amazon Elastic Container Registry&lt;/a>, &lt;a href="https://hub.docker.com/">Docker Hub Registry&lt;/a>之外的 Hub可能会失败，需要先登录到对应的 Docker Hub才可以&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">gradle&lt;/span> &lt;span style="color:#c1abea">jib&lt;/span> &lt;span style="color:#c7bf54">--&lt;/span>&lt;span style="color:#c1abea">image&lt;/span> &lt;span style="color:#c1abea">registry&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">hub&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">docker&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">com&lt;/span>&lt;span style="color:#98c379">/helloworld/&lt;/span>&lt;span style="color:#f5a40d">java:&lt;/span>&lt;span style="color:#c1abea">jib&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者在&lt;code>build.gradle&lt;/code>中以下添加之后执行 &lt;code>gradle jib&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>jib.to.image = &amp;#39;registry.hub.docker.com/helloworld/java:jib&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>保存在本地
需要本地 Docker 应用已经启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle jibDockerBuild
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#extended-usage">自定义基础镜像和参数(build.gradle)&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">jib&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">from&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">image&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;registry.hub.docker.com/openjdk:8-jdk-alpine&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">auth&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">username&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;username&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">password&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;password&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">to&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">image&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;registry.hub.docker.com/helloword/java:jib&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">auth&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">username&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;username&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">password&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;password&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">credHelper&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;osxkeychain&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">container&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">jvmFlags&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#98c379">&amp;#39;-Djava.security.egd=file:/dev/./urandom&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#98c379">&amp;#39;-Duser.timezone=GMT+08&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mainClass&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;example.jib.MainClass&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">args&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#98c379">&amp;#39;test]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> ports = [&amp;#39;&lt;/span>&lt;span style="color:#d19a66">8080&lt;/span>&amp;#39;&lt;span style="color:#c7bf54">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>from&lt;/code>：拉取的镜像的配置，默认为&lt;code>gcr.io/distroless/java&lt;/code>&lt;/li>
&lt;li>&lt;code>to&lt;/code>:要生成的镜像的配置&lt;/li>
&lt;li>&lt;code>image&lt;/code>：拉取或生成的镜像名称&lt;/li>
&lt;li>&lt;code>auth&lt;/code>: 认证信息，分别为用户名和密码&lt;/li>
&lt;li>&lt;a href="https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#authentication-methods">&lt;code>credHelper&lt;/code>&lt;/a>：鉴权信息的存放方式，Google 使用 &lt;code>gcr&lt;/code>, AWS使用 &lt;code>ecr-login&lt;/code>, DockerHub 根据平台使用 &lt;code>osxkeychain&lt;/code>, &lt;code>wincred&lt;/code>,&lt;code>secretservice&lt;/code>,&lt;code>pass&lt;/code>中的一种，可以参考 &lt;a href="https://github.com/docker/docker-credential-helpers">docker-credential-helpers&lt;/a>&lt;/li>
&lt;li>&lt;code>container&lt;/code>: 容器的属性&lt;/li>
&lt;li>&lt;code>jvmFlgs&lt;/code>: JVM 容器的参数，和 Dockerfile 的 &lt;code>ENTRYPOINT&lt;/code>作用相同&lt;/li>
&lt;li>&lt;code>mainClass&lt;/code>: 启动类限定名&lt;/li>
&lt;li>&lt;code>args&lt;/code>: &lt;code>main&lt;/code> 方法的传入参数&lt;/li>
&lt;li>&lt;code>ports&lt;/code>: 容器暴露的端口，和 Dockerfile 的&lt;code>EXPOSE&lt;/code>作用相同&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>推荐&lt;code>from&lt;/code> 改为 &lt;code>registry.hub.docker.com/openjdk:8-jdk-alpine&lt;/code>, &lt;code>to&lt;/code>改为 &lt;code>registry.cn-qingdao.aliyuncs.com&lt;/code> 等国内的仓库，同时将 Docker 的镜像源改为&lt;a href="https://registry.docker-cn.com">https://registry.docker-cn.com&lt;/a> 或 &lt;a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn&lt;/a>以减少构建时间&lt;/p></description></item><item><title>JRebel 安装激活</title><link>https://blog.hellowood.dev/posts/jrebel-%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB/</link><pubDate>Wed, 30 May 2018 01:27:34 +0800</pubDate><guid>https://blog.hellowood.dev/posts/jrebel-%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB/</guid><description>&lt;blockquote>
&lt;p>JRebel 是适用于 Java IDE 的代码热更新工具，可以直接更新代码，避免重启应用，可以提高开发效率，官网是 &lt;a href="https://zeroturnaround.com/software/jrebel/">https://zeroturnaround.com/software/jrebel/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h4 id="eclipse">Eclipse&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Help &amp;gt; Eclipse Marketplace&lt;/code>&lt;/li>
&lt;li>查找 &lt;code>JRebel&lt;/code>并安装&lt;/li>
&lt;/ul>
&lt;h4 id="myeclipse">MyEclipse&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Help &amp;gt; Install New Software&lt;/code>&lt;/li>
&lt;li>在 &lt;code>Work With&lt;/code>后面输入 &lt;code>http://update.zeroturnaround.com/update-site/&lt;/code>&lt;/li>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;h4 id="idea">IDEA&lt;/h4>
&lt;ul>
&lt;li>&lt;code>File &amp;gt; Settings &amp;gt; Plugins &amp;gt; Browse Repositories&lt;/code>&lt;/li>
&lt;li>查找 &lt;code>JRebel&lt;/code>并安装&lt;/li>
&lt;/ul>
&lt;h4 id="netbeans-ide">NetBeans IDE&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Tools &amp;gt; Plugins&lt;/code>&lt;/li>
&lt;li>&lt;code>Available Plugins tab&lt;/code>&lt;/li>
&lt;li>查找 &lt;code>JRebel&lt;/code>并安装&lt;/li>
&lt;/ul>
&lt;h2 id="激活">激活&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>JRebel&lt;/code> 通过使用 &lt;code>Facebook&lt;/code>或者 &lt;code>Twitter&lt;/code> 可以免费激活&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>访问 &lt;a href="my.jrebel.com">&lt;code>my.jrebel.com&lt;/code>&lt;/a>&lt;/li>
&lt;li>通过 &lt;code>Facebook&lt;/code>或者&lt;code>Twitter&lt;/code>登陆&lt;/li>
&lt;li>输入个人信息，点击激活即可&lt;/li>
&lt;li>将激活码输入到 IDE 中即可进行激活&lt;/li>
&lt;/ul></description></item><item><title>SpringBoot 使用 FastJSON 自定义接口返回 JSON 格式</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-fastjson-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E-json-%E6%A0%BC%E5%BC%8F/</link><pubDate>Tue, 10 Apr 2018 18:50:34 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-fastjson-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E-json-%E6%A0%BC%E5%BC%8F/</guid><description>&lt;p>在 SpringBoot 中如果想要自定义接口返回的值格式，可以通过重写 &lt;code>WebMvcConfigurerAdapter&lt;/code> 类的 &lt;code>configureMessageConverters&lt;/code> 方法实现&lt;/p>
&lt;ul>
&lt;li>添加依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>compile(&amp;#39;com.alibaba:fastjson:1.2.46&amp;#39;)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>MessageConverter.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.support.config.FastJsonConfig;
import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import java.util.List;

@Component
public class MessageConverter extends WebMvcConfigurerAdapter {

 private static final String DATE_TIME_PATTEN = &amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;;

 @Override
 public void configureMessageConverters(List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converters) {
 FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();

 FastJsonConfig fastJsonConfig = new FastJsonConfig();
 // 设置空值不返回
 fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);
 // 设置日期格式
 fastJsonConfig.setDateFormat(DATE_TIME_PATTEN);
 fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);

 converters.add(fastJsonHttpMessageConverter);
 }
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>如果不想让某个列返回可以在属性上添加 &lt;code>@JSONField(serialize = false)&lt;/code>&lt;/li>
&lt;li>如果想让某个属性返回的值为指定的字符串：&lt;code>@JSONField(name = &amp;quot;custom_field_name&amp;quot;)&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Ubuntu 服务器上传和下载文件</title><link>https://blog.hellowood.dev/posts/ubuntu-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 10 Apr 2018 14:47:07 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</guid><description>&lt;p>使用 &lt;code>scp&lt;/code> 命令完成文件的上传和下载&lt;/p>
&lt;h2 id="上传">上传&lt;/h2>
&lt;ul>
&lt;li>上传单个文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p port source_dictionary_file user@ServerIp:target_dictionary_file
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>prot 默认是22，如果使用默认可以不写&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>scp /User/hellowood/wechat.jpg root@192.168.0.2:/home/hellowood/wechat.jpg
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>上传整个文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p port -r source_dictionary user@ServerIp:target_dictionary
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>scp -r /User/hellowood/tomcat root@192.168.0.2:/home/hellowood/tomcat
&lt;/code>&lt;/pre>&lt;h2 id="下载">下载&lt;/h2>
&lt;ul>
&lt;li>下载单个文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p user@ServerIp:source_dictionary_file target_dictionary
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>scp root@192.168.0.2:/home/hellowood/wechat.jpg /User/hellowood/wechat.jpg
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>下载文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>scp -p port -r user@ServerIp:source_dictionary target_dictionry
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>scp -r root@192.168.0.2:/home/hellowood/tomcat /User/hellowood/tomcat
&lt;/code>&lt;/pre></description></item><item><title>Docker 配置 Nginx 访问宿主机目录下的应用</title><link>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AE-nginx-%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 10 Apr 2018 11:39:09 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AE-nginx-%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>使用 Nginx 将请求转发到宿主机的 Tomcat 应用&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置并启动-tomcat">配置并启动 Tomcat&lt;/h2>
&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;h2 id="配置-nginx">配置 Nginx&lt;/h2>
&lt;ul>
&lt;li>创建配置和日志文件夹&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>mkdir /home/nginx/conf
mkdir /home/nginx/logs
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>查询宿主机 IP&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker inspect --format &amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39; &amp;lt;container-ID&amp;gt;

# 或
docker inspect &amp;lt;container id&amp;gt;

# 或
docker inspect -f &amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; container_name_or_id
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加配置文件 &lt;code>nginx.conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>将 &lt;code>8084&lt;/code>端口转发到&lt;code>8080&lt;/code>端口，使用 &lt;code>log_format&lt;/code>目的是为了使用阿里云监控切分日志，可以没有&lt;/p>
&lt;pre tabindex="0">&lt;code>log_format proxyformat &amp;#34;$remote_addr $request_time $http_x_readtime [$time_local] \&amp;#34;$request_method http://$host$request_uri\&amp;#34; $status $body_bytes_sent \&amp;#34;$http_referer\&amp;#34; \&amp;#34;$upstream_addr\&amp;#34; \&amp;#34;$http_user_agent\&amp;#34; \&amp;#34;$upstream_response_time\&amp;#34; \&amp;#34;$request_time\&amp;#34;&amp;#34;;


 server {
 listen 80;
 server_name ali.hellowood.com.cn;
 location / {
 proxy_pass http://172.17.0.1:8080;
 proxy_set_header Host $http_host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>需要注意的是，Docker 会默认使用桥接路由，所以其 IP 和宿主机的 IP 位于同一 IP 段，并且默认宿主机的 IP 为第一个，即如果 Docker 的 IP 为 &lt;code>10.1.0.2&lt;/code>, 则可以通过 访问 &lt;code>10.1.0.1&lt;/code> 访问到宿主机&lt;/p></description></item><item><title>Docker 构建 SpringBoot 应用</title><link>https://blog.hellowood.dev/posts/docker-%E6%9E%84%E5%BB%BA-springboot-%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 08 Apr 2018 15:42:39 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E6%9E%84%E5%BB%BA-springboot-%E5%BA%94%E7%94%A8/</guid><description>&lt;ul>
&lt;li>
&lt;p>启动 Docker，并生成 SpringBoot 应用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改 &lt;code>build.gradle&lt;/code> 文件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>buildscript {
 ext {
 springBootVersion = &amp;#39;2.0.0.RELEASE&amp;#39;
 }
 repositories {
 maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; }
 mavenCentral()
 }
 dependencies {
 classpath(&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;#34;)
 classpath(&amp;#34;gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2&amp;#34;)
 }
}

apply plugin: &amp;#39;java&amp;#39;
apply plugin: &amp;#39;eclipse&amp;#39;
apply plugin: &amp;#39;org.springframework.boot&amp;#39;
apply plugin: &amp;#39;io.spring.dependency-management&amp;#39;
apply plugin: &amp;#39;com.palantir.docker&amp;#39;

group = &amp;#39;cn.com.hellowood&amp;#39;
sourceCompatibility = 1.8
version = &amp;#39;1.0.0-SNAPSHOT&amp;#39;

repositories {
 mavenCentral()
}

dependencies {
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;)
 testCompile(&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;)
}

docker {
 name &amp;#34;${project.group}/${jar.baseName}&amp;#34;
 files jar.archivePath
 buildArgs([&amp;#39;JAR_FILE&amp;#39;: &amp;#34;${jar.archiveName}&amp;#34;])
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 &lt;code>Dockerfile&lt;/code>文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>FROM openjdk:8-jdk-alpine
VOLUME /tmp
ARG JAR_FILE
ADD ${JAR_FILE} app.jar
ENTRYPOINT [&amp;#34;java&amp;#34;,&amp;#34;-Djava.security.egd=file:/dev/./urandom&amp;#34;,&amp;#34;-jar&amp;#34;,&amp;#34;/app.jar&amp;#34;]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>构建&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle build docker
&lt;/code>&lt;/pre>&lt;p>此时会生成&lt;code>Docker&lt;/code>镜像&lt;/p></description></item><item><title>Docker 配置Ubuntu 下 Tomcat 和 Nginx 使用 HTTPS 访问</title><link>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AEubuntu-%E4%B8%8B-tomcat-%E5%92%8C-nginx-%E4%BD%BF%E7%94%A8-https-%E8%AE%BF%E9%97%AE/</link><pubDate>Sun, 08 Apr 2018 15:38:01 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E9%85%8D%E7%BD%AEubuntu-%E4%B8%8B-tomcat-%E5%92%8C-nginx-%E4%BD%BF%E7%94%A8-https-%E8%AE%BF%E9%97%AE/</guid><description>&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;h3 id="使用脚本自动安装">使用脚本自动安装&lt;/h3>
&lt;pre tabindex="0">&lt;code>curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh --mirror Aliyun
&lt;/code>&lt;/pre>&lt;h3 id="更改镜像地址">更改镜像地址&lt;/h3>
&lt;ul>
&lt;li>修改或新建 &lt;code>/etc/docker/daemon.json&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;registry-mirrors&amp;#34;: [
 &amp;#34;https://registry.docker-cn.com&amp;#34;
 ]
}
&lt;/code>&lt;/pre>&lt;h3 id="启动-docker">启动 Docker&lt;/h3>
&lt;pre tabindex="0">&lt;code>sudo systemctl daemon-reload
sudo systemctl enable docker
sudo systemctl start docker
&lt;/code>&lt;/pre>&lt;h2 id="配置-tomcat">配置 Tomcat&lt;/h2>
&lt;h3 id="启动-tomcat-容器">启动 Tomcat 容器&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker pull tomcat
docker run --name tomcat -d -p 8080:8080 tomcat
&lt;/code>&lt;/pre>&lt;h3 id="修改-tomcat-manager-应用">修改 Tomcat Manager 应用&lt;/h3>
&lt;ul>
&lt;li>修改 &lt;code>webapps/manager/META-INF/content.xml&lt;/code>，允许需要的IP访问，这里运行所有的IP访问&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;Context antiResourceLocking=&amp;#34;false&amp;#34; privileged=&amp;#34;true&amp;#34; &amp;gt;
 &amp;lt;Valve className=&amp;#34;org.apache.catalina.valves.RemoteAddrValve&amp;#34;
 allow=&amp;#34;^.*$&amp;#34; /&amp;gt;
 &amp;lt;Manager sessionAttributeValueClassNameFilter=&amp;#34;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&amp;#34;/&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="配置-tomcat-用户">配置 Tomcat 用户&lt;/h3>
&lt;ul>
&lt;li>修改 &lt;code>conf/tomcat-user.xml&lt;/code>，添加用户&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;role rolename=&amp;#34;admin-gui&amp;#34;/&amp;gt;
&amp;lt;role rolename=&amp;#34;manager-gui&amp;#34;/&amp;gt;
&amp;lt;user username=&amp;#34;tomcat&amp;#34; password=&amp;#34;tomcat&amp;#34; roles=&amp;#34;manager-gui,admin-gui&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="配置-nginx">配置 Nginx&lt;/h2>
&lt;h3 id="配置目录">配置目录&lt;/h3>
&lt;ul>
&lt;li>新建目录 &lt;code>/home/ubuntu/hellowood/dev/nginx/conf&lt;/code>, &lt;code>/home/ubuntu/hellowood/dev/nginx/log&lt;/code>, &lt;code>/home/ubuntu/hellowood/dev/nginx/certs&lt;/code>&lt;/li>
&lt;li>下载并解压相应的Nginx证书文件到 &lt;code>/home/ubuntu/hellowood/dev/nginx/conf&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="添加-nginx-配置">添加 Nginx 配置&lt;/h3>
&lt;ul>
&lt;li>nginx.conf&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>server {
 listen 80;
 listen 443 ssl;
 server_name hellowood.com.cn;
 ssl_certificate /etc/nginx/certs/hellowood.com.cn_bundle.crt;
 ssl_certificate_key /etc/nginx/certs/hellowood.com.cn.key;
 location / {
 proxy_pass http://tomcat:8080;
 }
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>http://tomcat:8080&lt;/code>: 将所有请求都转发到 &lt;code>tomcat&lt;/code> 容器的 &lt;code>8080&lt;/code>端口(不是映射端口)&lt;/p></description></item><item><title>Docker 中使用 Dockerfile</title><link>https://blog.hellowood.dev/posts/docker-%E4%B8%AD%E4%BD%BF%E7%94%A8-dockerfile/</link><pubDate>Sun, 08 Apr 2018 15:21:27 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E4%B8%AD%E4%BD%BF%E7%94%A8-dockerfile/</guid><description>&lt;p>Dockerfile 是一个文件，其包含了一条条的指令（instruction），每一条指令构建一层，因此每一条指令的内容就是描述该层应当如何构建&lt;/p>
&lt;ul>
&lt;li>构建一个镜像&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>FROM nginx
RUN echo &amp;#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&amp;#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code>&lt;/pre>&lt;h2 id="构建">构建&lt;/h2>
&lt;h3 id="命令">命令&lt;/h3>
&lt;h4 id="from">FROM&lt;/h4>
&lt;p>用于指定基础镜像，必备的指令，必须是第一条&lt;/p>
&lt;ul>
&lt;li>&lt;code>FROM scratch&lt;/code>
&lt;code>scratch&lt;/code>是一个特殊的镜像，表示一个空白的镜像，意味着不以任何镜像为基础，接下来的指令作为第一层&lt;/li>
&lt;/ul>
&lt;h4 id="run">RUN&lt;/h4>
&lt;p>&lt;code>RUN&lt;/code> 指令是用来执行命令的，格式有两种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>shell&lt;/code> 格式：&lt;code>RUN &amp;lt;命令&amp;gt; &lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>RUN echo &amp;#39;&amp;lt;h1&amp;gt;Hello, Docker!&amp;lt;/h1&amp;gt;&amp;#39; &amp;gt; /usr/share/nginx/html/index.html
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>exec&lt;/code>格式：&lt;code>RUN [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>每一个 &lt;code>RUN&lt;/code> 命令都会构建一层，应当减少不必要的构建&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM debian:jessie

RUN apt-get update
RUN apt-get install -y gcc libc6-dev make
RUN wget -O redis.tar.gz &amp;#34;http://download.redis.io/releases/redis-3.2.5.tar.gz&amp;#34;
RUN mkdir -p /usr/src/redis
RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
RUN make -C /usr/src/redis
RUN make -C /usr/src/redis install
&lt;/code>&lt;/pre>&lt;p>这样会构建7层，会提交大量的无用的改动，应当改为：&lt;/p></description></item><item><title>Docker 常用命令</title><link>https://blog.hellowood.dev/posts/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 08 Apr 2018 15:20:02 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;ul>
&lt;li>run
新建并启动容器&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>// 启动并输出 Hello World
docker run ubuntu:14.04 /bin/echo &amp;#39;Hello World&amp;#39;

// 启动 bash 终端
docker run -t -i ubuntu:14.04 bash


// 启动一个已终止的容器
docker container start myubuntu

docker run -d ubuntu:14.04 -c
&lt;/code>&lt;/pre>&lt;p>&lt;code>-t&lt;/code> 启动终端并绑定到容器标准输入上
&lt;code>-i&lt;/code> 保持容器标准输入打开
&lt;code>-c&lt;/code> 将容器的输出信息输出到宿主机
&lt;code>-d&lt;/code> 不会将容器的输出输出到宿主机&lt;/p>
&lt;ul>
&lt;li>stop
停止容器&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker container stop myubuntu
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>restart
重启容器&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker container restart myubuntu
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>attach
进入容器，可以执行命令&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker container start myubuntu
docker attach myubuntu
&lt;/code>&lt;/pre>&lt;p>此时执行&lt;code>exit&lt;/code>会退出容器&lt;/p>
&lt;ul>
&lt;li>exec
进入容器，可以执行命令，需要带参数
&lt;code>-i&lt;/code>:由于没有分配伪终端，所以不会有命令提示符，但是命令执行结果依然可以返回
&lt;code>-i -t&lt;/code>:可以显示终端&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker container start myubuntu
docker exec -i myubuntu bash
docker exec -it myubuntu bash
&lt;/code>&lt;/pre>&lt;p>此时执行&lt;code>exit&lt;/code>不会退出容器&lt;/p></description></item><item><title>Docker</title><link>https://blog.hellowood.dev/posts/docker/</link><pubDate>Sun, 08 Apr 2018 15:18:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/docker/</guid><description>&lt;h2 id="docker-中的概念">Docker 中的概念&lt;/h2>
&lt;ul>
&lt;li>镜像：一个特殊的文件系统，提供容器运行时所需的程序，库，资源，配置和配置参数，不包含任何动态数据，内容在构建之后也不会被改变&lt;/li>
&lt;li>容器： 镜像和容器可以看做是面向对象中的类和实例，容器的实质是进程，运行于一个隔离的环境，容器运行时，已当前镜像为基础，在其上创建一个当前容器的存储层，容器消亡时，任何存储于容器存储层的数据也会被被删除&lt;/li>
&lt;li>仓库：集中存储，分发镜像的服务&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h4 id="ubuntu">Ubuntu：&lt;/h4>
&lt;ul>
&lt;li>卸载旧版本&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo apt-get remove docker \
 docker-engine \
 docker.io
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>安装 Docker CE&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo apt-get update
sudo apt-get install docker-ce
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>或使用脚本安装&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh --mirror Aliyun
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>启动 Docker CE&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo systemctl enable docker
sudo systemctl start docker
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 Docker 组，并将当前用户加入 Docker 组&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo groupadd docker
sudo usermod -aG docker $USER
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>测试&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>docker run hello-world
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>镜像加速
编辑或新建 &lt;code>/etc/docker/daemon.json&lt;/code> ，添加以下内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;registry-mirrors&amp;#34;: [
 &amp;#34;https://registry.docker-cn.com&amp;#34;
 ]
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>重新启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo systemctl daemon-reload
sudo systemctl restart docker
&lt;/code>&lt;/pre>&lt;h4 id="mac">Mac：&lt;/h4>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>brew cask install docker
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>启动
点击 Docker 图标启动&lt;/p></description></item><item><title>SpringBoot-使用 MyBatis 通用 Mapper</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-mybatis-%E9%80%9A%E7%94%A8-mapper/</link><pubDate>Sun, 08 Apr 2018 15:11:45 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-mybatis-%E9%80%9A%E7%94%A8-mapper/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://github.com/abel533/Mapper">通用 Mapper&lt;/a> 是一个开源的 MyBatis 插件，该插件可以使用通用的 MyBatis方法，减少简单的 CRUD，提高开发效率；推荐搭配分页插件 &lt;a href="https://github.com/pagehelper/Mybatis-PageHelper">PageHelper&lt;/a> 一起使用；通用 Mapper 插件虽然没有 &lt;a href="https://github.com/baomidou/mybatis-plus">MyBatis Plus&lt;/a> 强大，但是满足正常项目开发；&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;tk.mybatis:mapper:3.4.2&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># DataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/product?useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

# MyBatis
mybatis.type-aliases-package=cn.com.hellowood.mybatisplus.dao
mybatis.mapper-locations=mappers/**Mapper.xml

# PageHelper
pagehelper.helper-dialect=mysql
pagehelper.reasonable=true
pagehelper.support-methods-arguments=true
pagehelper.params=count=countSql
pagehelper.row-bounds-with-count=true
pagehelper.offset-as-page-num=true
pagehelper.page-size-zero=true

# Log
logging.level.root=info
logging.level.cn.com.hellowood=trace

spring.profiles.active=dev
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>MyBatisConfig.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.context.annotation.Bean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.context.annotation.Configuration&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">tk.mybatis.spring.mapper.MapperScannerConfigurer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.util.Properties&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">MyBatisConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">MAPPER_PACKAGE&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.mapper.dao&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">MAPPER_INTERFACE_REFERENCE&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.mapper.common.CommonMapper&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">MapperScannerConfigurer&lt;/span> &lt;span style="color:#00b1f7">mapperScannerConfigurer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">MapperScannerConfigurer&lt;/span> &lt;span style="color:#c1abea">mapperScannerConfigurer&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">MapperScannerConfigurer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mapperScannerConfigurer&lt;/span>.&lt;span style="color:#b3d23c">setSqlSessionFactoryBeanName&lt;/span>(&lt;span style="color:#98c379">&amp;#34;sqlSessionFactoryBean&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mapperScannerConfigurer&lt;/span>.&lt;span style="color:#b3d23c">setBasePackage&lt;/span>(&lt;span style="color:#c1abea">MAPPER_PACKAGE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Properties&lt;/span> &lt;span style="color:#c1abea">properties&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Properties&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">properties&lt;/span>.&lt;span style="color:#b3d23c">setProperty&lt;/span>(&lt;span style="color:#98c379">&amp;#34;mappers&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">MAPPER_INTERFACE_REFERENCE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">properties&lt;/span>.&lt;span style="color:#b3d23c">setProperty&lt;/span>(&lt;span style="color:#98c379">&amp;#34;notEmpty&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;false&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">properties&lt;/span>.&lt;span style="color:#b3d23c">setProperty&lt;/span>(&lt;span style="color:#98c379">&amp;#34;IDENTIFY&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;MYSQL&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mapperScannerConfigurer&lt;/span>.&lt;span style="color:#b3d23c">setProperties&lt;/span>(&lt;span style="color:#c1abea">properties&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">mapperScannerConfigurer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>BaseService.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.service&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.common.CommonMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.common.CommonService&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.utils.ServiceException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">com.github.pagehelper.PageHelper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">com.github.pagehelper.PageInfo&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.beans.factory.annotation.Autowired&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">tk.mybatis.mapper.entity.Condition&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.servlet.http.HttpServletRequest&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.io.Serializable&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.lang.reflect.Field&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.lang.reflect.ParameterizedType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.util.List&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">BaseService&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">CommonService&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Class&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">modelClass&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#c1abea">CommonMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HttpServletRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#00b1f7">BaseService&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ParameterizedType&lt;/span> &lt;span style="color:#c1abea">type&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> (&lt;span style="color:#c1abea">ParameterizedType&lt;/span>) &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">getClass&lt;/span>().&lt;span style="color:#b3d23c">getGenericSuperclass&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>.&lt;span style="color:#b3d23c">modelClass&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> (&lt;span style="color:#c1abea">Class&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>) &lt;span style="color:#c1abea">type&lt;/span>.&lt;span style="color:#b3d23c">getActualTypeArguments&lt;/span>()&lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#c1abea">0&lt;/span>&lt;span style="color:#c7bf54">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#00b1f7">save&lt;/span>(&lt;span style="color:#c1abea">T&lt;/span> &lt;span style="color:#c1abea">model&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">insertSelective&lt;/span>(&lt;span style="color:#c1abea">model&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#00b1f7">save&lt;/span>(&lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">models&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">insertList&lt;/span>(&lt;span style="color:#c1abea">models&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#00b1f7">deleteById&lt;/span>(&lt;span style="color:#c1abea">Serializable&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">deleteByPrimaryKey&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#00b1f7">deleteByIds&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">ids&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">deleteByIds&lt;/span>(&lt;span style="color:#c1abea">ids&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#00b1f7">update&lt;/span>(&lt;span style="color:#c1abea">T&lt;/span> &lt;span style="color:#c1abea">model&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">updateByPrimaryKeySelective&lt;/span>(&lt;span style="color:#c1abea">model&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">T&lt;/span> &lt;span style="color:#00b1f7">getById&lt;/span>(&lt;span style="color:#c1abea">Serializable&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">selectByPrimaryKey&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByField&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">fieldName&lt;/span>, &lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#c1abea">value&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">T&lt;/span> &lt;span style="color:#c1abea">model&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">modelClass&lt;/span>.&lt;span style="color:#b3d23c">newInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Field&lt;/span> &lt;span style="color:#c1abea">field&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">modelClass&lt;/span>.&lt;span style="color:#b3d23c">getDeclaredField&lt;/span>(&lt;span style="color:#c1abea">fieldName&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">field&lt;/span>.&lt;span style="color:#b3d23c">setAccessible&lt;/span>(&lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">field&lt;/span>.&lt;span style="color:#b3d23c">set&lt;/span>(&lt;span style="color:#c1abea">model&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">select&lt;/span>(&lt;span style="color:#c1abea">model&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">ReflectiveOperationException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">throw&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>(), &lt;span style="color:#c1abea">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByIds&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">ids&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">selectByIds&lt;/span>(&lt;span style="color:#c1abea">ids&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByCondition&lt;/span>(&lt;span style="color:#c1abea">Condition&lt;/span> &lt;span style="color:#c1abea">condition&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">selectByCondition&lt;/span>(&lt;span style="color:#c1abea">condition&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getAll&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">selectAll&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getPage&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">PageHelper&lt;/span>.&lt;span style="color:#b3d23c">startPage&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">list&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">commonMapper&lt;/span>.&lt;span style="color:#b3d23c">selectAll&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">list&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CommonMapper.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.common&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">tk.mybatis.mapper.common.BaseMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">tk.mybatis.mapper.common.ConditionMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">tk.mybatis.mapper.common.IdsMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">tk.mybatis.mapper.common.special.InsertListMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">CommonMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">BaseMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ConditionMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">IdsMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">InsertListMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">T&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Product.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.modal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.persistence.Column&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.persistence.GeneratedValue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.persistence.GenerationType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.persistence.Id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">Product&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GeneratedValue&lt;/span>(&lt;span style="color:#c1abea">strategy&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">GenerationType&lt;/span>.&lt;span style="color:#b3d23c">IDENTITY&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Column&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Column&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Double&lt;/span> &lt;span style="color:#c1abea">price&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// get, set ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ProductDao.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.dao&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.common.CommonMapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.mapper.modal.Product&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.apache.ibatis.annotations.Mapper&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Mapper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">ProductDao&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">CommonMapper&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ProductMapper.xml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34; &amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;mapper&lt;/span> &lt;span style="color:#b3d23c">namespace=&lt;/span>&lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.mapper.dao.ProductDao&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;resultMap&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;baseResultMap&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">type=&lt;/span>&lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.mapper.modal.Product&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;id&lt;/span> &lt;span style="color:#b3d23c">column=&lt;/span>&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">property=&lt;/span>&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">javaType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.lang.Integer&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">jdbcType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;INTEGER&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;result&lt;/span> &lt;span style="color:#b3d23c">column=&lt;/span>&lt;span style="color:#98c379">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">property=&lt;/span>&lt;span style="color:#98c379">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">javaType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.lang.String&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">jdbcType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;VARCHAR&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&amp;lt;/result&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;result&lt;/span> &lt;span style="color:#b3d23c">column=&lt;/span>&lt;span style="color:#98c379">&amp;#34;price&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">property=&lt;/span>&lt;span style="color:#98c379">&amp;#34;price&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">javaType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.lang.Double&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">jdbcType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;BIGINT&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&amp;lt;/result&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;/resultMap&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;/mapper&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;blockquote>
&lt;p>直接调用 Service 的方法就可以实现正常的单表 CRUD，但是对于多表的操作依然需要写在 XML 里&lt;/p></description></item><item><title>SpringBoot-使用 Spring Session 实现 Session 共享</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-spring-session-%E5%AE%9E%E7%8E%B0-session-%E5%85%B1%E4%BA%AB/</link><pubDate>Sun, 08 Apr 2018 15:09:41 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-spring-session-%E5%AE%9E%E7%8E%B0-session-%E5%85%B1%E4%BA%AB/</guid><description>&lt;h2 id="通过-redis-共享">通过 Redis 共享&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;ul>
&lt;li>配置并启动 Redis&lt;/li>
&lt;li>添加依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.session:spring-session&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-data-redis&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.session.store-type=redis
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.database=0
spring.redis.password=123456
&lt;/code>&lt;/pre>&lt;h3 id="使用">使用&lt;/h3>
&lt;ul>
&lt;li>启用 Redis Session&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.boot.SpringApplication&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@EnableRedisHttpSession&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">SessionApplication&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">args&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SpringApplication&lt;/span>.&lt;span style="color:#b3d23c">run&lt;/span>(&lt;span style="color:#c1abea">SessionApplication&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>, &lt;span style="color:#c1abea">args&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@EnableRedisHttpSession&lt;/code> 也可以不写，在配置文件里配置 &lt;code>spring.session.store-type=redis&lt;/code> 即可&lt;/p>
&lt;ul>
&lt;li>添加 Controller&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.RequestMapping&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.ResponseBody&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.RestController&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">javax.servlet.http.HttpSession&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">SessionController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@RequestMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">root&lt;/span>(&lt;span style="color:#c1abea">HttpSession&lt;/span> &lt;span style="color:#c1abea">session&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">session&lt;/span>.&lt;span style="color:#b3d23c">getId&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;code>http://localhost:8080&lt;/code>, 此时会显示 &lt;code>Session ID&lt;/code>, 重新启动应用，再次访问 &lt;code>http://localhost:8080&lt;/code>，此时 &lt;code>Session ID&lt;/code> 应该和第一次访问一致，说明 &lt;code>Session&lt;/code> 已被正确共享&lt;/p></description></item><item><title>SpringBoot 使用QuartzJob实现任务控制</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8quartzjob%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 12 Feb 2018 18:22:43 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8quartzjob%E5%AE%9E%E7%8E%B0%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/</guid><description>&lt;blockquote>
&lt;p>项目地址&lt;a href="https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-ScheduledJob">https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-ScheduledJob&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在 SpringBoot 中通过 &lt;code>@Schedule&lt;/code>注解就可以简单的实现定时任务，但是这种方式够灵活，如果想要修改执行状态就必须修改代码；另外一种实现方式是通过 &lt;a href="http://www.quartz-scheduler.org/">&lt;code>Quartz&lt;/code>&lt;/a> 实现任务调度&lt;/p>
&lt;/blockquote>
&lt;h2 id="通过-springboot-实现简单任务">通过 SpringBoot 实现简单任务&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.Logger&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.LoggerFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.scheduling.annotation.Scheduled&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import static&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.scheduledjob.utils.ApplicationUtils.currentDateTime&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">StaticJob&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Logger&lt;/span> &lt;span style="color:#c1abea">logger&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">LoggerFactory&lt;/span>.&lt;span style="color:#b3d23c">getLogger&lt;/span>(&lt;span style="color:#c1abea">getClass&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">SECOND&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">1000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * fixedDelay: 固定延迟时间执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Scheduled&lt;/span>(&lt;span style="color:#c1abea">fixedDelay&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">10&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span> &lt;span style="color:#c1abea">SECOND&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">fixedDelayJob&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">logger&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;{}\tfixedDelay&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">currentDateTime&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * fixedRate: 固定间隔时间执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Scheduled&lt;/span>(&lt;span style="color:#c1abea">fixedRate&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">10&lt;/span> &lt;span style="color:#c7bf54">*&lt;/span> &lt;span style="color:#c1abea">SECOND&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">fixedRate&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">logger&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;{}\tfixedRate&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">currentDateTime&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> * cron: 通过 Cron 表达式控制执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Scheduled&lt;/span>(&lt;span style="color:#c1abea">cron&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;*/10 * * * * *&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">cron&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">logger&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;{}\tcron&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">currentDateTime&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="springboot-集成-quartz-实现可控的任务">SpringBoot 集成 Quartz 实现可控的任务&lt;/h2>
&lt;blockquote>
&lt;p>在 SpringBoot 的2.0 以上版本直接集成了 Quartz；
本文通过 RESTful 接口 来实现，实现的大概思路是通过实现 &lt;code>org.quartz.Job&lt;/code>接口，在其&lt;code>execute()&lt;/code>中实现自己的逻辑；通过调用 &lt;code>org.quartz.Scheduler&lt;/code>的接口实现任务的创建，运行，暂停，更新，删除功能，核心的代码在 &lt;code>cn.com.hellowood.scheduledjob.job.ScheduleUtil&lt;/code>里&lt;/p></description></item><item><title>SpringBoot 使用 MyBatis PageHelper 分页插件</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-mybatis-pagehelper-%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</link><pubDate>Sat, 03 Feb 2018 11:56:38 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-mybatis-pagehelper-%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://github.com/pagehelper/Mybatis-PageHelper">MyBatis PageHelper&lt;/a> 是一个 MyBatis 分页插件，能够比较方便的实现 MyBatis 的分页&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="添加配置">添加配置&lt;/h2>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>pagehelper.helper-dialect=mysql
pagehelper.reasonable=true
pagehelper.support-methods-arguments=true
pagehelper.params=count=countSql
pagehelper.row-bounds-with-count=true
pagehelper.offset-as-page-num=true
pagehelper.page-size-zero=true
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>pagehelper.helper-dialect&lt;/code> : 指定分页插件使用哪种语言&lt;/li>
&lt;li>&lt;code>pagehelper.offset-as-page-num&lt;/code> : 默认为 &lt;code>false&lt;/code>, 该参数对使用&lt;code>RowBounds&lt;/code>作为分页参数时有效，当为&lt;code>true&lt;/code>时，会将&lt;code>RowBounds&lt;/code>的&lt;code>offset&lt;/code>参数当成&lt;code>pageNum&lt;/code>使用&lt;/li>
&lt;li>&lt;code>pagehelper.row-bounds-with-count&lt;/code> : 默认为&lt;code>false&lt;/code>，该参数对使用&lt;code>RowBounds&lt;/code>作为分页参数时有效，当该参数值为&lt;code>true&lt;/code>时，使用&lt;code>RowBounds&lt;/code>分页会进行&lt;code>count&lt;/code>查询&lt;/li>
&lt;li>&lt;code>pagehelper.page-size-zero&lt;/code> : 默认为&lt;code>false&lt;/code>,当该参数为&lt;code>true&lt;/code>时，如果&lt;code>pageSize=0&lt;/code>或者&lt;code>RowBounds.limit=0&lt;/code>就会查询所有结果&lt;/li>
&lt;li>&lt;code>pagehelper.reasonable&lt;/code> : 分页合理化参数，默认为&lt;code>false&lt;/code>，当该值为&lt;code>true&lt;/code>，&lt;code>pageNum&amp;lt;=0&lt;/code>默认查询第一页，&lt;code>pageNum&amp;gt;pages&lt;/code>时会查询最后一页，&lt;code>false&lt;/code>时直接根据参数进行查询&lt;/li>
&lt;li>&lt;code>pagehelper.params&lt;/code> : 为了支持&lt;code>startPage(Object params)&lt;/code>方法，增加该参数来配置参数映射，用于从对象中根据属性名取值，可以配置&lt;code>pageNum,pageSize,pageSizeZero, reasonable&lt;/code>, 不配置映射是使用默认值， 默认值为&lt;code>pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero&lt;/code>&lt;/li>
&lt;li>&lt;code>pagehelper.support-methods-arguments&lt;/code> : 支持通过 &lt;code>Mapper&lt;/code>接口参数来传递分页参数，默认为&lt;code>false&lt;/code>, 分页插件会从查询方法的参数中根据&lt;code>params&lt;/code>配置的字段中取值，查找到合适的就进行分页&lt;/li>
&lt;li>&lt;code>pagehelper.auto-runtime-dialect&lt;/code> : 默认为&lt;code>false&lt;/code>, 为&lt;code>true&lt;/code>时允许在运行时根据多数据源自动识别对应的方言进行分页&lt;/li>
&lt;li>&lt;code>pagehelper.close-conn&lt;/code> : 默认为&lt;code>true&lt;/code>, 当使用运行是动态数据源或者没有设置&lt;code>helperDialect&lt;/code>属性自动获取数据库类型时，会自动获取一个数据库连接，通过该属性来设置是否关闭获取的这个连接，默认为&lt;code>true&lt;/code>关闭，&lt;code>false&lt;/code>不会自动关闭&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;ul>
&lt;li>Product.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">Product&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">Serializable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">price&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageNum&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageSize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ProductMapper.xml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;resultMap&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;baseResultMap&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">type=&lt;/span>&lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.mybatis.modal.Product&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;id&lt;/span> &lt;span style="color:#b3d23c">column=&lt;/span>&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">property=&lt;/span>&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">javaType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.lang.Long&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">jdbcType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;INTEGER&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;result&lt;/span> &lt;span style="color:#b3d23c">column=&lt;/span>&lt;span style="color:#98c379">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">property=&lt;/span>&lt;span style="color:#98c379">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">javaType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.lang.String&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">jdbcType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;VARCHAR&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&amp;lt;/result&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;lt;result&lt;/span> &lt;span style="color:#b3d23c">column=&lt;/span>&lt;span style="color:#98c379">&amp;#34;price&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">property=&lt;/span>&lt;span style="color:#98c379">&amp;#34;price&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">javaType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;java.lang.Long&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">jdbcType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;BIGINT&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&amp;lt;/result&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;/resultMap&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用pagehelperstartpage或-pagehelperoffsetpage">使用&lt;code>PageHelper.startPage()&lt;/code>或 &lt;code>PageHelper.offsetPage()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByPageHelper&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">PageHelper&lt;/span>.&lt;span style="color:#b3d23c">startPage&lt;/span>(&lt;span style="color:#c1abea">request&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 或&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// PageHelper.startPage(0,10);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// PageHelper.offsetPage(0,10);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">productDao&lt;/span>.&lt;span style="color:#b3d23c">getByPageHelper&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;select&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;getByPageHelper&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">resultMap=&lt;/span>&lt;span style="color:#98c379">&amp;#34;baseResultMap&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用rowbounds传递分页参数">使用&lt;code>RowBounds&lt;/code>传递分页参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByRowBounds&lt;/span>(&lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageNum&lt;/span>, &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">productDao&lt;/span>.&lt;span style="color:#b3d23c">getByRowBounds&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">RowBounds&lt;/span>(&lt;span style="color:#c1abea">pageNum&lt;/span>, &lt;span style="color:#c1abea">pageSize&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;select&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;getByRowBounds&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">resultMap=&lt;/span>&lt;span style="color:#98c379">&amp;#34;baseResultMap&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dao-接口直接传递分页参数">Dao 接口直接传递分页参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByInterfaceArgs&lt;/span>(&lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageNum&lt;/span>, &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">productDao&lt;/span>.&lt;span style="color:#b3d23c">getByInterfaceArgs&lt;/span>(&lt;span style="color:#c1abea">pageNum&lt;/span>, &lt;span style="color:#c1abea">pageSize&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;select&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;getByInterfaceArgs&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">resultMap=&lt;/span>&lt;span style="color:#98c379">&amp;#34;baseResultMap&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通过modal传递分页参数">通过&lt;code>Modal&lt;/code>传递分页参数&lt;/h3>
&lt;ul>
&lt;li>需要 &lt;code>Product&lt;/code>中的&lt;code>pageSize&lt;/code>和&lt;code>pageNum&lt;/code>都有效&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">getByModalArgs&lt;/span>(&lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#c1abea">product&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PageInfo&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#c1abea">productDao&lt;/span>.&lt;span style="color:#b3d23c">getByModalArgs&lt;/span>(&lt;span style="color:#c1abea">product&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;select&lt;/span> &lt;span style="color:#b3d23c">id=&lt;/span>&lt;span style="color:#98c379">&amp;#34;getByModalArgs&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">resultMap=&lt;/span>&lt;span style="color:#98c379">&amp;#34;baseResultMap&amp;#34;&lt;/span> &lt;span style="color:#b3d23c">parameterType=&lt;/span>&lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.mybatis.modal.Product&amp;#34;&lt;/span>&lt;span style="color:#e06c75">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SpringBoot 使用 ELK 日志收集系统安装配置</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-elk-%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 21 Jan 2018 21:16:10 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-elk-%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="elasticsearch">Elasticsearch&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>下载 &lt;a href="https://www.elastic.co/cn/downloads/elasticsearch">Elasticsearch&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压并运行 &lt;code>bin/elasticsearch&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>访问 &lt;code>http://localhost:9200&lt;/code>, 会看到以下内容&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;name&amp;#34; : &amp;#34;9KA6kPN&amp;#34;,
 &amp;#34;cluster_name&amp;#34; : &amp;#34;elasticsearch&amp;#34;,
 &amp;#34;cluster_uuid&amp;#34; : &amp;#34;BtscSPXeR0manhl2LibpuA&amp;#34;,
 &amp;#34;version&amp;#34; : {
 &amp;#34;number&amp;#34; : &amp;#34;6.1.1&amp;#34;,
 &amp;#34;build_hash&amp;#34; : &amp;#34;bd92e7f&amp;#34;,
 &amp;#34;build_date&amp;#34; : &amp;#34;2017-12-17T20:23:25.338Z&amp;#34;,
 &amp;#34;build_snapshot&amp;#34; : false,
 &amp;#34;lucene_version&amp;#34; : &amp;#34;7.1.0&amp;#34;,
 &amp;#34;minimum_wire_compatibility_version&amp;#34; : &amp;#34;5.6.0&amp;#34;,
 &amp;#34;minimum_index_compatibility_version&amp;#34; : &amp;#34;5.0.0&amp;#34;
 },
 &amp;#34;tagline&amp;#34; : &amp;#34;You Know, for Search&amp;#34;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>安装 Head 插件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>bin/plugin install mobz/elasticsearch-head
&lt;/code>&lt;/pre>&lt;h2 id="logstash">Logstash&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>下载 &lt;a href="https://www.elastic.co/cn/downloads/logstash">Logstash&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解压&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加配置&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>添加 &lt;code>log_to_es.conf&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>input {
 tcp {
 host =&amp;gt; &amp;#34;localhost&amp;#34;
 port =&amp;gt; 4560
 mode =&amp;gt; &amp;#34;server&amp;#34;
 tags =&amp;gt; [&amp;#34;applog&amp;#34;]
 codec =&amp;gt; json_lines
 }
}
output {
 stdout{codec =&amp;gt;rubydebug}
 elasticsearch {
 action =&amp;gt; &amp;#34;index&amp;#34; #The operation on ES
 hosts =&amp;gt; &amp;#34;localhost:9200&amp;#34; #ElasticSearch host, can be array.
 index =&amp;gt; &amp;#34;applog&amp;#34; #The index to write data to.
 }
}
&lt;/code>&lt;/pre>&lt;p>这是从本地通过 TCP 读取读取日志并发送到 ElasticSearch&lt;/p></description></item><item><title>SpringBoot logback 输出日志到数据库、Logstash</title><link>https://blog.hellowood.dev/posts/springboot-logback-%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93logstash/</link><pubDate>Fri, 19 Jan 2018 21:25:42 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-logback-%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93logstash/</guid><description>&lt;h2 id="输入日志到数据库">输入日志到数据库&lt;/h2>
&lt;ul>
&lt;li>创建表&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>DROP TABLE IF EXISTS logging_event;
CREATE TABLE logging_event
(
 timestmp BIGINT NOT NULL,
 formatted_message TEXT NOT NULL,
 logger_name VARCHAR(254) NOT NULL,
 level_string VARCHAR(254) NOT NULL,
 thread_name VARCHAR(254),
 reference_flag SMALLINT,
 arg0 VARCHAR(254),
 arg1 VARCHAR(254),
 arg2 VARCHAR(254),
 arg3 VARCHAR(254),
 caller_filename VARCHAR(254) NOT NULL,
 caller_class VARCHAR(254) NOT NULL,
 caller_method VARCHAR(254) NOT NULL,
 caller_line CHAR(4) NOT NULL,
 event_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY
);

DROP TABLE IF EXISTS logging_event_property;
CREATE TABLE logging_event_property
(
 event_id BIGINT NOT NULL,
 mapped_key VARCHAR(254) NOT NULL,
 mapped_value TEXT,
 PRIMARY KEY (event_id, mapped_key),
 FOREIGN KEY (event_id) REFERENCES logging_event (event_id)
);

DROP TABLE IF EXISTS logging_event_exception;
CREATE TABLE logging_event_exception
(
 event_id BIGINT NOT NULL,
 i SMALLINT NOT NULL,
 trace_line VARCHAR(254) NOT NULL,
 PRIMARY KEY (event_id, i),
 FOREIGN KEY (event_id) REFERENCES logging_event (event_id)
);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置&lt;code>logback.xml&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;configuration&amp;gt;
 &amp;lt;!--日志异步到数据库 --&amp;gt;
 &amp;lt;appender name=&amp;#34;DB&amp;#34; class=&amp;#34;ch.qos.logback.classic.db.DBAppender&amp;#34;&amp;gt;
 &amp;lt;!--日志异步到数据库--&amp;gt;
 &amp;lt;connectionSource class=&amp;#34;ch.qos.logback.core.db.DriverManagerConnectionSource&amp;#34;&amp;gt;
 &amp;lt;driverClass&amp;gt;com.mysql.jdbc.Driver&amp;lt;/driverClass&amp;gt;
 &amp;lt;url&amp;gt;jdbc:mysql://localhost:3306/log?useSSL=false&amp;lt;/url&amp;gt;
 &amp;lt;user&amp;gt;root&amp;lt;/user&amp;gt;
 &amp;lt;password&amp;gt;123456&amp;lt;/password&amp;gt;
 &amp;lt;/connectionSource&amp;gt;
 &amp;lt;/appender&amp;gt;

 &amp;lt;root level=&amp;#34;INFO&amp;#34;&amp;gt;
 &amp;lt;appender-ref ref=&amp;#34;DB&amp;#34;/&amp;gt;
 &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="输入日志到-logstashhttpswwwelasticcocnproductslogstash">输入日志到 &lt;a href="https://www.elastic.co/cn/products/logstash">&lt;code>Logstash&lt;/code>&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>logback.xml&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;configuration scan=&amp;#34;true&amp;#34; scanPeriod=&amp;#34;60 seconds&amp;#34; debug=&amp;#34;false&amp;#34;&amp;gt;

 &amp;lt;!--日志导出的到 Logstash--&amp;gt;
 &amp;lt;appender name=&amp;#34;LOGSTASH&amp;#34; class=&amp;#34;net.logstash.logback.appender.LogstashTcpSocketAppender&amp;#34;&amp;gt;
 &amp;lt;destination&amp;gt;127.0.0.1:4560&amp;lt;/destination&amp;gt;
 &amp;lt;encoder chaset=&amp;#34;UTF-8&amp;#34; class=&amp;#34;net.logstash.logback.encoder.LogstashEncoder&amp;#34;&amp;gt;
 &amp;lt;customFields&amp;gt;{&amp;#34;appname&amp;#34;:&amp;#34;SpringBootLog&amp;#34;}&amp;lt;/customFields&amp;gt;
 &amp;lt;/encoder&amp;gt;
 &amp;lt;/appender&amp;gt;

 &amp;lt;root level=&amp;#34;INFO&amp;#34;&amp;gt;
 &amp;lt;appender-ref ref=&amp;#34;LOGSTASH&amp;#34;/&amp;gt;
 &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>SpringBoot 中日志使用</title><link>https://blog.hellowood.dev/posts/springboot-%E4%B8%AD%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 19 Jan 2018 21:23:45 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%B8%AD%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="配置日志输出到文件">配置日志输出到文件&lt;/h2>
&lt;pre tabindex="0">&lt;code># 输出到指定文件
logging.file=./logs/application.log

# 输出到指定目录下（会写入到 spring.log 中）
logging.path=./logs
&lt;/code>&lt;/pre>&lt;p>当同时存在 &lt;code>logging.path&lt;/code> 和 &lt;code>logging.file&lt;/code> 时 &lt;code>logging.path&lt;/code> 无效&lt;/p>
&lt;h2 id="日志中添加信息">日志中添加信息&lt;/h2>
&lt;p>向日志中添加自定义信息可以使用 &lt;code>MDC&lt;/code>类来实现&lt;/p>
&lt;ul>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>logging.pattern.level=user:%X{user} %5p
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>类：
&lt;ul>
&lt;li>&lt;code>org.apache.log4j.MDC&lt;/code>&lt;/li>
&lt;li>&lt;code>org.jboss.logging.MDC &lt;/code>&lt;/li>
&lt;li>&lt;code>org.slf4j.MDC&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>MDC.put(&amp;#34;user&amp;#34;, &amp;#34;Hello&amp;#34;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>输出结果&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>2018-01-18 23:55:10.836 user:Hello INFO 7011 --- [nio-8080-exec-1] cn.com.hellowood.log.LogController : log 2
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="logback-配置">logback 配置&lt;/h2>
&lt;h3 id="标签属性">标签属性&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>&amp;lt;configuration&amp;gt;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>scan&lt;/code>: 当属性设置为 &lt;code>true&lt;/code> 时， 配置文件如果发生变化会被重新加载，默认为&lt;code>true&lt;/code>&lt;/li>
&lt;li>&lt;code>scanPeriod&lt;/code>: 设置监测配置文件是否修改的时间间隔，默认单位是毫秒，默认时间间隔1分钟&lt;/li>
&lt;li>&lt;code>debug&lt;/code>：当属性设置为&lt;code>true&lt;/code>时，将打印&lt;code>logback&lt;/code>内部的日志信息，默认为 &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;root&amp;gt;&lt;/code>：用来指定最基础的日志输出级别&lt;/p>
&lt;ul>
&lt;li>&lt;code>level&lt;/code>：设置日志打印级别，大小写不敏感，可以是&lt;code>TRACE,DEBUG,INFO,ERROR,ALL,OFF&lt;/code>，默认&lt;code>DEBUG&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;root level=&amp;#34;debug&amp;#34;&amp;gt;
 &amp;lt;appender-ref ref=&amp;#34;console&amp;#34; /&amp;gt;
 &amp;lt;appender-ref ref=&amp;#34;file&amp;#34; /&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>&lt;code>&amp;lt;contextName&amp;gt;&lt;/code>：上下文名称，默认为&lt;code>default&lt;/code>，用于区分应用程序，一般改为项目名称，可以通过 &lt;code>%contextName&lt;/code> 添加到日志中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;property&amp;gt;&lt;/code>：用来定义变量值的标签&lt;/p>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>：变量的名称&lt;/li>
&lt;li>&lt;code>value&lt;/code>：变量的值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>定义的变量可以通过&lt;code>${}&lt;/code>使用&lt;/p></description></item><item><title>SpringBoot 使用 ElasticSearch</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-elasticsearch/</link><pubDate>Tue, 16 Jan 2018 00:45:05 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-elasticsearch/</guid><description>&lt;blockquote>
&lt;p>项目地址：&lt;a href="https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-ElasticSearch">https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-ElasticSearch&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a href="https://www.elastic.co/cn/products/elasticsearch">ElasticSearch&lt;/a> 是一个开源的分布式搜索引擎，用于存储数据&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用 SpringBoot 和 ElasticSearch 集成，实现最简单的增删改查功能&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-data-elasticsearch&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;net.java.dev.jna:jna&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不添加 &lt;code>'net.java.dev.jna:jna'&lt;/code> 依赖会提示 &lt;code>java.lang.ClassNotFoundException: com.sun.jna.Native&lt;/code> 错误&lt;/p>
&lt;h2 id="添加配置">添加配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.data.elasticsearch.repositories.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.data.elasticsearch.cluster-nodes=localhost:9300&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>spring.data.elasticsearch.cluster-nodes=localhost:9300&lt;/code> 只有当使用外部集群时配置，只使用本机时会提示错误&lt;/p>
&lt;h2 id="modal">Modal&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.modal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.annotation.Id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.elasticsearch.annotations.Document&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.io.Serializable&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Document&lt;/span>(&lt;span style="color:#c1abea">indexName&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;elasticsearch&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">type&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;product&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">Product&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">Serializable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">serialVersionUID&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">1435515995276255188L&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">price&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现-repository-接口">实现 Repository 接口&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.repository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.modal.Product&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.domain.Page&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.domain.Pageable&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.elasticsearch.repository.ElasticsearchRepository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.stereotype.Component&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.util.List&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> &lt;span style="color:#76a9f9">ProductRepository&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#c1abea">ElasticsearchRepository&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>, &lt;span style="color:#c1abea">Long&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findById&lt;/span>(&lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Page&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByName&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">Pageable&lt;/span> &lt;span style="color:#c1abea">pageable&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Page&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByNameLike&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">Pageable&lt;/span> &lt;span style="color:#c1abea">pageable&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Page&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByNameNot&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">Pageable&lt;/span> &lt;span style="color:#c1abea">pageable&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Page&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByPriceBetween&lt;/span>(&lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">priceFrom&lt;/span>, &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">priceTo&lt;/span>, &lt;span style="color:#c1abea">Pageable&lt;/span> &lt;span style="color:#c1abea">pageable&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>方法命名使用关键词来命名，用法和 JPA 类似&lt;/li>
&lt;/ul>
&lt;h2 id="添加逻辑">添加逻辑&lt;/h2>
&lt;ul>
&lt;li>ProductController.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.controller&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.modal.Product&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.service.ProductService&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.Logger&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.LoggerFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.beans.factory.annotation.Autowired&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.util.List&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RequestMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/product&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ProductController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Logger&lt;/span> &lt;span style="color:#c1abea">logger&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">LoggerFactory&lt;/span>.&lt;span style="color:#b3d23c">getLogger&lt;/span>(&lt;span style="color:#c1abea">getClass&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ProductService&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@PostMapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#00b1f7">save&lt;/span>(&lt;span style="color:#e5c07b">@RequestBody&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#c1abea">product&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">save&lt;/span>(&lt;span style="color:#c1abea">product&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/find/id&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findById&lt;/span>(&lt;span style="color:#e5c07b">@RequestParam&lt;/span> &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">findById&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/find/name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByName&lt;/span>(&lt;span style="color:#e5c07b">@RequestParam&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">findByName&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/find/name/like&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByNameLike&lt;/span>(&lt;span style="color:#e5c07b">@RequestParam&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">findByNameLike&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/find/name/notLike&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByNameNot&lt;/span>(&lt;span style="color:#e5c07b">@RequestParam&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">findByNameNot&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/find/price/between&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByPriceBetween&lt;/span>(&lt;span style="color:#e5c07b">@RequestParam&lt;/span> &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">priceFrom&lt;/span>, &lt;span style="color:#e5c07b">@RequestParam&lt;/span> &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">priceTo&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">findByPriceBetween&lt;/span>(&lt;span style="color:#c1abea">priceFrom&lt;/span>, &lt;span style="color:#c1abea">priceTo&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ProductServiceImpl.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.service.impl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.modal.Product&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.repository.ProductRepository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.elasticsearch.service.ProductService&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.Logger&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.LoggerFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.beans.factory.annotation.Autowired&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.domain.PageRequest&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.data.domain.Pageable&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.stereotype.Service&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.util.List&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ProductServiceImpl&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">ProductService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Logger&lt;/span> &lt;span style="color:#c1abea">logger&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">LoggerFactory&lt;/span>.&lt;span style="color:#b3d23c">getLogger&lt;/span>(&lt;span style="color:#c1abea">getClass&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageNum&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">pageSize&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Pageable&lt;/span> &lt;span style="color:#c1abea">pageable&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PageRequest&lt;/span>(&lt;span style="color:#c1abea">pageNum&lt;/span>, &lt;span style="color:#c1abea">pageSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ProductRepository&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#00b1f7">save&lt;/span>(&lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#c1abea">product&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>.&lt;span style="color:#b3d23c">save&lt;/span>(&lt;span style="color:#c1abea">product&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findById&lt;/span>(&lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>.&lt;span style="color:#b3d23c">findById&lt;/span>(&lt;span style="color:#c1abea">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByName&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>.&lt;span style="color:#b3d23c">findByName&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">pageable&lt;/span>).&lt;span style="color:#b3d23c">getContent&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByNameLike&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>.&lt;span style="color:#b3d23c">findByNameLike&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">pageable&lt;/span>).&lt;span style="color:#b3d23c">getContent&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByNameNot&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>.&lt;span style="color:#b3d23c">findByNameNot&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">pageable&lt;/span>).&lt;span style="color:#b3d23c">getContent&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">List&lt;/span>&lt;span style="color:#c7bf54">&amp;lt;&lt;/span>&lt;span style="color:#c1abea">Product&lt;/span>&lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#00b1f7">findByPriceBetween&lt;/span>(&lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">priceFrom&lt;/span>, &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">priceTo&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">productRepository&lt;/span>.&lt;span style="color:#b3d23c">findByPriceBetween&lt;/span>(&lt;span style="color:#c1abea">priceFrom&lt;/span>, &lt;span style="color:#c1abea">priceTo&lt;/span>, &lt;span style="color:#c1abea">pageable&lt;/span>).&lt;span style="color:#b3d23c">getContent&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="插入数据">插入数据&lt;/h2>
&lt;p>分别插入以下数据：&lt;/p></description></item><item><title>Swagger 常用注解说明</title><link>https://blog.hellowood.dev/posts/swagger-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</link><pubDate>Sun, 07 Jan 2018 23:34:23 +0800</pubDate><guid>https://blog.hellowood.dev/posts/swagger-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>注解&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>属性&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>值&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>备注&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>@Api&lt;/code>&lt;/td>
 &lt;td>value&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>可用在&lt;code>class&lt;/code>头上,&lt;code>class&lt;/code>描述&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>description&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>@Api(value = &amp;quot;xxx&amp;quot;, description = &amp;quot;xxx&amp;quot;)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>@ApiOperation&lt;/code>&lt;/td>
 &lt;td>value&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>可用在方法头上.参数的描述容器&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>notes&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>说明&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>httpMethod&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>请求方法&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>@ApiOperation(value = &amp;quot;xxx&amp;quot;, notes = &amp;quot;xxx&amp;quot;, method = &amp;quot;GET&amp;quot;)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>@ApiImplicitParams&lt;/code>&lt;/td>
 &lt;td>{}&lt;/td>
 &lt;td>&lt;code>@ApiImplicitParam&lt;/code>数组&lt;/td>
 &lt;td>可用在方法头上.参数的描述容器&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>@ApiImplicitParams({@ApiImplicitParam1,@ApiImplicitParam2,...})&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>@ApiImplicitParam&lt;/code>&lt;/td>
 &lt;td>name&lt;/td>
 &lt;td>字符串 与参数命名对应&lt;/td>
 &lt;td>可用在&lt;code>@ApiImplicitParams&lt;/code>里&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>value&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>参数中文描述&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>required&lt;/td>
 &lt;td>布尔值&lt;/td>
 &lt;td>true/false&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>dataType&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>参数类型&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>paramType&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>参数请求方式:query/path&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>query:对应&lt;code>@RequestParam&lt;/code>传递&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>path: 对应&lt;code>@PathVariable&lt;/code>{}path传递&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>dataType&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>参数类型&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>dataTypeClass&lt;/td>
 &lt;td>类&lt;/td>
 &lt;td>参数对应的类&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>defaultValue&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>在api测试中默认值&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code> @ApiImplicitParam(name = &amp;quot;newProduct&amp;quot;, value = &amp;quot;商品信息对象&amp;quot;, required = true, dataType = &amp;quot;Product&amp;quot;, dataTypeClass = Product.class)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>@ApiResponses&lt;/code>&lt;/td>
 &lt;td>{}&lt;/td>
 &lt;td>&lt;code>@ApiResponse&lt;/code>数组&lt;/td>
 &lt;td>可用在方法头上.参数的描述容器&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>@ApiResponses({@ApiResponse1,@ApiResponse2,...})&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>@ApiResponse&lt;/code>&lt;/td>
 &lt;td>code&lt;/td>
 &lt;td>整形&lt;/td>
 &lt;td>可用在&lt;code>@ApiResponses&lt;/code>里&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>message&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>错误描述&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>response&lt;/td>
 &lt;td>类&lt;/td>
 &lt;td>返回结果对应的类&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>@ApiResponse(code = 200, message = &amp;quot;Successful&amp;quot;, response = CommonResponse.class)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>@ApiModelProperty&lt;/code>&lt;/td>
 &lt;td>name&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>实体类参数名称&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>value&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>实体类参数值&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>notes&lt;/td>
 &lt;td>字符串&lt;/td>
 &lt;td>说明&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>@ApiModelProperty(name = &amp;quot;name&amp;quot;, value = &amp;quot;name&amp;quot;, notes = &amp;quot;名称&amp;quot;)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>SpringBoot 集成 Swagger API 文档工具</title><link>https://blog.hellowood.dev/posts/springboot-%E9%9B%86%E6%88%90-swagger-api-%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 07 Jan 2018 23:28:45 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E9%9B%86%E6%88%90-swagger-api-%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/</guid><description>&lt;ul>
&lt;li>项目地址：&lt;a href="https://github.com/helloworlde/SpringBootCollection/blob/master/SpringBoot-Swagger">https://github.com/helloworlde/SpringBootCollection/blob/master/SpringBoot-Swagger&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://swagger.io/">Swaager&lt;/a> 是一个开源用于设计、撰写、测试 RESTful API 的工具&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.springfox:springfox-swagger2:2.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.springfox:springfox-swagger-ui:2.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-swagger">配置 Swagger&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.configuration&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.context.annotation.Bean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.context.annotation.Configuration&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.builders.ApiInfoBuilder&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.builders.PathSelectors&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.builders.RequestHandlerSelectors&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.service.ApiInfo&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.service.Contact&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.spi.DocumentationType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.spring.web.plugins.Docket&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">springfox.documentation.swagger2.annotations.EnableSwagger2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@EnableSwagger2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">Swagger2Configuration&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">Docket&lt;/span> &lt;span style="color:#00b1f7">createRestApi&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Docket&lt;/span>(&lt;span style="color:#c1abea">DocumentationType&lt;/span>.&lt;span style="color:#b3d23c">SWAGGER_2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">groupName&lt;/span>(&lt;span style="color:#98c379">&amp;#34;HelloWood&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">apiInfo&lt;/span>(&lt;span style="color:#c1abea">apiInfo&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">select&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 扫描的包所在位置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">apis&lt;/span>(&lt;span style="color:#c1abea">RequestHandlerSelectors&lt;/span>.&lt;span style="color:#b3d23c">basePackage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;cn.com.hellowood.swagger.controller&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 扫描的 URL 规则&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">paths&lt;/span>(&lt;span style="color:#c1abea">PathSelectors&lt;/span>.&lt;span style="color:#b3d23c">any&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">ApiInfo&lt;/span> &lt;span style="color:#00b1f7">apiInfo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 联系信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Contact&lt;/span> &lt;span style="color:#c1abea">contact&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">Contact&lt;/span>(&lt;span style="color:#98c379">&amp;#34;HelloWood&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;helloworlde.github.io&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;xxxx@outlook.com&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ApiInfoBuilder&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 大标题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">title&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Swagger Application&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">description&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Swagger Application Demo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 服务条款 URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">termsOfServiceUrl&lt;/span>(&lt;span style="color:#98c379">&amp;#34;helloworlde.github.io&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">contact&lt;/span>(&lt;span style="color:#c1abea">contact&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">version&lt;/span>(&lt;span style="color:#98c379">&amp;#34;0.0.1-SNAPSHOT&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#b3d23c">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="添加-model-描述">添加 Model 描述&lt;/h2>
&lt;ul>
&lt;li>Product.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.modal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">io.swagger.annotations.Api&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">io.swagger.annotations.ApiModelProperty&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">java.io.Serializable&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Api&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Product&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">description&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品类&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">Product&lt;/span> &lt;span style="color:#c678dd">implements&lt;/span> &lt;span style="color:#c1abea">Serializable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">serialVersionUID&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">1435515995276255188L&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiModelProperty&lt;/span>(&lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;主键&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiModelProperty&lt;/span>(&lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;名称&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiModelProperty&lt;/span>(&lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;价格&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">price&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>CommonResponse.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.common&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.utils.JSONUtil&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">io.swagger.annotations.ApiModelProperty&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">CommonResponse&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiModelProperty&lt;/span>(&lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;状态码&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">code&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiModelProperty&lt;/span>(&lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;返回消息&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiModelProperty&lt;/span>(&lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;返回的数据&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Object&lt;/span> &lt;span style="color:#c1abea">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="添加-api-接口及描述">添加 API 接口及描述&lt;/h2>
&lt;ul>
&lt;li>ProductController.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.controller&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.common.CommonResponse&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.common.ResponseUtil&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.modal.Product&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.service.ProductService&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.swagger.utils.ServiceException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">io.swagger.annotations.*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.beans.factory.annotation.Autowired&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.web.bind.annotation.*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 类描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@Api&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">tags&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> {&lt;span style="color:#98c379">&amp;#34;商品信息API&amp;#34;&lt;/span>}, &lt;span style="color:#c1abea">description&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品信息API接口&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">@RequestMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/product&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">ProductController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">ProductService&lt;/span> &lt;span style="color:#c1abea">productService&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiOperation&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;查询所有商品&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;查询所有的商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">httpMethod&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;GET&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponses&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponse&lt;/span>(&lt;span style="color:#c1abea">code&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">200&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;请求成功&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponse&lt;/span>(&lt;span style="color:#c1abea">code&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">400&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;请求参数错误&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponse&lt;/span>(&lt;span style="color:#c1abea">code&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">401&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;未授权的访问&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponse&lt;/span>(&lt;span style="color:#c1abea">code&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">403&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;拒绝访问&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponse&lt;/span>(&lt;span style="color:#c1abea">code&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">404&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;资源不存在&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiResponse&lt;/span>(&lt;span style="color:#c1abea">code&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">500&lt;/span>, &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;服务器内部错误&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span> &lt;span style="color:#00b1f7">getAllProduct&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">ResponseUtil&lt;/span>.&lt;span style="color:#b3d23c">generateResponse&lt;/span>(&lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">getAllProduct&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiOperation&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;通过 ID 查询商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;通过 ID 查询商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">httpMethod&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiImplicitParam&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34; Product ID&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">required&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>, &lt;span style="color:#c1abea">paramType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">dataType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Long&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@GetMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/{id}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span> &lt;span style="color:#00b1f7">getProduct&lt;/span>(&lt;span style="color:#e5c07b">@PathVariable&lt;/span>(&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>) &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">productId&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">ResponseUtil&lt;/span>.&lt;span style="color:#b3d23c">generateResponse&lt;/span>(&lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">select&lt;/span>(&lt;span style="color:#c1abea">productId&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiOperation&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;更新商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;通过 ID 更新商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">httpMethod&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;PUT&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiImplicitParams&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiImplicitParam&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品 ID&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">required&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>, &lt;span style="color:#c1abea">paramType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">dataType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Long&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiImplicitParam&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;newProduct&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品信息对象&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">required&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>, &lt;span style="color:#c1abea">dataType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Product&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">dataTypeClass&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@PutMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/{id}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span> &lt;span style="color:#00b1f7">updateProduct&lt;/span>(&lt;span style="color:#e5c07b">@PathVariable&lt;/span>(&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>) &lt;span style="color:#c1abea">Long&lt;/span> &lt;span style="color:#c1abea">productId&lt;/span>, &lt;span style="color:#e5c07b">@RequestBody&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#c1abea">newProduct&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">ResponseUtil&lt;/span>.&lt;span style="color:#b3d23c">generateResponse&lt;/span>(&lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">update&lt;/span>(&lt;span style="color:#c1abea">productId&lt;/span>, &lt;span style="color:#c1abea">newProduct&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiOperation&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;删除商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;通过 ID 删除商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">httpMethod&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;DELETE&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiImplicitParam&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品 ID&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">required&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>, &lt;span style="color:#c1abea">paramType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">dataType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Long&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@DeleteMapping&lt;/span>(&lt;span style="color:#98c379">&amp;#34;/{id}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span> &lt;span style="color:#00b1f7">deleteProduct&lt;/span>(&lt;span style="color:#e5c07b">@PathVariable&lt;/span>(&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>) &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">productId&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">ResponseUtil&lt;/span>.&lt;span style="color:#b3d23c">generateResponse&lt;/span>(&lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">delete&lt;/span>(&lt;span style="color:#c1abea">productId&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiOperation&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;更新商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">notes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;通过 ID 更新商品信息&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">httpMethod&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;POST&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">response&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ApiImplicitParam&lt;/span>(&lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;newProduct&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;商品信息对象&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">required&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>, &lt;span style="color:#c1abea">dataType&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Product&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">dataTypeClass&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@PostMapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">CommonResponse&lt;/span> &lt;span style="color:#00b1f7">addProduct&lt;/span>(&lt;span style="color:#e5c07b">@RequestBody&lt;/span> &lt;span style="color:#c1abea">Product&lt;/span> &lt;span style="color:#c1abea">newProduct&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">ResponseUtil&lt;/span>.&lt;span style="color:#b3d23c">generateResponse&lt;/span>(&lt;span style="color:#c1abea">productService&lt;/span>.&lt;span style="color:#b3d23c">add&lt;/span>(&lt;span style="color:#c1abea">newProduct&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="查看及测试-api">查看及测试 API&lt;/h2>
&lt;p>启动应用并访问&lt;a href="">http://localhost:8080/swagger-ui.html&lt;/a> 即可查看和测试相关 API&lt;/p></description></item><item><title>Spring Boot 使用 Flyway</title><link>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-flyway/</link><pubDate>Sun, 07 Jan 2018 23:20:53 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot-%E4%BD%BF%E7%94%A8-flyway/</guid><description>&lt;ul>
&lt;li>项目地址：&lt;a href="https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-Flyway">https://github.com/helloworlde/SpringBootCollection/tree/master/SpringBoot-Flyway&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://flywaydb.org">Flyway&lt;/a> 是一个数据库版本管理工具，用于管理数据库操作脚本&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.flywaydb:flyway-core&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;mysql:mysql-connector-java&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">//runtime(&amp;#39;com.h2database:h2&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>配置数据库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># H2 数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.url=jdbc:h2:mem:test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.username=root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.password=123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.driver-class-name=org.h2.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># MySQL 数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.driver-class-name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">com.mysql.jdbc.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.url&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">jdbc:mysql://localhost:3306/product?useSSL=false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">123456&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用 &lt;code>V_VARSION__DESCRIPTION.sql&lt;/code> 方式命名脚本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span> &lt;span style="color:#c678dd">PRIMARY&lt;/span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#ef8383">VARCHAR&lt;/span>(&lt;span style="color:#d19a66">50&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">price&lt;/span> &lt;span style="color:#c1abea">DOUBLE&lt;/span> &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 SQL 脚本放在 &lt;code>resources/db/migration&lt;/code> 目录下&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>此时启动应用，Flyway 将会自动执行脚本进行数据库操作&lt;/p>
&lt;ul>
&lt;li>第一次启动时将会看到如下日志&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>2018-01-07 21:00:14.932 INFO 5041 --- [ main] o.f.core.internal.util.VersionPrinter : Flyway 3.2.1 by Boxfuse
2018-01-07 21:00:17.015 INFO 5041 --- [ main] o.f.c.i.dbsupport.DbSupportFactory : Database: jdbc:mysql://localhost:3306/product?useSSL=false (MySQL 5.7)
2018-01-07 21:00:17.253 INFO 5041 --- [ main] o.f.core.internal.command.DbValidate : Validated 1 migration (execution time 00:00.133s)
2018-01-07 21:00:17.750 INFO 5041 --- [ main] o.f.c.i.metadatatable.MetaDataTableImpl : Creating Metadata table: `product`.`schema_version`
2018-01-07 21:00:18.437 INFO 5041 --- [ main] o.f.core.internal.command.DbMigrate : Current version of schema `product`: &amp;lt;&amp;lt; Empty Schema &amp;gt;&amp;gt;
2018-01-07 21:00:18.437 INFO 5041 --- [ main] o.f.core.internal.command.DbMigrate : Migrating schema `product` to version 1.0 - 0001 CREATE PRODUCT
2018-01-07 21:00:19.284 INFO 5041 --- [ main] o.f.core.internal.command.DbMigrate : Successfully applied 1 migration to schema `product` (execution time 00:01.592s).
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>再次启动将会看到 Flyway 校验版本&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>2018-01-07 21:02:09.195 INFO 5061 --- [ main] o.f.core.internal.util.VersionPrinter : Flyway 3.2.1 by Boxfuse
2018-01-07 21:02:11.327 INFO 5061 --- [ main] o.f.c.i.dbsupport.DbSupportFactory : Database: jdbc:mysql://localhost:3306/product?useSSL=false (MySQL 5.7)
2018-01-07 21:02:11.618 INFO 5061 --- [ main] o.f.core.internal.command.DbValidate : Validated 1 migration (execution time 00:00.202s)
2018-01-07 21:02:12.386 INFO 5061 --- [ main] o.f.core.internal.command.DbMigrate : Current version of schema `product`: 1.0
2018-01-07 21:02:12.447 INFO 5061 --- [ main] o.f.core.internal.command.DbMigrate : Schema `product` is up to date. No migration necessary.
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>如果不想 Flyway 执行，可以配置不启用 Flyway&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">flyway.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="注意">注意&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>如果按照 Flyway &lt;a href="https://flywaydb.org/documentation/plugins/springboot">官方文档&lt;/a> 的指导，仅配置 Flyway，应用启动时并不会执行 Flyway 的任何操作，这是因为 &lt;a href="https://docs.spring.io/spring-boot/docs/1.4.x/api/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.html">&lt;code>FlywayAutoConfiguration&lt;/code>&lt;/a> 类在启动时要求有 DataSource 的实例，如果没有配置，就不会执行 Flyway，所以在依赖里添加了 MyBatis(或 JPA) ，使用 MyBatis(或 JPA) 时会自动注入数据源，因此才会执行 Flyway，具体可以参考&lt;a href="https://github.com/spring-projects/spring-boot/issues/8649">https://github.com/spring-projects/spring-boot/issues/8649&lt;/a> 和 &lt;a href="https://stackoverflow.com/questions/43496506/how-to-debug-when-flyway-doesnt-work-on-spring-boot">https://stackoverflow.com/questions/43496506/how-to-debug-when-flyway-doesnt-work-on-spring-boot&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>如果是多个数据源，则需要在 Flyway 进行操作的数据源 Bean 上添加 &lt;code>@FlywayDataSource&lt;/code>注解或者在 &lt;code>application.properties&lt;/code> 里添加 &lt;code>spring.flyway.[url,user,password]&lt;/code>进行配置&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Rocket MQ 相关知识</title><link>https://blog.hellowood.dev/posts/rocket-mq-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 2018 12:54:02 +0800</pubDate><guid>https://blog.hellowood.dev/posts/rocket-mq-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid><description>&lt;p>@(消息队列)[RocketMQ, 消息]&lt;/p>
&lt;blockquote>
&lt;p>Rocket MQ消息队列（Message Queue，简称 MQ）是阿里巴巴集团中间件技术部自主研发的专业消息中间件。产品基于高可用分布式集群技术，提供消息发布订阅、消息轨迹查询、定时（延时）消息、资源统计、监控报警等一系列消息云服务，是企业级互联网架构的核心产品。&lt;/p>
&lt;/blockquote>
&lt;h2 id="rocket-mq相关名词">Rocket MQ相关名词&lt;/h2>
&lt;ul>
&lt;li>Producer 消息生产者，负责生产消息&lt;/li>
&lt;li>Consumer 消息消费者，负责消费消息&lt;/li>
&lt;li>NameServer 无状态节点，用来保存活跃的broker列表和topic列表&lt;/li>
&lt;li>Broker 消息中转角色，负责存储消息，转发消息&lt;/li>
&lt;li>Topic 消息的逻辑管理单位&lt;/li>
&lt;li>Message 消息
&lt;ul>
&lt;li>body 消息体，用于携带消息具体内容&lt;/li>
&lt;li>key 消息的key，用于区别不同的消息&lt;/li>
&lt;li>tags 消息的Tag，用于不同的订阅者过滤消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="消息发送方式">消息发送方式&lt;/h2>
&lt;ul>
&lt;li>同步方式
&lt;blockquote>
&lt;p>发送消息，接收到结果之后再发送下一条消息，速度最慢，耗时最长&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>异步方式
&lt;blockquote>
&lt;p>发送消息，不论是否收到结果，直接发送下一条消息，发送速度介于同步和单向方式之间&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>单向方式
&lt;blockquote>
&lt;p>发送消息，直接发送消息，不返回发送结果，发送速度最快&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="消息类型">消息类型&lt;/h2>
&lt;ul>
&lt;li>定时消息
&lt;blockquote>
&lt;p>在指定的发送时间发送消息&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>延时消息
&lt;blockquote>
&lt;p>从当前时间开始，经过延时时间后再发送消息&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>顺序消息
&lt;blockquote>
&lt;p>立即发送消息&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>事务消息
&lt;blockquote>
&lt;p>MQ 提供类似 X/Open XA 的分布事务功能，通过 MQ 事务消息能达到分布式事务的最终一致&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h1 id="实例代码">实例代码&lt;/h1>
&lt;h2 id="producer">Producer&lt;/h2>
&lt;pre tabindex="0">&lt;code>public class ProducerDelayTest {
 public static void main(String[] args) {
 Properties properties = new Properties();
 //您在 MQ 控制台创建的Producer ID
 properties.put(PropertyKeyConst.ProducerId, &amp;#34;XXX&amp;#34;);
 // 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.AccessKey, &amp;#34;XXX&amp;#34;);
 // 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.SecretKey, &amp;#34;XXX&amp;#34;);
 // 设置 TCP 接入域名（此处以公共云生产环境为例）
 properties.put(PropertyKeyConst.ONSAddr,
 &amp;#34;http://onsaddr-internal.aliyun.com:8080/rocketmq/nsaddr4client-internal&amp;#34;);
 Producer producer = ONSFactory.createProducer(properties);
 // 在发送消息前，必须调用start方法来启动Producer，只需调用一次即可。
 producer.start();

 /**
 * 消息类型代码，参考下面消息类型代码
 */
 /**
 * 消息发送方式代码，参考下面发送方式代码
 */
 System.out.println(&amp;#34;Message Id:&amp;#34; + sendResult.getMessageId());
 // 在应用退出前，销毁 Producer 对象
 // 注意：如果不销毁也没有问题，如果发送消息较多不应该销毁
 producer.shutdown();
 }
}
&lt;/code>&lt;/pre>&lt;h3 id="消息类型代码">消息类型代码&lt;/h3>
&lt;ul>
&lt;li>定时消息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Message msg = new Message();
 msg.setTag(&amp;#34;TAG&amp;#34;);
 msg.setKey(&amp;#34;KEY&amp;#34;);
 msg.setTopic(&amp;#34;TOPIC&amp;#34;);
 msg.setBody(&amp;#34;BODY&amp;#34;.getBytes());
 long timeStamp =new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;).parse(&amp;#34;2017-09-03 16:21:00&amp;#34;).getTime();
 msg.setStartDeliverTime(timeStamp);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>延时消息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Message msg = new Message();
 msg.setTag(&amp;#34;TAG&amp;#34;);
 msg.setKey(&amp;#34;KEY&amp;#34;);
 msg.setTopic(&amp;#34;TOPIC&amp;#34;);
 msg.setBody(&amp;#34;BODY&amp;#34;.getBytes());
 long delayTime = 3000;//30秒后再发送
 msg.setStartDeliverTime(System.currentTimes() + delayTime);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>顺序消息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Message msg = new Message();
 msg.setTag(&amp;#34;TAG&amp;#34;);
 msg.setKey(&amp;#34;KEY&amp;#34;);
 msg.setTopic(&amp;#34;TOPIC&amp;#34;.getBytes());
 msg.setBody(&amp;#34;BODY&amp;#34;);
&lt;/code>&lt;/pre>&lt;h3 id="消息发送方式代码">消息发送方式代码&lt;/h3>
&lt;ul>
&lt;li>同步方式发送&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> SendResult sendResult = producer.send(msg);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>异步方式发送&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> producer.sendAsync(message, new SendCallback() {
 @Override
 public void onSuccess(final SendResult sendResult) {
 logger.info(&amp;#34;MQ send ASYNCHRONOUS message successed，response is &amp;#34; + JSON.toJSONString(sendResult));
 }

 @Override
 public void onException(OnExceptionContext onExceptionContext) {
 logger.info(&amp;#34;MQ send ASYNCHRONOUS message failed, error is &amp;#34; + onExceptionContext.getException().getMessage());
 }
 });
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>单向方式发送&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> producer.sendOneway(message);
&lt;/code>&lt;/pre>&lt;h2 id="consumer">Consumer&lt;/h2>
&lt;pre tabindex="0">&lt;code>public class ConsumerTest {
 public static void main(String[] args) {
 Properties properties = new Properties();
 // 您在控制台创建的 Consumer ID
 properties.put(PropertyKeyConst.ConsumerId, &amp;#34;XXX&amp;#34;);
 // AccessKey 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.AccessKey, &amp;#34;XXX&amp;#34;);
 // SecretKey 阿里云身份验证，在阿里云服务器管理控制台创建
 properties.put(PropertyKeyConst.SecretKey, &amp;#34;XXX&amp;#34;);
 // 设置 TCP 接入域名（此处以公共云生产环境为例）
 properties.put(PropertyKeyConst.ONSAddr,
 &amp;#34;http://onsaddr-internal.aliyun.com:8080/rocketmq/nsaddr4client-internal&amp;#34;);
 // 集群订阅方式 (默认)
 // properties.put(PropertyKeyConst.MessageModel, PropertyValueConst.CLUSTERING);
 // 广播订阅方式
 // properties.put(PropertyKeyConst.MessageModel, PropertyValueConst.BROADCASTING);
 Consumer consumer = ONSFactory.createConsumer(properties);
 consumer.subscribe(&amp;#34;TopicTestMQ&amp;#34;, &amp;#34;TagA||TagB&amp;#34;, new MessageListener() { //订阅多个Tag
 public Action consume(Message message, ConsumeContext context) {
 System.out.println(&amp;#34;Receive: &amp;#34; + message);
 return Action.CommitMessage;
 }
 });
 //订阅另外一个Topic
 consumer.subscribe(&amp;#34;TopicTestMQ-Other&amp;#34;, &amp;#34;*&amp;#34;, new MessageListener() { //订阅全部Tag
 public Action consume(Message message, ConsumeContext context) {
 System.out.println(&amp;#34;Receive: &amp;#34; + message);
 return Action.CommitMessage;
 }
 });
 consumer.start();
 System.out.println(&amp;#34;Consumer Started&amp;#34;);
 }
}
&lt;/code>&lt;/pre></description></item><item><title>Rocket MQ 发送消息</title><link>https://blog.hellowood.dev/posts/rocket-mq-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</link><pubDate>Mon, 01 Jan 2018 12:52:39 +0800</pubDate><guid>https://blog.hellowood.dev/posts/rocket-mq-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</guid><description>&lt;h2 id="rocket-mq-发送消息">Rocket MQ 发送消息&lt;/h2>
&lt;p>@(消息队列)[RocketMQ, 消息]&lt;/p>
&lt;blockquote>
&lt;p>使用阿里巴巴的Rocket MQ发送消息的SpringBoo项目&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>使用之前请现在&lt;a href="https://ons.console.aliyun.com/?spm=5176.2020520001.1002.d10ons.61d991b3GbNJPR#/home/topic">阿里云&lt;/a>申请消息队列并创建消息TOPIC、Producer和Consumer&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;ul>
&lt;li>下载： &lt;code>https://github.com/helloworlde/SpringBoot-RocketMQ.git&lt;/code>&lt;/li>
&lt;li>修改配置文件：修改&lt;code>application.properties&lt;/code> ，填入相应的信息&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.rocketmq.ONSAddresses=消息队列地址
spring.rocketmq.accessKey=AccessKey
spring.rocketmq.secretKey=SercetKey
spring.rocketmq.topic=TOPIC
spring.rocketmq.producerId生产者
spring.rocketmq.consumerId=订阅者
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>编译：&lt;code>gradle build&lt;/code>&lt;/li>
&lt;li>启动：&lt;code>gradle bootrun&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="api">API&lt;/h2>
&lt;p>&lt;strong>请求URL：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>http://localhost:8080/sendMessage&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>请求方式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>POST &lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>参数：&lt;/strong>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">参数名&lt;/th>
 &lt;th style="text-align: left">必选&lt;/th>
 &lt;th style="text-align: left">类型&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">body&lt;/td>
 &lt;td style="text-align: left">是&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td>消息所携带的数据，可以是对象的JSON串&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">key&lt;/td>
 &lt;td style="text-align: left">是&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td>32位key&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">tags&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td>Message Tag，用于过滤订阅者过滤消息&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">method&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td>消息发送方式，共有三种：同步发送：&lt;code>SYNCHRONOUS&lt;/code>，异步发送：&lt;code>ASYNCHRONOUS&lt;/code>, 单向发送：&lt;code>ONE_WAY&lt;/code> ,默认使用同步发送方式发送消息&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">type&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td>消息类型，共有三种：顺序消息：&lt;code>ORDER&lt;/code>，延时消息：&lt;code>DELAY&lt;/code>，定时消息：&lt;code>TIMING&lt;/code>，默认发送顺序消息&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">delayTime&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">long&lt;/td>
 &lt;td>消息发送延时时间，单位是毫秒&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">startDeliveryTime&lt;/td>
 &lt;td style="text-align: left">否&lt;/td>
 &lt;td style="text-align: left">String&lt;/td>
 &lt;td>定时消息发送时间，必须是&lt;code>yyyy-MM-dd HH:mm:ss&lt;/code>格式&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>顺序消息 Body&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;body&amp;#34;:&amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;MQ\&amp;#34;,\&amp;#34;type\&amp;#34;:\&amp;#34;Rocket\&amp;#34;}&amp;#34;,
 &amp;#34;delayTime&amp;#34;:30000,
 &amp;#34;key&amp;#34;:&amp;#34;key&amp;#34;,
 &amp;#34;method&amp;#34;:&amp;#34;SYNCHRONOUS&amp;#34;,
 &amp;#34;tags&amp;#34;:&amp;#34;TAG1,TAG2&amp;#34;,
 &amp;#34;topic&amp;#34;:&amp;#34;TOPIC&amp;#34;,
 &amp;#34;type&amp;#34;:&amp;#34;ORDER&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>延时消息 Body&lt;/strong>&lt;/p></description></item><item><title>Windows Server搭建Shadowsocks服务器</title><link>https://blog.hellowood.dev/posts/windows-server%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 12:18:00 +0800</pubDate><guid>https://blog.hellowood.dev/posts/windows-server%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>在Windows Server 下搭建Shadowsocks，使用最简单的方式搭建&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-下载shadowsocks程序">1. 下载Shadowsocks程序&lt;/h2>
&lt;p>下载并解压Shadowsocks文件&lt;a href="https://github.com/shadowsocks/libQtShadowsocks/releases">https://github.com/shadowsocks/libQtShadowsocks/releases&lt;/a>&lt;/p>
&lt;h2 id="2-添加configjson配置文件">2. 添加config.json配置文件&lt;/h2>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;server&amp;#34;:&amp;#34;localhost&amp;#34;, //配置服务端地址，不需要修改
 &amp;#34;server_port&amp;#34;:623, //服务端端口，可以根据需要修改，建议改成大点的不会被占用的端口
 &amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;, //本地地址，不需要修改
 &amp;#34;local_port&amp;#34;:1080, //本地端口，可以根据需要修改
 &amp;#34;password&amp;#34;:&amp;#34;Orange&amp;#34;, //密码
 &amp;#34;timeout&amp;#34;:600, //连接超时时间
 &amp;#34;method&amp;#34;:&amp;#34;rc4-md5&amp;#34;, //加密方式
 &amp;#34;http_proxy&amp;#34;: false, //代理
 &amp;#34;auth&amp;#34;: false //需要验证
}
&lt;/code>&lt;/pre>&lt;h2 id="3-运行shadowsocks-libqssexe启动服务">3. 运行shadowsocks-libqss.exe启动服务&lt;/h2>
&lt;p>有两种方式启动服务：&lt;/p>
&lt;ul>
&lt;li>在命令行中运行以下命令&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>shadowsocks-libqss.exe -c config.json -S
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>将命令写在.bat文件中，运行.bat文件启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> @echo off
 shadowsocks-libqss.exe -c config.json -S
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>配置完成，在客户端配置后就可以使用了&lt;/p>
&lt;/blockquote>
&lt;p>下载配置文件&lt;/p>
&lt;ul>
&lt;li>参考链接：
&lt;ul>
&lt;li>Shadowsocks服务端：&lt;a href="https://github.com/shadowsocks/libQtShadowsocks/releases">https://github.com/shadowsocks/libQtShadowsocks/releases&lt;/a>&lt;/li>
&lt;li>Shadowsocks客户端：&lt;a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Spring Boot Admin 管理应用-客户端注册</title><link>https://blog.hellowood.dev/posts/spring-boot-admin-%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8C/</link><pubDate>Mon, 01 Jan 2018 12:15:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-admin-%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8C/</guid><description>&lt;blockquote>
&lt;p>客户端注册可以通过直接注册到管理应用和通过注册中心注册两种方式&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="直接注册到管理应用">直接注册到管理应用&lt;/h2>
&lt;blockquote>
&lt;p>直接注册到管理应用只需要一个Server和一个Client就可以，Client配置admin Server地址就可以实现管理&lt;/p>
&lt;/blockquote>
&lt;h4 id="配置管理应用server">配置管理应用Server&lt;/h4>
&lt;h4 id="修改客户端应用">修改客户端应用&lt;/h4>
&lt;ol>
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;de.codecentric:spring-boot-admin-starter-client:1.5.4&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>修改配置文件(application.properties)，指明Server地址&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> spring.boot.admin.url=http://localhost:8080
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="通过注册中心注册">通过注册中心注册&lt;/h2>
&lt;blockquote>
&lt;p>通过注册中心注册可以用于大量应用的管理，通过一个注册中心来管理注册，客户端和管理应用通过注册中心实现管理&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用Spring Cloud Eureka作为注册中心，需要一个Eureka服务应用，一个Admin Server应用和一个被管理的客户端应用&lt;/p>
&lt;/blockquote>
&lt;h4 id="配置eureka">配置Eureka&lt;/h4>
&lt;h4 id="配置admin-server">配置Admin Server&lt;/h4>
&lt;h4 id="配置client">配置Client&lt;/h4>
&lt;ol>
&lt;li>添加依赖（build.gradle）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.cloud:spring-cloud-starter-eureka:1.3.4.RELEASE&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.jolokia:jolokia-core:1.3.7&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>添加启动配置项（bootstrap.properties）&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>info.version=1.0.0
spring.application.name=APPLICATION_NAME
# Eureka应用的URL
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>修改应用启动文件（Application.java）&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>@SpringBootApplication
@EnableEurekaClient //添加注册，向Eureka注册该应用
public class Application {
 public static void main(String[] args) {
 SpringApplication.run(Application.class, args);
 }
}
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu安装配置 Jenkins</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-jenkins/</link><pubDate>Mon, 01 Jan 2018 12:12:32 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-jenkins/</guid><description>&lt;blockquote>
&lt;p>在 Ubuntu 下 Jenkins 服务&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-安装">1. 安装&lt;/h2>
&lt;ul>
&lt;li>安装前确认JDK环境配置是正确的&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c &amp;#39;echo deb http://pkg.jenkins.io/debian-stable binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&amp;#39;

sudo apt-get update
sudo apt-get install jenkins
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>等待安装完成，如果默认的8080端口没有被占用，则会自动启动 Jenkins 服务， 如果有其他程序占用了 8080 端口，则 Jenkins 会启动失败
##2. 更改 Jenkins 端口
需要更改两个文件&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>修改&lt;code>/etc/default/jenkins&lt;/code>文件，将 &lt;code>HTTP_PORT=8080&lt;/code>更改为你需要的端口&lt;/li>
&lt;li>修改&lt;code>/etc/init.d/jenkins&lt;/code>文件，将&lt;code>do_start&lt;/code>函数的&lt;code>check_tcp_port&lt;/code>命令改为需要的端口&lt;/li>
&lt;/ul>
&lt;p>##3. 启动 Jenkins 服务&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo /etc/init.d/jenkins start
&lt;/code>&lt;/pre>&lt;p>##4. 访问并配置&lt;/p>
&lt;blockquote>
&lt;p>访问 Jenkins 的地址，会要求填写 Jenkins 的密码，该密码可以在&lt;code>/var/log/jenkins/jenkins.log&lt;/code>中找到&lt;/p>
&lt;/blockquote></description></item><item><title>Ubuntu安装JDK</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85jdk/</link><pubDate>Mon, 01 Jan 2018 12:11:39 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85jdk/</guid><description>&lt;hr>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>1 创建文件夹&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir java
&lt;/code>&lt;/pre>&lt;p>2 下载JDK&lt;/p>
&lt;blockquote>
&lt;p>JDK 下载地址&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>wget --no-check-certificate --no-cookies --header &amp;#34;Cookie: oraclelicense=accept-securebackup-cookie&amp;#34; http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz
&lt;/code>&lt;/pre>&lt;p>3 解压&lt;/p>
&lt;pre tabindex="0">&lt;code> tar -zxvf jdk-8u144-linux-x64.tar.gz
&lt;/code>&lt;/pre>&lt;p>4 配置环境变量&lt;/p>
&lt;ul>
&lt;li>编辑配置文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo vim ~/.bash_profile
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>输入以下内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>export JAVA_HOME=/home/ubuntu/java/jdk1.8.0_144
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>使配置生效&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>source ~/.bash_profile
&lt;/code>&lt;/pre>&lt;p>5 检查是否配置正确&lt;/p>
&lt;pre tabindex="0">&lt;code>java -version
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>出现以下内容：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
ubuntu@local:~/java/jdk1.8.0_144$
&lt;/code>&lt;/pre>&lt;p>6 查看JDK的路径&lt;/p>
&lt;pre tabindex="0">&lt;code>whereis java
which java （java执行路径）
echo $JAVA_HOME
echo $PATH
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu安装 Nginx</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-nginx/</link><pubDate>Mon, 01 Jan 2018 12:10:38 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-nginx/</guid><description>&lt;blockquote>
&lt;p>在 Ubuntu 上安装 Nginx&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>安装&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo apt-get install nginx
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>目录结构
&lt;ul>
&lt;li>所有文件都在 &lt;code>/etc/nginx/&lt;/code>目录下&lt;/li>
&lt;li>程序文件在&lt;code>/user/local/nginx/sbin/&lt;/code>目录下&lt;/li>
&lt;li>日志在&lt;code>/var/log/nginx/&lt;/code>目录下&lt;/li>
&lt;li>启动脚本为&lt;code>/etc/init.d/nginx&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;pre tabindex="0">&lt;code> sudo /etc/init.d/nginx start
&lt;/code>&lt;/pre>&lt;hr>
&lt;h1 id="nginx-源代码安装">Nginx 源代码安装&lt;/h1>
&lt;h2 id="安装-1">安装&lt;/h2>
&lt;ul>
&lt;li>下载&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> cd /usr/local
 //下载源码
 wget http://nginx.org/download/nginx-1.2.8.tar.gz

 // 解压
 tar -zxcf nginx-1.2.8.tar.gz
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>安装依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo apt-get install libpcre3
 sudo apt-get install libpcre3-dev
 sudo apt-get install zlib1g-dev
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>编译安装&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> cd nginx-1.2.8
 // 检查环境
 ./configure

 // 编译
 make

 // 安装
 make install
&lt;/code>&lt;/pre>&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>默认启动&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> cd /usr/local/nginx

 // 启动
 sbin/nginx
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置快捷启动方式&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> // 创建启动脚本
 sudo vi /etc/init.d/nginx

 // 增加执行权限
 sudo chmod a+x /etc/init.d/nginx

 // 启动
 sudo /etc/init.d/nginx start
 // 停止
 sudo /etc/init.d/nginx stop
 // 重启
 sudo /etc/init.d/nginx restart
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu安装 Redis -编译方式安装</title><link>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-redis-%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 2018 12:09:09 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E5%AE%89%E8%A3%85-redis-%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85/</guid><description>&lt;blockquote>
&lt;p>使用 &lt;code>sudo apt install redis-server&lt;/code>安装的 Redis 并不是最新的，通过在官网下载来安装最新的 Redis&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-创建文件夹">1 创建文件夹&lt;/h2>
&lt;pre tabindex="0">&lt;code>mkdir redis
&lt;/code>&lt;/pre>&lt;h2 id="2-下载-redis">2 下载 Redis&lt;/h2>
&lt;pre tabindex="0">&lt;code>wget http://download.redis.io/releases/redis-4.0.1.tar.gz
&lt;/code>&lt;/pre>&lt;h2 id="3-解压">3 解压&lt;/h2>
&lt;pre tabindex="0">&lt;code> tar -xzvf redis-4.0.1.tar.gz
&lt;/code>&lt;/pre>&lt;h2 id="4-编译安装">4 编译安装&lt;/h2>
&lt;pre tabindex="0">&lt;code>cd redis-4.0.1
make
make test
sudo make install
&lt;/code>&lt;/pre>&lt;h2 id="5-配置">5 配置&lt;/h2>
&lt;ul>
&lt;li>设置登录密码&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># 取消注释requirepass
requirepass your_password
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>取消登录IP限制&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># 注释bind
# bind 127.0.0.1
&lt;/code>&lt;/pre>&lt;h2 id="6-启动">6 启动&lt;/h2>
&lt;pre tabindex="0">&lt;code>redis-server ./redis-4.0.1/redis.conf
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu搭建Redis服务器</title><link>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAredis%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 12:08:07 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAredis%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>在Ubuntu中搭建Redis服务器&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>###1 安装&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install redis-server
&lt;/code>&lt;/pre>&lt;p>###2 启动&lt;/p>
&lt;pre tabindex="0">&lt;code>redis-server
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>5617:C 18 Sep 12:57:10.437 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
5617:M 18 Sep 12:57:10.437 * Increased maximum number of open files to 10032 (it was originally set to 1024).
 _._
 _.-``__ &amp;#39;&amp;#39;-._
 _.-`` `. `_. &amp;#39;&amp;#39;-._ Redis 3.0.6 (00000000/0) 64 bit
 .-`` .-```. ```\/ _.,_ &amp;#39;&amp;#39;-._
 ( &amp;#39; , .-` | `, ) Running in standalone mode
 |`-._`-...-` __...-.``-._|&amp;#39;` _.-&amp;#39;| Port: 6379
 | `-._ `._ / _.-&amp;#39; | PID: 5617
 `-._ `-._ `-./ _.-&amp;#39; _.-&amp;#39;
 |`-._`-._ `-.__.-&amp;#39; _.-&amp;#39;_.-&amp;#39;|
 | `-._`-._ _.-&amp;#39;_.-&amp;#39; | http://redis.io
 `-._ `-._`-.__.-&amp;#39;_.-&amp;#39; _.-&amp;#39;
 |`-._`-._ `-.__.-&amp;#39; _.-&amp;#39;_.-&amp;#39;|
 | `-._`-._ _.-&amp;#39;_.-&amp;#39; |
 `-._ `-._`-.__.-&amp;#39;_.-&amp;#39; _.-&amp;#39;
 `-._ `-.__.-&amp;#39; _.-&amp;#39;
 `-._ _.-&amp;#39;
 `-.__.-&amp;#39;

5617:M 18 Sep 12:57:10.438 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
5617:M 18 Sep 12:57:10.438 # Server started, Redis version 3.0.6
5617:M 18 Sep 12:57:10.438 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &amp;#39;vm.overcommit_memory = 1&amp;#39; to /etc/sysctl.conf and then reboot or run the command &amp;#39;sysctl vm.overcommit_memory=1&amp;#39; for this to take effect.
5617:M 18 Sep 12:57:10.438 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &amp;#39;echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled&amp;#39; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
5617:M 18 Sep 12:57:10.438 * DB loaded from disk: 0.000 seconds
5617:M 18 Sep 12:57:10.438 * The server is now ready to accept connections on port 6379
&lt;/code>&lt;/pre>&lt;p>###3 启动客户端&lt;/p></description></item><item><title>Redis基础知识-数据类型</title><link>https://blog.hellowood.dev/posts/redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 2018 12:07:03 +0800</pubDate><guid>https://blog.hellowood.dev/posts/redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>&lt;blockquote>
&lt;p>Redis支持5种数据类型：字符串（string），哈希（hash），列表（list），集合（set），有序集合（sorted set）&lt;/p>
&lt;/blockquote>
&lt;h2 id="字符串string">字符串（string）&lt;/h2>
&lt;blockquote>
&lt;p>string 是 Redis最基本的类型，一个key对应一个value，string可以包含任何数据，比如jpg图片或者序列化的对象，string是Redis最基本的类型，一个键最大能存储512MB&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>保存：SET key value
读取：get key
&lt;/code>&lt;/pre>&lt;h2 id="哈希hash">哈希（Hash）&lt;/h2>
&lt;blockquote>
&lt;p>Hash 是一个键名对集合，Hash是一个string类型的field和value的映射表，Hash特备适合存储对象&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>保存：hmset key value1 value2 value3
读取：hgetall key
&lt;/code>&lt;/pre>&lt;h2 id="列表list">列表（List）&lt;/h2>
&lt;blockquote>
&lt;p>列表是简单的字符串列表，按照插入顺序排序，可以将元素添加到头部（左边）或尾部（右边）&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>保存：
 lpush key value1 value2
 lpush key value3
读取：lrange key 0 10
&lt;/code>&lt;/pre>&lt;h2 id="集合set">集合（Set）&lt;/h2>
&lt;blockquote>
&lt;p>Redis 的set是string类型的无序集合，集合是通过哈希表实现，添加、删除、查找的复杂度都是O(1)&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>保存：
 sadd key value1
 sadd key value2
 sadd key value3
读取：smembers key
&lt;/code>&lt;/pre>&lt;h2 id="有序集合sort-set">有序集合（Sort Set）&lt;/h2>
&lt;blockquote>
&lt;p>Redis ZSet和set一样也是string类型元素的集合，且不允许重复的成员，不同的是每个元素都会关联一个double类型的分数，Redis通过这个分数来为集合中的成员进行从小到大的排序，zset的成员是唯一的，但分数（score）可以重复&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-:" data-lang=":">保存：
 zadd key score1 value1
 zadd key score2 value2
 zadd key score3 value3
读取：zrangebyscore key 0 10
&lt;/code>&lt;/pre></description></item><item><title>AngularJS配置Router(路由)提示Controller NaNunction/undefined错误</title><link>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AErouter-%E8%B7%AF%E7%94%B1-%E6%8F%90%E7%A4%BAcontroller-nanunction-undefined%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 01 Jan 2018 12:05:17 +0800</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AErouter-%E8%B7%AF%E7%94%B1-%E6%8F%90%E7%A4%BAcontroller-nanunction-undefined%E9%94%99%E8%AF%AF/</guid><description>&lt;blockquote>
&lt;p>在配置Angular 路由的时候，和以往一样使用如下配置：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>router.js&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>var adminApp = angular.module(&amp;#39;adminApp&amp;#39;, [&amp;#39;oc.lazyLoad&amp;#39;, &amp;#39;ui.router&amp;#39;]);
angular.element(document).ready(function () {
 angular.bootstrap(document, [&amp;#39;adminApp&amp;#39;]);
});

adminApp.run(function ($rootScope, $state, $stateParams) {
 $rootScope.$state = $state;
 $rootScope.$stateParams = $stateParams;
});
adminApp.config(function ($stateProvider, $urlRouterProvider) {
 $urlRouterProvider.when(&amp;#34;&amp;#34;, &amp;#34;dashboard/accountManagement&amp;#34;);
 $urlRouterProvider.otherwise(&amp;#34;dashboard/accountManagement&amp;#34;);
 $stateProvider
 .state(&amp;#39;dashboard&amp;#39;, {
 url: &amp;#39;/dashboard&amp;#39;,
 templateUrl: &amp;#39;dashboard/dashboard.html&amp;#39;,
 controller: &amp;#39;dashboardController&amp;#39;,
 resolve: {
 deps: [&amp;#39;$ocLazyLoad&amp;#39;, function ($ocLazyLoad) {
 return $ocLazyLoad.load([&amp;#39;dashboard/dashboard.js&amp;#39;]);
 }]
 }
 });
});
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>dashboardController.js&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>angular.module(&amp;#34;adminApp&amp;#34;).controller(&amp;#39;dashboardController&amp;#39;, function ($scope) {
 console.log(&amp;#34;dashboardController&amp;#34;);
});
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>但是提示错误：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>angular.min.js:118 Error: [ng:areq] http://errors.angularjs.org/1.5.8/ng/areq?p0=dashboardController&amp;amp;p1=not%20aNaNunction%2C%20got%20undefined
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:6:412
 at sb (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:23:18)
 at Pa (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:23:105)
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:89:310
 at Object.&amp;lt;anonymous&amp;gt; (http://localhost:63342/static/plugin/angular-1.5.8/angular-ui-router.js:3971:42)
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:16:71
 at la (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:81:90)
 at p (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:66:341)
 at g (http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:58:481)
 at http://localhost:63342/static/plugin/angular-1.5.8/angular.min.js:58:119
&lt;/code>&lt;/pre>&lt;hr>
&lt;blockquote>
&lt;p>原因是因为直接写controller无法识别，所有需要使用register来注册该controller&lt;/p></description></item><item><title>AngularJS 配置路由</title><link>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1/</link><pubDate>Mon, 01 Jan 2018 12:04:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1/</guid><description>&lt;blockquote>
&lt;p>在使用AngularJS的时候需要用到路由来控制页面的跳转，从而达到使用一个面板进行控制的目的，面板页面如图所示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://img.blog.csdn.net/20170523210031963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="控制面板">&lt;/p>
&lt;blockquote>
&lt;p>该面板分为菜单栏和控制页面两部分，左侧和上方为不变的部分，中间区域随菜单选择变动&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>##&lt;a href="http://download.csdn.net/detail/u013360850/9850266">项目下载&lt;/a> | &lt;a href="https://github.com/helloworlde/AngularRouter">GitHub下载&lt;/a> | &lt;a href="http://119.29.99.89/AngularRouter/pages/admin/index.html">演示地址&lt;/a> | &lt;a href="https://helloworlde.github.io/AngularRouter">GitHub演示地址&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="1引入所需的css和js文件">1.引入所需的CSS和JS文件&lt;/h2>
&lt;ul>
&lt;li>将所需要的CSS文件和JS文件引入到项目中index.html&lt;/li>
&lt;li>angular.min.js&lt;/li>
&lt;li>ocLazyLoad.js&lt;/li>
&lt;li>angular-ui-router.js&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34; class=&amp;#34;body&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, height=device-height, initial-scale=1, maximum-scale=1&amp;#34;/&amp;gt;
 &amp;lt;link href=&amp;#34;../../plugin/bootstrap-3.3.7/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
 &amp;lt;link href=&amp;#34;dashboard/dashboard.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body &amp;gt;
&amp;lt;div data-ui-view=&amp;#34;&amp;#34; style=&amp;#34;height: 100%;overflow: hidden;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;#34;../../plugin/angular-1.5.8/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;../../plugin/angular-1.5.8/angular-ui-router.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;../../plugin/oclazyload/ocLazyLoad.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;app.route.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="2-配置dashboard页面">2. 配置dashboard页面&lt;/h2>
&lt;pre tabindex="0">&lt;code>&amp;lt;div class=&amp;#34;app app-header-fixed&amp;#34; id=&amp;#34;app&amp;#34;&amp;gt;
 &amp;lt;!-- navbar --&amp;gt;
 &amp;lt;div class=&amp;#34;app-header navbar&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;collapse pos-rlt navbar-collapse box-shadow bg-white-only&amp;#34;&amp;gt;
 &amp;lt;ul class=&amp;#34;nav navbar-nav navbar-right&amp;#34;&amp;gt;
 &amp;lt;li class=&amp;#34;dropdown&amp;#34;&amp;gt;
 &amp;lt;a href=&amp;#34;#&amp;#34; data-toggle=&amp;#34;dropdown&amp;#34; class=&amp;#34;dropdown-toggle clear&amp;#34;&amp;gt;
 &amp;lt;span class=&amp;#34;thumb-sm avatar pull-right m-t-n-sm m-b-n-sm m-l-sm&amp;#34;&amp;gt;
 &amp;lt;img src=&amp;#34;/static/images/head.jpg&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;on md b-white bottom&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;/span&amp;gt;
 &amp;lt;span class=&amp;#34;hidden-sm hidden-md&amp;#34;&amp;gt;Administrator&amp;lt;/span&amp;gt; &amp;lt;b class=&amp;#34;caret&amp;#34;&amp;gt;&amp;lt;/b&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;!-- dropdown --&amp;gt;
 &amp;lt;ul class=&amp;#34;dropdown-menu animated fadeInRight w hidden-folded&amp;#34; role=&amp;#34;menu&amp;#34;&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&amp;#34;#&amp;#34; role=&amp;#34;menuitem&amp;#34;&amp;gt;退出&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;!-- menu --&amp;gt;
 &amp;lt;div class=&amp;#34;app-aside hidden-xs bg-dark&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;aside-wrap&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navi-wrap&amp;#34;&amp;gt;
 &amp;lt;!-- nav --&amp;gt;
 &amp;lt;nav ui-nav class=&amp;#34;navi&amp;#34;&amp;gt;
 &amp;lt;ul class=&amp;#34;nav&amp;#34;&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a ui-sref=&amp;#34;.accountManagement&amp;#34; class=&amp;#34;auto&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;glyphicon glyphicon-user&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;span class=&amp;#34;font-bold&amp;#34;&amp;gt;账户管理&amp;lt;/span&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a ui-sref=&amp;#34;.academicYear&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;glyphicon glyphicon-calendar&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;span class=&amp;#34;font-bold&amp;#34;&amp;gt;学年学期管理&amp;lt;/span&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a ui-sref=&amp;#34;.feedbackManagement&amp;#34;&amp;gt;
 &amp;lt;i class=&amp;#34;glyphicon glyphicon-send&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
 &amp;lt;span class=&amp;#34;font-bold&amp;#34;&amp;gt;用户反馈管理&amp;lt;/span&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;!-- nav --&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- / menu --&amp;gt;
 &amp;lt;!-- content 中间可替换的部分--&amp;gt;
 &amp;lt;div class=&amp;#34;app-content&amp;#34;&amp;gt;
 &amp;lt;div data-ui-view=&amp;#34;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- /content --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>##3. 配置路由&lt;/p></description></item><item><title>Nginx 配置</title><link>https://blog.hellowood.dev/posts/nginx-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 2018 12:03:12 +0800</pubDate><guid>https://blog.hellowood.dev/posts/nginx-%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="1-基础配置">1. 基础配置&lt;/h2>
&lt;pre tabindex="0">&lt;code>worker_processes 1;

events {
 worker_connections 1024;
}

http {
 include mime.types;
 default_type application/octet-stream;

 sendfile on;

 keepalive_timeout 65;

 server {
 listen 80;
 server_name project.hellowood.com;

 access_log logs/project.access.log;

 location / {
 proxy_pass http://127.0.0.1:8080;
 proxy_set_header Host $host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }

 error_page 500 502 503 504 /50x.html;
 location = /50x.html {
 root html;
 }
 }
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>访问&lt;code>project.hellowood.com&lt;/code> 实际会访问该 IP 下的8080端口&lt;/p>
&lt;/blockquote>
&lt;h2 id="2-不同的-url-访问不同的服务器">2. 不同的 URL 访问不同的服务器&lt;/h2>
&lt;ul>
&lt;li>配置 Server 节点&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> server {
 listen 80;
 server_name project.hellowood.com;

 access_log logs/project.access.log;

 location / {
 proxy_pass http://127.0.0.1:8080;
 proxy_set_header Host $host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }

 error_page 500 502 503 504 /50x.html;
 location = /50x.html {
 root html;
 }
 }

 server {
 listen 80;
 server_name introduce.hellowood.com;

 access_log logs/introduce.access.log;

 location / {
 proxy_pass http://127.0.0.1:8081;
 proxy_set_header Host $host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }

 error_page 500 502 503 504 /50x.html;
 location = /50x.html {
 root html;
 }
 }

 server {
 listen 80;
 server_name helloworld.com;

 access_log logs/helloworld.access.log;

 location / {
 proxy_pass http://127.0.0.1:8082;
 proxy_set_header Host $host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 }

 error_page 500 502 503 504 /50x.html;
 location = /50x.html {
 root html;
 }
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>访问&lt;code>project.hellowood.com&lt;/code> 实际会访问该 IP 下的8080端口
访问&lt;code>introduce.hellowood.com&lt;/code> 实际会访问该 IP 下的8081端口
访问&lt;code>helloworld.com&lt;/code> 实际会访问该 IP 下的8082端口&lt;/p></description></item><item><title>Tomcat9 配置HTTPS连接</title><link>https://blog.hellowood.dev/posts/tomcat9-%E9%85%8D%E7%BD%AEhttps%E8%BF%9E%E6%8E%A5/</link><pubDate>Mon, 01 Jan 2018 12:01:18 +0800</pubDate><guid>https://blog.hellowood.dev/posts/tomcat9-%E9%85%8D%E7%BD%AEhttps%E8%BF%9E%E6%8E%A5/</guid><description>&lt;blockquote>
&lt;p>Tomcat中配置HTTPS连接可以分为两步：1. 生成证书&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code> 2. 配置Tomcat
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>准备工作&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JDK&lt;/li>
&lt;li>Tomcat&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="1-生成证书">1. 生成证书&lt;/h1>
&lt;blockquote>
&lt;p>证书可以使用Java来生成&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>直接使用命令生成证书&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>keytool -genkeypair -alias &amp;#34;tomcat&amp;#34; -keyalg &amp;#34;RSA&amp;#34; -keystore &amp;#34;d:\DevConfig\tomcat.keystore&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="http://img.blog.csdn.net/20170424210011905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="生成Keystore">&lt;/p>
&lt;blockquote>
&lt;p>这样就会在&lt;code>F:\&lt;/code>下生成一个&lt;code>tomcat.keystore&lt;/code> 文件
密码在配置tomcat的时候会用到&lt;/p>
&lt;/blockquote>
&lt;h1 id="2-配置tomcat">2. 配置Tomcat&lt;/h1>
&lt;ul>
&lt;li>修改&lt;code>TOMCAT_HOME\conf\server.xml&lt;/code>文件，将以下内容粘贴到Tomcat配置文件中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;Connector
 protocol=&amp;#34;org.apache.coyote.http11.Http11NioProtocol&amp;#34;
 port=&amp;#34;8443&amp;#34; maxThreads=&amp;#34;200&amp;#34;
 scheme=&amp;#34;https&amp;#34; secure=&amp;#34;true&amp;#34; SSLEnabled=&amp;#34;true&amp;#34;
 keystoreFile=&amp;#34;F:\tomcat.keystore&amp;#34; keystorePass=&amp;#34;tomcat&amp;#34;
 clientAuth=&amp;#34;false&amp;#34; sslProtocol=&amp;#34;TLS&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>保存后启动Tomcat，访问&lt;code>https://localhost:8433&lt;/code>即可&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.blog.csdn.net/20170424211734554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Tomcat Https">&lt;/p>
&lt;ul>
&lt;li>因为CA证书是自己生成的，不被浏览器认可，所以会被当做不安全网站，但不影响使用&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>需要注意在配置文件有三种不同的实现方式&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> - JSSE （作为Java运行部分）
 - JSSE （使用OpenSSL）
 - APR （使用OpenSSL）
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这三种方式对应的配置文件并不一样，需要特别注意&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>另外&lt;code>protocol&lt;/code>如果写成&lt;code>HTTP/1.1&lt;/code>也会报错，应当使用以下三个中的一个，当使用APR的时候需要从&lt;a href="http://tomcat.apache.org/tomcat-7.0-doc/apr.html">下载&lt;code>tcnative-1.dll&lt;/code>&lt;/a>放到Tomcat的bin目录下，否则会报错&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>org.apache.coyote.http11.Http11NioProtocol
org.apache.coyote.http11.Http11Nio2Protocol
org.apache.coyote.http11.Http11AprProtocol
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这里的配置是第一种方式，也是最简单的方式&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>详细配置请看官方文档 &lt;a href="http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html">http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html&lt;/a>&lt;/p></description></item><item><title>Windows下配置Chrome WebDriver</title><link>https://blog.hellowood.dev/posts/windows%E4%B8%8B%E9%85%8D%E7%BD%AEchrome-webdriver/</link><pubDate>Mon, 01 Jan 2018 11:59:09 +0800</pubDate><guid>https://blog.hellowood.dev/posts/windows%E4%B8%8B%E9%85%8D%E7%BD%AEchrome-webdriver/</guid><description>&lt;blockquote>
&lt;p>WebDriver多用来执行自动化测试，可以通过Java文件或者其他方式在测试的时候打开，Firefox的自带了WebDriver，但是Chrome没有，需要手动安装&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>首先下载&lt;a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">Chrome的WebDriver&lt;/a>&lt;/li>
&lt;li>将WebDriver复制到Chrome的安装目录
&lt;ul>
&lt;li>安装目录可以通过在Chrome地址栏中输入&lt;code>chrome://version/&lt;/code>来查看&lt;/li>
&lt;li>一般默认的安装目录是 &lt;code>C:\Program Files (x86)\Google\Chrome&lt;/code>&lt;/li>
&lt;li>即将&lt;code>chromedriver.exe&lt;/code>文件复制到&lt;code>C:\Program Files (x86)\Google\Chrome\Application&lt;/code>下&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将WebDriver的路径复制到系统环境变量PATH中
&lt;ul>
&lt;li>即将&lt;code>C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe&lt;/code>添加到PATH中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>这样就完成了Chrome WebDriver的配置&lt;/p></description></item><item><title>AngularJS中使用ngModal模态框</title><link>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngmodal%E6%A8%A1%E6%80%81%E6%A1%86/</link><pubDate>Mon, 01 Jan 2018 11:57:50 +0800</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngmodal%E6%A8%A1%E6%80%81%E6%A1%86/</guid><description>&lt;ul>
&lt;li>在AngularJS中使用模态框需要引用的文件：
&lt;ul>
&lt;li>angular.js 1.5.5&lt;/li>
&lt;li>ui.bootstrap-tpls.js 0.11.2&lt;/li>
&lt;li>bootstrap.css 3.3.7&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>需要注意版本要一致，高版本的不支持这种方法，会出错&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>将需要弹出的模态框的内容写在 script 标签中，指明属性，放在页面中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;modal.html&amp;#34;&amp;gt;
&amp;lt;div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-header&amp;#34;&amp;gt;
 &amp;lt;h3 class=&amp;#34;modal-title&amp;#34; align=&amp;#34;center&amp;#34;&amp;gt;
 标题信息
 &amp;lt;/h3&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-body&amp;#34;&amp;gt;
 &amp;lt;div align=&amp;#34;center&amp;#34;&amp;gt;
 模态框内容
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-footer&amp;#34;&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; ng-click=&amp;#34;ok()&amp;#34;&amp;gt;
 确认
 &amp;lt;/button&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-warning&amp;#34; ng-click=&amp;#34;cancel()&amp;#34;&amp;gt;
 退出
 &amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在App和Controller中注入模态框&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>var app = angular.module(&amp;#39;app&amp;#39;, [&amp;#39;ui.bootstrap&amp;#39;]);
app.controller(&amp;#39;modalController&amp;#39;, function($scope, $rootScope,$modal) {
 $scope.openModel = function() {
 var modalInstance = $modal.open({
 templateUrl : &amp;#39;modal.html&amp;#39;,//script标签中定义的id
 controller : &amp;#39;modalCtrl&amp;#39;,//modal对应的Controller
 resolve : {
 data : function() {//data作为modal的controller传入的参数
 return data;//用于传递数据
 }
 }
 })
 }
}

//模态框对应的Controller
app.controller(&amp;#39;modalCtrl&amp;#39;, function($scope, $modalInstance, data) {
 $scope.data= data;

 //在这里处理要进行的操作
 $scope.ok = function() {
 $modalInstance.close();
 };
 $scope.cancel = function() {
 $modalInstance.dismiss(&amp;#39;cancel&amp;#39;);
 }
});
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加事件触发显示模态框&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;button ng-click=&amp;#34;openModal()&amp;#34;&amp;gt;打开模态框&amp;lt;/button&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html ng-app=&amp;#34;app&amp;#34; ng-controller=&amp;#34;modalController&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;ng-model模态框&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;link href=&amp;#34;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;button ng-click=&amp;#34;openModal()&amp;#34;&amp;gt;打开模态框&amp;lt;/button&amp;gt;

&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;modal.html&amp;#34;&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-header&amp;#34;&amp;gt;
 &amp;lt;h3 class=&amp;#34;modal-title&amp;#34; align=&amp;#34;center&amp;#34;&amp;gt;
 标题信息
 &amp;lt;/h3&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-body&amp;#34;&amp;gt;
 &amp;lt;div align=&amp;#34;center&amp;#34;&amp;gt;
 模态框内容 &amp;lt;br&amp;gt;
 {{data}}
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;modal-footer&amp;#34;&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; ng-click=&amp;#34;ok()&amp;#34;&amp;gt;
 确认
 &amp;lt;/button&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-warning&amp;#34; ng-click=&amp;#34;cancel()&amp;#34;&amp;gt;
 退出
 &amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;

&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/angular.js/1.5.5/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/angular-ui-bootstrap/0.11.2/ui-bootstrap-tpls.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;
 var app = angular.module(&amp;#39;app&amp;#39;, [&amp;#39;ui.bootstrap&amp;#39;]);
 app.controller(&amp;#39;modalController&amp;#39;, function($scope, $rootScope, $modal) {
 var data = &amp;#34;通过modal传递的数据&amp;#34;;
 $scope.openModal = function() {
 var modalInstance = $modal.open({
 templateUrl : &amp;#39;modal.html&amp;#39;,//script标签中定义的id
 controller : &amp;#39;modalCtrl&amp;#39;,//modal对应的Controller
 resolve : {
 data : function() {//data作为modal的controller传入的参数
 return data;//用于传递数据
 }
 }
 })
 }
 })
 //模态框对应的Controller
 app.controller(&amp;#39;modalCtrl&amp;#39;, function($scope, $modalInstance, data) {
 $scope.data= data;

 //在这里处理要进行的操作
 $scope.ok = function() {
 $modalInstance.close();
 };
 $scope.cancel = function() {
 $modalInstance.dismiss(&amp;#39;cancel&amp;#39;);
 }
 });
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>AngularJS 中ngTable自定义/重写过滤器</title><link>https://blog.hellowood.dev/posts/angularjs%E4%B8%ADngtable%E8%87%AA%E5%AE%9A%E4%B9%89-%E9%87%8D%E5%86%99%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 11:56:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E4%B8%ADngtable%E8%87%AA%E5%AE%9A%E4%B9%89-%E9%87%8D%E5%86%99%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>&lt;blockquote>
&lt;ul>
&lt;li>在使用ngTable 时用到了需要进行按时间过滤，但是ngTable并没有该功能，所以需要自定义过滤器，但是如果自定义了过滤器，则会覆盖原来的，所以就需要重写过滤器&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>###ngTable过滤器的原理是按照过滤的条件遍历所有的列表项内容，如果满足过滤条件则返回true，显示该记录，如果不满足条件则返回false，不显示该条记录，过滤条件有任何变化都会触发过滤&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>text:根据字符匹配，如果被过滤的值有该字符，则显示该记录&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>number:根据数值进行匹配，如果数值相等，则显示该记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>select:根据下拉列表选择的值进行匹配，如果值相等，则显示该记录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加自定义的过滤器控件&lt;/p>
&lt;ul>
&lt;li>在HTML中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;/filter/js/startDateFilter.html&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加自定义的过滤器控件
&lt;ul>
&lt;li>在js中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.customFilter = {
 start:{
 id:&amp;#39;/filter/js/startDateFilter.html&amp;#39;,
 placeholder:&amp;#39;Start&amp;#39;
 }
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>需要在ngTable的配置中指定过滤器&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.userTable = new NgTableParams({},
 {
 // initial sort order
 filterDelay: 0,
 filterOptions: {filterFn: $scope.customFilterFn},
 dataset: data
 });
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>为指定列设置控件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;td data-title=&amp;#34;&amp;#39;日期&amp;#39;&amp;#34; filter=&amp;#34;customFilter&amp;#34;&amp;gt;
 {{user.date|type: post
date:&amp;#39;yyyy-MM-dd&amp;#39;}}
 &amp;lt;/td&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>重写过滤器方法，实现过滤器功能&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.customFilterFn = function (date, filterValues) {
 return data.filter(function (item) {
 var result = true;
 if (typeof(filterValues.name) != undefined &amp;amp;&amp;amp; filterValues.name != null) {
 result = result &amp;amp;&amp;amp; (item.name.indenOf(filterValues.name) &amp;gt; -1);
 }

 if (typeof(filterValues.sex) != undefined &amp;amp;&amp;amp; filterValues.sex != null) {
 result = result &amp;amp;&amp;amp; (item.sex == filterValues.sex);
 }

 if (typeof(filterValues.startDate) != undefined &amp;amp;&amp;amp; filterValues.startDate != null) {
 result = result &amp;amp;&amp;amp; (item.startDate &amp;gt;= filterValues.startDate);
 }
 return result;
 })
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>页面代码&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34; ng-app=&amp;#34;myApp&amp;#34; ng-controller=&amp;#34;myCtrl&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;自定义过滤器&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;link href=&amp;#34;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;link href=&amp;#34;https://cdn.bootcss.com/ng-table/1.0.0/ng-table.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
 &amp;lt;!--自定义filter控件--&amp;gt;
 &amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;dateFilter.html&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;date&amp;#34;&amp;gt;
 &amp;lt;/script&amp;gt;
 &amp;lt;div class=&amp;#34;col-md-12 table-responsive&amp;#34;&amp;gt;
 &amp;lt;table ng-table=&amp;#34;userTable&amp;#34; class=&amp;#34;table table-condensed table-bordered table-striped table-hover &amp;#34;
 show-filter=&amp;#34;true&amp;#34;&amp;gt;
 &amp;lt;tr ng-repeat=&amp;#34;user in $data&amp;#34;&amp;gt;
 &amp;lt;td data-title=&amp;#34;&amp;#39;用户名&amp;#39;&amp;#34; filter=&amp;#34;{username: &amp;#39;text&amp;#39;}&amp;#34; sortable=&amp;#34;&amp;#39;username&amp;#39;&amp;#34;&amp;gt;{{user.username}}&amp;lt;/td&amp;gt;
 &amp;lt;td data-title=&amp;#34;&amp;#39;性别&amp;#39;&amp;#34; filter=&amp;#34;{sex: &amp;#39;select&amp;#39;}&amp;#34; filter-data=&amp;#34;sexs&amp;#34; sortable=&amp;#34;&amp;#39;sex&amp;#39;&amp;#34;&amp;gt;{{user.sex}}&amp;lt;/td&amp;gt;
 &amp;lt;td data-title=&amp;#34;&amp;#39;性别&amp;#39;&amp;#34; filter=&amp;#34;customFilter&amp;#34; sortable=&amp;#34;&amp;#39;date&amp;#39;&amp;#34;&amp;gt;
 {{user.date|type: post
date:&amp;#39;yyyy-MM-dd&amp;#39;}}
 &amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;/table&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&amp;#34;text/ng-template&amp;#34; id=&amp;#34;/filter/js/startDateFilter.html&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/angular.js/1.5.8/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;https://cdn.bootcss.com/ng-table/1.0.0/ng-table.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;
 var app = angular.module(&amp;#39;myApp&amp;#39;, [&amp;#39;ngTable&amp;#39;]);
 app.controller(&amp;#39;myCtrl&amp;#39;, function ($scope, NgTableParams) {

 $scope.sexs = [{
 &amp;#34;id&amp;#34;: &amp;#34;男&amp;#34;,
 &amp;#34;title&amp;#34;: &amp;#34;男&amp;#34;
 }, {
 &amp;#34;id&amp;#34;: &amp;#34;女&amp;#34;,
 &amp;#34;title&amp;#34;: &amp;#34;女&amp;#34;
 }]

 var data = [{
 &amp;#34;username&amp;#34;: &amp;#34;农夫山泉&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;男&amp;#34;,
 &amp;#34;date&amp;#34;: 1004570428580
 }, {
 &amp;#34;username&amp;#34;: &amp;#34;哇哈哈&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;女&amp;#34;,
 &amp;#34;date&amp;#34;: 1784570428580
 },
 {
 &amp;#34;username&amp;#34;: &amp;#34;Alice&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;男&amp;#34;,
 &amp;#34;date&amp;#34;: 1466570428580
 },
 {
 &amp;#34;username&amp;#34;: &amp;#34;CCC&amp;#34;,
 &amp;#34;sex&amp;#34;: &amp;#34;女&amp;#34;,
 &amp;#34;date&amp;#34;: 1584570428580
 }];


 $scope.userTable = new NgTableParams({
 sorting: {id: &amp;#34;asc&amp;#34;}
 },
 {
 // initial sort order
 filterDelay: 0,
 filterOptions: {filterFn: $scope.customFilterFn},
 dataset: data
 });

 $scope.customFilter = {
 start:{
 id:&amp;#39;/filter/js/startDateFilter.html&amp;#39;,
 placeholder:&amp;#39;Start&amp;#39;
 }
 }

 $scope.customFilterFn = function (date, filterValues) {
 return data.filter(function (item) {
 var result = true;

 console.log(filterValues);

 if (typeof(filterValues.name) != undefined &amp;amp;&amp;amp; filterValues.name != null) {
 result = result &amp;amp;&amp;amp; (item.name.indenOf(filterValues.name) &amp;gt; -1);
 }

 if (typeof(filterValues.sex) != undefined &amp;amp;&amp;amp; filterValues.sex != null) {
 result = result &amp;amp;&amp;amp; (item.sex == filterValues.sex);
 }

 if (typeof(filterValues.startDate) != undefined &amp;amp;&amp;amp; filterValues.startDate != null) {
 result = result &amp;amp;&amp;amp; (item.startDate &amp;gt;= filterValues.startDate);
 }
 return result;
 })

 }
 })
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Spring Controller 数据传递中注解的使用</title><link>https://blog.hellowood.dev/posts/spring-controller-%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 2018 11:54:23 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-controller-%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>##根据处理Request的不同内容分为4类：&lt;/p>
&lt;ol>
&lt;li>处理&lt;code>Request URI&lt;/code>部分的注解：&lt;code>@PathVariable&lt;/code>&lt;/li>
&lt;li>处理&lt;code>Request Header&lt;/code>部分的注解：&lt;code>@RequestHeader&lt;/code>，&lt;code>@CookieValue&lt;/code>&lt;/li>
&lt;li>处理&lt;code>Request Body&lt;/code>部分的注解：&lt;code>@RequestParam&lt;/code>，&lt;code>@RequestBody&lt;/code>&lt;/li>
&lt;li>处理&lt;code>Attribute&lt;/code>类型的注解：&lt;code>@SessionAttribute&lt;/code>，&lt;code>@ModelAttribute&lt;/code>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>##@PathVariable&lt;/p>
&lt;ul>
&lt;li>当使用&lt;code>@RequestMapping URI template&lt;/code>样式映射时，即&lt;code>url/{param}&lt;/code>，这时&lt;code>param&lt;/code>可以通过&lt;code>@PathVariable&lt;/code>注解绑定它传过来的值到方法的参数上&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> @Controller
 public class RelativePathUriTemplateController {

 @RequestMapping(&amp;#34;/url/{param}&amp;#34;)
 public void getParams(@PathVariable String param) {
 //....
 }
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>##@RequestHeader&lt;/p>
&lt;ul>
&lt;li>可以把&lt;code>Request&lt;/code>请求的&lt;code>Header&lt;/code>部分的值绑定到方法的参数上&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Host localhost:8080
 Accept text/html,application/xhtml+xml,application/xml;q=0.9
 Accept-Language fr,en-gb;q=0.7,en;q=0.3
 Accept-Encoding gzip,deflate
 Accept-Charset ISO-8859-1,utf-8;q=0.7,*;q=0.7
 Keep-Alive 300
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code> @RequestMapping(&amp;#34;/url&amp;#34;)
 public void displayHeaderInfo(@RequestHeader(&amp;#34;Accept-Encoding&amp;#34;) String encoding,
 @RequestHeader(&amp;#34;Keep-Alive&amp;#34;) long keepAlive) {

 //...

 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>把&lt;code>request header&lt;/code>部分的 &lt;code>Accept-Encoding&lt;/code>的值，绑定到参数&lt;code>encoding&lt;/code>上了， &lt;code>Keep-Alive header&lt;/code>的值绑定到参数&lt;code>keepAlive&lt;/code>上。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>##@CookieValue&lt;/p>
&lt;ul>
&lt;li>可以把&lt;code>RequestHeader&lt;/code>中关于&lt;code>cookie&lt;/code>的值绑定到方法的参数上&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>@RequestMapping(&amp;#34;/url&amp;#34;)
public void displayHeaderInfo(@CookieValue(&amp;#34;JSESSIONID&amp;#34;) String cookie) {

 //...

}
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>##@RequestBody&lt;/p></description></item><item><title>Spring Cloud 监控服务器下 IP/URL 不正确导致无法注册的解决方法</title><link>https://blog.hellowood.dev/posts/spring-cloud-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B-ip-url-%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%B3%A8%E5%86%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 11:51:23 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-cloud-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B-ip-url-%E4%B8%8D%E6%AD%A3%E7%A1%AE%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%B3%A8%E5%86%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;h2 id="本项目仅用到了-spring-cloud并没有使用-eureka">本项目仅用到了 Spring Cloud，并没有使用 Eureka&lt;/h2>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在使用 Spring Cloud 对 Spring Boot 应用通过 Spring Admin 进行监控的时候，当 Admin Server 和被监控的应用都在本地启动的时候没有任何问题，但是当部署到 Server 上之后，Client 在注册到 Admin Server 上时 IP 地址不正确，发现是因为 Server 有内网和外网 IP，但是在应用注册的时候用了内网的 IP，Admin Server 访问该内网 IP 失败，所以应用无法注册&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>因为没有使用 Eureka，所以配置时需要用 Spring Cloud 的配置来处理&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用 Eureka 请参考 &lt;a href="http://www.jianshu.com/p/fa1e9c8e4f47">http://www.jianshu.com/p/fa1e9c8e4f47&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>修改配置文件，添加以下内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.boot.admin.client.service-base-url=http://${your_ip}:${your_port}
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="说明">说明&lt;/h2>
&lt;ul>
&lt;li>当没有任何配置的时候，会使用&lt;code>http://bogon:9999/&lt;/code>注册&lt;/li>
&lt;li>当 Client 加入了&lt;code>spring.boot.admin.client.prefer-ip=true&lt;/code>的时候会以所得到的 IP 注册，此时 IP 为内网 IP，如果部署到服务器上将会无法注册&lt;/li>
&lt;li>当 Client 配置为&lt;code>spring.boot.admin.client.service-base-url=http://${your_ip}:${your_port}&lt;/code>时将会以所配置的地址进行注册&lt;/li>
&lt;/ul></description></item><item><title>Spring MVC简单实现国际化/多语言</title><link>https://blog.hellowood.dev/posts/spring-mvc%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 2018 11:48:46 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-mvc%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80/</guid><description>&lt;blockquote>
&lt;p>SpringMVC 可以通过Spring框架来实现多语言&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-创建springmvc项目">1. 创建SpringMVC项目&lt;/h2>
&lt;ul>
&lt;li>配置web.xml&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;web-app xmlns=&amp;#34;http://xmlns.jcp.org/xml/ns/javaee&amp;#34;
 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
 xsi:schemaLocation=&amp;#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&amp;#34;
 version=&amp;#34;3.1&amp;#34;&amp;gt;

 &amp;lt;!--Spring 配置文件--&amp;gt;
 &amp;lt;context-param&amp;gt;
 &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
 &amp;lt;param-value&amp;gt;/WEB-INF/applicationContext.xml&amp;lt;/param-value&amp;gt;
 &amp;lt;/context-param&amp;gt;

 &amp;lt;!--监听器--&amp;gt;
 &amp;lt;listener&amp;gt;
 &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
 &amp;lt;/listener&amp;gt;

 &amp;lt;!--配置转发器--&amp;gt;
 &amp;lt;servlet&amp;gt;
 &amp;lt;servlet-name&amp;gt;dispatcher&amp;lt;/servlet-name&amp;gt;
 &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
 &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
 &amp;lt;/servlet&amp;gt;
 &amp;lt;servlet-mapping&amp;gt;
 &amp;lt;servlet-name&amp;gt;dispatcher&amp;lt;/servlet-name&amp;gt;
 &amp;lt;url-pattern&amp;gt;*.action&amp;lt;/url-pattern&amp;gt;
 &amp;lt;/servlet-mapping&amp;gt;

 &amp;lt;filter&amp;gt;
 &amp;lt;filter-name&amp;gt;characterEncodingFilter&amp;lt;/filter-name&amp;gt;
 &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt;
 &amp;lt;init-param&amp;gt;
 &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
 &amp;lt;param-value&amp;gt;UTF-8&amp;lt;/param-value&amp;gt;
 &amp;lt;/init-param&amp;gt;
 &amp;lt;/filter&amp;gt;
 &amp;lt;filter-mapping&amp;gt;
 &amp;lt;filter-name&amp;gt;characterEncodingFilter&amp;lt;/filter-name&amp;gt;
 &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
 &amp;lt;/filter-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置Spring文件(dispatcher-servlet.xml)&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34;
 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
 xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34;
 xmlns:mvc=&amp;#34;http://www.springframework.org/schema/mvc&amp;#34;
 xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&amp;#34;&amp;gt;
 &amp;lt;!-- 默认使用基于注释的适配器和映射器 --&amp;gt;
 &amp;lt;mvc:annotation-driven/&amp;gt;
 &amp;lt;!-- 只把动态信息当做controller处理，忽略静态信息 --&amp;gt;
 &amp;lt;mvc:default-servlet-handler/&amp;gt;
 &amp;lt;!-- 自动扫描包中的Controlller --&amp;gt;
 &amp;lt;context:component-scan base-package=&amp;#34;controller&amp;#34;/&amp;gt;

 &amp;lt;bean class=&amp;#34;org.springframework.web.servlet.view.InternalResourceViewResolver&amp;#34;&amp;gt;
 &amp;lt;property name=&amp;#34;viewClass&amp;#34; value=&amp;#34;org.springframework.web.servlet.view.JstlView&amp;#34;/&amp;gt;
 &amp;lt;property name=&amp;#34;prefix&amp;#34; value=&amp;#34;/WEB-INF/jsp/&amp;#34;/&amp;gt;&amp;lt;!-- 前缀 --&amp;gt;
 &amp;lt;property name=&amp;#34;suffix&amp;#34; value=&amp;#34;.jsp&amp;#34;/&amp;gt;&amp;lt;!-- 后缀，自动拼接 --&amp;gt;
 &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="2-添加多语言的配置文件">2. 添加多语言的配置文件&lt;/h2>
&lt;ul>
&lt;li>添加language_en_US.properties到src目录下&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>language.cn = \u4e2d\u6587
language.en = English
internationalisation = \u0020Internationalisation
welcome = This is the English environment
introduce= This is I18N Demo
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加language_zh_CN.properties到src目录下&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>language.cn = \u4e2d\u6587
language.en = English
internationalisation = \u56fd\u9645\u5316
welcome = \u8fd9\u662f\u4e2d\u6587\u73af\u5883
introduce= \u8fd9\u662f\u56fd\u9645\u5316\u7684\u4e8b\u4f8b
&lt;/code>&lt;/pre>&lt;h2 id="3-加入i18n-过滤器到配置文件中">3. 加入i18n 过滤器到配置文件中&lt;/h2>
&lt;ul>
&lt;li>将配置添加到dispatcher-servelet中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!-- 国际化资源文件 --&amp;gt;
 &amp;lt;bean id=&amp;#34;messageSource&amp;#34; class=&amp;#34;org.springframework.context.support.ReloadableResourceBundleMessageSource&amp;#34;&amp;gt;
 &amp;lt;!-- 表示多语言配置文件在根路径下，以language开头的文件--&amp;gt;
 &amp;lt;property name=&amp;#34;basename&amp;#34; value=&amp;#34;classpath:language&amp;#34;/&amp;gt;
 &amp;lt;property name=&amp;#34;useCodeAsDefaultMessage&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt;
 &amp;lt;/bean&amp;gt;

 &amp;lt;mvc:interceptors&amp;gt;
 &amp;lt;bean id=&amp;#34;localeChangeInterceptor&amp;#34; class=&amp;#34;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&amp;#34;&amp;gt;
 &amp;lt;property name=&amp;#34;paramName&amp;#34; value=&amp;#34;lang&amp;#34;/&amp;gt;
 &amp;lt;/bean&amp;gt;
 &amp;lt;/mvc:interceptors&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="4-在页面中使用多语言">4. 在页面中使用多语言&lt;/h2>
&lt;ul>
&lt;li>在Controller中添加路径&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>@Controller
public class HelloController {
 @RequestMapping(&amp;#34;/hello.action&amp;#34;)
 public String index() {
 return &amp;#34;hello&amp;#34;;
 }
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在JSP页面中使用
&lt;blockquote>
&lt;p>通过&lt;code>&amp;lt;spring:message code=&amp;quot;welcome&amp;quot;/&amp;gt;&lt;/code>将配置文件中的内容读取&lt;/p></description></item><item><title>SpringBoot中Junit测试注入Bean失败的解决方法</title><link>https://blog.hellowood.dev/posts/springboot%E4%B8%ADjunit%E6%B5%8B%E8%AF%95%E6%B3%A8%E5%85%A5bean%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 11:46:57 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot%E4%B8%ADjunit%E6%B5%8B%E8%AF%95%E6%B3%A8%E5%85%A5bean%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>在SpringBoot中使用Junit做测试的时候测试DAO层的接口，但是一直提示注入Bean失败，报以下错误：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &amp;#39;hellowood.TestFeedbackMapper&amp;#39;: Unsatisfied dependency expressed through field &amp;#39;feedbackDetailMapper&amp;#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &amp;#39;hellowood.lntu.oe.wmp.dao.FeedbackDetailMapper&amp;#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>在查询了其他项目的Junit后发现Junit的注解是这样的&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = Application.class)
@WebAppConfiguration
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>而新建的项目中是这样的&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>@RunWith(SpringRunner.class)
@SpringBootTest
@WebAppConfiguration
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>直接修改注解后发现不能引入&lt;code>SpringApplicationConfiguration&lt;/code>，而所有的依赖只是版本不一样，查阅了Spring官方文档后发现新版中用&lt;code>SpringBootTest&lt;/code>代替了&lt;code>SpringApplicationConfiguration&lt;/code>，所以将注解改为以下形式就可以正常注入Bean了&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
@WebAppConfiguration
&lt;/code>&lt;/pre></description></item><item><title>AngularJS中使用ngTable</title><link>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngtable/</link><pubDate>Mon, 01 Jan 2018 11:42:21 +0800</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E4%B8%AD%E4%BD%BF%E7%94%A8ngtable/</guid><description>&lt;blockquote>
&lt;p>在HTML中使用&lt;a href="http://ng-table.com/">ngTable&lt;/a> 可以方便的进行排序，筛选，分页，添加，编辑删除等操作，不用再从数据库里面进行分页等操作&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>需要引用的文件
&lt;ul>
&lt;li>angular.js&lt;/li>
&lt;li>ng-table.js&lt;/li>
&lt;li>ng-table.css&lt;/li>
&lt;li>bootrasp.css&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>注入依赖&lt;/li>
&lt;li>为ng-table 设置属性和数据&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>var app = angular.module(&amp;#39;app&amp;#39;, [ &amp;#39;ngTable&amp;#39;]);
app.controller(&amp;#39;controller&amp;#39;, function($scope,NgTableParams) {
 $http.get(&amp;#34;/query&amp;#34;)
 .success(function(data) {
 $scope.userTable = new NgTableParams({
 page : 1,
 count : 5
 }, {
 total : data.length,
 getData : data
 }
 });
 })
 });
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>为 table 添加 ng-table 属性&lt;/li>
&lt;li>显示数据&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;table ng-table=&amp;#34;userTable&amp;#34; class=&amp;#34;table table-hover&amp;#34;&amp;gt;
 &amp;lt;tbody&amp;gt;
 &amp;lt;tr&amp;gt;
 &amp;lt;th&amp;gt;编号&amp;lt;/th&amp;gt;
 &amp;lt;th&amp;gt;用户名&amp;lt;/th&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;tr ng-repeat=&amp;#34;user in $data&amp;#34;&amp;gt;
 &amp;lt;td&amp;gt;{{user.id}}&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;{{user.name}}&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;/tbody&amp;gt;
 &amp;lt;/table&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>AngularJS发送异步Get/Post请求</title><link>https://blog.hellowood.dev/posts/angularjs%E5%8F%91%E9%80%81%E5%BC%82%E6%AD%A5get-post%E8%AF%B7%E6%B1%82/</link><pubDate>Mon, 01 Jan 2018 11:40:58 +0800</pubDate><guid>https://blog.hellowood.dev/posts/angularjs%E5%8F%91%E9%80%81%E5%BC%82%E6%AD%A5get-post%E8%AF%B7%E6%B1%82/</guid><description>&lt;p>1 . 在页面中加入AngularJS并为页面绑定ng-app 和 ng-controller&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;body ng-app=&amp;#34;MyApp&amp;#34; ng-controller=&amp;#34;MyCtrl&amp;#34; &amp;gt;
...
&amp;lt;script src=&amp;#34;js/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;js/sbt.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>2 . 添加必要的控件并绑定相应的事件&lt;/p>
&lt;pre tabindex="0">&lt;code> get:&amp;lt;input type=&amp;#34;text&amp;#34; ng-model=&amp;#34;param&amp;#34;&amp;gt;{{param}} &amp;lt;br&amp;gt;
 post: &amp;lt;input type=&amp;#34;text&amp;#34; ng-model=&amp;#34;user.name&amp;#34;&amp;gt;&amp;lt;input type=&amp;#34;text&amp;#34; ng-model=&amp;#34;user.password&amp;#34;&amp;gt;&amp;lt;br&amp;gt;
 &amp;lt;button ng-click=&amp;#34;get()&amp;#34;&amp;gt;Get&amp;lt;/button&amp;gt;
 &amp;lt;button ng-click=&amp;#34;post()&amp;#34;&amp;gt;Post&amp;lt;/button&amp;gt;
&lt;/code>&lt;/pre>&lt;p>3 . 在JS脚本中发送进行Get/Post请求&lt;/p>
&lt;ul>
&lt;li>get&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.get = function () {
 $http.get(&amp;#34;/get&amp;#34;, {params: {param: $scope.param}})
 .success(function (data, header, config, status) {
 console.log(data);
 })
 .error(function (data, header, config, status) {
 console.log(data);
 })
 ;
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>get 将参数放在URL中&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.get = function () {
 $http.get(&amp;#34;/get?param=&amp;#34;+$scope.param)
 .success(function (data, header, config, status) {
 console.log(data);
 })
 .error(function (data, header, config, status) {
 console.log(data);
 })
 ;
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>post&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$scope.post = function () {
 $http.post(&amp;#34;/post&amp;#34;, $scope.user)
 .success(function (data, header, config, status) {
 console.log(data);
 })
 .error(function (data, header, config, status) {
 console.log(data);
 })
 ;
 }
&lt;/code>&lt;/pre>&lt;p>4 . 由Controller处理请求并返回结果&lt;/p></description></item><item><title>HTML中使用Ajax进行局部刷新页面</title><link>https://blog.hellowood.dev/posts/html%E4%B8%AD%E4%BD%BF%E7%94%A8ajax%E8%BF%9B%E8%A1%8C%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</link><pubDate>Mon, 01 Jan 2018 11:38:52 +0800</pubDate><guid>https://blog.hellowood.dev/posts/html%E4%B8%AD%E4%BD%BF%E7%94%A8ajax%E8%BF%9B%E8%A1%8C%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</guid><description>&lt;p>#HTML中使用Ajax进行局部刷新页面，使用JS将数据发送到后台&lt;/p>
&lt;hr>
&lt;p>##1.在HTML页面中使用js脚本将请求数据发送给后台servlet&lt;/p>
&lt;ul>
&lt;li>由按钮触发事件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;button id=&amp;#34;select&amp;#34; onclick=&amp;#34;queryInfos()&amp;#34;&amp;gt;查询&amp;lt;/button&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>由js脚本对将数据发送到后台&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> var req = new XMLHttpRequest();
 function queryInfos() {
 //设置传送方式，对应的servlet或action路径，是否异步处理
 req.open(&amp;#34;POST&amp;#34;, &amp;#34;/info/queryinfos&amp;#34;, true);
 //如果设置数据传送方式为post，则必须设置请求头信息
 req.setRequestHeader(&amp;#34;Content-type&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;);
 //设置回调函数，当前操作完成后进行的操作
 req.onreadystatechange = callback;

 //Ajax请求发送的数据不是表单，需要拼接数据，格式和get方式一样
 var reqData = &amp;#34;ip=&amp;#34; + document.getElementById(&amp;#34;ip&amp;#34;).value;
 reqData += &amp;#34;&amp;amp;addr=&amp;#34; + document.getElementById(&amp;#34;addr&amp;#34;).value;
 reqData += &amp;#34;&amp;amp;time=&amp;#34; + document.getElementById(&amp;#34;time&amp;#34;).value;
 reqData += &amp;#34;&amp;amp;times=&amp;#34; + document.getElementById(&amp;#34;times&amp;#34;).value;

 //发送请求
 req.send(reqData);
 }
&lt;/code>&lt;/pre>&lt;p>##2.后台获取数据进行处理，将结果返回给前台&lt;/p>
&lt;ul>
&lt;li>后台进行处理&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 //设置数据编码方式
 request.setCharacterEncoding(&amp;#34;utf-8&amp;#34;);
 response.setCharacterEncoding(&amp;#34;utf-8&amp;#34;);
 //设置数据类型
 response.setContentType(&amp;#34;text/plain&amp;#34;);
 //设置禁用缓存
 response.setHeader(&amp;#34;Cache-control&amp;#34;,&amp;#34;no-cache&amp;#34;);

 //获取从页面传递的参数
 String ip = request.getParameter(&amp;#34;ip&amp;#34;);
 String addr = request.getParameter(&amp;#34;addr&amp;#34;);
 String time = request.getParameter(&amp;#34;time&amp;#34;);
 String times = request.getParameter(&amp;#34;times&amp;#34;);

 /*
 * 执行操作
 * */

 //拼接返回的json数据
 StringBuilder jsonString = new StringBuilder();
 jsonString.append(&amp;#34;{&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;size&amp;#39;:2&amp;#34;);

 jsonString.append(&amp;#34;,&amp;#39;datas&amp;#39;:[&amp;#34;);

 jsonString.append(&amp;#34;{&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;ip&amp;#39;:&amp;#39;10.10.1.1&amp;#39;,&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;addr&amp;#39;:&amp;#39;辽宁葫芦岛&amp;#39;,&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;time&amp;#39;:&amp;#39;2016-10-24 16:00:23&amp;#39;,&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;times&amp;#39;:&amp;#39;10&amp;#39;&amp;#34;);
 jsonString.append(&amp;#34;}&amp;#34;);

 jsonString.append(&amp;#34;,{&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;ip&amp;#39;:&amp;#39;192.168.110.111&amp;#39;,&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;addr&amp;#39;:&amp;#39;辽宁沈阳&amp;#39;,&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;time&amp;#39;:&amp;#39;2016-11-11 11:00:23&amp;#39;,&amp;#34;);
 jsonString.append(&amp;#34;&amp;#39;times&amp;#39;:&amp;#39;14&amp;#39;&amp;#34;);
 jsonString.append(&amp;#34;}&amp;#34;);

 jsonString.append(&amp;#34;]&amp;#34;);

 jsonString.append(&amp;#34;}&amp;#34;);

 //获取输出流
 PrintWriter out = response.getWriter();
 //将数据返回页面
 out.write(jsonString.toString());
 out.flush();
 out.close();
 }
&lt;/code>&lt;/pre>&lt;p>##3.返回处理结果，局部刷新页面&lt;/p></description></item><item><title>解决从GitHub上下载文件慢的问题</title><link>https://blog.hellowood.dev/posts/%E8%A7%A3%E5%86%B3%E4%BB%8Egithub%E4%B8%8A%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 2018 11:34:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E8%A7%A3%E5%86%B3%E4%BB%8Egithub%E4%B8%8A%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;blockquote>
&lt;h2 id="解决从github上下载文件慢的问题">解决从GitHub上下载文件慢的问题&lt;/h2>
&lt;p>从GitHub下载文件一直非常慢，查看下载链接发现最终被指向了Amazon的服务器，下载地址是&lt;a href="http://github-cloud.s3.amazonaws.com/">http://github-cloud.s3.amazonaws.com/&lt;/a>，从国内访问Amazon非常慢，所以总是下载失败，解决方法时更改host文件，使该域名指向香港的服务器：&lt;/p>
&lt;h2 id="更改hosts文件">更改hosts文件：&lt;/h2>
&lt;p>更改&lt;code>C:\Windows\System32\drivers\etc\hosts&lt;/code>文件，在文件中追加
&lt;code>219.76.4.4 github-cloud.s3.amazonaws.com&lt;/code>, 将域名指向该IP即可&lt;/p>
&lt;/blockquote></description></item><item><title>Gauge中执行数据库测试</title><link>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 2018 11:34:11 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95/</guid><description>&lt;blockquote>
&lt;p>使用Gauge对数据库的增删改查进行测试&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="打开数据库连接">打开数据库连接&lt;/h2>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">*&lt;/span> open connection before crud
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Connection&lt;/span> &lt;span style="color:#c1abea">connection&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">PreparedStatement&lt;/span> &lt;span style="color:#c1abea">statement&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;open connection before crud&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">openConnection&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">driver&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;com.mysql.jdbc.Driver&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;jdbc:mysql://119.29.99.89:3306/springboot?useSSL=false&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">username&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;victor&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">password&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Victor123456&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Class&lt;/span>.&lt;span style="color:#b3d23c">forName&lt;/span>(&lt;span style="color:#c1abea">driver&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connection&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">DriverManager&lt;/span>.&lt;span style="color:#b3d23c">getConnection&lt;/span>(&lt;span style="color:#c1abea">url&lt;/span>, &lt;span style="color:#c1abea">username&lt;/span>, &lt;span style="color:#c1abea">password&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">Exception&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="insert">insert&lt;/h2>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span style="display:flex;">&lt;span> ## insert
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insert record to database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags: crud,insert
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">*&lt;/span> insert new record named &amp;#34;Gauge&amp;#34;,sex is &amp;#34;Male&amp;#34;,age is &amp;#34;25&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;insert new record named &amp;lt;Gauge&amp;gt;,sex is &amp;lt;Male&amp;gt;,age is &amp;lt;25&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">insert&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">sex&lt;/span>, &lt;span style="color:#c1abea">Integer&lt;/span> &lt;span style="color:#c1abea">age&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">prepareStatement&lt;/span>(&lt;span style="color:#98c379">&amp;#34;insert into user(username,sex,age) values (?,?,?)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">setString&lt;/span>(&lt;span style="color:#c1abea">1&lt;/span>, &lt;span style="color:#c1abea">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">setString&lt;/span>(&lt;span style="color:#c1abea">2&lt;/span>, &lt;span style="color:#c1abea">sex&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">setInt&lt;/span>(&lt;span style="color:#c1abea">3&lt;/span>, &lt;span style="color:#c1abea">age&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">executeUpdate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">assertTrue&lt;/span>(&lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">SQLException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="select">select&lt;/h2>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span style="display:flex;">&lt;span> ## query
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query all records from database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags: crud,select
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">*&lt;/span> query all records
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;query all records&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">query&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">prepareStatement&lt;/span>(&lt;span style="color:#98c379">&amp;#34;SELECT * FROM user&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ResultSet&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">executeQuery&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">next&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">StringBuffer&lt;/span> &lt;span style="color:#c1abea">userInfo&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">StringBuffer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;ID:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;id&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;\t\tUsername:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;username&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;\t\tSex:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;sex&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;\t\tAge:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;age&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;\t\tSchool:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;school&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;\t\tMajor:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;major&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;\t\tAddress:&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getString&lt;/span>(&lt;span style="color:#98c379">&amp;#34;address&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Gauge&lt;/span>.&lt;span style="color:#b3d23c">writeMessage&lt;/span>(&lt;span style="color:#c1abea">userInfo&lt;/span>.&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">last&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">rowCount&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">getRow&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">resultSet&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">assertTrue&lt;/span>(&lt;span style="color:#c1abea">rowCount&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">SQLException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="update">update&lt;/h2>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> ## update
 update record
 tags: crud,update

 * update record sex to &amp;#34;Female&amp;#34; which named &amp;#34;Gauge&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;update record sex to &amp;lt;Female&amp;gt; which named &amp;lt;Gauge&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">update&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">sex&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">prepareStatement&lt;/span>(&lt;span style="color:#98c379">&amp;#34;UPDATE user SET sex=? WHERE username=?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">setString&lt;/span>(&lt;span style="color:#c1abea">1&lt;/span>, &lt;span style="color:#c1abea">sex&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">setString&lt;/span>(&lt;span style="color:#c1abea">2&lt;/span>, &lt;span style="color:#c1abea">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">resultNum&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">executeUpdate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">assertTrue&lt;/span>(&lt;span style="color:#c1abea">resultNum&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">SQLException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="delete">delete&lt;/h2>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span style="display:flex;">&lt;span> ## delete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete record
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags: crud,delete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">*&lt;/span> delete the record which named &amp;#34;Gauge&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;delete the record which named &amp;lt;Guage&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">delete&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">prepareStatement&lt;/span>(&lt;span style="color:#98c379">&amp;#34;DELETE FROM user WHERE username=?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">setString&lt;/span>(&lt;span style="color:#c1abea">1&lt;/span>, &lt;span style="color:#c1abea">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">resultNum&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">executeUpdate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">assertTrue&lt;/span>(&lt;span style="color:#c1abea">resultNum&lt;/span> &lt;span style="color:#c7bf54">&amp;gt;&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">SQLException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="关闭连接">关闭连接&lt;/h2>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">*&lt;/span> close connection after crud
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;close connection after crud&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">closeConnection&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">statement&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">SQLException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;ul>
&lt;li>需要把Jar包放在项目的lib目录下&lt;/li>
&lt;li>使用了&lt;a href="https://dev.mysql.com/downloads/file/?id=465644">MySQL驱动&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://download.csdn.net/detail/u013360850/9760640">下载项目&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Gauge中执行Http请求测试</title><link>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8Chttp%E8%AF%B7%E6%B1%82%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 2018 11:33:29 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8Chttp%E8%AF%B7%E6%B1%82%E6%B5%8B%E8%AF%95/</guid><description>&lt;blockquote>
&lt;p>通过Gauge执行自动化测试，测试Http请求&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>通过Java发送Http 请求来测试服务器请求执行状态&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>##GET请求&lt;/p>
&lt;ul>
&lt;li>.spec文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> ## query user
 query all user
 tags: query,request,http

 * query user
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>.java文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Step&lt;/span>(&lt;span style="color:#98c379">&amp;#34;query user&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">queryUser&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;http://119.29.99.89:8080/query&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">sendGetRequest&lt;/span>(&lt;span style="color:#c1abea">url&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">//用到了FastJSON来处理返回的Json数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">JSONArray&lt;/span> &lt;span style="color:#c1abea">users&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">JSON&lt;/span>.&lt;span style="color:#b3d23c">parseArray&lt;/span>(&lt;span style="color:#c1abea">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#ef8383">int&lt;/span> &lt;span style="color:#c1abea">i&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">0&lt;/span>; &lt;span style="color:#c1abea">i&lt;/span> &lt;span style="color:#c7bf54">&amp;lt;&lt;/span> &lt;span style="color:#c1abea">users&lt;/span>.&lt;span style="color:#b3d23c">size&lt;/span>(); &lt;span style="color:#c1abea">i&lt;/span>&lt;span style="color:#c7bf54">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">UserModel&lt;/span> &lt;span style="color:#c1abea">user&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">JSON&lt;/span>.&lt;span style="color:#b3d23c">parseObject&lt;/span>(&lt;span style="color:#c1abea">users&lt;/span>.&lt;span style="color:#b3d23c">get&lt;/span>(&lt;span style="color:#c1abea">i&lt;/span>).&lt;span style="color:#b3d23c">toString&lt;/span>(), &lt;span style="color:#c1abea">UserModel&lt;/span>.&lt;span style="color:#b3d23c">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">Gauge&lt;/span>.&lt;span style="color:#b3d23c">writeMessage&lt;/span>(&lt;span style="color:#c1abea">user&lt;/span>.&lt;span style="color:#b3d23c">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">assertTrue&lt;/span>(&lt;span style="color:#c1abea">users&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span> &lt;span style="color:#c7bf54">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#c7bf54">!&lt;/span>&lt;span style="color:#c1abea">users&lt;/span>.&lt;span style="color:#b3d23c">isEmpty&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">//发送一个GET请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#00b1f7">sendGetRequest&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">url&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">BufferedReader&lt;/span> &lt;span style="color:#c1abea">in&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">URL&lt;/span> &lt;span style="color:#c1abea">realUrl&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">URL&lt;/span>(&lt;span style="color:#c1abea">url&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">URLConnection&lt;/span> &lt;span style="color:#c1abea">connection&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">realUrl&lt;/span>.&lt;span style="color:#b3d23c">openConnection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">connect&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">in&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">BufferedReader&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">InputStreamReader&lt;/span>(&lt;span style="color:#c1abea">connection&lt;/span>.&lt;span style="color:#b3d23c">getInputStream&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">line&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> ((&lt;span style="color:#c1abea">line&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">in&lt;/span>.&lt;span style="color:#b3d23c">readLine&lt;/span>()) &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">result&lt;/span> &lt;span style="color:#c7bf54">+=&lt;/span> &lt;span style="color:#c1abea">line&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">MalformedURLException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#c1abea">in&lt;/span> &lt;span style="color:#c7bf54">!=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">in&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">result&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>##POST请求&lt;/p></description></item><item><title>使用Gradle编译执行Gague项目</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8gradle%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8Cgague%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 2018 11:32:34 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8gradle%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8Cgague%E9%A1%B9%E7%9B%AE/</guid><description>&lt;p>使用Gradle编译运行Gauge项目可以很大程度解决依赖的问题，并且可以根据需要创建多个不同的Task来在不同的环境运行或执行不同的操作&lt;/p>
&lt;h2 id="创建gauge项目">创建Gauge项目&lt;/h2>
&lt;ul>
&lt;li>首先在IDEA中创建一个Gauge项目
&lt;img src="http://img.blog.csdn.net/20170216213149019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">&lt;/li>
&lt;li>打开命令行，执行&lt;code>gradle init&lt;/code> 初始化Gradle项目
&lt;img src="http://img.blog.csdn.net/20170216213209779?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">&lt;/li>
&lt;li>修改build.gradle文件，添加Gauge的依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>apply plugin: &amp;#39;java&amp;#39;
apply plugin: &amp;#39;idea&amp;#39;
apply plugin: &amp;#39;gauge&amp;#39;

group = &amp;#34;Gradle-Gauge&amp;#34;
version = &amp;#34;1.0.0&amp;#34;


sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
 repositories {
 mavenCentral()
 }
 dependencies {
 classpath &amp;#39;com.thoughtworks.gauge.gradle:gauge-gradle-plugin:+&amp;#39;
 }
}

repositories {
 mavenCentral()
}

dependencies {
 //添加selenium是为了执行网页测试
 compile(
 &amp;#39;com.thoughtworks.gauge:gauge-java:0.5.1&amp;#39;,
 &amp;#39;junit:junit:4.12&amp;#39;,
 &amp;#39;org.seleniumhq.selenium:selenium-chrome-driver:3.0.1&amp;#39;,
 &amp;#39;org.seleniumhq.selenium:selenium-support:3.0.1&amp;#39;
 )
}

//执行`gradle gague`时是在执行该Task
gauge {
 specsDir = &amp;#39;specs&amp;#39;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行&lt;code>gradle build&lt;/code>来编译项目，并下载依赖&lt;/li>
&lt;li>执行&lt;code>gradle gauge&lt;/code>来运行Gauge项目，执行测试&lt;/li>
&lt;/ul></description></item><item><title>Gauge中执行钩子(Hook)</title><link>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8C%E9%92%A9%E5%AD%90-hook/</link><pubDate>Mon, 01 Jan 2018 11:31:40 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8C%E9%92%A9%E5%AD%90-hook/</guid><description>&lt;p>本文所有内容均参考自&lt;a href="http://getgauge.io/documentation/user/current/language_features/execution_hooks.html">Gauge官方文档&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>钩子可以理解为&lt;code>Java&lt;/code>中的&lt;code>AOP(Aspect Oriented Programming)&lt;/code>，把&lt;code>Specification&lt;/code>或&lt;code>Scenario&lt;/code>当做一个切面，在执行之前和执行之后做一些操作&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="suit-hook">Suit Hook&lt;/h2>
&lt;blockquote>
&lt;p>作用于所有的&lt;code>Specification&lt;/code>，在&lt;code>Specification&lt;/code>执行之前或执行之后执行&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> //在所有的Specification执行之前执行
 @BeforeSuite
 public void BeforeSuite() {
 // Code for before suite
 }

 //在所有的Specification执行之后执行
 @AfterSuite
 public void AfterSuite() {
 // Code for after suite
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>##Specification Hook&lt;/p>
&lt;blockquote>
&lt;p>作用于&lt;code>Specification&lt;/code>，可以在某个&lt;code>Specification&lt;/code>执行之前或执行之后执行&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> //在每一个Specification执行之前执行
 @BeforeSpec
 public void BeforeSpec() {
 // Code for before spec
 }

 //在每一个Specification执行之后执行
 @AfterSpec
 public void AfterSpec() {
 // Code for after spec
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>##Scenario Hook&lt;/p>
&lt;blockquote>
&lt;p>作用于&lt;code>Scenario&lt;/code> ，可以在某个&lt;code>Scenario&lt;/code> 执行之前或执行之后执行&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> //在每一个Scenario 执行之前执行
 @BeforeScenario
 public void BeforeScenario() {
 // Code for before scenario
 }

 //在每一个Scenario 执行之后执行
 @AfterScenario
 public void AfterScenario() {
 // Code for after scenario
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>##Step Hook&lt;/p></description></item><item><title>Gauge中执行测试的常用命令</title><link>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 2018 11:30:51 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge%E4%B8%AD%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>本文所有内容均参考自Gauge官方文档s&lt;/p>
&lt;hr>
&lt;p>#初始化&lt;code>Java&lt;/code>项目&lt;/p>
&lt;blockquote>
&lt;p>会在指定的文件夹下创建一个新的&lt;code>Gauge&lt;/code>项目，如果没有安装&lt;code>Java&lt;/code>和&lt;code>Html-report&lt;/code>插件会自动安装&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> gauge --init java
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="通过文件执行">通过文件执行&lt;/h2>
&lt;ul>
&lt;li>执行&lt;code>specs&lt;/code>文件夹下所有&lt;code>.spec&lt;/code>文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge specs
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行&lt;code>specs&lt;/code>文件夹下的&lt;code>specs.spec&lt;/code>文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge specs/specs.spec
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行多个文件夹下的所有文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge specs-dir1/ specs-dir2/
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行多个文件夹下的指定文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge specs-dir1/specs1.spec specs-dir2/spesc2.spec
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行一个特定的&lt;code>Scenario&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge specs/specs.spec:16
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>后面的数字是要执行的&lt;code>Scenario&lt;/code>所在的行数，从0开始&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>执行多个特定的&lt;code>Scenario&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge specs-dir1/specs1.spec:10 specs-dir2/specs2.spce:20
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>执行的过程中输出日志&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge --verbose specs
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>##通过&lt;code>Tag&lt;/code>执行&lt;/p>
&lt;pre tabindex="0">&lt;code> Login specification
 ===================
 Tags: login, admin, user login


 Successful login scenario
 -------------------------
 Tags: login-success, admin


 failed login scenario
 -------------------------
 Tags: login-failed, admin
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>通过单独的&lt;code>Tag&lt;/code>执行&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> gauge --tags admin specs
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>带有admin 的所有的&lt;code>Specification&lt;/code>或&lt;code>Scenario&lt;/code>都会被执行&lt;/p></description></item><item><title>Gauge 中Step使用别名</title><link>https://blog.hellowood.dev/posts/gauge-%E4%B8%ADstep%E4%BD%BF%E7%94%A8%E5%88%AB%E5%90%8D/</link><pubDate>Mon, 01 Jan 2018 11:29:48 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge-%E4%B8%ADstep%E4%BD%BF%E7%94%A8%E5%88%AB%E5%90%8D/</guid><description>&lt;p>所有内容均来自&lt;a href="http://getgauge.io/documentation/user/current/advanced_readings/step_alias.html">Gauge官网文档&lt;/a>&lt;/p>
&lt;hr>
&lt;p>##在执行的过程中，可能需要使用不同的名称来执行同样的操作，所以使用别名来区分&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>在这个Scenario中，第一步和第三步是相同的操作，但是表示的方式不同&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> User Creation
 =============
 Multiple Users
 --------------
 * Create a user &amp;#34;user 1&amp;#34;
 * Verify &amp;#34;user 1&amp;#34; has access to dashboard
 * Create another user &amp;#34;user 2&amp;#34;
 * Verify &amp;#34;user 2&amp;#34; has access to dashboard
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>使用别名即可解决这个问题：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> public class Users {

 @Step({&amp;#34;Create a user &amp;lt;user_name&amp;gt;&amp;#34;, &amp;#34;Create another user &amp;lt;user_name&amp;gt;&amp;#34;})
 public void createUser(String user_name) {
 // create user user_name
 }
 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>在这个两个Scenario中，发送邮件的操作是相同的&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> User Creation
 -------------
 * User creates a new account
 * A &amp;#34;welcome&amp;#34; email is sent to the user

 Shopping Cart
 -------------
 * User checks out the shopping cart
 * Payment is successfully received
 * An email confirming the &amp;#34;order&amp;#34; is sent
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>使用别名：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> public class Users {

 @Step({&amp;#34;A &amp;lt;email_type&amp;gt; email is sent to the user&amp;#34;, &amp;#34;An email confirming the &amp;lt;email_type&amp;gt; is sent&amp;#34;})
 public void sendEmail(String email_type) {
 // Send email of email_type
 }
 }
&lt;/code>&lt;/pre></description></item><item><title>Gauge基础知识</title><link>https://blog.hellowood.dev/posts/gauge%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 2018 11:29:04 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>&lt;p>本文所有内容均参照自&lt;a href="http://getgauge.io/documentation/user/current/">Gauge官方文档&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>#基本思想
&lt;code>Gauge&lt;/code>入门比较简单，&lt;code>Gauge&lt;/code>的基本思想就是通过&lt;code>.spec&lt;/code> 或者&lt;code>.md&lt;/code> 文件，使用&lt;code>MarkDown&lt;/code>语法去规定执行的动作，然后由&lt;code>Java&lt;/code>或者其他语言的文件去按照所写的&lt;code>.spec&lt;/code> 或者&lt;code>.md&lt;/code> 文件的顺序去执行&lt;code>Java&lt;/code>文件，从而达到测试的目的&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;hr>
&lt;h2 id="specification">Specification&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>作用：开始标志，只能有一个，每个Specification至少包含一个Scenario&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>Specification name
==================

或者：

# Specification name
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="scenario">Scenario&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>作用：特定的场景中的一个情节，一个或多个Scenario组成一个Specification，每个Scenario至少包含一个Step&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>Scenario name
-------------

或者：

## Scenario name
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="step">Step&lt;/h2>
&lt;blockquote>
&lt;p>作用：Specification的可执行部分&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>* Step Name
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;ul>
&lt;li>一般Step&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>- 正常执行的Step，包含在Scenario中
&lt;/code>&lt;/pre>
&lt;pre tabindex="0">&lt;code> * step
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;ul>
&lt;li>Context Step&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code> - 在Scenario执行之前执行的操作，在每个Scenario执行之前都会先执行Context Step
&lt;/code>&lt;/pre>
&lt;pre tabindex="0">&lt;code> * Context step
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;ul>
&lt;li>Teardown Step&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code> - 在Scenario执行之后执行的操作，在每个Scenario执行之后都会执行 Teardown Step
 -用半角下划线标识，不是横线

 ________________
 Teardown Step

 * Teardown Step1
 * Teardown Step2
&lt;/code>&lt;/pre>
&lt;pre tabindex="0">&lt;code>
 Delete project
 ==============

 * Sign up for user &amp;#34;mike&amp;#34;
 * Log in as &amp;#34;mike&amp;#34;

 Delete single project
 ---------------------
 * Delete the &amp;#34;example&amp;#34; project
 * Ensure &amp;#34;example&amp;#34; project has been deleted

 Delete multiple projects
 ------------------------
 * Delete all the projects in the list
 * Ensure project list is empty

 ____________________
 These are teardown steps

 * Logout user &amp;#34;mike&amp;#34;
 * Delete user &amp;#34;mike&amp;#34;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>执行步骤：&lt;/p></description></item><item><title>在IDEA中配置Gauge环境</title><link>https://blog.hellowood.dev/posts/%E5%9C%A8idea%E4%B8%AD%E9%85%8D%E7%BD%AEgauge%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 01 Jan 2018 11:28:05 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E5%9C%A8idea%E4%B8%AD%E9%85%8D%E7%BD%AEgauge%E7%8E%AF%E5%A2%83/</guid><description>&lt;blockquote>
&lt;h3 id="gaugehttpgetgaugeio是一个自动化测试工具主要是通过spec-文件指定执行的步骤然后由java代码去测试">&lt;a href="http://getgauge.io">Gauge&lt;/a>是一个自动化测试工具，主要是通过.spec 文件指定执行的步骤，然后由Java代码去测试&lt;/h3>
&lt;/blockquote>
&lt;ul>
&lt;li>首先，&lt;a href="http://getgauge.io/get-started/index.html">下载&lt;/a>安装Gauge&lt;/li>
&lt;li>安装后通过&lt;code>cmd&lt;/code>运行&lt;code>guage -v&lt;/code> 来确认Gauge安装成功
&lt;img src="http://img.blog.csdn.net/20170119132307236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">&lt;/li>
&lt;li>安装成功后安装Gauge的插件&lt;/li>
&lt;li>&lt;code>gauge --install-all&lt;/code>&lt;/li>
&lt;li>或者可以用 &lt;code>gauge --install java&lt;/code>和&lt;code>gauge --insatll html-report&lt;/code>·&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://img.blog.csdn.net/20170119132349174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">&lt;/p>
&lt;ul>
&lt;li>在IDEA中下载Gauge插件安装
&lt;img src="http://img.blog.csdn.net/20170119132409063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">&lt;/li>
&lt;li>安装完成后重启IDEA即完成Gauge的环境配置&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>如果修改了安装目录需要配置&lt;code>GAUGE_ROOT&lt;/code>，否则IDEA会报错&lt;/li>
&lt;li>JDK的所有&lt;code>PATH&lt;/code>，&lt;code>JAVA_HOME&lt;/code>，&lt;code>CLASSPATH&lt;/code>环境变量都需要配置好&lt;/li>
&lt;li>需要确认&lt;code>PATH&lt;/code>中配置了Gauge的&lt;code>bin&lt;/code>目录&lt;/li>
&lt;/ul></description></item><item><title>Gauge中Gradle自定义Task失败的解决方法</title><link>https://blog.hellowood.dev/posts/gauge%E4%B8%ADgradle%E8%87%AA%E5%AE%9A%E4%B9%89task%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 11:26:41 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gauge%E4%B8%ADgradle%E8%87%AA%E5%AE%9A%E4%B9%89task%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;h2 id="gauge中加入了gradle之后根据官方文档自定义task并不能执行">Gauge中加入了Gradle之后根据官方文档自定义task并不能执行&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">task&lt;/span> &lt;span style="color:#00b1f7">gaugeTest&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#f5a40d">type:&lt;/span> &lt;span style="color:#c1abea">GaugeTask&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">doFirst&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">gauge&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">specsDir&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;specs&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">inParallel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">nodes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">env&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">additionalFlags&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;--verbose&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>错误信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> * What went wrong:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> A problem occurred evaluating root project &amp;#39;Gauge&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> &amp;gt; Could not find property &amp;#39;GaugeTask&amp;#39; on root project &amp;#39;Gauge&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>这是因为Gradle并不能识别GaugeTask，需要写GaugeTask的限定类名：&lt;/p>
&lt;/blockquote>
&lt;h2 id="解决方法">解决方法&lt;/h2>
&lt;ul>
&lt;li>在build.gradle中添加&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">com.thoughtworks.gauge.gradle.GaugeTask&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>或者写成：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">task&lt;/span> &lt;span style="color:#00b1f7">gaugeTest&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#f5a40d">type:&lt;/span> &lt;span style="color:#c1abea">com&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">thoughtworks&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">gauge&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">gradle&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">GaugeTask&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">doFirst&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">gauge&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">specsDir&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;specs&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">inParallel&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">nodes&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">env&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">additionalFlags&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;--verbose&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>这样就可以识别执行了&lt;/p>
&lt;/blockquote></description></item><item><title>IDEA Maven项目导入失败，无法识别pom文件</title><link>https://blog.hellowood.dev/posts/idea-maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABpom%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 2018 11:23:33 +0800</pubDate><guid>https://blog.hellowood.dev/posts/idea-maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABpom%E6%96%87%E4%BB%B6/</guid><description>&lt;h2 id="解决思路">解决思路&lt;/h2>
&lt;blockquote>
&lt;h4 id="按照以下顺序逐个检查更改host文件比价极端应该很少见">按照以下顺序逐个检查，更改host文件比价极端，应该很少见&lt;/h4>
&lt;/blockquote>
&lt;h4 id="1-重启idea">1. 重启IDEA&lt;/h4>
&lt;h4 id="2-重启电脑">2. 重启电脑&lt;/h4>
&lt;h4 id="3-重新导入项目">3. 重新导入项目&lt;/h4>
&lt;h4 id="4-重装maven">4. 重装Maven&lt;/h4>
&lt;h4 id="5-重装idea">5. 重装IDEA&lt;/h4>
&lt;h4 id="6-检查host文件中有没有其他地址指向localhost">6. 检查host文件中有没有其他地址指向&lt;code>localhost&lt;/code>&lt;/h4>
&lt;hr>
&lt;blockquote>
&lt;p>一个Maven项目，之前是可以正常使用的，没有任何问题，但是今天去Debug启动Tomcat，提示Socket被占用， 错误信息如下：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>Error running &amp;#39;Console&amp;#39;: Unable to open debugger port (127.0.0.1:63347): jav...
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;ul>
&lt;li>正常启动时又提示JVM的1099端口被占用，无论如何修改端口都无效&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>先看到了这个帖子&lt;a href="http://blog.csdn.net/lutinghuan/article/details/45693577">nable to open debugger port (127.0.0.1:63777): java.net.BindException &amp;ldquo;Address already in use: JVM&lt;/a>，之后重启IDEA，重启电脑，重新导入项目，最后重装IDEA依然不好用；&lt;/li>
&lt;li>之后又觉得可能是Maven的问题，运行Maven的命令后发现Maven是正常的；&lt;/li>
&lt;li>最后发现了&lt;a href="http://www.jianshu.com/p/fb7bddca7b1e">IntellijIDEA 无法创建Maven工程，导入已有工程无法识别pom文件&lt;/a>这篇博客，发现问题挺像的，而我确实改过host文件，&lt;strong>将内网IP指向了&lt;code>localhost&lt;/code>&lt;/strong>；改回来之后发现可以正常导入了&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>问题的原因应该就是因为改了host文件导致localhost无法正常访问，所有各种端口都不行，也导致了无法访问Maven仓库，所以IDEA无法识别项目破，pom文件&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="host文件除了127001和1之外不要有其他的地址指向localhost">host文件除了&lt;code>127.0.0.1&lt;/code>和&lt;code>::1&lt;/code>之外不要有其他的地址指向&lt;code>localhost&lt;/code>&lt;/h3></description></item><item><title>Spring Boot Actuator 添加 Git 和 Build 信息</title><link>https://blog.hellowood.dev/posts/spring-boot-actuator-%E6%B7%BB%E5%8A%A0-git-%E5%92%8C-build-%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 01 Jan 2018 11:20:12 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-actuator-%E6%B7%BB%E5%8A%A0-git-%E5%92%8C-build-%E4%BF%A1%E6%81%AF/</guid><description>&lt;blockquote>
&lt;p>在使用 Spring Boot Actuator 时可以通过生成 Git 和编译文件来提供信息&lt;/p>
&lt;/blockquote>
&lt;h2 id="添加-git-信息">添加 Git 信息&lt;/h2>
&lt;ul>
&lt;li>添加插件
&lt;blockquote>
&lt;p>在 build.gradle 文件中添加一下配置&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>buildscript {

 repositories {
 maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; }
 }

 dependencies {
 classpath(&amp;#34;gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17&amp;#34;)
 }
}

apply plugin: &amp;#39;com.gorylenko.gradle-git-properties&amp;#39;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这样就会在 &lt;code> build\main\resource\&lt;/code>下生成 &lt;code>git.properties&lt;/code>文件，该文件内会包含 Git 仓库的信息&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>其他配置
&lt;blockquote>
&lt;p>build.gradle&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
gitProperties {
 // 日期格式
 dateFormat = &amp;#34;yyyy-MM-dd&amp;#39; &amp;#39;HH:mm:ss&amp;#34;
 // 时区
 dateFormatTimeZone = &amp;#34;PST&amp;#34;
 // 生成的 git.properties 文件位置
 gitPropertiesDir = new File(&amp;#34;${project.rootDir}/build/resources/main/&amp;#34;)
 // git 文件所在目录
 gitRepositoryRoot = new File(&amp;#34;${project.rootDir}/&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="添加编译信息">添加编译信息&lt;/h2>
&lt;ul>
&lt;li>添加配置信息
&lt;blockquote>
&lt;p>在 build.gradle 中添加&lt;/p></description></item><item><title>Tomcat启动时一直停留在一个应用的发布的解决办法</title><link>https://blog.hellowood.dev/posts/tomcat%E5%90%AF%E5%8A%A8%E6%97%B6%E4%B8%80%E7%9B%B4%E5%81%9C%E7%95%99%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%8F%91%E5%B8%83%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 01:05:02 +0800</pubDate><guid>https://blog.hellowood.dev/posts/tomcat%E5%90%AF%E5%8A%A8%E6%97%B6%E4%B8%80%E7%9B%B4%E5%81%9C%E7%95%99%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%8F%91%E5%B8%83%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>Tomcat在启动时一直停留在某一个应用无法启动或者需要很长时间才能启动，提示&lt;code>Deploying web application directory [/home/dev/tomcat/apache-tomcat-9.0.0.M26/webapps/ROOT&lt;/code>，可以通过如下配置来加速启动&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>###修改**&lt;code>${JAVA_HOME}/jre/lib/security/java.security&lt;/code>&lt;strong>文件 ###修改&lt;/strong>&lt;code>securerandom.source=file:/dev/random&lt;/code>&lt;strong>为&lt;/strong>&lt;code>securerandom.source=file:/dev/./urandom&lt;/code>**即可&lt;/p>
&lt;h2 id="解释">解释&lt;/h2>
&lt;blockquote>
&lt;p>这是因为Tomcat 7以上的版本在启动的时候会使用 &lt;code>org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom&lt;/code>类产生安全随机类&lt;code>SecureRandom&lt;/code>的实例作为会话ID
SHA1PRNG算法是基于SHA-1算法实现且保密性较强的伪随机数生成器。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在SHA1PRNG中，有一个种子产生器，它根据配置执行各种操作。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Linux中的随机数可以从两个特殊的文件中产生，一个是/dev/urandom.另外一个是/dev/random。他们产生随机数的原理是利用当前系统的熵池来计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这就是为什么会有/dev/urandom和/dev/random这两种不同的文件，后者在不能产生新的随机数时会阻塞程序，而前者不会（ublock），当然产生的随机数效果就不太好了，这对加密解密这样的应用来说就不是一种很好的选择。/dev/random会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回，所以使用/dev/random比使用/dev/urandom产生大量随机数的速度要慢。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>具体参考
&lt;a href="https://wiki.apache.org/tomcat/HowTo/FasterStartUp">https://wiki.apache.org/tomcat/HowTo/FasterStartUp&lt;/a>
&lt;a href="https://my.oschina.net/wangnian/blog/687914">https://my.oschina.net/wangnian/blog/687914&lt;/a>&lt;/p></description></item><item><title>SpringMVC 生成验证码</title><link>https://blog.hellowood.dev/posts/springmvc-%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</link><pubDate>Mon, 01 Jan 2018 01:04:16 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springmvc-%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</guid><description>&lt;blockquote>
&lt;p>使用 Google kaptcha 为 SpringMVC Maven 项目生成验证码&lt;/p>
&lt;/blockquote>
&lt;p>##1 添加依赖&lt;/p>
&lt;pre tabindex="0">&lt;code> &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;com.github.penggle&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;kaptcha&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;2.3.2&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="2-配置文件中添加验证码生成器bean">2 配置文件中添加验证码生成器Bean&lt;/h2>
&lt;pre tabindex="0">&lt;code> &amp;lt;!--图片验证码--&amp;gt;
 &amp;lt;bean id=&amp;#34;captchaProducer&amp;#34; class=&amp;#34;com.google.code.kaptcha.impl.DefaultKaptcha&amp;#34;&amp;gt;
 &amp;lt;property name=&amp;#34;config&amp;#34;&amp;gt;
 &amp;lt;bean class=&amp;#34;com.google.code.kaptcha.util.Config&amp;#34;&amp;gt;
 &amp;lt;constructor-arg&amp;gt;
 &amp;lt;props&amp;gt;
 &amp;lt;prop key=&amp;#34;kaptcha.border&amp;#34;&amp;gt;no&amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&amp;#34;kaptcha.image.width&amp;#34;&amp;gt;120&amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&amp;#34;kaptcha.session.key&amp;#34;&amp;gt;code&amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&amp;#34;kaptcha.textproducer.font.color&amp;#34;&amp;gt;blue&amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&amp;#34;kaptcha.textproducer.font.size&amp;#34;&amp;gt;40&amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&amp;#34;kaptcha.textproducer.char.length&amp;#34;&amp;gt;4&amp;lt;/prop&amp;gt;
 &amp;lt;/props&amp;gt;
 &amp;lt;/constructor-arg&amp;gt;
 &amp;lt;/bean&amp;gt;
 &amp;lt;/property&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置项&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>属性&lt;/th>
 &lt;th>作用&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>kaptcha.border&lt;/td>
 &lt;td>是否有边框&lt;/td>
 &lt;td>默认为true 我们可以自己设置yes，no&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.border.color&lt;/td>
 &lt;td>边框颜色&lt;/td>
 &lt;td>默认为Color.BLACK&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.border.thickness&lt;/td>
 &lt;td>边框粗细度&lt;/td>
 &lt;td>默认为1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.producer.impl&lt;/td>
 &lt;td>验证码生成器&lt;/td>
 &lt;td>默认为DefaultKaptcha&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.impl&lt;/td>
 &lt;td>验证码文本生成器&lt;/td>
 &lt;td>默认为DefaultTextCreator&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.char.string&lt;/td>
 &lt;td>验证码文本字符内容范围&lt;/td>
 &lt;td>默认为abcde2345678gfynmnpwx&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.char.length&lt;/td>
 &lt;td>验证码文本字符长度&lt;/td>
 &lt;td>默认为5&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.font.names&lt;/td>
 &lt;td>验证码文本字体样式&lt;/td>
 &lt;td>默认为new Font(&amp;ldquo;Arial&amp;rdquo;, 1, fontSize), new Font(&amp;ldquo;Courier&amp;rdquo;, 1, fontSize)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.font.size&lt;/td>
 &lt;td>验证码文本字符大小&lt;/td>
 &lt;td>默认为40&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.font.color&lt;/td>
 &lt;td>验证码文本字符颜色&lt;/td>
 &lt;td>默认为Color.BLACK&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.textproducer.char.space&lt;/td>
 &lt;td>验证码文本字符间距&lt;/td>
 &lt;td>默认为2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.noise.impl&lt;/td>
 &lt;td>验证码噪点生成对象&lt;/td>
 &lt;td>默认为DefaultNoise&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.noise.color&lt;/td>
 &lt;td>验证码噪点颜色&lt;/td>
 &lt;td>默认为Color.BLACK&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.obscurificator.impl&lt;/td>
 &lt;td>验证码样式引擎&lt;/td>
 &lt;td>默认为WaterRipple&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.word.impl&lt;/td>
 &lt;td>验证码文本字符渲染&lt;/td>
 &lt;td>默认为DefaultWordRenderer&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.background.impl&lt;/td>
 &lt;td>验证码背景生成器&lt;/td>
 &lt;td>默认为DefaultBackground&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.background.clear.from&lt;/td>
 &lt;td>验证码背景颜色渐进&lt;/td>
 &lt;td>默认为Color.LIGHT_GRAY&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.background.clear.to&lt;/td>
 &lt;td>验证码背景颜色渐进&lt;/td>
 &lt;td>默认为Color.WHITE&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.image.width&lt;/td>
 &lt;td>验证码图片宽度&lt;/td>
 &lt;td>默认为200&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kaptcha.image.height&lt;/td>
 &lt;td>验证码图片高度&lt;/td>
 &lt;td>默认为50&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="3-页面添加验证码图片和输入框">3 页面添加验证码图片和输入框&lt;/h2>
&lt;pre tabindex="0">&lt;code> &amp;lt;div class=&amp;#34;col-md-12&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;col-md-7 form-control&amp;#34; style=&amp;#34;float:left; width: 60%;&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;validateCode&amp;#34; name=&amp;#34;validateCode&amp;#34; placeholder=&amp;#34;验证码&amp;#34; &amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;col-md-3&amp;#34; style=&amp;#34;float: right;overflow: visible !important;&amp;#34;&amp;gt;
 &amp;lt;img src=&amp;#34;./loadValidateCode&amp;#34; id=&amp;#34;validateCodeImage&amp;#34; name=&amp;#34;validateCodeImage&amp;#34;
 style=&amp;#34;width: 100px;height: 35px;&amp;#34; onclick=&amp;#34;loadValidateCode()&amp;#34; &amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="4-页面添加刷新验证码">4 页面添加刷新验证码&lt;/h2>
&lt;pre tabindex="0">&lt;code> // 加载验证码
 function loadValidateCode() {
 var time = new Date().getTime();
 $(&amp;#34;#validateCodeImage&amp;#34;).attr(&amp;#39;src&amp;#39;, &amp;#39;./loadValidateCode&amp;#39;)
 }
&lt;/code>&lt;/pre>&lt;h2 id="5-后台添加生成验证码">5 后台添加生成验证码&lt;/h2>
&lt;ul>
&lt;li>导入包&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import com.google.code.kaptcha.Producer;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>生成方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c1abea">Producer&lt;/span> &lt;span style="color:#c1abea">captchaProducer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">VALIDATE_CODE&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;VALIDATE_CODE&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">EXPIRE_TIME&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;EXPIRE_TIME&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@RequestMapping&lt;/span>(&lt;span style="color:#c1abea">value&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;/loadValidateCode&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">method&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">RequestMethod&lt;/span>.&lt;span style="color:#b3d23c">GET&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">loadValidateCode&lt;/span>(&lt;span style="color:#c1abea">HttpServletRequest&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>, &lt;span style="color:#c1abea">HttpServletResponse&lt;/span> &lt;span style="color:#c1abea">response&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">HttpSession&lt;/span> &lt;span style="color:#c1abea">session&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">request&lt;/span>.&lt;span style="color:#b3d23c">getSession&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 设置清除浏览器缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setDateHeader&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Expires&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setHeader&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Cache-Control&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;no-store, no-cache, must-revalidate&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">addHeader&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Cache-Control&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;post-check=0, pre-check=0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setHeader&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Pragma&amp;#34;&lt;/span>, &lt;span style="color:#98c379">&amp;#34;no-cache&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">setContentType&lt;/span>(&lt;span style="color:#98c379">&amp;#34;image/png&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 验证码一分钟内有效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">expireTime&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">currentTimeMillis&lt;/span>() &lt;span style="color:#c7bf54">+&lt;/span> &lt;span style="color:#c1abea">60000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 将验证码放到session中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">validateCode&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">captchaProducer&lt;/span>.&lt;span style="color:#b3d23c">createText&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">session&lt;/span>.&lt;span style="color:#b3d23c">setAttribute&lt;/span>(&lt;span style="color:#c1abea">VALIDATE_CODE&lt;/span>, &lt;span style="color:#c1abea">Utils&lt;/span>.&lt;span style="color:#b3d23c">encodeBase64&lt;/span>(&lt;span style="color:#c1abea">validateCode&lt;/span>));&lt;span style="color:#8a93a5;font-style:italic">//将加密后的验证码放到session中，确保安全&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">session&lt;/span>.&lt;span style="color:#b3d23c">setAttribute&lt;/span>(&lt;span style="color:#c1abea">EXPIRE_TIME&lt;/span>, &lt;span style="color:#c1abea">expireTime&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 输出验证码图片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">BufferedImage&lt;/span> &lt;span style="color:#c1abea">bufferedImage&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">captchaProducer&lt;/span>.&lt;span style="color:#b3d23c">createImage&lt;/span>(&lt;span style="color:#c1abea">validateCode&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ServletOutputStream&lt;/span> &lt;span style="color:#c1abea">out&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">response&lt;/span>.&lt;span style="color:#b3d23c">getOutputStream&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ImageIO&lt;/span>.&lt;span style="color:#b3d23c">write&lt;/span>(&lt;span style="color:#c1abea">bufferedImage&lt;/span>, &lt;span style="color:#98c379">&amp;#34;png&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">out&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">out&lt;/span>.&lt;span style="color:#b3d23c">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">IOException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-登录时校验验证码">6 登录时校验验证码&lt;/h2>
&lt;pre tabindex="0">&lt;code> @RequestMapping(value = &amp;#34;/login&amp;#34;, method = RequestMethod.POST)
 public @ResponseBody String login(String username, String password, String validateCode) {

 // 校验验证码是否有效
 String currentValidateCode = String.valueOf(request.getSession().getAttribute(VALIDATE_CODE));
 if (System.currentTimeMillis() &amp;gt; Long.parseLong(String.valueOf(request.getSession().getAttribute(EXPIRE_TIME)))) {
 return JSON.toJSONString(&amp;#34;验证码已过期，请重试&amp;#34;);
 }

 // 校验验证码
 String currentValidateCode = String.valueOf(request.getSession().getAttribute(VALIDATE_CODE));
 if (StringUtils.isEmpty(validateCode) || validateCode.length() != 4 ||
 !Utils.encodeBase64(validateCode).equals(currentValidateCode)) {
 return JSON.toJSONString(&amp;#34;验证码错误&amp;#34;);
 }
 }
&lt;/code>&lt;/pre>&lt;h2 id="7-base64加密">7 Base64加密&lt;/h2>
&lt;pre tabindex="0">&lt;code> public static String encodeBase64(String str) {
 sun.misc.BASE64Encoder base64Encode = new BASE64Encoder();
 return base64Encode.encode(str.getBytes());
 }
&lt;/code>&lt;/pre></description></item><item><title>IDEA启动Spring Boot项目提示Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServlet...</title><link>https://blog.hellowood.dev/posts/idea%E5%90%AF%E5%8A%A8spring-boot%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAunable-to-start-embeddedwebapplicationcontext-due-to-missing-embeddedservlet/</link><pubDate>Mon, 01 Jan 2018 01:03:07 +0800</pubDate><guid>https://blog.hellowood.dev/posts/idea%E5%90%AF%E5%8A%A8spring-boot%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAunable-to-start-embeddedwebapplicationcontext-due-to-missing-embeddedservlet/</guid><description>&lt;blockquote>
&lt;p>导入一个&lt;code>gradle&lt;/code> 的&lt;code>Spring Boot&lt;/code>项目，在启动的时候先提示找不到&lt;code>HttpServletRequest&lt;/code>这个包，错误如下：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>Caused by: java.lang.ClassNotFoundException: javax.servlet.http.HttpServletRequest
 at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_45]
 at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_45]
 at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_45]
 at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_45]
 ... 29 common frames omitted
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>但是相应的Java代码没有报错，所以单独找了&lt;code>servlet-api.jar&lt;/code>导入，并将其添加到&lt;code>Module&lt;/code>中，但是导入后出现另一个错误：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean.
 at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]
....
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>找了很久都没有找到解决的方法，但是使用&lt;code>gradle bootrun&lt;/code>是可以正常启动运行的，在另外一台机子上也没有任何问题，所以认为项目本身没有任何问题，是在IDEA启动的过程中出现了问题导致的，&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>看到有一篇使用&lt;code>Maven&lt;/code>也遇到该问题的帖子，对比了依赖：&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>dependencies {
 compile(&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.2.0&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;)
 runtime(&amp;#39;mysql:mysql-connector-java&amp;#39;)
 testCompile(&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;)

 // this is for generate war file
 providedRuntime(&amp;#39;org.springframework.boot:spring-boot-starter-tomcat&amp;#39;)
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>然后将&lt;code>providedRuntime&lt;/code>改成了&lt;code>runtime&lt;/code>，重新&lt;code>build&lt;/code>启动，没有任何问题
该问题产生的原因很可能是因为IDEA在启动的过程中并没有像&lt;code>Gradle&lt;/code>一样做完全的&lt;code>build&lt;/code>，只是进行了热更新，没有将需要的Jar包编译到项目里&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>&lt;code>providedCompile&lt;/code> 和 &lt;code>providedRuntime&lt;/code>。虽然它们有各自的&lt;code>compile&lt;/code> 和 &lt;code>runtime&lt;/code> 配置，但这些配置有相同的作用域，只是它们不会添加到 &lt;code>war/jar&lt;/code> 文件中&lt;/strong>。&lt;/p></description></item><item><title>IDEA中Spring Boot项目MyBaits提示Invalid bound statement (not found)错误</title><link>https://blog.hellowood.dev/posts/idea%E4%B8%ADspring-boot%E9%A1%B9%E7%9B%AEmybaits%E6%8F%90%E7%A4%BAinvalid-bound-statement-not-found-%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 01 Jan 2018 01:01:51 +0800</pubDate><guid>https://blog.hellowood.dev/posts/idea%E4%B8%ADspring-boot%E9%A1%B9%E7%9B%AEmybaits%E6%8F%90%E7%A4%BAinvalid-bound-statement-not-found-%E9%94%99%E8%AF%AF/</guid><description>&lt;blockquote>
&lt;p>一个SpringBoot项目在STS中是正常的，没有任何问题，但是导入到IDEA中之后启动就提示&lt;code>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)&lt;/code>错误&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>2017-05-01 20:29:30.089 ERROR 8580 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet] : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): hellowood.lntu.oe.wmp.dao.FeedbackDetailMapper.insertSelective] with root cause

org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): ...........
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>该错误提示没有找到相对应的XML文件，找了很长时间发现在编译后的classes路径下并没有相应的XML文件，这是因为IDEA在编译的时候忽略掉了XML文件，一个解决方法是将所有的XML文件移动到Resource文件夹下，这样在编译的时候就会将XML文件一起&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>移动文件夹后修改配置文件中的MyBat的扫描路径&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> mybatis.mapper-locations=classpath*:/mapper/**Mapper.xml
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>修改前的结构
&lt;img src="http://img.blog.csdn.net/20170501203323011?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="修改前的结构">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改后的结构
&lt;img src="http://img.blog.csdn.net/20170501203402426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="修改后的结构">&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Gradle 使用-编译时下载依赖失败解决方法</title><link>https://blog.hellowood.dev/posts/gradle-%E4%BD%BF%E7%94%A8-%E7%BC%96%E8%AF%91%E6%97%B6%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 01:00:20 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gradle-%E4%BD%BF%E7%94%A8-%E7%BC%96%E8%AF%91%E6%97%B6%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>如果&lt;code>Gradle&lt;/code>在编译的时候没有在本地仓库中发现依赖，就会从远程仓库中下载，默认的远程仓库为&lt;code>mavenCentral()&lt;/code>，也就是&lt;a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/&lt;/a>，但是往往访问速度特别慢，不翻墙经常会下载超时或者需要很长时间导致Build失败，因此，可以用国内的仓库代替：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>阿里的仓库地址：&lt;a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/&lt;/a>&lt;/li>
&lt;li>OSChina的仓库地址：&lt;a href="http://maven.oschina.net/content/groups/public/">http://maven.oschina.net/content/groups/public/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="修改单独项目">修改单独项目&lt;/h2>
&lt;p>在项目的&lt;code>build.gradle&lt;/code>文件中，修改&lt;code>repositories&lt;/code>配置
由：&lt;/p>
&lt;pre tabindex="0">&lt;code> repositories {
 mavenCentral()
 }
&lt;/code>&lt;/pre>&lt;p>改为：&lt;/p>
&lt;pre tabindex="0">&lt;code>repositories {
 maven{ url &amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39;}
 }
&lt;/code>&lt;/pre>&lt;p>或：&lt;/p>
&lt;pre tabindex="0">&lt;code>repositories {
 maven{ url &amp;#39;http://maven.oschina.net/content/groups/public/&amp;#39;}
 }
&lt;/code>&lt;/pre>&lt;p>这样就可以从国内的镜像中下载依赖，速度能提高不少&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>build.gradle文件里有两处repositories，都需要改掉&lt;/li>
&lt;li>阿里云的速度比较快，更稳定&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="更改所有项目">更改所有项目&lt;/h2>
&lt;p>如果想一次更改所有的仓库地址，可以在&lt;code>USER_HOME/.gradle/&lt;/code>（如&lt;code>C:\Users\hellowood\.gradle&lt;/code>）文件夹下添加&lt;code>init.gradle&lt;/code>文件来配置&lt;/p>
&lt;ul>
&lt;li>init.gradle&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>allprojects{
 repositories {
 def REPOSITORY_URL = &amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39;
 all { ArtifactRepository repo -&amp;gt;
 if(repo instanceof MavenArtifactRepository){
 def url = repo.url.toString()
 if (url.startsWith(&amp;#39;https://repo1.maven.org/maven2&amp;#39;) || url.startsWith(&amp;#39;https://jcenter.bintray.com/&amp;#39;)) {
 remove repo
 }
 }
 }
 maven {
 url REPOSITORY_URL
 }
 }
}
&lt;/code>&lt;/pre>&lt;p>这样就可以在项目编译的时候从阿里的仓库中下载依赖了&lt;/p>
&lt;ul>
&lt;li>&lt;code>init.build&lt;/code>脚本可以参考&lt;a href="https://docs.gradle.org/current/userguide/init_scripts.html">https://docs.gradle.org/current/userguide/init_scripts.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Ubuntu搭建Shadowsocks服务器</title><link>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 01 Jan 2018 00:58:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/ubuntu%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>在Ubuntu环境中搭建Shadowsocks服务&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-安装shadowsocks">1. 安装Shadowsocks&lt;/h2>
&lt;pre tabindex="0">&lt;code># 更新apt-get
sudo apt-get update

# 安装python包管理工具
sudo apt-get install python-pip

# 安装Shadowsocks
pip install shadowsocks
&lt;/code>&lt;/pre>&lt;h2 id="2-配置shadowsocks">2. 配置Shadowsocks&lt;/h2>
&lt;ul>
&lt;li>创建配置文件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>mkdir shadowsocks
vi config.json
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在config.json文件中添加以下配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;server&amp;#34;: &amp;#34;0.0.0.0&amp;#34;,
 &amp;#34;server_port&amp;#34;: 8623,
 &amp;#34;local_address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
 &amp;#34;local_port&amp;#34;: 1080,
 &amp;#34;password&amp;#34;: &amp;#34;your password&amp;#34;,
 &amp;#34;timeout&amp;#34;: 300,
 &amp;#34;method&amp;#34;: &amp;#34;aes-256-cfb&amp;#34;,
 &amp;#34;fast_open&amp;#34;: false
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>配置说明&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>字段&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>server&lt;/td>
 &lt;td>服务端监听地址&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>server_port&lt;/td>
 &lt;td>服务端端口&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>local_address&lt;/td>
 &lt;td>本地监听地址&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>local_port&lt;/td>
 &lt;td>本地监听端口&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>password&lt;/td>
 &lt;td>密码&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>timeout&lt;/td>
 &lt;td>超时时间（秒）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>method&lt;/td>
 &lt;td>加密方法&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fast_open&lt;/td>
 &lt;td>是否启用TCP-Fast-Open，true或者false&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="3-启动shadowsocks">3. 启动Shadowsocks&lt;/h2>
&lt;ul>
&lt;li>启动：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d start
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>停止：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d stop
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>重启：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d restart
&lt;/code>&lt;/pre>&lt;h2 id="4-设置开机自启动">4. 设置开机自启动&lt;/h2>
&lt;pre tabindex="0">&lt;code>sudo vi /etc/rc.local
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>加入以下内容&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo ssserver -c /home/ubuntu/develop/shadowsocks/shadowsocks.json -d start
&lt;/code>&lt;/pre>&lt;h2 id="5-配置多个用户">5. 配置多个用户&lt;/h2>
&lt;ul>
&lt;li>将配置文件修改为以下：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;server&amp;#34;: &amp;#34;0.0.0.0&amp;#34;,
 &amp;#34;local_address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
 &amp;#34;local_port&amp;#34;: 1080,
 &amp;#34;port_password&amp;#34;: {
 &amp;#34;8623&amp;#34;: &amp;#34;your password1&amp;#34;,
 &amp;#34;8624&amp;#34;: &amp;#34;your password1&amp;#34;,
 &amp;#34;8625&amp;#34;: &amp;#34;your password2&amp;#34;,
 &amp;#34;8626&amp;#34;: &amp;#34;your password3&amp;#34;,
 &amp;#34;8627&amp;#34;: &amp;#34;your password4&amp;#34;
 },
 &amp;#34;timeout&amp;#34;: 300,
 &amp;#34;method&amp;#34;: &amp;#34;aes-256-cfb&amp;#34;,
 &amp;#34;fast_open&amp;#34;: false
}
&lt;/code>&lt;/pre></description></item><item><title>SpringMVC应用启动时执行操作</title><link>https://blog.hellowood.dev/posts/springmvc%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 2018 00:56:03 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springmvc%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C/</guid><description>&lt;ul>
&lt;li>
&lt;p>ContextRefreshedEvent：当ApplicationContext初始化或者刷新时触发该事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ContextClosedEvent：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RequestHandleEvent：在Web应用中，当一个http请求（request）结束触发该事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ContestStartedEvent：Spring2.5新增的事件，当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ContestStopedEvent：Spring2.5新增的事件，当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>@Component
public class ApplicationListenerImpl implements ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt; {

 private static final Logger logger = LoggerFactory.getLogger(ApplicationListenerImpl.class);

 @Override
 public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
 /**
 * 系统两种容器：root application context 和项目名-servlet context ；
 * 下面代码防止执行两次
 */
 if(event.getApplicationContext().getParent() == null){

 }
 }
}
&lt;/code>&lt;/pre></description></item><item><title>Spring Boot 启动时执行加载资源/执行操作</title><link>https://blog.hellowood.dev/posts/spring-boot-%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90-%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 2018 00:54:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90-%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C/</guid><description>&lt;blockquote>
&lt;p>SpringBoot 在启动的时候加载资源或者执行操作，进行初始化来执行特定操作，SpringBoot已经提供了这样的接口，通过实现该接口就可以实现需要的操作&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="实现commandlinerunner接口">实现CommandLineRunner接口&lt;/h2>
&lt;pre tabindex="0">&lt;code>@Order(value=2)
@Component
public class CommandLineRunnerListenerImpl implements CommandLineRunner {

 @Override
 public void run(String... args) throws Exception {
 // 执行操作
 }
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>可以通过指定&lt;code>@Order&lt;/code>的值来控制启动的顺序，值越小表示越先执行&lt;/li>
&lt;/ul>
&lt;h2 id="实现applicationlistener接口">实现ApplicationListener接口&lt;/h2>
&lt;pre tabindex="0">&lt;code>@Component
public class CommandLineRunnerListenerImpl implements ApplicationListener {

 @Override
 public void onApplicationEvent(ApplicationEvent event) {
 // 执行操作
 }
}
&lt;/code>&lt;/pre></description></item><item><title>SpringBoot启动时报org.springframework.context.annotation.ConflictingBeanDefinitionException解决方法</title><link>https://blog.hellowood.dev/posts/springboot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5org-springframework-context-annotation-conflictingbeandefinitionexception%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 00:53:44 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5org-springframework-context-annotation-conflictingbeandefinitionexception%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>在SpringBoot应用启动的过程中，因为报&lt;code>org.springframework.context.annotation.ConflictingBeanDefinitionException&lt;/code>导致应用启动失败&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>&lt;strong>错误信息：&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>Annotation-specified bean name &amp;#39;personDubboConsumerService&amp;#39; for bean class
[cn.com.hellowood.dubboclient.dubbo.PersonDubboConsumerService]
 conflicts with existing, non-compatible bean definition of same name and class
 [cn.com.hellowood.dubbo.PersonDubboConsumerService]
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这是因为在应用中使用到了多个该类的对象，而该类的对象通过注解的方式注入到应用中，在注入的过程中因为对象的名称重复导致了该异常
&lt;strong>通过指定注入对象的名称可以解决这个问题&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>原来的代码&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>@Component
public class PersonDubboConsumerService {

 @Reference(version = &amp;#34;1.0.0&amp;#34;)
 PersonDubboService service;

 public void sayHello() {
 String name = &amp;#34;哈哈哈哈&amp;#34;;
 Person person = service.sayHello(name);
 }
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>修改后（&lt;strong>Component注解加上名称就可以，要和另一个bean的名称不同&lt;/strong>）&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>@Component(&amp;#34;personConsumerService&amp;#34;)
public class PersonDubboConsumerService {

 @Reference(version = &amp;#34;1.0.0&amp;#34;)
 PersonDubboService service;

 public void sayHello() {
 String name = &amp;#34;哈哈哈哈&amp;#34;;
 Person person = service.sayHello(name);
 }
}
&lt;/code>&lt;/pre>&lt;hr>
&lt;ul>
&lt;li>异常信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [cn.com.hellowood.DubboClientApplication]; nested exception is org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name &amp;#39;personDubboConsumerService&amp;#39; for bean class [cn.com.hellowood.dubboclient.dubbo.PersonDubboConsumerService] conflicts with existing, non-compatible bean definition of same name and class [cn.com.hellowood.dubbo.PersonDubboConsumerService]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at cn.com.hellowood.DubboClientApplication.main(DubboClientApplication.java:14) [classes/:na]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name &amp;#39;personDubboConsumerService&amp;#39; for bean class [cn.com.hellowood.dubboclient.dubbo.PersonDubboConsumerService] conflicts with existing, non-compatible bean definition of same name and class [cn.com.hellowood.dubbo.PersonDubboConsumerService]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.checkCandidate(ClassPathBeanDefinitionScanner.java:345) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:283) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:135) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:287) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> ... 13 common frames omitted
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SpringBoot中配置使用Druid数据库连接池</title><link>https://blog.hellowood.dev/posts/springboot%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link><pubDate>Mon, 01 Jan 2018 00:52:18 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid><description>&lt;blockquote>
&lt;p>Druid 是阿里巴巴开源的Java数据库连接池插件，Druid能够提供强大的监控和扩展功能&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置使用druid数据库连接池">配置使用Druid数据库连接池&lt;/h2>
&lt;h3 id="添加依赖">添加依赖&lt;/h3>
&lt;ul>
&lt;li>Gradle&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>compile(&amp;#39;com.alibaba:druid-spring-boot-starter:${version}&amp;#39;)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Maven&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="配置数据库连接">配置数据库连接&lt;/h3>
&lt;blockquote>
&lt;p>数据库配置和默认配置基本一样，按照正常配置就可以，具体可以参考&lt;a href="https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/README.md">https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/README.md&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>JDBC 配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.datasource.druid.url= # 或spring.datasource.url=
spring.datasource.druid.username= # 或spring.datasource.username=
spring.datasource.druid.password= # 或spring.datasource.password=
spring.datasource.druid.driver-class-name= #或 spring.datasource.driver-class-name=
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>连接池配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>spring.datasource.druid.initial-size=
spring.datasource.druid.max-active=
spring.datasource.druid.min-idle=
spring.datasource.druid.max-wait=
spring.datasource.druid.pool-prepared-statements=
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=
spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.validation-query=
spring.datasource.druid.validation-query-timeout=
spring.datasource.druid.test-on-borrow=
spring.datasource.druid.test-on-return=
spring.datasource.druid.test-while-idle=
spring.datasource.druid.time-between-eviction-runs-millis=
spring.datasource.druid.min-evictable-idle-time-millis=
spring.datasource.druid.max-evictable-idle-time-millis=
spring.datasource.druid.filters= #配置多个英文逗号分隔
....//more
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>监控配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
spring.datasource.druid.web-stat-filter.enabled= #是否启用StatFilter默认值true
spring.datasource.druid.web-stat-filter.url-pattern=
spring.datasource.druid.web-stat-filter.exclusions=
spring.datasource.druid.web-stat-filter.session-stat-enable=
spring.datasource.druid.web-stat-filter.session-stat-max-count=
spring.datasource.druid.web-stat-filter.principal-session-name=
spring.datasource.druid.web-stat-filter.principal-cookie-name=
spring.datasource.druid.web-stat-filter.profile-enable=

# StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
spring.datasource.druid.stat-view-servlet.enabled= #是否启用StatViewServlet默认值true
spring.datasource.druid.stat-view-servlet.url-pattern=
spring.datasource.druid.stat-view-servlet.reset-enable=
spring.datasource.druid.stat-view-servlet.login-username=
spring.datasource.druid.stat-view-servlet.login-password=
spring.datasource.druid.stat-view-servlet.allow=
spring.datasource.druid.stat-view-servlet.deny=

# Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
spring.datasource.druid.aop-patterns= # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
# 如果spring.datasource.druid.aop-patterns要代理的类没有定义interface请设置spring.aop.proxy-target-class=true
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>配置好了之后启动应用就可以正常使用了，查看统计信息可以访问 http://localhost:8080/druid/index.html&lt;/p></description></item><item><title>SpringBoot项目生成War包</title><link>https://blog.hellowood.dev/posts/springboot%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90war%E5%8C%85/</link><pubDate>Mon, 01 Jan 2018 00:50:49 +0800</pubDate><guid>https://blog.hellowood.dev/posts/springboot%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90war%E5%8C%85/</guid><description>&lt;blockquote>
&lt;p>Spring Boot 项目默认生成Jar包，如果想发布到Tomcat还需要生成War包才能运行，SpringBoot官方文档中已经阐述了具体的操作方法，可以参考：&lt;a href="http://docs.spring.io/spring-boot/docs/2.0.0.M3/reference/htmlsingle/#howto-create-a-deployable-war-file">howto-create-a-deployable-war-file&lt;/a>；
以下使用Gradle作为Build工具&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-向buildgradle文件添加依赖">1. 向build.gradle文件添加依赖&lt;/h2>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>buildscript {
 ext {
 springBootVersion = &amp;#39;1.5.4.RELEASE&amp;#39;
 }
 repositories {
 maven { url &amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39; }
 }
 dependencies {
 classpath(&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;#34;)
 }
}

apply plugin: &amp;#39;java&amp;#39;
apply plugin: &amp;#39;war&amp;#39; // 生成war包
apply plugin: &amp;#39;eclipse&amp;#39;
apply plugin: &amp;#39;org.springframework.boot&amp;#39;

version = &amp;#39;&amp;#39;
sourceCompatibility = 1.8

repositories {
 maven { url &amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39; }
}

dependencies {
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-data-redis&amp;#39;)
 compile(&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-aop&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-actuator&amp;#39;)
 runtime(&amp;#39;com.h2database:h2&amp;#39;)
 runtime(&amp;#39;mysql:mysql-connector-java&amp;#39;)
 testCompile(&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;)

 // 生成war包
 providedRuntime (&amp;#39;org.springframework.boot:spring-boot-starter-tomcat&amp;#39;)
}
&lt;/code>&lt;/pre>&lt;h2 id="2-修改applicationjava文件">2. 修改Application.java文件&lt;/h2>
&lt;ul>
&lt;li>Application.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>@SpringBootApplication
public class Application extends SpringBootServletInitializer {

 public static void main(String[] args) {
 SpringApplication.run(Application.class, args);
 }

 @Override
 protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
 return application.sources(Application.class);
 }
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>也可以单独写在另一个类中，效果是一样的&lt;/p></description></item><item><title>使用Gradle整合Flyway进行数据库迁移</title><link>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8gradle%E6%95%B4%E5%90%88flyway%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</link><pubDate>Mon, 01 Jan 2018 00:49:34 +0800</pubDate><guid>https://blog.hellowood.dev/posts/%E4%BD%BF%E7%94%A8gradle%E6%95%B4%E5%90%88flyway%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</guid><description>&lt;blockquote>
&lt;p>使用Flyway进行数据库迁移可以极大的减少开发过程中对数据库版本的操作，使用Gradle整合Flyway可以更好的和项目契合&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置buildgradle文件">配置build.gradle文件&lt;/h2>
&lt;pre tabindex="0">&lt;code>apply plugin: &amp;#39;org.flywaydb.flyway&amp;#39;

buildscript {
 repositories {
 mavenCentral()
 }

 dependencies {
 classpath(group: &amp;#39;org.flywaydb&amp;#39;, name: &amp;#39;flyway-gradle-plugin&amp;#39;, version: &amp;#34;4.0.3&amp;#34;)
 classpath(group: &amp;#39;mysql&amp;#39;, name: &amp;#39;mysql-connector-java&amp;#39;, version: &amp;#34;5.1.41&amp;#34;)
 }
}

flyway {
 url = &amp;#39;jdbc:mysql://localhost:3306/miniprograme?useSSL=false&amp;#39;
 locations = [&amp;#39;filesystem:db/migration&amp;#39;]
 user = &amp;#39;root&amp;#39;
 password = &amp;#39;123456&amp;#39;
 schemas = [&amp;#39;flywaydb&amp;#39;]
}
&lt;/code>&lt;/pre>&lt;p>##使用Flyway进行数据库管理&lt;/p>
&lt;ul>
&lt;li>删除数据库所有表&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle flywayClean
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>迁移数据库&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle flywayMigrate
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>校验新版本文件是否有冲突&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle flywayValidate
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>查看数据库状态&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle flywayInfo
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>修复数据库（删除失败的版本，修复checksum值）&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle flywayRepair
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>设置某一版本为基础版本，该版本及之前的不会再被执行&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>gradle flywayBaseline
&lt;/code>&lt;/pre></description></item><item><title>MyBatis 中使用 Association 嵌套查询</title><link>https://blog.hellowood.dev/posts/mybatis-%E4%B8%AD%E4%BD%BF%E7%94%A8-association-%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</link><pubDate>Mon, 01 Jan 2018 00:48:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/mybatis-%E4%B8%AD%E4%BD%BF%E7%94%A8-association-%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</guid><description>&lt;blockquote>
&lt;p>当使用 MyBatis 进行查询的时候如果一个 JavaBean 中包含另一个 JavaBean 或者 Collection 时，可以通过 MyBatis 的嵌套查询来获取需要的结果;
以下以用户登录时的用户、角色和菜单直接的关系为例使用嵌套查询&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="javabean">JavaBean&lt;/h2>
&lt;ul>
&lt;li>UserModel&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>public class UserModel {
 private Integer id;
 private String username;
 private String password;
 private Boolean enabled;
 private Boolean locked;
 private Boolean expired;
 private RoleModel role;
 private List&amp;lt;MenuModel&amp;gt; menus;

 ···
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>RoleModel&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>public class RoleModel {
 private Integer id;
 private String name;
 private Boolean isActive;
 private String description;
 private Date lastUpdateTime;

 ···
}
&lt;/code>&lt;/pre>&lt;h2 id="表">表&lt;/h2>
&lt;ul>
&lt;li>User&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE TABLE user (
 id INT AUTO_INCREMENT PRIMARY KEY,
 username VARCHAR(45) NOT NULL,
 password VARCHAR(45) NOT NULL,
 enabled BOOLEAN NOT NULL DEFAULT TRUE,
 expired BOOLEAN NOT NULL DEFAULT TRUE,
 locked BOOLEAN NOT NULL DEFAULT TRUE,
 last_update_time TIMESTAMP NOT NULL DEFAULT current_timestamp ON UPDATE current_timestamp,
 comment VARCHAR(100)
);

INSERT INTO user (username, password, enabled, expired, locked, last_update_time)
VALUES (&amp;#39;admin&amp;#39;, &amp;#39;admin&amp;#39;, TRUE, FALSE, FALSE, current_timestamp);
INSERT INTO user (username, password, enabled, expired, locked, last_update_time)
VALUES (&amp;#39;user&amp;#39;, &amp;#39;password&amp;#39;, TRUE, FALSE, FALSE, current_timestamp);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Role&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE TABLE role (
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 name VARCHAR(50) NOT NULL UNIQUE,
 description VARCHAR(100),
 is_active BOOLEAN NOT NULL DEFAULT TRUE,
 last_update_time TIMESTAMP DEFAULT current_timestamp ON UPDATE current_timestamp
);

INSERT INTO role (name, description, is_active, last_update_time)
VALUES (&amp;#39;ROLE_ADMIN&amp;#39;, &amp;#39;Administrator&amp;#39;, TRUE, current_timestamp);
INSERT INTO role (name, description, is_active, last_update_time)
VALUES (&amp;#39;ROLE_USER&amp;#39;, &amp;#39;User&amp;#39;, TRUE, current_timestamp);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>UserRoleXref&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE TABLE user_role_xref (
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 user_id INT NOT NULL,
 role_id INT NOT NULL,
 last_update_time TIMESTAMP NOT NULL DEFAULT current_timestamp ON UPDATE current_timestamp,
 CONSTRAINT FOREIGN KEY fK_user_role_xref_user_id_user_id (user_id) REFERENCES user (id),
 CONSTRAINT FOREIGN KEY fk_user_role_xref_role_id_role_id (role_id) REFERENCES role (id)
);

INSERT INTO user_role_xref (user_id, role_id, last_update_time) VALUES (1, 1, CURRENT_TIMESTAMP);
INSERT INTO user_role_xref (user_id, role_id, last_update_time) VALUES (2, 2, CURRENT_TIMESTAMP);
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="一个查询调用另一个查询实现的嵌套">一个查询调用另一个查询实现的嵌套&lt;/h2>
&lt;pre tabindex="0">&lt;code> &amp;lt;resultMap id=&amp;#34;BaseUserModelResultMap&amp;#34; type=&amp;#34;cn.com.hellowood.springsecurity.model.UserModel&amp;#34;&amp;gt;
 &amp;lt;id column=&amp;#34;id&amp;#34; property=&amp;#34;id&amp;#34; javaType=&amp;#34;java.lang.Integer&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;&amp;gt;&amp;lt;/id&amp;gt;
 &amp;lt;result column=&amp;#34;username&amp;#34; property=&amp;#34;username&amp;#34; javaType=&amp;#34;java.lang.String&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;password&amp;#34; property=&amp;#34;password&amp;#34; javaType=&amp;#34;java.lang.String&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;enabled&amp;#34; property=&amp;#34;enabled&amp;#34; javaType=&amp;#34;java.lang.Boolean&amp;#34; jdbcType=&amp;#34;BOOLEAN&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;expired&amp;#34; property=&amp;#34;expired&amp;#34; javaType=&amp;#34;java.lang.Boolean&amp;#34; jdbcType=&amp;#34;BOOLEAN&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;locked&amp;#34; property=&amp;#34;locked&amp;#34; javaType=&amp;#34;java.lang.Boolean&amp;#34; jdbcType=&amp;#34;BOOLEAN&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;association property=&amp;#34;role&amp;#34; javaType=&amp;#34;cn.com.hellowood.springsecurity.model.RoleModel&amp;#34;
 column=&amp;#34;id&amp;#34; select=&amp;#34;getRoleByUserId&amp;#34;&amp;gt;
 &amp;lt;/association&amp;gt;
 &amp;lt;/resultMap&amp;gt;

 &amp;lt;resultMap id=&amp;#34;BaseRoleResultMap&amp;#34; type=&amp;#34;cn.com.hellowood.springsecurity.model.RoleModel&amp;#34;&amp;gt;
 &amp;lt;id column=&amp;#34;id&amp;#34; property=&amp;#34;id&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;name&amp;#34; property=&amp;#34;name&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;is_active&amp;#34; property=&amp;#34;isActive&amp;#34; jdbcType=&amp;#34;BOOLEAN&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;description&amp;#34; property=&amp;#34;description&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;last_update_time&amp;#34; property=&amp;#34;lastUpdateTime&amp;#34; jdbcType=&amp;#34;TIMESTAMP&amp;#34;/&amp;gt;
 &amp;lt;/resultMap&amp;gt;

 &amp;lt;select id=&amp;#34;getAllUsers&amp;#34; resultMap=&amp;#34;BaseUserModelResultMap&amp;#34;&amp;gt;
 SELECT
 id,
 username,
 password,
 enabled,
 expired,
 locked
 FROM user
 &amp;lt;/select&amp;gt;

 &amp;lt;select id=&amp;#34;getRoleByUserId&amp;#34; parameterType=&amp;#34;java.lang.Integer&amp;#34;
 resultType=&amp;#34;cn.com.hellowood.springsecurity.model.RoleModel&amp;#34;&amp;gt;
 SELECT
 r.id,
 r.name,
 r.is_active,
 r.description,
 r.last_update_time
 FROM role r
 LEFT JOIN user_role_xref urx
 ON r.id = urx.role_id
 WHERE user_id = #{userId, jdbcType=INTEGER}
 &amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>此时，调用 &lt;code>getAllUsers()&lt;/code> 方法就可以通过嵌套查询同时查找 Role 属性了&lt;/p></description></item><item><title>MyBatis 中使用 Collection 嵌套查询</title><link>https://blog.hellowood.dev/posts/mybatis-%E4%B8%AD%E4%BD%BF%E7%94%A8-collection-%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</link><pubDate>Mon, 01 Jan 2018 00:47:05 +0800</pubDate><guid>https://blog.hellowood.dev/posts/mybatis-%E4%B8%AD%E4%BD%BF%E7%94%A8-collection-%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</guid><description>&lt;blockquote>
&lt;p>当使用 MyBatis 进行查询的时候如果一个 JavaBean 中包含另一个 JavaBean 或者 Collection 时，可以通过 MyBatis 的嵌套查询来获取需要的结果;
以下以用户登录时的角色和菜单直接的关系为例使用嵌套查询&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="javabean">JavaBean&lt;/h2>
&lt;ul>
&lt;li>RoleModel&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>public class RoleModel {
 private Integer id;
 private String name;
 private Boolean isActive;
 private String description;
 private Date lastUpdateTime;
 private List&amp;lt;MenuModel&amp;gt; menus;
 ···
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>MenuModel&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>public class MenuModel {
 private Integer id;
 private String value;
 private String displayValue;
 private String url;
 private Integer category;
 private String description;
 private Boolean isActive;
 private Date lastUpdateTime;

 ···
}
&lt;/code>&lt;/pre>&lt;h2 id="表">表&lt;/h2>
&lt;ul>
&lt;li>Role&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE TABLE role (
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 name VARCHAR(50) NOT NULL UNIQUE,
 description VARCHAR(100),
 is_active BOOLEAN NOT NULL DEFAULT TRUE,
 last_update_time TIMESTAMP DEFAULT current_timestamp ON UPDATE current_timestamp
);

INSERT INTO role (name, description, is_active, last_update_time)
VALUES (&amp;#39;ROLE_ADMIN&amp;#39;, &amp;#39;Administrator&amp;#39;, TRUE, current_timestamp);
INSERT INTO role (name, description, is_active, last_update_time)
VALUES (&amp;#39;ROLE_USER&amp;#39;, &amp;#39;User&amp;#39;, TRUE, current_timestamp);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Menu&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE TABLE menu (
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 value VARCHAR(100) NOT NULL,
 display_value VARCHAR(100) NOT NULL,
 url VARCHAR(100) NOT NULL,
 category INT,
 description VARCHAR(100),
 is_active BOOLEAN NOT NULL DEFAULT TRUE,
 last_update_time TIMESTAMP DEFAULT current_timestamp ON UPDATE current_timestamp
);

INSERT INTO menu (value, display_value, url, description, is_active, last_update_time)
VALUES (&amp;#39;/admin/dashboard&amp;#39;, &amp;#39;Admin Dashboard&amp;#39;, &amp;#39;/admin/dashboard&amp;#39;, &amp;#39;Admin Dashboard&amp;#39;, TRUE, current_timestamp);

INSERT INTO menu (value, display_value, url, description, is_active, last_update_time)
VALUES (&amp;#39;/admin/profile&amp;#39;, &amp;#39;Admin Profile&amp;#39;, &amp;#39;/admin/profile&amp;#39;, &amp;#39;Admin Profile&amp;#39;, TRUE, current_timestamp);


INSERT INTO menu (value, display_value, url, description, is_active, last_update_time)
VALUES (&amp;#39;/user/dashboard&amp;#39;, &amp;#39;User Dashboard&amp;#39;, &amp;#39;/user/dashboard&amp;#39;, &amp;#39;User Dashboard&amp;#39;, TRUE, current_timestamp);

INSERT INTO menu (value, display_value, url, description, is_active, last_update_time)
VALUES (&amp;#39;/user/profile&amp;#39;, &amp;#39;User Profile&amp;#39;, &amp;#39;/user/profile&amp;#39;, &amp;#39;User Profile&amp;#39;, TRUE, current_timestamp);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>RoleMenuXref&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE TABLE role_menu_xref (
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 role_id INT NOT NULL,
 menu_id INT NOT NULL,
 last_update_time TIMESTAMP DEFAULT current_timestamp ON UPDATE current_timestamp,
 CONSTRAINT FOREIGN KEY fk_role_menu_xref_role_id (role_id) REFERENCES role (id),
 CONSTRAINT FOREIGN KEY fk_role_menu_xref_menu_id(menu_id) REFERENCES menu (id),
 CONSTRAINT UNIQUE (role_id, menu_id)
);

INSERT role_menu_xref (role_id, menu_id, last_update_time)
VALUES (1, 1, current_timestamp);

INSERT role_menu_xref (role_id, menu_id, last_update_time)
VALUES (1, 2, current_timestamp);

INSERT role_menu_xref (role_id, menu_id, last_update_time)
VALUES (2, 3, current_timestamp);

INSERT role_menu_xref (role_id, menu_id, last_update_time)
VALUES (2, 4, current_timestamp);
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="collection-一个查询调用另一个查询实现的嵌套">Collection 一个查询调用另一个查询实现的嵌套&lt;/h2>
&lt;pre tabindex="0">&lt;code> &amp;lt;resultMap id=&amp;#34;BaseRoleResultMap&amp;#34; type=&amp;#34;cn.com.hellowood.springsecurity.model.RoleModel&amp;#34;&amp;gt;
 &amp;lt;id column=&amp;#34;id&amp;#34; property=&amp;#34;id&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;name&amp;#34; property=&amp;#34;name&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;is_active&amp;#34; property=&amp;#34;isActive&amp;#34; jdbcType=&amp;#34;BOOLEAN&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;description&amp;#34; property=&amp;#34;description&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;last_update_time&amp;#34; property=&amp;#34;lastUpdateTime&amp;#34; jdbcType=&amp;#34;TIMESTAMP&amp;#34;/&amp;gt;
 &amp;lt;collection property=&amp;#34;menus&amp;#34; ofType=&amp;#34;cn.com.hellowood.springsecurity.model.menus&amp;#34;
 javaType=&amp;#34;java.util.ArrayList&amp;#34; select=&amp;#34;getMenus&amp;#34;
 column=&amp;#34;id&amp;#34;&amp;gt;
 &amp;lt;/collection&amp;gt;
 &amp;lt;/resultMap&amp;gt;


 &amp;lt;resultMap id=&amp;#34;BaseMenuResultMap&amp;#34; type=&amp;#34;cn.com.hellowood.springsecurity.model.MenuModel&amp;#34;&amp;gt;
 &amp;lt;id column=&amp;#34;id&amp;#34; property=&amp;#34;id&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;value&amp;#34; property=&amp;#34;value&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;display_value&amp;#34; property=&amp;#34;displayValue&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;url&amp;#34; property=&amp;#34;url&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;category&amp;#34; property=&amp;#34;category&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;description&amp;#34; property=&amp;#34;description&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;is_active&amp;#34; property=&amp;#34;isActive&amp;#34; jdbcType=&amp;#34;BIT&amp;#34;/&amp;gt;
 &amp;lt;result column=&amp;#34;last_update_time&amp;#34; property=&amp;#34;lastUpdateTime&amp;#34; jdbcType=&amp;#34;TIMESTAMP&amp;#34;/&amp;gt;
 &amp;lt;/resultMap&amp;gt;

 &amp;lt;select id=&amp;#34;getRoles&amp;#34; parameterType=&amp;#34;java.lang.Integer&amp;#34; resultMap=&amp;#34;BaseRoleResultMap&amp;#34;&amp;gt;
 SELECT
 id,
 name,
 is_active,
 description,
 last_update_time
 FROM role
 &amp;lt;/select&amp;gt;

 &amp;lt;select id=&amp;#34;getMenus&amp;#34; parameterType=&amp;#34;java.lang.Integer&amp;#34; resultMap=&amp;#34;BaseMenuResultMap&amp;#34;&amp;gt;
 SELECT
 m.id,
 m.value,
 m.display_value,
 m.url,
 m.category,
 m.description,
 m.is_active,
 m.last_update_time
 FROM menu m
 LEFT JOIN
 role_menu_xref rmx
 ON m.id = rmx.menu_id
 WHERE role_id = #{roleId, jdbcType=INTEGER}
 &amp;lt;/select&amp;gt;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>此时，调用 &lt;code>getRoles()&lt;/code> 方法就可以通过嵌套查询同时查找 Role 属性了&lt;/p></description></item><item><title>在使用 Spring Security 的 Remember Me 记住密码功能时遇到的问题和解决方法</title><link>https://blog.hellowood.dev/posts/spring-security-%E7%9A%84-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 2018 00:37:35 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-security-%E7%9A%84-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>在使用 Spring Security 的 Remember Me 记住密码功能时遇到的问题和解决方法&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="javalangillegalstateexception-userdetailsservice-is-required">java.lang.IllegalStateException: UserDetailsService is required.&lt;/h2>
&lt;ul>
&lt;li>配置信息(&lt;code>Security.java&lt;/code>)&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 @Autowired
 public void configureGlobal(AuthenticationManagerBuilder auth) {
 auth.authenticationProvider(customAuthenticationProvider);
 }

 //...

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 http.authorizeRequests()
 .antMatchers(ROOT_URL, LOGIN_URL, LOGIN_ERROR_URL, CSS_WILDCARD_URL, INDEX_URL)
 .permitAll();

 http.authorizeRequests()
 .anyRequest()
 .authenticated();

 http.authorizeRequests()
 .and()
 .rememberMe()
 .rememberMeServices(rememberMeServices())
 .key(INTERNAL_SECRET_KEY);

 // ...
 }

 @Bean
 public RememberMeServices rememberMeServices() {
 JdbcTokenRepositoryImpl rememberMeTokenRepository = new JdbcTokenRepositoryImpl();
 rememberMeTokenRepository.setDataSource(dataSource);

 PersistentTokenBasedRememberMeServices rememberMeServices =
 new PersistentTokenBasedRememberMeServices(INTERNAL_SECRET_KEY, userDetailsService(), rememberMeTokenRepository);

 rememberMeServices.setParameter(REMEMBER_ME);
 return rememberMeServices;
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>错误信息如下，发生该错误的原因是因为没有提供 UserDetailsService 的实例而出错，虽然调用了 &lt;code>userDetailsService()&lt;/code> 方法，
但实际上并没有起作用，所以需要提供自定义的 &lt;code>UserDetailsService&lt;/code> 实例注入&lt;/p></description></item><item><title>Spring Security 中实现 Remember Me 记住密码功能</title><link>https://blog.hellowood.dev/posts/spring-security-%E4%B8%AD%E5%AE%9E%E7%8E%B0-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 01 Jan 2018 00:35:56 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-security-%E4%B8%AD%E5%AE%9E%E7%8E%B0-remember-me-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%8A%9F%E8%83%BD/</guid><description>&lt;blockquote>
&lt;p>在 Spring Boot 应用中使用 Spring Security 并实现 Remember Me 记住密码功能，实现自动登录&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>前置条件：在 Spring Boot 应用中已正确配置 Spring Security&lt;/p>
&lt;/blockquote>
&lt;p>##在页面添加记住密码的复选框&lt;/p>
&lt;pre tabindex="0">&lt;code> &amp;lt;input type=&amp;#34;checkbox&amp;#34; name=&amp;#34;remember-me&amp;#34;/&amp;gt; Remember me
&lt;/code>&lt;/pre>&lt;p>##在 Security Config 配置文件中启用记住密码功能(验证信息存放在内存中)&lt;/p>
&lt;ul>
&lt;li>SecurityConfig&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.springsecurity.security.CustomAuthenticationProvider;
 import cn.com.hellowood.springsecurity.security.CustomUserDetailsService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdater;

 @EnableWebSecurity
 public class SecurityConfig extends WebSecurityConfigurerAdapter {

 @Autowired
 private CustomAuthenticationProvider customAuthenticationProvider;

 @Autowired
 private CustomUserDetailsService userDetailsService;

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 // 任何用户都可以访问以下URI
 http.authorizeRequests()
 .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/login&amp;#34;, &amp;#34;/login-error&amp;#34;, &amp;#34;/css/**&amp;#34;, &amp;#34;/index&amp;#34;)
 .permitAll();

 // 其他URI均需要权限校验
 http.authorizeRequests()
 .anyRequest()
 .authenticated();

 // 只需要以下配置即可启用记住密码
 http.authorizeRequests()
 .and()
 .rememberMe();

 http.formLogin()
 .loginPage(&amp;#34;/login&amp;#34;)
 .usernameParameter(&amp;#34;username&amp;#34;)
 .passwordParameter(&amp;#34;password&amp;#34;)
 .successForwardUrl(&amp;#34;/user/index&amp;#34;)
 .failureUrl(&amp;#34;/login-error&amp;#34;);
 }

 @Autowired
 public void configureGlobal(AuthenticationManagerBuilder auth) {
 // 为了使用用户名密码校验实现了AuthenticationProvider和UserDetailsService类
 auth.authenticationProvider(customAuthenticationProvider);
 try {
 auth.userDetailsService(userDetailsService);
 } catch (Exception e) {
 e.printStackTrace();
 }
 }
 }
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>这样就可以使用记住密码了，选择记住密码登录后会在本地保存 Cookie，下次登录的时候通过 Cookie 校验用户信息；用户登录的信息保存在内存中，当内存断电或被清除之后该 Cookie 即使在有效期内也无法登录。&lt;/p></description></item><item><title>Spring Boot 中集成 Spring Security</title><link>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E9%9B%86%E6%88%90-spring-security/</link><pubDate>Mon, 01 Jan 2018 00:09:27 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E4%B8%AD%E9%9B%86%E6%88%90-spring-security/</guid><description>&lt;blockquote>
&lt;p>Spring Boot 集成 Spring Security的简单应用，从数据库读取数据校验用户，页面使用Thymeleaf模板&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="项目地址-httpsgithubcomhelloworldespringsecurityhttpsgithubcomhelloworldespringsecurity">项目地址 &lt;a href="https://github.com/helloworlde/SpringSecurity">https://github.com/helloworlde/SpringSecurity&lt;/a>&lt;/h3>
&lt;h3 id="演示-httpprojecthellowoodcomcnsecurityhttpprojecthellowoodcomcnsecurity">演示 &lt;a href="http://project.hellowood.com.cn/Security/">http://project.hellowood.com.cn/Security/&lt;/a>&lt;/h3>
&lt;h2 id="创建-spring-boot-应用">创建 Spring Boot 应用&lt;/h2>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;pre tabindex="0">&lt;code> compile(&amp;#39;org.springframework.boot:spring-boot-starter-security&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;)
 compile(&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0&amp;#39;)
 compile(&amp;#39;org.springframework.boot:spring-boot-starter-thymeleaf&amp;#39;)
 runtime(&amp;#39;mysql:mysql-connector-java&amp;#39;)
 runtime(&amp;#39;org.springframework.boot:spring-boot-starter-tomcat&amp;#39;)
 testCompile(&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;)
 testCompile(&amp;#39;org.springframework.security:spring-security-test&amp;#39;)
&lt;/code>&lt;/pre>&lt;h2 id="创建用户表并插入数据">创建用户表并插入数据&lt;/h2>
&lt;pre tabindex="0">&lt;code> CREATE TABLE user (
 id INT AUTO_INCREMENT PRIMARY KEY,
 username VARCHAR(45) NOT NULL,
 password VARCHAR(45) NOT NULL,
 enabled INT NOT NULL DEFAULT 1
 );


 INSERT INTO user (username, password, enabled) VALUES (&amp;#39;username&amp;#39;, &amp;#39;password&amp;#39;, TRUE);
&lt;/code>&lt;/pre>&lt;h2 id="添加配置信息">添加配置信息&lt;/h2>
&lt;pre tabindex="0">&lt;code> spring.datasource.url=jdbc:mysql://localhost:3306/security?useSSL=false
 spring.datasource.username=security
 spring.datasource.password=security
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 mybatis.type-aliases-package=cn.com.hellowood.springsecurity.mapper
 mybatis.mapper-locations=mappers/**Mapper.xml
&lt;/code>&lt;/pre>&lt;h2 id="添加-security-配置文件">添加 Security 配置文件&lt;/h2>
&lt;pre tabindex="0">&lt;code>
 import cn.com.hellowood.springsecurity.security.CustomAuthenticationProvider;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

 @EnableWebSecurity
 public class SecurityConfig extends WebSecurityConfigurerAdapter {

 @Autowired
 private CustomAuthenticationProvider customAuthenticationProvider;

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 // 所有请求均可访问
 http.authorizeRequests()
 .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/login&amp;#34;, &amp;#34;/login-error&amp;#34;, &amp;#34;/css/**&amp;#34;, &amp;#34;/index&amp;#34;)
 .permitAll();

 // 其余所有请求均需要权限
 http.authorizeRequests()
 .anyRequest()
 .authenticated();

 // 配置登录页面的表单 action 必须是 &amp;#39;/login&amp;#39;, 用户名和密码的参数名必须是 &amp;#39;username&amp;#39; 和 &amp;#39;password&amp;#39;，
 // 登录失败的 url 是 &amp;#39;/login-error&amp;#39;
 http.formLogin()
 .loginPage(&amp;#34;/login&amp;#34;)
 .loginProcessingUrl(&amp;#34;/login&amp;#34;)
 .usernameParameter(&amp;#34;username&amp;#34;)
 .passwordParameter(&amp;#34;password&amp;#34;)
 .failureUrl(&amp;#34;/login-error&amp;#34;);
 }

 /**
 * Configure global.
 *
 * @param auth the auth
 * @throws Exception the exception
 */
 @Autowired
 public void configureGlobal(AuthenticationManagerBuilder auth) {
 // 使用自定义的 Authentication Provider
 auth.authenticationProvider(customAuthenticationProvider);
 }
 }
&lt;/code>&lt;/pre>&lt;h2 id="添加自定义的-authentication-provider-类">添加自定义的 Authentication Provider 类&lt;/h2>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.springsecurity.model.UserModel;
 import cn.com.hellowood.springsecurity.service.UserService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.authentication.AccountExpiredException;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.authentication.BadCredentialsException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.stereotype.Component;

 import javax.servlet.http.HttpSession;
 import java.util.ArrayList;
 import java.util.List;

 @Component
 public class CustomAuthenticationProvider implements AuthenticationProvider {

 private final Logger logger = LoggerFactory.getLogger(getClass());

 @Autowired
 private HttpSession session;

 @Autowired
 private UserService userService;

 /**
 * Validate user info is correct form database
 *
 * @param authentication
 * @return
 * @throws AuthenticationException
 */
 @Override
 public Authentication authenticate(Authentication authentication) throws AuthenticationException {
 String username = authentication.getName();
 String password = authentication.getCredentials().toString();
 List&amp;lt;GrantedAuthority&amp;gt; grantedAuthorities = new ArrayList&amp;lt;&amp;gt;();

 // 检查用户名密码是否正确
 UserModel user = userService.loadUserByUsernameAndPassword(username, password);
 if (user == null) {
 logger.error(&amp;#34;{} login failed, username or password is wrong&amp;#34;, username);
 throw new BadCredentialsException(&amp;#34;Username or password is not correct&amp;#34;);
 } else if (!user.getEnabled()) {
 throw new AccountExpiredException(&amp;#34;Account had expired&amp;#34;);
 }

 // 用户信息有效时将其放入 session 中
 session.setAttribute(&amp;#34;user&amp;#34;, user);
 Authentication auth = new UsernamePasswordAuthenticationToken(username, password, grantedAuthorities);
 return auth;
 }


 @Override
 public boolean supports(Class&amp;lt;?&amp;gt; authentication) {
 return authentication.equals(UsernamePasswordAuthenticationToken.class);
 }

 }
&lt;/code>&lt;/pre>&lt;h2 id="添加校验用户信息所需要的类">添加校验用户信息所需要的类&lt;/h2>
&lt;ul>
&lt;li>添加 UserModel.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 public class UserModel {

 private Integer id;

 private String username;

 private String password;

 private Boolean enabled;

 /**
 * Instantiates a new User model.
 */
 public UserModel() {
 }

 /**
 * Instantiates a new User model.
 *
 * @param id the id
 * @param username the username
 * @param password the password
 * @param enabled the enabled
 */
 public UserModel(Integer id, String username, String password, Boolean enabled) {
 this.id = id;
 this.username = username;
 this.password = password;
 this.enabled = enabled;
 }

 /**
 * Gets id.
 *
 * @return the id
 */
 public Integer getId() {
 return id;
 }

 /**
 * Sets id.
 *
 * @param id the id
 */
 public void setId(Integer id) {
 this.id = id;
 }

 /**
 * Gets username.
 *
 * @return the username
 */
 public String getUsername() {
 return username;
 }

 /**
 * Sets username.
 *
 * @param username the username
 */
 public void setUsername(String username) {
 this.username = username;
 }

 /**
 * Gets password.
 *
 * @return the password
 */
 public String getPassword() {
 return password;
 }

 /**
 * Sets password.
 *
 * @param password the password
 */
 public void setPassword(String password) {
 this.password = password;
 }

 /**
 * Gets enabled.
 *
 * @return the enabled
 */
 public Boolean getEnabled() {
 return enabled;
 }

 /**
 * Sets enabled.
 *
 * @param enabled the enabled
 */
 public void setEnabled(Boolean enabled) {
 this.enabled = enabled;
 }

 @Override
 public String toString() {
 return &amp;#34;UserModel{&amp;#34; +
 &amp;#34;id=&amp;#34; + id +
 &amp;#34;, username=&amp;#39;&amp;#34; + username + &amp;#39;\&amp;#39;&amp;#39; +
 &amp;#34;, password=&amp;#39;&amp;#34; + password + &amp;#39;\&amp;#39;&amp;#39; +
 &amp;#34;, enabled=&amp;#34; + enabled +
 &amp;#39;}&amp;#39;;
 }
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 UserService.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 import cn.com.hellowood.springsecurity.mapper.UserMapper;
 import cn.com.hellowood.springsecurity.model.UserModel;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;

 @Service(&amp;#34;userService&amp;#34;)
 public class UserService {

 @Autowired
 private UserMapper userMapper;

 /**
 * Load user by username and password user model.
 *
 * @param username the username
 * @param password the password
 * @return the user model
 */
 public UserModel loadUserByUsernameAndPassword(String username, String password) {
 return userMapper.getUserByUsernameAndPassword(username, password);
 }
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 UserMapper.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.springsecurity.model.UserModel;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;

 @Mapper
 public interface UserMapper {

 /**
 * Gets user by username and password.
 *
 * @param username the username
 * @param password the password
 * @return the user by username and password
 */
 UserModel getUserByUsernameAndPassword(@Param(&amp;#34;username&amp;#34;) String username,
 @Param(&amp;#34;password&amp;#34;) String password);
 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>添加 UserMapper.xml&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;
 &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34; &amp;gt;
 &amp;lt;mapper namespace=&amp;#34;cn.com.hellowood.springsecurity.mapper.UserMapper&amp;#34;&amp;gt;

 &amp;lt;resultMap id=&amp;#34;baseResultMap&amp;#34; type=&amp;#34;cn.com.hellowood.springsecurity.model.UserModel&amp;#34;&amp;gt;
 &amp;lt;id column=&amp;#34;id&amp;#34; property=&amp;#34;id&amp;#34; javaType=&amp;#34;java.lang.Integer&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;&amp;gt;&amp;lt;/id&amp;gt;
 &amp;lt;result column=&amp;#34;username&amp;#34; property=&amp;#34;username&amp;#34; javaType=&amp;#34;java.lang.String&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;password&amp;#34; property=&amp;#34;password&amp;#34; javaType=&amp;#34;java.lang.String&amp;#34; jdbcType=&amp;#34;VARCHAR&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;result column=&amp;#34;enabled&amp;#34; property=&amp;#34;enabled&amp;#34; javaType=&amp;#34;java.lang.Boolean&amp;#34; jdbcType=&amp;#34;INTEGER&amp;#34;&amp;gt;&amp;lt;/result&amp;gt;
 &amp;lt;/resultMap&amp;gt;

 &amp;lt;select id=&amp;#34;getUserByUsernameAndPassword&amp;#34; resultType=&amp;#34;cn.com.hellowood.springsecurity.model.UserModel&amp;#34;&amp;gt;
 SELECT
 id,
 username,
 password,
 enabled
 FROM user
 WHERE username = #{username, jdbcType=VARCHAR}
 AND password = #{password, jdbcType=VARCHAR}
 &amp;lt;/select&amp;gt;
 &amp;lt;/mapper&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="添加页面">添加页面&lt;/h2>
&lt;ul>
&lt;li>index.html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Spring Security&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; th:href=&amp;#34;@{/css/main.css}&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34; th:href=&amp;#34;@{/css/bootstrap.min.css}&amp;#34;/&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;form action=&amp;#34;#&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;gt;Hello Spring Security&amp;lt;/h2&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Anyone can access this page&amp;lt;/h5&amp;gt;
 &amp;lt;div th:if=&amp;#34;${session.user} != null&amp;#34;&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Your username is &amp;lt;span th:text=&amp;#34;${session.user.username}&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h5&amp;gt;
 &amp;lt;a href=&amp;#34;/user/index&amp;#34; th:href=&amp;#34;@{/user/index}&amp;#34; class=&amp;#34;btn btn-success btn-block&amp;#34;&amp;gt;To Security page&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div th:if=&amp;#34;${session.user} == null&amp;#34;&amp;gt;
 &amp;lt;a href=&amp;#34;/index&amp;#34; th:href=&amp;#34;@{/login}&amp;#34; class=&amp;#34;btn btn-primary btn-block&amp;#34;&amp;gt;To Login page&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;div th:fragment=&amp;#34;logout&amp;#34; class=&amp;#34;logout&amp;#34; th:if=&amp;#34;${session.user} != null&amp;#34;&amp;gt;
 &amp;lt;form action=&amp;#34;#&amp;#34; th:action=&amp;#34;@{/logout}&amp;#34; method=&amp;#34;post&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-warning btn-block&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;Log out&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>login.html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Login page&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; th:href=&amp;#34;@{/css/main.css}&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34; th:href=&amp;#34;@{/css/bootstrap.min.css}&amp;#34;/&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;form th:action=&amp;#34;@{/login}&amp;#34; method=&amp;#34;post&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;gt;Please sign in&amp;lt;/h2&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;label for=&amp;#34;username&amp;#34; class=&amp;#34;sr-only&amp;#34;&amp;gt;Username&amp;lt;/label&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;username&amp;#34; name=&amp;#34;username&amp;#34;
 th:class=&amp;#34;${loginError} ? &amp;#39;form-control is-invalid&amp;#39; : &amp;#39;form-control&amp;#39;&amp;#34; placeholder=&amp;#34;Username&amp;#34;
 required=&amp;#34;required&amp;#34;
 autofocus=&amp;#34;autofocus&amp;#34;/&amp;gt;
 &amp;lt;div class=&amp;#34;invalid-feedback&amp;#34; th:if=&amp;#34;${loginError}&amp;#34;&amp;gt;
 Wrong username or password
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div&amp;gt;
 &amp;lt;label for=&amp;#34;password&amp;#34; class=&amp;#34;sr-only&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; id=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Password&amp;#34;
 required=&amp;#34;required&amp;#34;/&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;btn btn-success btn-block&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;Sign in&amp;lt;/button&amp;gt;
 &amp;lt;a href=&amp;#34;/index&amp;#34; th:href=&amp;#34;@{/index}&amp;#34; class=&amp;#34;btn btn-primary btn-block&amp;#34;&amp;gt;Back to Home page&amp;lt;/a&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>user/index.html&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Spring Security&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; th:href=&amp;#34;@{/css/main.css}&amp;#34;/&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34; th:href=&amp;#34;@{/css/bootstrap.min.css}&amp;#34;/&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;form action=&amp;#34;#&amp;#34; class=&amp;#34;form-signin&amp;#34;&amp;gt;
 &amp;lt;h2 class=&amp;#34;form-signin-heading&amp;#34;&amp;gt;Hello Spring Security&amp;lt;/h2&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Only logged in user can access this page&amp;lt;/h5&amp;gt;
 &amp;lt;div th:if=&amp;#34;${session.user} != null&amp;#34;&amp;gt;
 &amp;lt;h5 class=&amp;#34;form-signin-heading content-adjust&amp;#34;&amp;gt;Logged user is &amp;lt;span th:text=&amp;#34;${session.user.username}&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h5&amp;gt;
 &amp;lt;a href=&amp;#34;/index&amp;#34; th:href=&amp;#34;@{/index}&amp;#34; class=&amp;#34;btn btn-primary btn-block&amp;#34;&amp;gt;Back to Home page&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;div th:substituteby=&amp;#34;index::logout&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="添加-controller">添加 Controller&lt;/h2>
&lt;pre tabindex="0">&lt;code> import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;

 @Controller
 public class MainController {

 /**
 * Root page.
 *
 * @return the index page url
 */
 @RequestMapping(&amp;#34;/&amp;#34;)
 public String root() {
 return &amp;#34;redirect:/index&amp;#34;;
 }

 /**
 * Index page.
 *
 * @return the index page url
 */
 @RequestMapping(&amp;#34;/index&amp;#34;)
 public String index() {
 return &amp;#34;index&amp;#34;;
 }

 /**
 * User index page.
 *
 * @return the user index page url
 */
 @RequestMapping(&amp;#34;/user/index&amp;#34;)
 public String userIndex() {
 return &amp;#34;user/index&amp;#34;;
 }

 /**
 * Login page.
 *
 * @return the login page url
 */
 @RequestMapping(&amp;#34;/login&amp;#34;)
 public String login() {
 return &amp;#34;login&amp;#34;;
 }

 /**
 * Login error page.
 *
 * @param model the model
 * @return the login error page url
 */
 @RequestMapping(&amp;#34;/login-error&amp;#34;)
 public String loginError(Model model) {
 model.addAttribute(&amp;#34;loginError&amp;#34;, true);
 return &amp;#34;login&amp;#34;;
 }

 }
&lt;/code>&lt;/pre>&lt;hr>
&lt;blockquote>
&lt;p>启动应用，访问&lt;a href="http://localhost:8080/user/index">http://localhost:8080/user/index&lt;/a>，此时没有登录，会被拦截并重定向到登录页面&lt;a href="http://localhost:8080/login">http://localhost:8080/login&lt;/a>，输入用户名 &lt;code>username&lt;/code> 和密码 &lt;code>password&lt;/code>，登录成功后再次访问&lt;a href="http://localhost:8080/user/index">http://localhost:8080/user/index&lt;/a>，此时该 url 可以正常访问，当输入错误的用户名或密码时会提示错误信息，说明 Spring Security 配置正确&lt;/p></description></item><item><title>Spring MVC 使用 Spring Session 实现 Session 共享-Redis</title><link>https://blog.hellowood.dev/posts/spring-mvc-%E4%BD%BF%E7%94%A8-spring-session-%E5%AE%9E%E7%8E%B0-session-%E5%85%B1%E4%BA%AB-redis/</link><pubDate>Mon, 01 Jan 2018 00:07:20 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-mvc-%E4%BD%BF%E7%94%A8-spring-session-%E5%AE%9E%E7%8E%B0-session-%E5%85%B1%E4%BA%AB-redis/</guid><description>&lt;blockquote>
&lt;p>使用Spring Session 通过 Redis 实现 Session 共享，用于多实例应用&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Spring Session 官方文档&lt;a href="https://docs.spring.io/spring-session/docs/2.0.0.M4/reference/html5/#introduction">https://docs.spring.io/spring-session/docs/2.0.0.M4/reference/html5/#introduction&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="session-共享的简单原理">Session 共享的简单原理&lt;/h2>
&lt;blockquote>
&lt;p>用户第一次访问应用时，应用会创建一个新的 Session，并且会将 Session 的 ID 作为 Cookie 缓存在浏览器，下一次访问时请求的头部中带着该 Cookie，应用通过获取的 Session ID 进行查找，如果该 Session 存在且有效，则继续该请求，如果 Cookie 无效或者 Session 无效，则会重新生成一个新的 Session&lt;/p>
&lt;p>在普通的 JavaEE 应用中，Session 信息放在内存中，当容器（如 Tomcat）关闭后，内存中的 Session 被销毁；重启后如果当前用户再去访问对应的是一个新的 Session ，在多实例中无法共享，一个用户只能访问指定的实例才能使用相同的 Session；&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Session 共享实现的原理是将原来内存中的 Session 放在一个需要共享 Session 的实例都可以访问到的位置，如数据库，Redis 中等，从而实现多实例 Session 共享&lt;/p>
&lt;p>实现共享后，只要浏览器的 Cookie 中的 Session ID 没有改变，多个实例中的任意一个被销毁不会影响用户访问&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h1 id="redis-方式实现">Redis 方式实现&lt;/h1>
&lt;blockquote>
&lt;p>将 Session 对象序列化存储到 Redis 中，多个实例访问时都会使用该 Session，Spring Session 会管理 Session 信息的管理，无需其他操作&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-添加依赖">1. 添加依赖&lt;/h2>
&lt;ul>
&lt;li>在 pom.xml 文件里面添加如下依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;2.9.0&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework.data&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-data-redis&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.8.7.RELEAS&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-session&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.3.1.RELEASE&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="2-添加配置">2. 添加配置&lt;/h2>
&lt;ul>
&lt;li>SpringConfig.xml 添加如下配置&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;!-- Spring Session共享 --&amp;gt;
 &amp;lt;bean class=&amp;#34;org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration&amp;#34;/&amp;gt;
 &amp;lt;bean class=&amp;#34;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&amp;#34;&amp;gt;
 &amp;lt;property name=&amp;#34;hostName&amp;#34; value=&amp;#34;localhost&amp;#34;/&amp;gt;
 &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;123456&amp;#34;/&amp;gt;
 &amp;lt;property name=&amp;#34;port&amp;#34; value=&amp;#34;6379&amp;#34;/&amp;gt;
 &amp;lt;property name=&amp;#34;database&amp;#34; value=&amp;#34;3&amp;#34;/&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="3-添加过滤器">3. 添加过滤器&lt;/h2>
&lt;ul>
&lt;li>在 web.xml 添加如下配置（过滤器）&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> &amp;lt;filter&amp;gt;
 &amp;lt;filter-name&amp;gt;springSessionRepositoryFilter&amp;lt;/filter-name&amp;gt;
 &amp;lt;filter-class&amp;gt;org.springframework.web.filter.DelegatingFilterProxy&amp;lt;/filter-class&amp;gt;
 &amp;lt;/filter&amp;gt;
 &amp;lt;filter-mapping&amp;gt;
 &amp;lt;filter-name&amp;gt;springSessionRepositoryFilter&amp;lt;/filter-name&amp;gt;
 &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
 &amp;lt;/filter-mapping&amp;gt;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>该过滤器必须是第一个过滤器，所有的请求经过该过滤器后执行后续操作&lt;/p></description></item><item><title>Gradle 使用-多项目构建</title><link>https://blog.hellowood.dev/posts/gradle-%E6%B7%BB%E5%8A%A0%E5%A4%9A%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E5%85%B6%E4%BB%96%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 2018 00:05:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gradle-%E6%B7%BB%E5%8A%A0%E5%A4%9A%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E5%85%B6%E4%BB%96%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h2 id="配置">配置&lt;/h2>
&lt;blockquote>
&lt;p>如该项目有三个模块，分别是&lt;code>Controller&lt;/code>, &lt;code>Service&lt;/code>, &lt;code>Dao&lt;/code>,&lt;code>Model&lt;/code>，根目录仅为父级目录，不存在任何代码；子目录为各个相应的模块或单独的项目&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>项目根目录下添加 &lt;code>build.gradle&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 子模块通用配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#c1abea">subprojects&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;idea&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;eclipse&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">group&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;cn.com.hellowood&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;0.0.2-SNAPSHOT&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sourceCompatibility&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// java编译的时候缺省状态下会因为中文字符而失败
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#c1abea">compileJava&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#c1abea">compileTestJava&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#c1abea">javadoc&lt;/span>&lt;span style="color:#c7bf54">]*.&lt;/span>&lt;span style="color:#b3d23c">options&lt;/span>&lt;span style="color:#c7bf54">*.&lt;/span>&lt;span style="color:#b3d23c">encoding&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;UTF-8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenLocal&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">maven&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#98c379">&amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39;&lt;/span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">jcenter&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span> &lt;span style="color:#98c379">&amp;#39;junit:junit:4.12&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>项目根目录下添加 &lt;code>settings.gradle&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">rootProject&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;SpringBoot&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 子模块
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Controller&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Service&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Dao&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Model&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>子目录 &lt;code>build.gradle&lt;/code>(其他模块类似)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">buildscript&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ext&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">springBootVersion&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;1.5.9.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">classpath&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;eclipse&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">archivesBaseName&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;Controller&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.springfox:springfox-swagger2:2.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.springfox:springfox-swagger-ui:2.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;mysql:mysql-connector-java&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.h2database:h2&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.restdocs:spring-restdocs-mockmvc&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译和使用">编译和使用&lt;/h2>
&lt;ul>
&lt;li>在根目录下执行&lt;code>gradle init&lt;/code>&lt;/li>
&lt;li>在根目录下执行&lt;code>gradle build&lt;/code>&lt;/li>
&lt;li>如果需要单独编译某个模块执行&lt;code>gradle Controller:build&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="依赖其他项目">依赖其他项目&lt;/h2>
&lt;ul>
&lt;li>在项目的build.gradle 文件的依赖中添加其他项目依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>dependencies {
 compile project(&amp;#39;:model&amp;#39;)
}
&lt;/code>&lt;/pre></description></item><item><title>Gradle 添加多项，依赖其他项目</title><link>https://blog.hellowood.dev/posts/gradle-%E4%BD%BF%E7%94%A8-%E5%A4%9A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</link><pubDate>Mon, 01 Jan 2018 00:05:06 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gradle-%E4%BD%BF%E7%94%A8-%E5%A4%9A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</guid><description>&lt;h2 id="配置">配置&lt;/h2>
&lt;blockquote>
&lt;p>如该项目有四个模块，分别是&lt;code>Controller&lt;/code>, &lt;code>Service&lt;/code>, &lt;code>Dao&lt;/code>,&lt;code>Model&lt;/code>，根目录仅为父级目录，不存在任何代码；子目录为各个相应的模块或单独的项目&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>项目根目录下添加 &lt;code>build.gradle&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 子模块通用配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#c1abea">subprojects&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;idea&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;eclipse&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">group&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;cn.com.hellowood&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;0.0.2-SNAPSHOT&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sourceCompatibility&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// java编译的时候缺省状态下会因为中文字符而失败
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c7bf54">[&lt;/span>&lt;span style="color:#c1abea">compileJava&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#c1abea">compileTestJava&lt;/span>&lt;span style="color:#c7bf54">,&lt;/span> &lt;span style="color:#c1abea">javadoc&lt;/span>&lt;span style="color:#c7bf54">]*.&lt;/span>&lt;span style="color:#b3d23c">options&lt;/span>&lt;span style="color:#c7bf54">*.&lt;/span>&lt;span style="color:#b3d23c">encoding&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;UTF-8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenLocal&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">maven&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#98c379">&amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39;&lt;/span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">jcenter&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span> &lt;span style="color:#98c379">&amp;#39;junit:junit:4.12&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>项目根目录下添加 &lt;code>settings.gradle&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">rootProject&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">name&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;SpringBoot&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 子模块
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Controller&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Service&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Dao&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">include&lt;/span> &lt;span style="color:#98c379">&amp;#39;Model&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>子目录 &lt;code>build.gradle&lt;/code>(其他模块类似)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">buildscript&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ext&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">springBootVersion&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;1.5.9.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">classpath&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;eclipse&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">archivesBaseName&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;Controller&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.springfox:springfox-swagger2:2.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;io.springfox:springfox-swagger-ui:2.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;mysql:mysql-connector-java&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.h2database:h2&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.restdocs:spring-restdocs-mockmvc&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译和使用">编译和使用&lt;/h2>
&lt;ul>
&lt;li>在根目录下执行&lt;code>gradle init&lt;/code>&lt;/li>
&lt;li>在根目录下执行&lt;code>gradle build&lt;/code>&lt;/li>
&lt;li>如果需要单独编译某个模块执行&lt;code>gradle Controller:build&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="依赖其他项目">依赖其他项目&lt;/h2>
&lt;ul>
&lt;li>在项目的build.gradle 文件的依赖中添加其他项目依赖&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>dependencies {
 compile project(&amp;#39;:model&amp;#39;)
}
&lt;/code>&lt;/pre></description></item><item><title>Gradle 使用-添加 Jacoco 分析单元测试覆盖率工具</title><link>https://blog.hellowood.dev/posts/gradle-%E4%BD%BF%E7%94%A8-jacoco-%E5%88%86%E6%9E%90%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 2018 00:03:40 +0800</pubDate><guid>https://blog.hellowood.dev/posts/gradle-%E4%BD%BF%E7%94%A8-jacoco-%E5%88%86%E6%9E%90%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E5%B7%A5%E5%85%B7/</guid><description>&lt;blockquote>
&lt;p>Jacoco 是一个免费的 Java 单元测试覆盖率分析工具，在 Gradle 中添加插件，在编译的同事进行单元测试覆盖率分析&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置&lt;/h2>
&lt;pre tabindex="0">&lt;code>buildscript {
 repositories {
 mavenCentral()
 maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; }
 }
}

apply plugin: &amp;#39;java&amp;#39;
apply plugin: &amp;#39;jacoco&amp;#39;


group = &amp;#39;cn.com.hellowood&amp;#39;
version = &amp;#39;0.0.1-SNAPSHOT&amp;#39;
sourceCompatibility = 1.8

repositories {
 mavenCentral()
 maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; }
}

war {
 baseName = &amp;#39;Security&amp;#39;
 version = &amp;#39;&amp;#39;
}

jacocoTestReport {
 reports {
 xml.enabled false
 html.enabled true
 }
}

check.dependsOn jacocoTestReport
&lt;/code>&lt;/pre>&lt;h2 id="生成结果">生成结果&lt;/h2>
&lt;blockquote>
&lt;p>编译完成后会在 &lt;code>${buildDir}/build/reports/jacoco/&lt;/code> 下会生成报告&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://img.blog.csdn.net/20171207221854097?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM2MDg1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Jacoco测试结果">&lt;/p></description></item><item><title>Java 将单元测试覆盖率上传到 Codecov</title><link>https://blog.hellowood.dev/posts/java-%E5%B0%86%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E4%B8%8A%E4%BC%A0%E5%88%B0-codecov/</link><pubDate>Mon, 01 Jan 2018 00:00:19 +0800</pubDate><guid>https://blog.hellowood.dev/posts/java-%E5%B0%86%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E4%B8%8A%E4%BC%A0%E5%88%B0-codecov/</guid><description>&lt;blockquote>
&lt;p>通过使用 &lt;a href="http://www.eclemma.org/jacoco/">Jacoco&lt;/a> 生成单元测试覆盖率报告，并将该报告上传到 &lt;a href="https://codecov.io">Codecov&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置-jacoco">配置 Jacoco&lt;/h2>
&lt;ul>
&lt;li>配置 build.gradle 文件(以 SpringBoot 应用为例)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">buildscript&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">ext&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">springBootVersion&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;1.5.8.RELEASE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">maven&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#63c381">&amp;#34;https://plugins.gradle.org/m2/&amp;#34;&lt;/span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">maven&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span> &lt;span style="color:#c1abea">url&lt;/span> &lt;span style="color:#98c379">&amp;#39;http://maven.aliyun.com/nexus/content/groups/public/&amp;#39;&lt;/span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">classpath&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">classpath&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;java&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;eclipse-wtp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;org.springframework.boot&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;war&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 使用 Jacoco 插件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#c1abea">apply&lt;/span> &lt;span style="color:#f5a40d">plugin:&lt;/span> &lt;span style="color:#98c379">&amp;#39;jacoco&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">group&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;cn.com.hellowood&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;0.0.1-SNAPSHOT&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">sourceCompatibility&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#d19a66">1.8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">repositories&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mavenCentral&lt;/span>&lt;span style="color:#c7bf54">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">war&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">baseName&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;Security&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">version&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-security&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;org.springframework.boot:spring-boot-devtools&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-thymeleaf&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.webjars:jquery:3.2.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.webjars:bootstrap:4.0.0-beta.2&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.webjars:font-awesome:4.7.0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.webjars:bootstrap-glyphicons:bdd2cbfba0&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;mysql:mysql-connector-java&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-tomcat&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.security:spring-security-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 添加 task 用于生成 Jacoco 测试结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#c1abea">task&lt;/span> &lt;span style="color:#00b1f7">codeCoverageReport&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#f5a40d">type:&lt;/span> &lt;span style="color:#c1abea">JacocoReport&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 需指定生成的类文件位置和源文件位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">classDirectories&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">files&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;build/classes&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sourceDirectories&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">files&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;src/main/java&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">executionData&lt;/span> &lt;span style="color:#00b1f7">fileTree&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#c1abea">project&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">rootDir&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">absolutePath&lt;/span>&lt;span style="color:#c7bf54">).&lt;/span>&lt;span style="color:#b3d23c">include&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;**/build/jacoco/*.exec&amp;#34;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subprojects&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">each&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sourceSets&lt;/span> &lt;span style="color:#c1abea">it&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">sourceSets&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// 生成的报告类型包括 xml/html/csv
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#c1abea">reports&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">xml&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">enabled&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">xml&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">destination&lt;/span> &lt;span style="color:#63c381">&amp;#34;${buildDir}/reports/jacoco/report.xml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">html&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">enabled&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">csv&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">enabled&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">codeCoverageReport&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">dependsOn&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">subprojects&lt;/span>&lt;span style="color:#c7bf54">*.&lt;/span>&lt;span style="color:#b3d23c">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">check&lt;/span>&lt;span style="color:#c7bf54">.&lt;/span>&lt;span style="color:#b3d23c">dependsOn&lt;/span> &lt;span style="color:#c1abea">codeCoverageReport&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="生成测试报告">生成测试报告&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">gradle&lt;/span> &lt;span style="color:#c1abea">check&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">gradle&lt;/span> &lt;span style="color:#c1abea">codeCoverageReport&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>此时在 &lt;code>build/reports/jacoco&lt;/code> 下生成 Jacoco 的测试报告&lt;/p></description></item><item><title>Spring Boot Mail Could not connect to SMTP host</title><link>https://blog.hellowood.dev/posts/spring-boot-mail-could-not-connect-to-smtp-host/</link><pubDate>Sun, 31 Dec 2017 23:57:39 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-mail-could-not-connect-to-smtp-host/</guid><description>&lt;blockquote>
&lt;p>如果使用了 SSL 连接请添加配置：&lt;code>spring.mail.properties.mail.smtp.ssl.enable=true&lt;/code>
可以参考 &lt;a href="https://stackoverflow.com/questions/31721298/spring-boot-1-2-5-release-sending-e-mail-via-gmail-smtp">https://stackoverflow.com/questions/31721298/spring-boot-1-2-5-release-sending-e-mail-via-gmail-smtp&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>在使用 Spring Boot 发送邮件时遇到了无法连接服务器的问题，使用的是阿里云的邮件服务，配置如下：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.mail.host&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">smtpdm.aliyun.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.mail.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">465&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.mail.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">username&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.mail.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.mail.properties.smtp.auth&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.mail.properties.smtp.starttls.enable&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>MailUtil.java：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.Logger&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.slf4j.LoggerFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.beans.factory.annotation.Autowired&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.mail.MailException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.mail.SimpleMailMessage&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.mail.javamail.JavaMailSender&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.springframework.stereotype.Component&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#76a9f9">org.thymeleaf.TemplateEngine&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#76a9f9">MailUtil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c1abea">Logger&lt;/span> &lt;span style="color:#c1abea">logger&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">LoggerFactory&lt;/span>.&lt;span style="color:#b3d23c">getLogger&lt;/span>(&lt;span style="color:#c1abea">getClass&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">JavaMailSender&lt;/span> &lt;span style="color:#c1abea">mailSender&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">TemplateEngine&lt;/span> &lt;span style="color:#c1abea">templateEngine&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#ef8383">void&lt;/span> &lt;span style="color:#00b1f7">sendSimpleEmail&lt;/span>(&lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">deliver&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">receiver&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span>&lt;span style="color:#c7bf54">[]&lt;/span> &lt;span style="color:#c1abea">carbonCopy&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">subject&lt;/span>, &lt;span style="color:#c1abea">String&lt;/span> &lt;span style="color:#c1abea">content&lt;/span>) &lt;span style="color:#c678dd">throws&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef8383">long&lt;/span> &lt;span style="color:#c1abea">startTimestamp&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">currentTimeMillis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">logger&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Start send mail ... &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SimpleMailMessage&lt;/span> &lt;span style="color:#c1abea">message&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SimpleMailMessage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">setFrom&lt;/span>(&lt;span style="color:#c1abea">deliver&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">setTo&lt;/span>(&lt;span style="color:#c1abea">receiver&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">setCc&lt;/span>(&lt;span style="color:#c1abea">carbonCopy&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">setSubject&lt;/span>(&lt;span style="color:#c1abea">subject&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">message&lt;/span>.&lt;span style="color:#b3d23c">setText&lt;/span>(&lt;span style="color:#c1abea">content&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">mailSender&lt;/span>.&lt;span style="color:#b3d23c">send&lt;/span>(&lt;span style="color:#c1abea">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">logger&lt;/span>.&lt;span style="color:#b3d23c">info&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Send mail success, cost {} million seconds&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">System&lt;/span>.&lt;span style="color:#b3d23c">currentTimeMillis&lt;/span>() &lt;span style="color:#c7bf54">-&lt;/span> &lt;span style="color:#c1abea">startTimestamp&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">catch&lt;/span> (&lt;span style="color:#c1abea">MailException&lt;/span> &lt;span style="color:#c1abea">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">logger&lt;/span>.&lt;span style="color:#b3d23c">error&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Send mail failed, error message is : {} \n&amp;#34;&lt;/span>, &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">throw&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">ServiceException&lt;/span>(&lt;span style="color:#c1abea">e&lt;/span>.&lt;span style="color:#b3d23c">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>但是邮件发送一直失败，异常信息如下：&lt;/p></description></item><item><title>Spring Boot 发送邮件</title><link>https://blog.hellowood.dev/posts/spring-boot-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link><pubDate>Sun, 31 Dec 2017 23:55:11 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid><description>&lt;blockquote>
&lt;p>在 Spring Boot 中使用 Spring Mail 发送邮件&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>项目地址：&lt;a href="https://github.com/helloworlde/SpringBoot-Mail">https://github.com/helloworlde/SpringBoot-Mail&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="添加-spring-mail-依赖">添加 Spring Mail 依赖&lt;/h2>
&lt;ul>
&lt;li>build.gradle&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> compile(&amp;#39;org.springframework.boot:spring-boot-starter-mail&amp;#39;)
&lt;/code>&lt;/pre>&lt;h2 id="添加配置文件">添加配置文件&lt;/h2>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> spring.mail.host=smtpdm.aliyun.com
 spring.mail.port=465
 spring.mail.username=&amp;#34;你的邮箱&amp;#34;
 spring.mail.password=&amp;#34;你的密码&amp;#34;
 spring.mail.properties.smtp.auth=true
 spring.mail.properties.smtp.starttls.enable=true
 spring.mail.properties.smtp.starttls.required=true
 spring.mail.properties.mail.smtp.ssl.enable=true
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="发送简单邮件">发送简单邮件&lt;/h2>
&lt;ul>
&lt;li>MailUtil.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.mail.MailException;
 import org.springframework.mail.SimpleMailMessage;
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.stereotype.Component;
 import org.thymeleaf.TemplateEngine;

 @Component
 public class MailUtil {

 private final Logger logger = LoggerFactory.getLogger(getClass());

 @Autowired
 JavaMailSender mailSender;

 @Autowired
 TemplateEngine templateEngine;

 public void sendSimpleEmail(String deliver, String[] receiver, String[] carbonCopy, String subject, String content) throws ServiceException {

 long startTimestamp = System.currentTimeMillis();
 logger.info(&amp;#34;Start send mail ... &amp;#34;);

 try {
 SimpleMailMessage message = new SimpleMailMessage();
 message.setFrom(deliver);
 message.setTo(receiver);
 message.setCc(carbonCopy);
 message.setSubject(subject);
 message.setText(content);
 mailSender.send(message);
 logger.info(&amp;#34;Send mail success, cost {} million seconds&amp;#34;, System.currentTimeMillis() - startTimestamp);
 } catch (MailException e) {
 logger.error(&amp;#34;Send mail failed, error message is : {} \n&amp;#34;, e.getMessage());
 e.printStackTrace();
 throw new ServiceException(e.getMessage());
 }
 }

 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>发送邮件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> @Test
 public void sendSimpleEmail() {
 String deliver = &amp;#34;你的邮件地址&amp;#34;;
 String[] receiver = {&amp;#34;接收者邮件地址&amp;#34;};
 String[] carbonCopy = {&amp;#34;抄送者邮件地址&amp;#34;};
 String subject = &amp;#34;This is a simple email&amp;#34;;
 String content = &amp;#34;This is a simple content&amp;#34;;

 try {
 mailUtil.sendSimpleEmail(deliver, receiver, carbonCopy, subject, content);
 } catch (Exception e) {
 assertFalse(&amp;#34;Send simple email failed&amp;#34;, true);
 e.printStackTrace();
 }
 }
&lt;/code>&lt;/pre>&lt;h2 id="发送-html-内容的邮件">发送 HTML 内容的邮件&lt;/h2>
&lt;ul>
&lt;li>MailUtil.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> import cn.com.hellowood.mail.util.ServiceException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.MimeMessageHelper;
 import org.springframework.stereotype.Component;

 import javax.mail.MessagingException;
 import javax.mail.internet.MimeMessage;

 @Component
 public class MailUtil {

 private final Logger logger = LoggerFactory.getLogger(getClass());

 @Autowired
 JavaMailSender mailSender;

 public void sendHtmlEmail(String deliver, String[] receiver, String[] carbonCopy, String subject, String content, boolean isHtml) throws ServiceException {
 long startTimestamp = System.currentTimeMillis();
 logger.info(&amp;#34;Start send email ...&amp;#34;);

 try {
 MimeMessage message = mailSender.createMimeMessage();
 MimeMessageHelper messageHelper = new MimeMessageHelper(message);

 messageHelper.setFrom(deliver);
 messageHelper.setTo(receiver);
 messageHelper.setCc(carbonCopy);
 messageHelper.setSubject(subject);
 messageHelper.setText(content, isHtml);

 mailSender.send(message);
 logger.info(&amp;#34;Send email success, cost {} million seconds&amp;#34;, System.currentTimeMillis() - startTimestamp);
 } catch (MessagingException e) {
 logger.error(&amp;#34;Send email failed, error message is {} \n&amp;#34;, e.getMessage());
 e.printStackTrace();
 throw new ServiceException(e.getMessage());
 }
 }

 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>发送 HTML 邮件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> @Test
 public void sendHtmlEmail() {
 String deliver = &amp;#34;你的邮件地址&amp;#34;;
 String[] receiver = {&amp;#34;接收者邮件地址&amp;#34;};
 String[] carbonCopy = {&amp;#34;抄送者邮件地址&amp;#34;};
 String subject = &amp;#34;This is a HTML content email&amp;#34;;
 String content = &amp;#34;&amp;lt;h1&amp;gt;This is HTML content email &amp;lt;/h1&amp;gt;&amp;#34;;

 boolean isHtml = true;
 try {
 mailUtil.sendHtmlEmail(deliver, receiver, carbonCopy, subject, content, isHtml);
 } catch (ServiceException e) {
 assertFalse(&amp;#34;Send HTML content email failed&amp;#34;, true);
 e.printStackTrace();
 }
 }
&lt;/code>&lt;/pre>&lt;h2 id="发送带附件的邮件">发送带附件的邮件&lt;/h2>
&lt;ul>
&lt;li>MailUtil.java&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.MimeMessageHelper;
 import org.springframework.stereotype.Component;

 import javax.mail.MessagingException;
 import javax.mail.internet.MimeMessage;
 import java.io.File;

 @Component
 public class MailUtil {

 private final Logger logger = LoggerFactory.getLogger(getClass());

 @Autowired
 JavaMailSender mailSender;

 public void sendAttachmentFileEmail(String deliver, String[] receiver, String[] carbonCopy, String subject, String content, boolean isHtml, String fileName, File file) throws ServiceException {
 long startTimestamp = System.currentTimeMillis();
 logger.info(&amp;#34;Start send mail ...&amp;#34;);

 try {
 MimeMessage message = mailSender.createMimeMessage();
 MimeMessageHelper messageHelper = new MimeMessageHelper(message, true);

 messageHelper.setFrom(deliver);
 messageHelper.setTo(receiver);
 messageHelper.setCc(carbonCopy);
 messageHelper.setSubject(subject);
 messageHelper.setText(content, isHtml);
 messageHelper.addAttachment(fileName, file);

 mailSender.send(message);
 logger.info(&amp;#34;Send mail success, cost {} million seconds&amp;#34;, System.currentTimeMillis() - startTimestamp);
 } catch (MessagingException e) {
 logger.error(&amp;#34;Send mail failed, error message is {}\n&amp;#34;, e.getMessage());
 e.printStackTrace();
 throw new ServiceException(e.getMessage());
 }
 }

 }
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>发送带附件的邮件&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> @Test
 public void sendAttachmentFileEmail() {
 String FILE_PATH = &amp;#34;文件地址&amp;#34;;
 String deliver = &amp;#34;你的邮件地址&amp;#34;;
 String[] receiver = {&amp;#34;接收者邮件地址&amp;#34;};
 String[] carbonCopy = {&amp;#34;抄送者邮件地址&amp;#34;};
 String subject = &amp;#34;This is an attachment file email&amp;#34;;
 String content = &amp;#34;&amp;lt;h2&amp;gt;This is an attachment file email&amp;lt;/h2&amp;gt;&amp;#34;;
 boolean isHtml = true;

 File file = new File(FILE_PATH);
 String fileName = FILE_PATH.substring(FILE_PATH.lastIndexOf(File.separator));

 try {
 mailUtil.sendAttachmentFileEmail(deliver, receiver, carbonCopy, subject, content, isHtml, fileName, file);
 } catch (ServiceException e) {
 assertFalse(&amp;#34;Send attachment file email failed&amp;#34;, true);
 e.printStackTrace();
 }
 }
&lt;/code>&lt;/pre>&lt;h2 id="发送模板邮件">发送模板邮件&lt;/h2>
&lt;blockquote>
&lt;p>使用 Thymeleaf 作为模板&lt;/p></description></item><item><title>Spring Boot MyBatis 动态数据源常见问题和解决方法</title><link>https://blog.hellowood.dev/posts/spring-boot-mybatis-%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 31 Dec 2017 23:45:52 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-mybatis-%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>相关项目地址:&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource">https://github.com/helloworlde/SpringBoot-DynamicDataSource&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-orgapacheibatisbindingbindingexception-invalid-bound-statement-not-found">1. org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)&lt;/h2>
&lt;blockquote>
&lt;p>在使用了动态数据源后遇到了该问题，从错误信息来看是因为没有找到 &lt;code>*.xml&lt;/code> 文件而导致的，但是在配置文件中
确实添加了相关的配置，这种错误的原因是因为设置数据源后没有设置&lt;code>SqlSessionFactoryBean&lt;/code>的 &lt;code>typeAliasesPackage&lt;/code>
和&lt;code>mapperLocations&lt;/code>属性或属性无效导致的；&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>解决方法：&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果在应用的入口类中添加了 &lt;code>@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)&lt;/code>,
在&lt;code>DataSourceConfigure&lt;/code>类的中设置相关属性：&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@ConfigurationProperties&lt;/span>(&lt;span style="color:#c1abea">prefix&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;mybatis&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">SqlSessionFactoryBean&lt;/span> &lt;span style="color:#00b1f7">sqlSessionFactoryBean&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SqlSessionFactoryBean&lt;/span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SqlSessionFactoryBean&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span>.&lt;span style="color:#b3d23c">setDataSource&lt;/span>(&lt;span style="color:#c1abea">dynamicDataSource&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者直接配置(不推荐该方式)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c1abea">SqlSessionFactoryBean&lt;/span> &lt;span style="color:#00b1f7">sqlSessionFactoryBean&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">SqlSessionFactoryBean&lt;/span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span> &lt;span style="color:#c7bf54">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">SqlSessionFactoryBean&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span>.&lt;span style="color:#b3d23c">setTypeAliasesPackage&lt;/span>(&lt;span style="color:#98c379">&amp;#34;typeAliasesPackage&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span>.&lt;span style="color:#b3d23c">setMapperLocations&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#c1abea">PathMatchingResourcePatternResolver&lt;/span>().&lt;span style="color:#b3d23c">getResources&lt;/span>(&lt;span style="color:#98c379">&amp;#34;mapperLocations&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span>.&lt;span style="color:#b3d23c">setDataSource&lt;/span>(&lt;span style="color:#c1abea">dynamicDataSource&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#c1abea">sqlSessionFactoryBean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-consider-marking-one-of-the-beans-as-primary-updating-the-consumer-to-accept-multiple-beans-or-using-qualifier-to-identify-the-bean-that-should-be-consumed">2. Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed&lt;/h2>
&lt;blockquote>
&lt;p>该异常在错误信息中已经说的很清楚了，是因为有多个 &lt;code>DataSource&lt;/code> 的实例，所以无法确定该引用那个实例&lt;/p></description></item><item><title>Spring Boot MyBatis Druid 多数据源、动态数据源切换</title><link>https://blog.hellowood.dev/posts/spring-boot-mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</link><pubDate>Sun, 31 Dec 2017 23:39:24 +0800</pubDate><guid>https://blog.hellowood.dev/posts/spring-boot-mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</guid><description>&lt;ul>
&lt;li>项目地址：&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource">https://github.com/helloworlde/SpringBoot-DynamicDataSource&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>本项目使用 Spring Boot 和 MyBatis 实现多数据源，动态数据源的切换；有多种不同的实现方式，在学习的过程中发现没有文章将这些方式和常见的问题集中处理，所以将常用的方式和常见的问题都写在了在本项目的不同分支上：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource">master&lt;/a>: 使用了多数据源的 RESTful API 接口，使用 Druid 实现了 DAO 层数据源动态切换和只读数据源负载均衡&lt;/li>
&lt;li>&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource/tree/dev">dev&lt;/a>: 最简单的切面和注解方式实现的动态数据源切换&lt;/li>
&lt;li>&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource/tree/druid">druid&lt;/a>: 通过切面和注解方式实现的使用 Druid 连接池的动态数据源切换&lt;/li>
&lt;li>&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource/tree/aspect_dao">aspect_dao&lt;/a>: 通过切面实现的 DAO 层的动态数据源切换&lt;/li>
&lt;li>&lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource/tree/roundrobin">roundrobin&lt;/a>: 通过切面使用轮询方式实现的只读数据源负载均衡&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>以上分支都是基于 dev 分支修改或扩充而来，基本涵盖了常用的多数据源动态切换的方式，基本的原理都一样，都是通过切面根据不同的条件在执行数据库操作前切换数据源&lt;/p>
&lt;/blockquote>
&lt;h3 id="在使用的过程中基本踩遍了所有动态数据源切换的坑将常见的一些坑和解决方法写在了-issueshttpsgithubcomhelloworldespringboot-dynamicdatasourceblobmasterissuesmd-里面">在使用的过程中基本踩遍了所有动态数据源切换的坑，将常见的一些坑和解决方法写在了 &lt;a href="https://github.com/helloworlde/SpringBoot-DynamicDataSource/blob/master/Issues.md">Issues&lt;/a> 里面&lt;/h3>
&lt;blockquote>
&lt;p>该项目使用了一个可写数据源和多个只读数据源，为了减少数据库压力，使用轮循的方式选择只读数据源；考虑到在一个 Service 中同时会有读和写的操作，所以本应用使用 AOP 切面通过 DAO 层的方法名切换只读数据源；但这种方式要求数据源主从一致，并且应当避免在同一个 Service 方法中写入后立即查询，如果必须在执行写入操作后立即读取，应当在 Service 方法上添加 &lt;code>@Transactional&lt;/code> 注解以保证使用主数据源&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>需要注意的是，使用 DAO 层切面后不应该在 Service 类层面上加 &lt;code>@Transactional&lt;/code> 注解，而应该添加在方法上，这也是 Spring 推荐的做法&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>动态切换数据源依赖 &lt;code>configuration&lt;/code> 包下的4个类来实现，分别是：&lt;/p>
&lt;ul>
&lt;li>DataSourceRoutingDataSource.java&lt;/li>
&lt;li>DataSourceConfigurer.java&lt;/li>
&lt;li>DynamicDataSourceContextHolder.java&lt;/li>
&lt;li>DynamicDataSourceAspect.java&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c1abea">dependencies&lt;/span> &lt;span style="color:#c7bf54">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-aop&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">compile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;com.alibaba:druid-spring-boot-starter:1.1.6&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">runtime&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;mysql:mysql-connector-java&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">testCompile&lt;/span>&lt;span style="color:#c7bf54">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span>&lt;span style="color:#c7bf54">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c7bf54">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建数据库及表">创建数据库及表&lt;/h2>
&lt;ul>
&lt;li>分别创建数据库&lt;code>product_master&lt;/code>, &lt;code>product_slave_alpha&lt;/code>, &lt;code>product_slave_beta&lt;/code>, &lt;code>product_slave_gamma&lt;/code>&lt;/li>
&lt;li>在以上数据库中分别创建表 &lt;code>product&lt;/code>，并插入不同数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">DROP&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c678dd">IF&lt;/span> &lt;span style="color:#c678dd">EXISTS&lt;/span> &lt;span style="color:#c1abea">product_master&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c1abea">product_master&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">product_master&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span> &lt;span style="color:#c678dd">PRIMARY&lt;/span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#ef8383">VARCHAR&lt;/span>(&lt;span style="color:#d19a66">50&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">price&lt;/span> &lt;span style="color:#c1abea">DOUBLE&lt;/span>(&lt;span style="color:#d19a66">10&lt;/span>,&lt;span style="color:#d19a66">2&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">product_master&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span> (&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">price&lt;/span>) &lt;span style="color:#c678dd">VALUES&lt;/span>(&lt;span style="color:#98c379">&amp;#39;master&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;1&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">DROP&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c678dd">IF&lt;/span> &lt;span style="color:#c678dd">EXISTS&lt;/span> &lt;span style="color:#c1abea">product_slave_alpha&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c1abea">product_slave_alpha&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">product_slave_alpha&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span> &lt;span style="color:#c678dd">PRIMARY&lt;/span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#ef8383">VARCHAR&lt;/span>(&lt;span style="color:#d19a66">50&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">price&lt;/span> &lt;span style="color:#c1abea">DOUBLE&lt;/span>(&lt;span style="color:#d19a66">10&lt;/span>,&lt;span style="color:#d19a66">2&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">product_slave_alpha&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span> (&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">price&lt;/span>) &lt;span style="color:#c678dd">VALUES&lt;/span>(&lt;span style="color:#98c379">&amp;#39;slaveAlpha&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;1&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">DROP&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c678dd">IF&lt;/span> &lt;span style="color:#c678dd">EXISTS&lt;/span> &lt;span style="color:#c1abea">product_slave_beta&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c1abea">product_slave_beta&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">product_slave_beta&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span> &lt;span style="color:#c678dd">PRIMARY&lt;/span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#ef8383">VARCHAR&lt;/span>(&lt;span style="color:#d19a66">50&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">price&lt;/span> &lt;span style="color:#c1abea">DOUBLE&lt;/span>(&lt;span style="color:#d19a66">10&lt;/span>,&lt;span style="color:#d19a66">2&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">product_slave_beta&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span> (&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">price&lt;/span>) &lt;span style="color:#c678dd">VALUES&lt;/span>(&lt;span style="color:#98c379">&amp;#39;slaveBeta&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;1&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">DROP&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c678dd">IF&lt;/span> &lt;span style="color:#c678dd">EXISTS&lt;/span> &lt;span style="color:#c1abea">product_slave_gamma&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">DATABASE&lt;/span> &lt;span style="color:#c1abea">product_slave_gamma&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">CREATE&lt;/span> &lt;span style="color:#c678dd">TABLE&lt;/span> &lt;span style="color:#c1abea">product_slave_gamma&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">id&lt;/span> &lt;span style="color:#ef8383">INT&lt;/span> &lt;span style="color:#c678dd">PRIMARY&lt;/span> &lt;span style="color:#c678dd">KEY&lt;/span> &lt;span style="color:#c1abea">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">name&lt;/span> &lt;span style="color:#ef8383">VARCHAR&lt;/span>(&lt;span style="color:#d19a66">50&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">price&lt;/span> &lt;span style="color:#c1abea">DOUBLE&lt;/span>(&lt;span style="color:#d19a66">10&lt;/span>,&lt;span style="color:#d19a66">2&lt;/span>) &lt;span style="color:#c678dd">NOT&lt;/span> &lt;span style="color:#c678dd">NULL&lt;/span> &lt;span style="color:#c678dd">DEFAULT&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">INSERT&lt;/span> &lt;span style="color:#c678dd">INTO&lt;/span> &lt;span style="color:#c1abea">product_slave_gamma&lt;/span>.&lt;span style="color:#c1abea">product&lt;/span> (&lt;span style="color:#c1abea">name&lt;/span>, &lt;span style="color:#c1abea">price&lt;/span>) &lt;span style="color:#c678dd">VALUES&lt;/span>(&lt;span style="color:#98c379">&amp;#39;slaveGamma&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;1&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置数据源">配置数据源&lt;/h2>
&lt;ul>
&lt;li>application.properties&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Master datasource config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.master.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.master.driver-class-name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">com.mysql.jdbc.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.master.url&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">jdbc:mysql://localhost/product_master?useSSL=false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.master.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.master.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.master.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># SlaveAlpha datasource config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-alpha.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">SlaveAlpha&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-alpha.driver-class-name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">com.mysql.jdbc.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-alpha.url&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">jdbc:mysql://localhost/product_slave_alpha?useSSL=false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-alpha.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-alpha.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-alpha.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># SlaveBeta datasource config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-beta.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">SlaveBeta&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-beta.driver-class-name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">com.mysql.jdbc.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-beta.url&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">jdbc:mysql://localhost/product_slave_beta?useSSL=false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-beta.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-beta.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-beta.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># SlaveGamma datasource config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-gamma.name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">SlaveGamma&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-gamma.driver-class-name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">com.mysql.jdbc.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-gamma.url&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">jdbc:mysql://localhost/product_slave_gamma?useSSL=false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-gamma.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-gamma.username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.slave-gamma.password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Druid dataSource config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.type&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">com.alibaba.druid.pool.DruidDataSource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.initial-size&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.max-active&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.min-idle&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.max-wait&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">60000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.pool-prepared-statements&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.validation-query&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">SELECT 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.validation-query-timeout&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">30000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.test-on-borrow&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.test-on-return&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.test-while-idle&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.druid.time-between-eviction-runs-millis=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.druid.min-evictable-idle-time-millis=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.druid.max-evictable-idle-time-millis=10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Druid stat filter config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filters&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">stat,wall,log4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.url-pattern&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.exclusions&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.session-stat-enable&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.session-stat-max-count&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.principal-session-name&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.druid.web-stat-filter.principal-cookie-name=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.web-stat-filter.profile-enable&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.stat.db-type&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.stat.log-slow-sql&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.stat.slow-sql-millis&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.stat.merge-sql&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.wall.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.wall.config.delete-allow&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.wall.config.drop-table-allow&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.filter.slf4j.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Druid manage page config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.stat-view-servlet.enabled&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.stat-view-servlet.url-pattern&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">/druid/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.stat-view-servlet.reset-enable&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.stat-view-servlet.login-username&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.stat-view-servlet.login-password&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.druid.stat-view-servlet.allow=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#spring.datasource.druid.stat-view-servlet.deny=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.use-global-data-source-stat&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Druid AOP config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.datasource.druid.aop-patterns&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">cn.com.hellowood.dynamicdatasource.service.*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">spring.aop.proxy-target-class&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># MyBatis config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">mybatis.type-aliases-package&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">cn.com.hellowood.dynamicdatasource.mapper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">mybatis.mapper-locations&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">mappers/**Mapper.xml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b3d23c">server.port&lt;/span>&lt;span style="color:#c7bf54">=&lt;/span>&lt;span style="color:#98c379">9999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置数据源-1">配置数据源&lt;/h2>
&lt;ul>
&lt;li>DataSourceKey.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">package&lt;/span> &lt;span style="color:#76a9f9">cn.com.hellowood.dynamicdatasource.common&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">enum&lt;/span> &lt;span style="color:#c1abea">DataSourceKey&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">master&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">slaveAlpha&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">slaveBeta&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c1abea">slaveGamma&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>DataSourceRoutingDataSource.java&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>该类继承自 &lt;code>AbstractRoutingDataSource&lt;/code> 类，在访问数据库时会调用该类的 &lt;code>determineCurrentLookupKey()&lt;/code> 方法获取数据库实例的 key&lt;/p></description></item><item><title>helloworld</title><link>https://blog.hellowood.dev/posts/helloworld/</link><pubDate>Sun, 24 Dec 2017 17:07:56 +0800</pubDate><guid>https://blog.hellowood.dev/posts/helloworld/</guid><description>&lt;blockquote>
&lt;p>This is a blog for my personal technology note!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://img.hellowood.dev/blog/background.jpeg" alt="">&lt;/p></description></item></channel></rss>